var WebMolKit;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./res/data/ontology/units.onto":
/*!**************************************!*\
  !*** ./res/data/ontology/units.onto ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("http://purl.obolibrary.org/obo/UO_0000000 units\n- http://purl.obolibrary.org/obo/UO_0000051 concentration units\n- - http://www.bioassayontology.org/bao#BAO_0000102 -log10[mol/L]\n- - http://purl.obolibrary.org/obo/UO_0000175 grams per litre (g/L)\n- - http://www.bioassayontology.org/bao#BAO_0000101 log10[mol/L]\n- - http://purl.obolibrary.org/obo/UO_0000275 micrograms per litre (ug/L)\n- - http://purl.obolibrary.org/obo/UO_0000064 micromoles per litre (umol/L)\n- - http://purl.obolibrary.org/obo/UO_0000273 milligrams per litre (mg/L)\n- - http://purl.obolibrary.org/obo/UO_0000063 millimoles per litre (mmol/L)\n- - http://purl.obolibrary.org/obo/UO_0000062 moles per litre (mol/L)\n- - http://purl.obolibrary.org/obo/UO_0000065 nanomoles per litre (nmol/L)\n- - http://purl.obolibrary.org/obo/UO_0000066 picomoles per litre (pmol/L)\n- http://purl.obolibrary.org/obo/UO_0000186 dimensionless unit\n- - http://www.bioassayontology.org/bao#BAO_0080023 binary (true/false)\n- - http://purl.obolibrary.org/obo/UO_0000187 percent");

/***/ }),

/***/ "./res/data/templates/aminoacids.ds":
/*!******************************************!*\
  !*** ./res/data/templates/aminoacids.ds ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DataSheet>\n<Summary>\n<Title>Amino Acids</Title><Description><![CDATA[]]></Description></Summary>\n<Header nrows=\"20\" ncols=\"4\">\n<Column name=\"Molecule\" type=\"molecule\" id=\"1\">Molecular structure</Column>\n<Column name=\"Name\" type=\"string\" id=\"2\">Template name</Column>\n<Column name=\"Abbrev\" type=\"string\" id=\"3\">Abbreviation code</Column>\n<Column name=\"Mnemonic\" type=\"string\" id=\"4\"></Column>\n</Header>\n<Content>\n<Row id=\"1\">\n<Cell id=\"1\"><![CDATA[SketchEl!(7,6)\nC=-6.5731,8.0000;0,0,i0\nO=-6.5731,9.5000;0,0,i0\nC=-7.8721,7.2500;0,0,i1\nX=-5.2741,7.2500;0,0,i0\nN=-9.1712,8.0000;0,0,i1\nC=-7.8721,5.7500;0,0,i3\nX=-10.4702,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n3-6=1,2\n5-7=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[alanine]]></Cell>\n<Cell id=\"3\"><![CDATA[Ala]]></Cell>\n<Cell id=\"4\"><![CDATA[A]]></Cell>\n</Row>\n<Row id=\"2\">\n<Cell id=\"1\"><![CDATA[SketchEl!(8,7)\nC=-6.8514,8.0000;0,0,i0\nO=-6.8514,9.5000;0,0,i0\nC=-8.1504,7.2500;0,0,i1\nX=-5.5524,7.2500;0,0,i0\nN=-9.4495,8.0000;0,0,i1\nC=-8.1504,5.7500;0,0,i2\nS=-6.8515,5.0000;0,0,i1\nX=-10.7485,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n3-6=1,2\n6-7=1,0\n5-8=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[cysteine]]></Cell>\n<Cell id=\"3\"><![CDATA[Cys]]></Cell>\n<Cell id=\"4\"><![CDATA[C]]></Cell>\n</Row>\n<Row id=\"3\">\n<Cell id=\"1\"><![CDATA[SketchEl!(10,9)\nC=-7.5010,8.0000;0,0,i0\nO=-7.5010,9.5000;0,0,i0\nC=-8.8000,7.2500;0,0,i1\nX=-6.2020,7.2500;0,0,i0\nN=-10.0991,8.0000;0,0,i1\nC=-8.8000,5.7500;0,0,i2\nC=-7.5010,5.0000;0,0,i0\nO=-7.5009,3.5000;-1,0,i0\nO=-6.2020,5.7499;0,0,i0\nX=-11.3981,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n3-6=1,2\n6-7=1,0\n7-8=1,0\n7-9=2,0\n5-10=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[aspartic acid]]></Cell>\n<Cell id=\"3\"><![CDATA[Asp]]></Cell>\n<Cell id=\"4\"><![CDATA[D]]></Cell>\n</Row>\n<Row id=\"4\">\n<Cell id=\"1\"><![CDATA[SketchEl!(11,10)\nC=-7.3830,8.0000;0,0,i0\nO=-7.3830,9.5000;0,0,i0\nC=-8.6820,7.2500;0,0,i1\nX=-6.0840,7.2500;0,0,i0\nN=-9.9811,8.0000;0,0,i1\nC=-8.6820,5.7500;0,0,i2\nC=-7.3830,5.0000;0,0,i2\nC=-7.3828,3.5000;0,0,i0\nO=-6.0838,2.7500;-1,0,i0\nO=-8.6819,2.7500;0,0,i0\nX=-11.2801,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n3-6=1,2\n6-7=1,0\n7-8=1,0\n8-9=1,0\n8-10=2,0\n5-11=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[glutamic acid]]></Cell>\n<Cell id=\"3\"><![CDATA[Glu]]></Cell>\n<Cell id=\"4\"><![CDATA[E]]></Cell>\n</Row>\n<Row id=\"5\">\n<Cell id=\"1\"><![CDATA[SketchEl!(13,13)\nC=-8.8000,8.0000;0,0,i0\nO=-8.8000,9.5000;0,0,i0\nC=-10.0990,7.2500;0,0,i1\nX=-7.5010,7.2500;0,0,i0\nN=-11.3981,8.0000;0,0,i1\nC=-10.0990,5.7500;0,0,i2\nC=-8.8000,5.0000;0,0,i0\nC=-8.8000,3.5000;0,0,i1\nC=-7.5010,5.7500;0,0,i1\nC=-7.5010,2.7500;0,0,i1\nC=-6.2019,3.5000;0,0,i1\nC=-6.2019,5.0000;0,0,i1\nX=-12.6971,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n3-6=1,2\n6-7=1,0\n7-8=1,0\n7-9=2,0\n8-10=2,0\n10-11=1,0\n11-12=2,0\n12-9=1,0\n5-13=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[phenylalanine]]></Cell>\n<Cell id=\"3\"><![CDATA[Phe]]></Cell>\n<Cell id=\"4\"><![CDATA[F]]></Cell>\n</Row>\n<Row id=\"6\">\n<Cell id=\"1\"><![CDATA[SketchEl!(6,5)\nC=-6.6349,8.0000;0,0,i0\nO=-6.6349,9.5000;0,0,i0\nC=-7.9339,7.2500;0,0,i2\nX=-5.3359,7.2500;0,0,i0\nN=-9.2330,8.0000;0,0,i1\nX=-10.5320,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n5-6=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[glycine]]></Cell>\n<Cell id=\"3\"><![CDATA[Gly]]></Cell>\n<Cell id=\"4\"><![CDATA[G]]></Cell>\n</Row>\n<Row id=\"7\">\n<Cell id=\"1\"><![CDATA[SketchEl!(12,12)\nC=-8.4232,8.0000;0,0,i0\nO=-8.4232,9.5000;0,0,i0\nC=-9.7222,7.2500;0,0,i1\nX=-7.1242,7.2500;0,0,i0\nN=-11.0213,8.0000;0,0,i1\nC=-9.7222,5.7500;0,0,i2\nC=-8.4232,5.0000;0,0,i0\nC=-6.0475,4.4955;0,0,i1\nN=-6.7961,3.2002;0,0,i1\nC=-8.2664,3.5081;0,0,i1\nN=-7.0492,5.6069;0,0,i0\nX=-12.3203,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n3-6=1,2\n6-7=1,0\n10-9=1,0\n9-8=1,0\n8-11=2,0\n11-7=1,0\n7-10=2,0\n5-12=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[histidine]]></Cell>\n<Cell id=\"3\"><![CDATA[His]]></Cell>\n<Cell id=\"4\"><![CDATA[H]]></Cell>\n</Row>\n<Row id=\"8\">\n<Cell id=\"1\"><![CDATA[SketchEl!(10,9)\nC=-6.7216,8.0000;0,0,i0\nO=-6.7216,9.5000;0,0,i0\nC=-8.0206,7.2500;0,0,i1\nX=-5.4226,7.2500;0,0,i0\nN=-9.3197,8.0000;0,0,i1\nC=-8.0206,5.7500;0,0,i1\nC=-6.7216,5.0000;0,0,i2\nC=-9.3196,5.0000;0,0,i3\nC=-6.7214,3.5000;0,0,i3\nX=-10.6187,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n3-6=1,2\n6-7=1,0\n6-8=1,0\n7-9=1,0\n5-10=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[isoleucine]]></Cell>\n<Cell id=\"3\"><![CDATA[Ile]]></Cell>\n<Cell id=\"4\"><![CDATA[I]]></Cell>\n</Row>\n<Row id=\"9\">\n<Cell id=\"1\"><![CDATA[SketchEl!(11,10)\nC=-7.8553,8.0000;0,0,i0\nO=-7.8553,9.5000;0,0,i0\nC=-9.1543,7.2500;0,0,i1\nX=-6.5563,7.2500;0,0,i0\nN=-10.4534,8.0000;0,0,i1\nC=-9.1543,5.7500;0,0,i2\nC=-7.8553,5.0000;0,0,i2\nC=-7.8552,3.5000;0,0,i2\nC=-6.5561,2.7500;0,0,i2\nN=-6.5561,1.2500;1,0,i3\nX=-11.7524,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n3-6=1,2\n6-7=1,0\n7-8=1,0\n8-9=1,0\n9-10=1,0\n5-11=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[lysine]]></Cell>\n<Cell id=\"3\"><![CDATA[Lys]]></Cell>\n<Cell id=\"4\"><![CDATA[K]]></Cell>\n</Row>\n<Row id=\"10\">\n<Cell id=\"1\"><![CDATA[SketchEl!(10,9)\nC=-7.5010,8.0000;0,0,i0\nO=-7.5010,9.5000;0,0,i0\nC=-8.8000,7.2500;0,0,i1\nX=-6.2020,7.2500;0,0,i0\nN=-10.0991,8.0000;0,0,i1\nC=-8.8000,5.7500;0,0,i2\nC=-7.5010,5.0000;0,0,i1\nC=-7.5008,3.5000;0,0,i3\nC=-6.2019,5.7500;0,0,i3\nX=-11.3981,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n3-6=1,2\n6-7=1,0\n7-8=1,0\n7-9=1,0\n5-10=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[leucine]]></Cell>\n<Cell id=\"3\"><![CDATA[Leu]]></Cell>\n<Cell id=\"4\"><![CDATA[L]]></Cell>\n</Row>\n<Row id=\"11\">\n<Cell id=\"1\"><![CDATA[SketchEl!(10,9)\nC=-7.5010,8.0000;0,0,i0\nO=-7.5010,9.5000;0,0,i0\nC=-8.8000,7.2500;0,0,i1\nX=-6.2020,7.2500;0,0,i0\nN=-10.0991,8.0000;0,0,i1\nC=-8.8000,5.7500;0,0,i2\nC=-7.5010,5.0000;0,0,i2\nS=-7.5008,3.5000;0,0,i0\nC=-6.2018,2.7500;0,0,i3\nX=-11.3981,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n3-6=1,2\n6-7=1,0\n7-8=1,0\n8-9=1,0\n5-10=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[methionine]]></Cell>\n<Cell id=\"3\"><![CDATA[Met]]></Cell>\n<Cell id=\"4\"><![CDATA[M]]></Cell>\n</Row>\n<Row id=\"12\">\n<Cell id=\"1\"><![CDATA[SketchEl!(10,9)\nC=-7.5010,8.0000;0,0,i0\nO=-7.5010,9.5000;0,0,i0\nC=-8.8000,7.2500;0,0,i1\nX=-6.2020,7.2500;0,0,i0\nN=-10.0991,8.0000;0,0,i1\nC=-8.8000,5.7500;0,0,i2\nC=-7.5010,5.0000;0,0,i0\nN=-7.5008,3.5000;0,0,i2\nO=-6.2019,5.7500;0,0,i0\nX=-11.3981,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n3-6=1,2\n6-7=1,0\n7-8=1,0\n7-9=2,0\n5-10=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[asparagine]]></Cell>\n<Cell id=\"3\"><![CDATA[Asn]]></Cell>\n<Cell id=\"4\"><![CDATA[N]]></Cell>\n</Row>\n<Row id=\"13\">\n<Cell id=\"1\"><![CDATA[SketchEl!(9,9)\nC=-5.7561,8.0000;0,0,i0\nO=-5.7561,9.5000;0,0,i0\nC=-7.0551,7.2500;0,0,i1\nX=-4.4571,7.2500;0,0,i0\nC=-7.2122,5.7621;0,0,i2\nC=-8.6806,5.4455;0,0,i2\nN=-8.4222,7.8579;0,0,i0\nC=-9.4306,6.7446;0,0,i2\nX=-8.7323,9.3255;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n6-5=1,0\n3-5=1,2\n3-7=1,0\n7-8=1,0\n8-6=1,0\n7-9=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[proline]]></Cell>\n<Cell id=\"3\"><![CDATA[Pro]]></Cell>\n<Cell id=\"4\"><![CDATA[P]]></Cell>\n</Row>\n<Row id=\"14\">\n<Cell id=\"1\"><![CDATA[SketchEl!(11,10)\nC=-7.3829,8.0000;0,0,i0\nO=-7.3829,9.5000;0,0,i0\nC=-8.6819,7.2500;0,0,i1\nX=-6.0839,7.2500;0,0,i0\nN=-9.9810,8.0000;0,0,i1\nC=-8.6819,5.7500;0,0,i2\nC=-7.3829,5.0000;0,0,i2\nC=-7.3828,3.5000;0,0,i0\nN=-6.0837,2.7500;0,0,i2\nO=-8.6818,2.7500;0,0,i0\nX=-11.2800,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n3-6=1,2\n6-7=1,0\n7-8=1,0\n8-9=1,0\n8-10=2,0\n5-11=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[glutamine]]></Cell>\n<Cell id=\"3\"><![CDATA[Gln]]></Cell>\n<Cell id=\"4\"><![CDATA[Q]]></Cell>\n</Row>\n<Row id=\"15\">\n<Cell id=\"1\"><![CDATA[SketchEl!(13,12)\nC=-11.2850,5.8016;0,0,i0\nO=-11.2850,7.3016;0,0,i0\nC=-12.5840,5.0517;0,0,i1\nX=-9.9860,5.0516;0,0,i0\nN=-13.8830,5.8017;0,0,i1\nC=-12.5840,3.5516;0,0,i2\nC=-11.2849,2.8015;0,0,i2\nC=-11.2849,1.3015;0,0,i2\nN=-9.9859,0.5516;0,0,i1\nC=-9.9859,-0.9483;0,0,i0\nN=-11.2850,-1.6984;1,0,i2\nN=-8.6869,-1.6983;0,0,i2\nX=-15.1821,5.0517;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n3-6=1,2\n6-7=1,0\n7-8=1,0\n8-9=1,0\n9-10=1,0\n10-11=2,0\n10-12=1,0\n5-13=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[arginine]]></Cell>\n<Cell id=\"3\"><![CDATA[Arg]]></Cell>\n<Cell id=\"4\"><![CDATA[R]]></Cell>\n</Row>\n<Row id=\"16\">\n<Cell id=\"1\"><![CDATA[SketchEl!(8,7)\nC=-6.8514,8.0000;0,0,i0\nO=-6.8514,9.5000;0,0,i0\nC=-8.1504,7.2500;0,0,i1\nX=-5.5525,7.2500;0,0,i0\nN=-9.4496,8.0000;0,0,i1\nC=-8.1504,5.7500;0,0,i2\nO=-6.8514,5.0000;0,0,i1\nX=-10.7486,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n3-6=1,2\n6-7=1,0\n5-8=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[serine]]></Cell>\n<Cell id=\"3\"><![CDATA[Ser]]></Cell>\n<Cell id=\"4\"><![CDATA[S]]></Cell>\n</Row>\n<Row id=\"17\">\n<Cell id=\"1\"><![CDATA[SketchEl!(9,8)\nC=-6.4906,8.0000;0,0,i0\nO=-6.4906,9.5000;0,0,i0\nC=-7.7896,7.2500;0,0,i1\nX=-5.1916,7.2500;0,0,i0\nN=-9.0887,8.0000;0,0,i1\nC=-7.7896,5.7500;0,0,i1\nC=-9.0887,5.0000;0,0,i3\nO=-6.4906,5.0000;0,0,i1\nX=-10.3877,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,2\n3-6=1,0\n6-7=1,0\n6-8=1,2\n5-9=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[threonine]]></Cell>\n<Cell id=\"3\"><![CDATA[Thr]]></Cell>\n<Cell id=\"4\"><![CDATA[T]]></Cell>\n</Row>\n<Row id=\"18\">\n<Cell id=\"1\"><![CDATA[SketchEl!(14,14)\nC=-9.3567,8.0000;0,0,i0\nO=-9.3567,9.5000;0,0,i0\nC=-10.6557,7.2500;0,0,i1\nX=-8.0577,7.2500;0,0,i0\nN=-11.9548,8.0000;0,0,i1\nC=-10.6557,5.7500;0,0,i2\nC=-9.3567,5.0000;0,0,i0\nC=-9.3567,3.5000;0,0,i1\nC=-8.0577,5.7500;0,0,i1\nC=-8.0577,2.7500;0,0,i1\nC=-6.7586,3.5000;0,0,i0\nC=-6.7586,5.0000;0,0,i1\nO=-5.4596,2.7500;0,0,i1\nX=-13.2538,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n3-6=1,2\n6-7=1,0\n7-8=1,0\n7-9=2,0\n8-10=2,0\n10-11=1,0\n11-12=2,0\n12-9=1,0\n11-13=1,0\n5-14=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[tyrosine]]></Cell>\n<Cell id=\"3\"><![CDATA[Tyr]]></Cell>\n<Cell id=\"4\"><![CDATA[Y]]></Cell>\n</Row>\n<Row id=\"19\">\n<Cell id=\"1\"><![CDATA[SketchEl!(9,8)\nC=-6.4906,8.0000;0,0,i0\nO=-6.4906,9.5000;0,0,i0\nC=-7.7896,7.2500;0,0,i1\nX=-5.1916,7.2500;0,0,i0\nN=-9.0887,8.0000;0,0,i1\nC=-7.7896,5.7500;0,0,i1\nC=-9.0887,5.0000;0,0,i3\nC=-6.4906,5.0000;0,0,i3\nX=-10.3877,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n3-6=1,2\n6-7=1,0\n6-8=1,0\n5-9=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[valine]]></Cell>\n<Cell id=\"3\"><![CDATA[Val]]></Cell>\n<Cell id=\"4\"><![CDATA[V]]></Cell>\n</Row>\n<Row id=\"20\">\n<Cell id=\"1\"><![CDATA[SketchEl!(16,17)\nC=-9.1949,8.0000;0,0,i0\nO=-9.1949,9.5000;0,0,i0\nC=-10.4939,7.2500;0,0,i1\nX=-7.8959,7.2500;0,0,i0\nN=-11.7930,8.0000;0,0,i1\nC=-10.4939,5.7500;0,0,i2\nC=-9.1949,5.0000;0,0,i0\nC=-9.4755,2.2797;0,0,i1\nC=-8.7255,0.9806;0,0,i1\nC=-8.7255,3.5787;0,0,i0\nC=-7.2255,0.9806;0,0,i1\nC=-6.4755,2.2797;0,0,i1\nC=-7.2255,3.5787;0,0,i0\nC=-7.9866,5.8824;0,0,i1\nN=-6.7662,5.0065;0,0,i1\nX=-13.0920,7.2501;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n3-6=1,2\n6-7=1,0\n8-9=1,0\n8-10=2,0\n9-11=2,0\n11-12=1,0\n12-13=2,0\n13-10=1,0\n10-7=1,0\n7-14=2,0\n14-15=1,0\n15-13=1,0\n5-16=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[tryptophan]]></Cell>\n<Cell id=\"3\"><![CDATA[Trp]]></Cell>\n<Cell id=\"4\"><![CDATA[W]]></Cell>\n</Row>\n</Content>\n</DataSheet>\n");

/***/ }),

/***/ "./res/data/templates/biomolecules.ds":
/*!********************************************!*\
  !*** ./res/data/templates/biomolecules.ds ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DataSheet>\n <Summary>\n  <Title>Biomolecules</Title>\n  <Description><![CDATA[]]></Description>\n </Summary>\n <Header nrows=\"8\" ncols=\"3\">\n  <Column name=\"Molecule\" type=\"molecule\" id=\"1\">Molecular structure</Column>\n  <Column name=\"Name\" type=\"string\" id=\"2\">Template name</Column>\n  <Column name=\"Abbrev\" type=\"string\" id=\"3\">Abbreviation code</Column>\n </Header>\n <Content>\n  <Row id=\"1\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(11,12)\nN=0.7009,1.8000;0,0,i0\nC=2.0000,2.5500;0,0,i1\nC=-0.5981,2.5500;0,0,i0\nN=2.0000,4.0500;0,0,i0\nC=0.7009,4.8000;0,0,i0\nC=-0.5981,4.0500;0,0,i0\nN=-2.0194,2.0806;0,0,i0\nC=-2.9018,3.2889;0,0,i1\nN=-2.0260,4.5093;0,0,i0\nN=0.7009,6.3000;0,0,i2\nX=-2.4777,0.6523;0,0,i0\n1-2=1,0\n1-3=2,0\n2-4=2,0\n4-5=1,0\n5-6=2,0\n6-3=1,0\n3-7=1,0\n7-8=1,0\n8-9=2,0\n9-6=1,0\n5-10=1,0\n7-11=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[adenine]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"2\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(12,13)\nN=0.7009,1.8000;0,0,i0\nC=2.0000,2.5500;0,0,i0\nC=-0.5981,2.5500;0,0,i0\nN=2.0000,4.0500;0,0,i1\nC=0.7009,4.8000;0,0,i0\nC=-0.5981,4.0500;0,0,i0\nN=-2.0194,2.0806;0,0,i0\nC=-2.9018,3.2889;0,0,i1\nN=-2.0260,4.5093;0,0,i0\nO=0.7009,6.3000;0,0,i0\nX=-2.4777,0.6523;0,0,i0\nN=3.2990,1.8000;0,0,i2\n1-2=2,0\n1-3=1,0\n2-4=1,0\n4-5=1,0\n5-6=1,0\n6-3=2,0\n3-7=1,0\n7-8=1,0\n8-9=2,0\n9-6=1,0\n5-10=2,0\n7-11=1,0\n2-12=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[guanine]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"3\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(9,9)\nC=-1.7510,2.3500;0,0,i0\nC=-3.0500,1.6000;0,0,i1\nN=-0.4519,1.6000;0,0,i0\nC=-3.0500,0.1000;0,0,i1\nN=-1.7510,-0.6500;0,0,i0\nC=-0.4519,0.1000;0,0,i0\nN=-1.7510,3.8500;0,0,i2\nO=0.8471,-0.6500;0,0,i0\nX=-1.7510,-2.1500;0,0,i0\n1-2=1,0\n1-3=2,0\n2-4=2,0\n4-5=1,0\n5-6=1,0\n6-3=1,0\n1-7=1,0\n6-8=2,0\n5-9=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[cytosine]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"4\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(9,9)\nC=-1.7510,2.3500;0,0,i0\nC=-3.0500,1.6000;0,0,i1\nN=-0.4519,1.6000;0,0,i1\nC=-3.0500,0.1000;0,0,i1\nN=-1.7510,-0.6500;0,0,i0\nC=-0.4519,0.1000;0,0,i0\nO=-1.7510,3.8500;0,0,i0\nO=0.8471,-0.6500;0,0,i0\nX=-1.7510,-2.1500;0,0,i0\n1-2=1,0\n3-1=1,0\n2-4=2,0\n4-5=1,0\n5-6=1,0\n6-3=1,0\n1-7=2,0\n6-8=2,0\n5-9=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[uracil]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"5\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(10,10)\nC=-1.7510,2.3500;0,0,i0\nC=-3.0500,1.6000;0,0,i0\nN=-0.4519,1.6000;0,0,i1\nC=-3.0500,0.1000;0,0,i1\nN=-1.7510,-0.6500;0,0,i0\nC=-0.4519,0.1000;0,0,i0\nO=-1.7510,3.8500;0,0,i0\nO=0.8471,-0.6500;0,0,i0\nX=-1.7510,-2.1500;0,0,i0\nC=-4.3490,2.3500;0,0,i3\n1-2=1,0\n3-1=1,0\n2-4=2,0\n4-5=1,0\n5-6=1,0\n6-3=1,0\n1-7=2,0\n6-8=2,0\n5-9=1,0\n2-10=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[thymine]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"6\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(27,29)\nN=4.6026,-2.2500;0,0,i0\nC=5.9018,-1.5000;0,0,i1\nC=3.3036,-1.5000;0,0,i0\nN=5.9018,0.0000;0,0,i0\nC=4.6026,0.7500;0,0,i0\nC=3.3036,0.0000;0,0,i0\nN=1.8824,-1.9694;0,0,i0\nC=1.0000,-0.7610;0,0,i1\nN=1.8756,0.4593;0,0,i0\nN=4.6026,2.2500;0,0,i2\nC=1.4240,-3.3975;0,0,i1\nO=0.0030,-3.8657;0,0,i0\nC=0.0040,-5.3680;0,0,i1\nC=2.3071,-4.6051;0,0,i1\nC=1.4322,-5.8263;0,0,i1\nO=3.8071,-4.5978;0,0,i1\nO=1.9031,-7.2505;0,0,i1\nC=-1.2076,-6.2522;0,0,i2\nO=-2.5790,-5.6451;0,0,i0\nP=-3.7905,-6.5296;0,0,i0\nO=-4.6750,-5.3179;0,0,i0\nO=-2.9062,-7.7412;0,0,i1\nO=-5.0022,-7.4140;0,0,i0\nP=-6.3738,-6.8069;0,0,i0\nO=-5.7668,-5.4352;0,0,i0\nO=-6.9808,-8.1786;0,0,i1\nO=-7.7455,-6.1998;0,0,i1\n1-2=1,0\n1-3=2,0\n2-4=2,0\n4-5=1,0\n5-6=2,0\n6-3=1,0\n3-7=1,0\n7-8=1,0\n8-9=2,0\n9-6=1,0\n5-10=1,0\n11-7=1,1\n13-12=1,0\n12-11=1,0\n11-14=1,0\n14-15=1,0\n15-13=1,0\n14-16=1,2\n15-17=1,2\n13-18=1,1\n18-19=1,0\n20-21=2,0\n20-22=1,0\n20-23=1,0\n20-19=1,0\n24-25=2,0\n24-26=1,0\n24-27=1,0\n24-23=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[ADP]]></Cell>\n   <Cell id=\"3\"/>\n  </Row>\n  <Row id=\"7\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(18,19)\nC=2.2100,1.1549;0,0,i0\nN=1.0000,0.2749;0,0,i1\nC=1.4600,-1.1549;0,0,i0\nN=3.4200,0.2749;0,0,i1\nC=2.9600,-1.1549;0,0,i0\nC=3.4282,-2.5763;0,0,i1\nS=2.2199,-3.4587;0,0,i0\nC=0.9995,-2.5829;0,0,i2\nO=2.2100,2.6549;0,0,i0\nH=4.4599,-1.1497;0,0,i0\nH=-0.0399,-1.1545;0,0,i0\nC=4.8563,-3.0352;0,0,i2\nC=5.9677,-2.0279;0,0,i2\nC=7.3958,-2.4869;0,0,i2\nC=8.5073,-1.4796;0,0,i2\nC=9.9353,-1.9386;0,0,i0\nO=11.0468,-0.9314;0,0,i0\nO=10.2519,-3.4048;0,0,i1\n3-2=1,0\n2-1=1,0\n1-4=1,0\n4-5=1,0\n5-3=1,0\n5-6=1,0\n6-7=1,0\n7-8=1,0\n8-3=1,0\n1-9=2,0\n5-10=1,1\n3-11=1,1\n6-12=1,2\n12-13=1,0\n13-14=1,0\n14-15=1,0\n16-17=2,0\n16-18=1,0\n16-15=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[biotin]]></Cell>\n   <Cell id=\"3\"/>\n  </Row>\n  <Row id=\"8\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(24,27)\nC=-7.1991,2.0500;0,0,i1\nC=-8.4981,1.3000;0,0,i1\nC=-8.4981,-0.2000;0,0,i0\nC=-7.1991,-0.9500;0,0,i1\nC=-5.9000,-0.2000;0,0,i0\nC=-5.9000,1.3000;0,0,i0\nC=-4.6009,-0.9500;0,0,i2\nC=-3.3019,-0.2000;0,0,i2\nC=-3.3019,1.3000;0,0,i0\nC=-4.6009,2.0500;0,0,i0\nC=-2.0028,2.0500;0,0,i0\nC=-2.0028,3.5500;0,0,i0\nC=-3.3018,4.3000;0,0,i2\nC=-4.6008,3.5501;0,0,i2\nC=-0.5814,4.0194;0,0,i1\nC=0.3009,2.8111;0,0,i1\nC=-0.5749,1.5907;0,0,i2\nO=-9.7971,-0.9500;0,0,i1\nH=-4.6009,0.5500;0,0,i0\nH=-3.3019,2.8000;0,0,i0\nH=-2.0028,0.5500;0,0,i0\nC=-2.0028,5.0500;0,0,i3\nO=-0.1231,5.4476;0,0,i1\nO=1.8009,2.8174;0,0,i1\n2-3=2,0\n2-1=1,0\n3-4=1,0\n4-5=2,0\n5-6=1,0\n6-1=2,0\n8-9=1,0\n8-7=1,0\n9-10=1,0\n10-6=1,0\n5-7=1,0\n12-13=1,0\n12-11=1,0\n13-14=1,0\n14-10=1,0\n9-11=1,0\n12-15=1,0\n15-16=1,0\n16-17=1,0\n17-11=1,0\n3-18=1,0\n10-19=1,2\n9-20=1,1\n11-21=1,2\n12-22=1,1\n15-23=1,1\n16-24=1,2\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[estrogen]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n </Content>\n</DataSheet>\n");

/***/ }),

/***/ "./res/data/templates/cagecmplx.ds":
/*!*****************************************!*\
  !*** ./res/data/templates/cagecmplx.ds ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<DataSheet><Summary><Title>Cage Complexes</Title><Description><![CDATA[]]></Description></Summary><Extension/><Header nrows=\"8\" ncols=\"3\"><Column id=\"1\" name=\"Molecule\" type=\"molecule\">Molecular structure</Column><Column id=\"2\" name=\"Name\" type=\"string\">Template name</Column><Column id=\"3\" name=\"Abbrev\" type=\"string\">Optional abbreviation</Column></Header><Content><Row id=\"1\"><Cell id=\"1\"><![CDATA[SketchEl!(21,25)\nM=-0.6000,2.4500;0,0,i0\nN=-1.3500,3.7490;0,0,i0\nO=0.1500,1.1510;0,0,i0\nO=0.9000,2.4500;0,0,i0\nO=-2.1000,2.4500;0,0,i0\nO=-1.3500,1.1510;0,0,i0\nN=0.1500,3.7490;0,0,i0\nC=-0.9618,5.1979;0,0,i2\nC=-0.2382,5.1979;0,0,i2\nC=-2.7989,4.1373;0,0,i2\nC=-3.3990,3.2000;0,0,i0\nC=2.1990,3.2000;0,0,i0\nC=1.5989,4.1373;0,0,i2\nC=-3.0821,2.1510;0,0,i0\nC=1.8821,2.1510;0,0,i0\nC=1.4938,3.5999;0,0,i2\nC=-2.6938,3.5999;0,0,i2\nO=3.2679,1.5769;0,0,i0\nO=3.6975,3.2689;0,0,i0\nO=-4.4679,1.5769;0,0,i0\nO=-4.8975,3.2689;0,0,i0\n1-2=0,0\n1-3=1,0\n1-4=1,0\n1-5=1,0\n1-6=1,0\n1-7=0,0\n2-8=1,0\n7-9=1,0\n8-9=1,0\n2-10=1,0\n5-11=1,0\n4-12=1,0\n7-13=1,0\n12-13=1,0\n11-10=1,0\n6-14=1,0\n3-15=1,0\n15-16=1,0\n14-17=1,0\n17-2=1,0\n16-7=1,0\n15-18=2,0\n12-19=2,0\n14-20=2,0\n11-21=2,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[EDTA]]></Cell><Cell id=\"3\"/></Row><Row id=\"2\"><Cell id=\"1\"><![CDATA[SketchEl!(25,32)\nM=-0.3000,1.2000;0,0,i0\nN=-1.7142,2.6142;0,0,i0\nN=1.1142,2.6142;0,0,i0\nN=1.1142,-0.2142;0,0,i0\nN=-1.7142,-0.2142;0,0,i0\nC=-3.1921,0.0191;0,0,i0\nC=-3.8780,-1.3173;0,0,i1\nC=-1.4809,-1.6921;0,0,i0\nC=-2.8173,-2.3780;0,0,i1\nC=-1.4809,4.0921;0,0,i0\nC=-2.8173,4.7780;0,0,i1\nC=-3.1921,2.3809;0,0,i0\nC=-3.8780,3.7173;0,0,i1\nC=2.5921,2.3809;0,0,i0\nC=3.2780,3.7173;0,0,i1\nC=0.8809,4.0921;0,0,i0\nC=2.2173,4.7780;0,0,i1\nC=0.8809,-1.6921;0,0,i0\nC=2.2173,-2.3780;0,0,i1\nC=2.5921,0.0191;0,0,i0\nC=3.2780,-1.3173;0,0,i1\nC=-3.8714,1.2000;0,0,i1\nC=-0.3000,4.7714;0,0,i1\nC=3.2714,1.2000;0,0,i1\nC=-0.3000,-2.3714;0,0,i1\n1-2=1,0\n1-3=0,0\n1-4=1,0\n1-5=0,0\n7-6=1,0\n6-5=1,0\n5-8=2,0\n8-9=1,0\n9-7=2,0\n11-10=2,0\n10-2=1,0\n2-12=1,0\n12-13=2,0\n13-11=1,0\n15-14=1,0\n14-3=2,0\n3-16=1,0\n16-17=1,0\n17-15=2,0\n19-18=1,0\n18-4=1,0\n4-20=1,0\n20-21=1,0\n21-19=2,0\n6-22=2,0\n10-23=1,0\n14-24=1,0\n18-25=2,0\n22-12=1,0\n23-16=2,0\n24-20=2,0\n25-8=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[porphyrin]]></Cell><Cell id=\"3\"/></Row><Row id=\"3\"><Cell id=\"1\"><![CDATA[SketchEl!(25,32)\nM=1.5000,0.0000;0,0,i0\nN=2.9117,1.4117;0,0,i0\nN=0.0882,-1.4117;0,0,i0\nN=2.9117,-1.4117;0,0,i0\nN=0.0882,1.4117;0,0,i0\nC=-2.0755,-2.5147;0,0,i1\nC=-1.3895,-1.1783;0,0,i0\nC=0.3215,-2.8895;0,0,i0\nC=-1.0148,-3.5754;0,0,i1\nC=5.0755,2.5147;0,0,i1\nC=4.3895,1.1783;0,0,i0\nC=2.6784,2.8895;0,0,i0\nC=4.0148,3.5754;0,0,i1\nC=-1.0148,3.5754;0,0,i1\nC=0.3216,2.8895;0,0,i0\nC=-1.3895,1.1783;0,0,i0\nC=-2.0754,2.5148;0,0,i1\nC=4.0148,-3.5754;0,0,i1\nC=2.6783,-2.8895;0,0,i0\nC=4.3895,-1.1783;0,0,i0\nC=5.0754,-2.5148;0,0,i1\nN=-1.9510,-0.0731;0,0,i0\nN=1.4268,3.4510;0,0,i0\nN=4.9510,0.0731;0,0,i0\nN=1.5731,-3.4510;0,0,i0\n1-2=0,0\n1-3=0,0\n1-4=0,0\n1-5=0,0\n6-7=1,0\n7-3=2,0\n3-8=1,0\n8-9=1,0\n9-6=2,0\n10-11=1,0\n11-2=2,0\n2-12=1,0\n12-13=1,0\n13-10=2,0\n14-15=1,0\n15-5=2,0\n5-16=1,0\n16-17=1,0\n17-14=2,0\n18-19=1,0\n19-4=2,0\n4-20=1,0\n20-21=1,0\n21-18=2,0\n7-22=1,0\n15-23=1,0\n11-24=1,0\n19-25=1,0\n8-25=2,0\n16-22=2,0\n12-23=2,0\n20-24=2,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[porphyrinoid]]></Cell><Cell id=\"3\"/></Row><Row id=\"4\"><Cell id=\"1\"><![CDATA[SketchEl!(11,20)\nM=12.1738,-1.7111;0,0,i0,xARENE:1:1,xARENE:2:1\nC=13.1284,-0.5301;0,0,i1,xARENE:1:2\nC=11.2193,-0.5301;0,0,i1,xARENE:1:3\nC=11.2193,-2.8920;0,0,i1,xARENE:2:2\nC=13.1284,-2.8920;0,0,i1,xARENE:2:3\nC=10.8390,-3.7589;0,0,i1,xARENE:2:6\nC=12.1738,-4.1749;0,0,i1,xARENE:2:5\nC=13.5087,-3.7589;0,0,i1,xARENE:2:4\nC=13.5087,0.3368;0,0,i1,xARENE:1:6\nC=12.1738,0.7528;0,0,i1,xARENE:1:5\nC=10.8390,0.3368;0,0,i1,xARENE:1:4\n2-3=1,0\n4-5=1,0\n4-6=2,0\n6-7=1,0\n7-8=1,0\n8-5=2,0\n2-9=2,0\n9-10=1,0\n10-11=1,0\n11-3=2,0\n10-1=1,0\n7-1=1,0\n8-1=0,0\n5-1=0,0\n4-1=0,0\n6-1=0,0\n3-1=0,0\n2-1=0,0\n9-1=0,0\n11-1=0,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[metallocene]]></Cell><Cell id=\"3\"/></Row><Row id=\"5\"><Cell id=\"1\"><![CDATA[SketchEl!(37,45)\nM=1.5000,0.0000;0,0,i0\nC=5.3914,3.7500;0,0,i1\nC=6.6904,3.0000;0,0,i1\nC=4.0924,3.0000;0,0,i1\nC=6.6904,1.5000;0,0,i1\nC=5.3914,0.7500;0,0,i0\nN=4.0924,1.5000;0,0,i0\nC=5.3914,-0.7500;0,0,i0\nC=6.6904,-1.5000;0,0,i1\nN=4.0924,-1.5000;0,0,i0\nC=6.6904,-3.0000;0,0,i1\nC=5.3914,-3.7500;0,0,i1\nC=4.0924,-3.0000;0,0,i1\nC=-3.6940,1.4927;0,0,i1\nC=-3.6946,2.9927;0,0,i1\nC=-2.3946,0.7433;0,0,i1\nC=-2.3959,3.7433;0,0,i1\nC=-1.0966,2.9939;0,0,i0\nN=-1.0959,1.4939;0,0,i0\nC=0.2020,3.7445;0,0,i0\nC=0.2013,5.2445;0,0,i1\nN=1.5014,2.9951;0,0,i0\nC=1.5000,5.9951;0,0,i1\nC=2.7994,5.2457;0,0,i1\nC=2.8001,3.7457;0,0,i1\nC=2.8030,-5.2448;0,0,i1\nC=1.5041,-5.9951;0,0,i1\nC=2.8026,-3.7448;0,0,i1\nC=0.2049,-5.2453;0,0,i1\nC=0.2046,-3.7454;0,0,i0\nN=1.5034,-2.9951;0,0,i0\nC=-1.0945,-2.9957;0,0,i0\nC=-2.3934,-3.7459;0,0,i1\nN=-1.0949,-1.4957;0,0,i0\nC=-3.6926,-2.9962;0,0,i1\nC=-3.6930,-1.4963;0,0,i1\nC=-2.3941,-0.7460;0,0,i1\n2-3=1,0\n2-4=2,0\n3-5=2,0\n5-6=1,0\n6-7=2,0\n7-4=1,0\n6-8=1,0\n8-9=1,0\n8-10=2,0\n9-11=2,0\n11-12=1,0\n12-13=2,0\n13-10=1,0\n1-10=0,0\n1-7=0,0\n14-15=1,0\n14-16=2,0\n15-17=2,0\n17-18=1,0\n18-19=2,0\n19-16=1,0\n18-20=1,0\n20-21=1,0\n20-22=2,0\n21-23=2,0\n23-24=1,0\n24-25=2,0\n25-22=1,0\n1-22=0,0\n1-19=0,0\n26-27=1,0\n26-28=2,0\n27-29=2,0\n29-30=1,0\n30-31=2,0\n31-28=1,0\n30-32=1,0\n32-33=1,0\n32-34=2,0\n33-35=2,0\n35-36=1,0\n36-37=2,0\n37-34=1,0\n1-34=0,0\n1-31=0,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[tris-bipy]]></Cell><Cell id=\"3\"/></Row><Row id=\"6\"><Cell id=\"1\"><![CDATA[SketchEl!(15,18)\nN=0.0000,0.0000;0,0,i1\nC=-1.5000,0.0000;0,0,i2\nC=-2.2500,-1.2990;0,0,i2\nC=-1.5000,-2.5981;0,0,i2\nN=-0.0000,-2.5981;0,0,i1\nC=0.7500,1.2990;0,0,i2\nC=2.2500,1.2990;0,0,i2\nN=3.0000,-0.0000;0,0,i1\nC=4.5000,-0.0000;0,0,i2\nC=5.2500,-1.2990;0,0,i2\nC=4.5000,-2.5981;0,0,i2\nN=3.0000,-2.5981;0,0,i1\nC=0.7500,-3.8971;0,0,i2\nC=2.2500,-3.8971;0,0,i2\nM=1.5000,-1.3000;0,0,i0\n1-2=1,0\n2-3=1,0\n3-4=1,0\n4-5=1,0\n1-6=1,0\n6-7=1,0\n7-8=1,0\n8-9=1,0\n9-10=1,0\n10-11=1,0\n11-12=1,0\n5-13=1,0\n12-14=1,0\n14-13=1,0\n1-15=0,0\n15-12=0,0\n5-15=0,0\n15-8=0,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[tren]]></Cell><Cell id=\"3\"/></Row><Row id=\"7\"><Cell id=\"1\"><![CDATA[SketchEl!(11,13)\nM=1.4999,0.0000;0,0,i0\nN=1.4999,1.5000;0,0,i2\nN=1.4999,-1.5000;0,0,i2\nN=0.2009,0.7500;0,0,i2\nN=0.2009,-0.7500;0,0,i0\nC=0.4393,-2.5606;0,0,i2\nC=-1.2479,-0.3617;0,0,i2\nC=-0.1872,-2.1988;0,0,i2\nC=-1.2479,0.3617;0,0,i2\nC=0.0511,1.8882;0,0,i2\nC=-0.7973,0.9790;0,0,i2\n1-2=0,0\n1-3=0,0\n1-4=0,0\n1-5=0,0\n3-6=1,0\n5-7=1,0\n5-8=1,0\n4-9=1,0\n7-9=1,0\n6-8=1,0\n2-10=1,0\n5-11=1,0\n10-11=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[N4]]></Cell><Cell id=\"3\"/></Row><Row id=\"8\"><Cell id=\"1\"><![CDATA[SketchEl!(21,27)\nN=3.2639,-1.3522;0,0,i1\nC=1.8122,-0.7585;0,0,i2\nC=1.8056,0.7411;0,0,i2\nN=3.2521,1.3475;0,0,i1\nN=5.9520,1.3594;0,0,i1\nC=7.4037,0.7657;0,0,i2\nC=7.4103,-0.7339;0,0,i2\nN=5.9639,-1.3403;0,0,i1\nC=3.2705,-2.8521;0,0,i2\nC=5.9705,-2.8402;0,0,i2\nC=5.9454,2.8594;0,0,i2\nC=3.2455,2.8475;0,0,i2\nC=4.6431,3.6036;0,0,i1\nC=4.5728,-3.5963;0,0,i1\nM=4.6052,-0.0128;0,0,i0\nN=4.5994,1.4890;0,0,i1\nN=4.6133,-1.5126;0,0,i1\nC=4.1980,2.5347;0,0,i2\nC=4.2120,-2.5583;0,0,i2\nC=2.8657,-0.6612;0,0,i2\nC=2.8489,0.6376;0,0,i2\n1-2=1,0\n2-3=1,0\n3-4=1,0\n5-6=1,0\n6-7=1,0\n7-8=1,0\n1-9=1,0\n8-10=1,0\n5-11=1,0\n4-12=1,0\n11-13=1,0\n13-12=1,0\n9-14=1,0\n14-10=1,0\n1-15=0,0\n4-15=0,0\n8-15=0,0\n5-15=0,0\n15-16=0,0\n15-17=0,0\n16-18=1,0\n13-18=1,0\n17-19=1,0\n19-14=1,0\n17-20=1,0\n16-21=1,0\n21-20=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[N6]]></Cell><Cell id=\"3\"/></Row></Content></DataSheet>");

/***/ }),

/***/ "./res/data/templates/crownethers.ds":
/*!*******************************************!*\
  !*** ./res/data/templates/crownethers.ds ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DataSheet>\n <Summary>\n  <Title>Crown Ethers</Title>\n  <Description><![CDATA[]]></Description>\n </Summary>\n <Header nrows=\"10\" ncols=\"3\">\n  <Column name=\"Molecule\" type=\"molecule\" id=\"1\">Molecular structure</Column>\n  <Column name=\"Name\" type=\"string\" id=\"2\">Template name</Column>\n  <Column name=\"Abbrev\" type=\"string\" id=\"3\">Abbreviation code</Column>\n </Header>\n <Content>\n  <Row id=\"1\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(12,12)\nO=-3.3500,6.9000;0,0,i0\nC=-2.7500,8.3490;0,0,i2\nC=-1.2500,8.3490;0,0,i2\nO=-0.6500,6.9000;0,0,i0\nC=0.7990,6.3000;0,0,i2\nC=0.7990,4.8000;0,0,i2\nO=-0.6500,4.2000;0,0,i0\nC=-1.2500,2.7510;0,0,i2\nC=-2.7500,2.7510;0,0,i2\nO=-3.3500,4.2000;0,0,i0\nC=-4.7990,4.8000;0,0,i2\nC=-4.7990,6.3000;0,0,i2\n1-2=1,0\n2-3=1,0\n3-4=1,0\n4-5=1,0\n5-6=1,0\n6-7=1,0\n7-8=1,0\n8-9=1,0\n9-10=1,0\n10-11=1,0\n11-12=1,0\n12-1=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[12-crown-4]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"2\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(13,13)\nO=-9.0085,1.2181;0,0,i0\nC=-8.4085,2.6671;0,0,i2\nC=-6.9085,2.6671;0,0,i2\nO=-6.3085,1.2181;0,0,i0\nC=-4.8595,0.6181;0,0,i2\nC=-4.8595,-0.8819;0,0,i2\nO=-6.3085,-1.4819;0,0,i0\nO=-9.0085,-1.4819;0,0,i0\nC=-10.4575,-0.8819;0,0,i2\nC=-10.4575,0.6181;0,0,i2\nC=-9.0085,-2.9819;0,0,i2\nC=-6.3085,-2.9819;0,0,i2\nC=-7.7095,-3.7319;0,0,i2\n1-2=1,0\n2-3=1,0\n3-4=1,0\n4-5=1,0\n5-6=1,0\n6-7=1,0\n8-9=1,0\n9-10=1,0\n10-1=1,0\n8-11=1,0\n7-12=1,0\n11-13=1,0\n13-12=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[13-crown-4]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"3\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(14,14)\nO=6.9101,-5.9857;0,0,i0\nC=7.5101,-4.5367;0,0,i2\nC=9.0101,-4.5367;0,0,i2\nO=9.6101,-5.9857;0,0,i0\nO=9.6101,-8.6857;0,0,i0\nC=9.0101,-10.1347;0,0,i2\nC=7.5101,-10.1347;0,0,i2\nO=6.9101,-8.6857;0,0,i0\nC=5.4101,-5.9857;0,0,i2\nC=5.4101,-8.6857;0,0,i2\nC=11.1101,-8.6857;0,0,i2\nC=11.1101,-5.9857;0,0,i2\nC=11.8601,-7.3867;0,0,i2\nC=4.6601,-7.2847;0,0,i2\n1-2=1,0\n2-3=1,0\n3-4=1,0\n5-6=1,0\n6-7=1,0\n7-8=1,0\n1-9=1,0\n8-10=1,0\n5-11=1,0\n4-12=1,0\n11-13=1,0\n13-12=1,0\n9-14=1,0\n14-10=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[14-crown-4]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"4\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(15,15)\nC=22.1615,-1.5864;0,0,i2\nC=23.3877,-0.7311;0,0,i2\nO=20.9592,-0.7218;0,0,i0\nO=22.9828,0.6878;0,0,i0\nC=19.7379,-1.5763;0,0,i2\nC=24.1796,1.5700;0,0,i2\nC=18.5357,-0.7167;0,0,i2\nC=23.7246,3.0381;0,0,i2\nO=18.9534,0.7033;0,0,i0\nO=22.2021,3.0764;0,0,i0\nC=17.7398,1.6155;0,0,i2\nC=21.7384,4.5021;0,0,i2\nC=18.2148,3.0479;0,0,i2\nC=20.2213,4.5021;0,0,i2\nO=19.7018,3.0711;0,0,i0\n1-2=1,0\n1-3=1,0\n2-4=1,0\n3-5=1,0\n4-6=1,0\n5-7=1,0\n6-8=1,0\n7-9=1,0\n8-10=1,0\n9-11=1,0\n10-12=1,0\n11-13=1,0\n12-14=1,0\n13-15=1,0\n14-15=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[15-crown-5]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"5\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(16,16)\nC=-3.2703,-7.3624;0,0,i2\nC=-4.4642,-6.4905;0,0,i2\nO=-3.7283,-8.7862;0,0,i0\nO=-5.6803,-7.3450;0,0,i0\nC=-2.5315,-9.6420;0,0,i2\nC=-6.8842,-6.4872;0,0,i2\nC=-2.8996,-11.0971;0,0,i2\nC=-8.0816,-7.3361;0,0,i2\nO=-4.4208,-11.4135;0,0,i0\nO=-7.6748,-8.7819;0,0,i0\nC=-4.4492,-12.9087;0,0,i2\nC=-8.9100,-9.5864;0,0,i2\nC=-5.8087,-13.6602;0,0,i2\nC=-8.6136,-11.0608;0,0,i2\nC=-7.1438,-12.8902;0,0,i2\nO=-7.1341,-11.4135;0,0,i0\n1-2=1,0\n1-3=1,0\n2-4=1,0\n3-5=1,0\n4-6=1,0\n5-7=1,0\n6-8=1,0\n7-9=1,0\n8-10=1,0\n9-11=1,0\n10-12=1,0\n11-13=1,0\n12-14=1,0\n13-15=1,0\n14-16=1,0\n15-16=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[16-crown-5]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"6\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(17,17)\nC=11.3913,-8.5218;0,0,i2\nO=9.9653,-8.8821;0,0,i0\nC=8.6597,-11.0126;0,0,i2\nO=7.4967,-10.0548;0,0,i0\nC=6.3270,-10.9800;0,0,i2\nC=5.0002,-10.3582;0,0,i2\nO=4.9982,-8.8783;0,0,i0\nC=3.5605,-8.5538;0,0,i2\nC=3.2430,-7.1220;0,0,i2\nC=4.4248,-6.1867;0,0,i2\nO=5.8590,-6.7660;0,0,i0\nC=6.6561,-5.4870;0,0,i2\nC=8.2017,-5.4870;0,0,i2\nO=9.0164,-6.7596;0,0,i0\nC=10.4452,-6.1465;0,0,i2\nC=11.6565,-7.0603;0,0,i2\nC=9.9960,-10.3691;0,0,i2\n5-6=1,0\n7-8=1,0\n8-9=1,0\n9-10=1,0\n6-7=1,0\n11-12=1,0\n12-13=1,0\n13-14=1,0\n10-11=1,0\n15-16=1,0\n14-15=1,0\n16-1=1,0\n2-17=1,0\n17-3=1,0\n1-2=1,0\n3-4=1,0\n4-5=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[17-crown-5]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"7\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(18,18)\nC=25.7638,-7.1614;0,0,i2\nC=25.0080,-8.4698;0,0,i2\nO=23.5267,-8.2690;0,0,i0\nC=22.8858,-9.6176;0,0,i2\nC=21.3709,-9.5699;0,0,i2\nO=20.7705,-8.1782;0,0,i0\nC=19.2614,-8.3591;0,0,i2\nC=18.4799,-7.0636;0,0,i2\nO=19.3514,-5.8621;0,0,i0\nC=18.4463,-4.6854;0,0,i2\nC=19.2046,-3.3933;0,0,i2\nO=20.6839,-3.5899;0,0,i0\nC=21.3018,-2.2555;0,0,i2\nC=22.7925,-2.2628;0,0,i2\nO=23.3883,-3.6550;0,0,i0\nC=24.8877,-3.4674;0,0,i2\nC=25.6817,-4.7676;0,0,i2\nO=24.8469,-5.9802;0,0,i0\n1-2=1,0\n2-3=1,0\n4-5=1,0\n5-6=1,0\n6-7=1,0\n3-4=1,0\n8-9=1,0\n9-10=1,0\n10-11=1,0\n7-8=1,0\n12-13=1,0\n13-14=1,0\n14-15=1,0\n11-12=1,0\n16-17=1,0\n17-18=1,0\n15-16=1,0\n1-18=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[18-crown-6]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"8\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(20,20)\nC=-3.4089,-21.0677;0,0,i2\nC=-4.1767,-22.3338;0,0,i2\nC=-4.1760,-19.7823;0,0,i2\nO=-5.6753,-22.3687;0,0,i0\nO=-5.6837,-19.8385;0,0,i0\nC=-5.9548,-23.7442;0,0,i2\nC=-5.9813,-18.3858;0,0,i2\nC=-7.3810,-24.2230;0,0,i2\nC=-7.4086,-17.9180;0,0,i2\nO=-8.5195,-23.2256;0,0,i0\nO=-8.5335,-18.9110;0,0,i0\nC=-9.6750,-17.9220;0,0,i2\nC=-11.0728,-23.7403;0,0,i2\nC=-11.1043,-18.4009;0,0,i2\nO=-11.3732,-22.3272;0,0,i0\nO=-11.3858,-19.8551;0,0,i0\nC=-12.8889,-22.3529;0,0,i2\nC=-12.9024,-19.8027;0,0,i2\nC=-13.6729,-21.0850;0,0,i2\nC=-9.6554,-24.2077;0,0,i2\n1-2=1,0\n2-4=1,0\n3-5=1,0\n4-6=1,0\n5-7=1,0\n6-8=1,0\n7-9=1,0\n8-10=1,0\n9-11=1,0\n11-12=1,0\n13-15=1,0\n14-16=1,0\n15-17=1,0\n16-18=1,0\n17-19=1,0\n18-19=1,0\n12-14=1,0\n13-20=1,0\n10-20=1,0\n3-1=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[20-crown-6]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"9\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(21,21)\nC=5.3181,-17.4804;0,0,i2\nC=3.8183,-17.4647;0,0,i2\nO=3.1475,-18.8055;0,0,i0\nC=1.6753,-18.4404;0,0,i2\nC=0.7284,-19.5857;0,0,i2\nO=1.3610,-20.9456;0,0,i0\nC=0.1741,-21.8748;0,0,i2\nC=0.5101,-23.3287;0,0,i2\nO=1.9785,-23.6452;0,0,i0\nC=1.9855,-25.1429;0,0,i2\nC=3.3325,-25.7906;0,0,i2\nO=4.5146,-24.8501;0,0,i0\nC=5.6870,-25.8137;0,0,i2\nC=7.0359,-25.1826;0,0,i2\nC=8.3693,-19.6515;0,0,i2\nC=7.4283,-18.4879;0,0,i2\nO=5.9620,-18.8325;0,0,i0\nO=7.0819,-23.6850;0,0,i0\nO=7.7239,-20.9997;0,0,i0\nC=8.5502,-23.3847;0,0,i2\nC=8.9031,-21.9421;0,0,i2\n1-2=1,0\n2-3=1,0\n4-5=1,0\n5-6=1,0\n6-7=1,0\n3-4=1,0\n8-9=1,0\n9-10=1,0\n10-11=1,0\n7-8=1,0\n12-13=1,0\n13-14=1,0\n11-12=1,0\n15-16=1,0\n16-17=1,0\n1-17=1,0\n14-18=1,0\n19-15=1,0\n18-20=1,0\n19-21=1,0\n20-21=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[21-crown-7]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"10\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(24,24)\nC=20.7446,-27.4663;0,0,i2\nO=21.4914,-26.1584;0,0,i0\nC=19.2274,-27.4663;0,0,i2\nC=22.9335,-26.6476;0,0,i2\nO=18.5013,-26.1469;0,0,i0\nC=24.0269,-25.6099;0,0,i2\nC=17.0704,-26.6026;0,0,i2\nO=23.6289,-24.1676;0,0,i0\nC=15.9870,-25.5356;0,0,i2\nC=24.9576,-23.4669;0,0,i2\nO=16.4266,-24.0844;0,0,i0\nC=24.9616,-21.9609;0,0,i2\nC=15.1053,-23.3507;0,0,i2\nO=23.6462,-21.2624;0,0,i0\nC=15.1453,-21.8561;0,0,i2\nC=24.0717,-19.8181;0,0,i2\nO=16.4802,-21.1978;0,0,i0\nC=22.9846,-18.8108;0,0,i2\nC=16.0898,-19.7657;0,0,i2\nO=21.5453,-19.2991;0,0,i0\nC=17.1862,-18.7823;0,0,i2\nC=20.8284,-18.0103;0,0,i2\nO=18.5947,-19.2887;0,0,i0\nC=19.3270,-18.0074;0,0,i2\n1-2=1,0\n1-3=1,0\n2-4=1,0\n3-5=1,0\n4-6=1,0\n5-7=1,0\n6-8=1,0\n7-9=1,0\n8-10=1,0\n9-11=1,0\n10-12=1,0\n11-13=1,0\n12-14=1,0\n13-15=1,0\n14-16=1,0\n15-17=1,0\n16-18=1,0\n17-19=1,0\n18-20=1,0\n19-21=1,0\n20-22=1,0\n21-23=1,0\n22-24=1,0\n23-24=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[24-crown-8]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n </Content>\n</DataSheet>\n");

/***/ }),

/***/ "./res/data/templates/funcgrp.ds":
/*!***************************************!*\
  !*** ./res/data/templates/funcgrp.ds ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DataSheet>\n<Summary>\n<Title>Functional Groups</Title>\n<Description><![CDATA[]]></Description>\n</Summary>\n<Header nrows=\"18\" ncols=\"3\">\n<Column name=\"Molecule\" type=\"molecule\" id=\"1\">Molecular structure</Column>\n<Column name=\"Name\" type=\"string\" id=\"2\">Template name</Column>\n<Column name=\"Abbrev\" type=\"string\" id=\"3\">Optional abbreviation</Column>\n</Header>\n<Content>\n<Row id=\"1\">\n<Cell id=\"1\"><![CDATA[SketchEl!(4,3)\nN=-6.6000,4.4000;1,0,i0\nO=-5.8500,5.6990;0,0,i0\nO=-5.8500,3.1010;-1,0,i0\nX=-8.1000,4.4000;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[nitro]]></Cell>\n<Cell id=\"3\"><![CDATA[N|O{2}]]></Cell>\n</Row>\n<Row id=\"2\">\n<Cell id=\"1\"><![CDATA[SketchEl!(4,3)\nC=-7.8000,3.2500;0,0,i0\nO=-7.0500,4.5490;0,0,i0\nO=-7.0500,1.9510;0,0,i1\nX=-9.3000,3.2500;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[carboxyl]]></Cell>\n<Cell id=\"3\"><![CDATA[C|O{2}|H]]></Cell>\n</Row>\n<Row id=\"3\">\n<Cell id=\"1\"><![CDATA[SketchEl!(5,4)\nC=-7.8000,3.2500;0,0,i0\nO=-7.0500,4.5490;0,0,i0\nO=-7.0500,1.9510;0,0,i0\nX=-9.3000,3.2500;0,0,i0\nC=-5.5500,1.9510;0,0,i3\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[methyl carboxylate]]></Cell>\n<Cell id=\"3\"><![CDATA[C|O{2}|Me]]></Cell>\n</Row>\n<Row id=\"4\">\n<Cell id=\"1\"><![CDATA[SketchEl!(6,5)\nC=-7.8000,3.2500;0,0,i0\nO=-7.0500,4.5490;0,0,i0\nO=-7.0500,1.9510;0,0,i0\nX=-9.3000,3.2500;0,0,i0\nC=-5.5500,1.9510;0,0,i2\nC=-4.8000,0.6520;0,0,i3\n1-2=2,0\n1-3=1,0\n1-4=1,0\n3-5=1,0\n5-6=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[ethyl carboxylate]]></Cell>\n<Cell id=\"3\"><![CDATA[C|O{2}|Et]]></Cell>\n</Row>\n<Row id=\"5\">\n<Cell id=\"1\"><![CDATA[SketchEl!(4,3)\nC=-7.8000,3.2500;0,0,i0\nO=-7.0500,4.5490;0,0,i0\nN=-7.0500,1.9510;0,0,i2\nX=-9.3000,3.2500;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[amide]]></Cell>\n<Cell id=\"3\"><![CDATA[C|O|NH{2}]]></Cell>\n</Row>\n<Row id=\"6\">\n<Cell id=\"1\"><![CDATA[SketchEl!(4,3)\nC=-7.8000,3.2500;0,0,i0\nO=-7.0500,4.5490;0,0,i0\nC=-7.0500,1.9510;0,0,i3\nX=-9.3000,3.2500;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[acetyl]]></Cell>\n<Cell id=\"3\"><![CDATA[Ac]]></Cell>\n</Row>\n<Row id=\"7\">\n<Cell id=\"1\"><![CDATA[SketchEl!(5,4)\nO=-8.0010,2.5000;0,0,i0\nC=-6.7019,3.2500;0,0,i0\nX=-9.3000,3.2500;0,0,i0\nC=-5.4029,2.5000;0,0,i3\nO=-6.7019,4.7500;0,0,i0\n1-2=1,0\n1-3=1,0\n2-4=1,0\n2-5=2,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[acetoxy]]></Cell>\n<Cell id=\"3\"><![CDATA[O|Ac]]></Cell>\n</Row>\n<Row id=\"8\">\n<Cell id=\"1\"><![CDATA[SketchEl!(3,2)\nX=-5.9500,5.0500;0,0,i0\nC=-4.4500,5.0500;0,0,i0\nN=-2.9500,5.0500;0,0,i0\n1-2=1,0\n2-3=3,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[cyano]]></Cell>\n<Cell id=\"3\"><![CDATA[C|N]]></Cell>\n</Row>\n<Row id=\"9\">\n<Cell id=\"1\"><![CDATA[SketchEl!(5,4)\nC=0.0000,0.0000;0,0,i0\nF=0.0000,1.5000;0,0,i0\nF=-0.0000,-1.5000;0,0,i0\nF=1.5000,-0.0000;0,0,i0\nX=-1.5000,0.0000;0,0,i0\n1-2=1,0\n1-3=1,0\n1-4=1,0\n1-5=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[trifluoromethyl]]></Cell>\n<Cell id=\"3\"><![CDATA[C|F{3}]]></Cell>\n</Row>\n<Row id=\"10\">\n<Cell id=\"1\"><![CDATA[SketchEl!(6,5)\nO=0.0000,0.0000;0,0,i0\nC=1.5000,0.0000;0,0,i0\nF=3.0000,0.0000;0,0,i0\nF=1.5000,-1.5000;0,0,i0\nF=1.5000,1.5000;0,0,i0\nX=-0.7500,1.2990;0,0,i0\n1-2=1,0\n2-3=1,0\n2-4=1,0\n2-5=1,0\n1-6=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[trifluoromethoxy]]></Cell>\n<Cell id=\"3\"><![CDATA[O|CF{3}]]></Cell>\n</Row>\n<Row id=\"11\">\n<Cell id=\"1\"><![CDATA[SketchEl!(5,4)\nP=-1.2500,0.8500;0,0,i0\nO=-1.2500,2.3500;0,0,i0\nO=-1.2500,-0.6500;0,0,i1\nO=0.2500,0.8500;0,0,i1\nX=-2.7500,0.8500;0,0,i0\n1-2=2,0\n1-3=1,0\n1-4=1,0\n1-5=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[phosphoric]]></Cell>\n<Cell id=\"3\"><![CDATA[P|O{3}|H{2}]]></Cell>\n</Row>\n<Row id=\"12\">\n<Cell id=\"1\"><![CDATA[SketchEl!(6,5)\nO=-2.7500,0.8500;0,0,i0\nP=-1.2500,0.8500;0,0,i0\nO=-1.2500,2.3500;0,0,i0\nO=-1.2500,-0.6500;0,0,i1\nO=0.2500,0.8500;0,0,i1\nX=-3.5000,2.1490;0,0,i0\n2-3=2,0\n2-4=1,0\n2-5=1,0\n2-1=1,0\n1-6=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[phosphoric]]></Cell>\n<Cell id=\"3\"><![CDATA[P|O{4}|H{2}]]></Cell>\n</Row>\n<Row id=\"13\">\n<Cell id=\"1\"><![CDATA[SketchEl!(4,3)\nS=-1.2500,0.8500;0,0,i0\nO=-1.2500,2.3500;0,0,i0\nO=-1.2500,-0.6500;0,0,i0\nX=-2.7500,0.8500;0,0,i0\n1-2=2,0\n1-3=2,0\n1-4=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[sulphonyl]]></Cell>\n<Cell id=\"3\"><![CDATA[S|O{2}|H]]></Cell>\n</Row>\n<Row id=\"14\">\n<Cell id=\"1\"><![CDATA[SketchEl!(5,4)\nS=-1.2500,0.8500;0,0,i0\nO=-1.2500,2.3500;0,0,i0\nO=-1.2500,-0.6500;0,0,i0\nO=0.2500,0.8500;0,0,i1\nX=-2.7500,0.8500;0,0,i0\n1-2=2,0\n1-3=2,0\n1-4=1,0\n1-5=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[sulphonic]]></Cell>\n<Cell id=\"3\"><![CDATA[S|O{3}|H]]></Cell>\n</Row>\n<Row id=\"15\">\n<Cell id=\"1\"><![CDATA[SketchEl!(6,5)\nO=-2.7500,0.8500;0,0,i0\nS=-1.2500,0.8500;0,0,i0\nO=-1.2500,2.3500;0,0,i0\nO=-1.2500,-0.6500;0,0,i0\nO=0.2500,0.8500;0,0,i1\nX=-3.5000,2.1490;0,0,i0\n2-3=2,0\n2-4=2,0\n2-5=1,0\n2-1=1,0\n1-6=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[sulphonic]]></Cell>\n<Cell id=\"3\"><![CDATA[S|O{4}|H]]></Cell>\n</Row>\n<Row id=\"16\">\n<Cell id=\"1\"><![CDATA[SketchEl!(5,4)\nX=0.0000,0.0000;0,0,i0\nSi=1.5000,0.0000;0,0,i0\nC=3.0000,0.0000;0,0,i3\nC=1.5000,-1.5000;0,0,i3\nC=1.5000,1.5000;0,0,i3\n1-2=1,0\n2-3=1,0\n2-4=1,0\n2-5=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[trimethylsilane]]></Cell>\n<Cell id=\"3\"><![CDATA[TMS]]></Cell>\n</Row>\n<Row id=\"17\">\n<Cell id=\"1\"><![CDATA[SketchEl!(12,22)\nC=5.6600,-2.2950;0,0,i1\nC=4.6100,-3.9050;0,0,i1\nC=4.1500,-2.6750;0,0,i1\nC=7.1700,-2.6750;0,0,i1\nC=6.7100,-3.9050;0,0,i1\nC=5.6300,-0.5870;0,0,i1\nC=4.5800,0.7230;0,0,i1\nC=4.1200,-0.2070;0,0,i0\nC=7.1400,-0.2070;0,0,i1\nC=6.6800,0.7230;0,0,i1\nFe=5.6700,-1.6610;0,0,i0\nX=2.6200,-0.2137;0,0,i0\n2-3=2,0\n3-1=1,0\n1-4=1,0\n4-5=2,0\n5-2=1,0\n7-8=2,0\n8-6=1,0\n6-9=1,0\n9-10=2,0\n10-7=1,0\n11-6=1,0\n11-1=1,0\n3-11=0,0\n4-11=0,0\n2-11=0,0\n5-11=0,0\n8-11=0,0\n9-11=0,0\n10-11=0,0\n7-11=0,0\n9-9=1,0\n8-12=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[ferrocenyl]]></Cell>\n<Cell id=\"3\"><![CDATA[Fc]]></Cell>\n</Row>\n<Row id=\"18\">\n<Cell id=\"1\"><![CDATA[SketchEl!(11,15)\nX=-1.8965,0.7175;0,0,i0\nFe=0.1000,0.7175;0,0,i0\nC=0.3931,1.7515;0,0,i1\nC=1.7233,2.7758;0,0,i1\nC=1.9501,1.7633;0,0,i1\nC=-0.9841,2.4781;0,0,i1\nC=-0.3171,3.2728;0,0,i1\nC=0.1000,-0.7825;0,0,e0\nO=0.1000,-2.2825;0,0,i0\nC=1.5289,-0.1075;0,0,e0\nO=2.8280,-0.8575;0,0,i0\n1-2=1,0\n4-5=2,0\n5-3=1,0\n3-6=1,0\n6-7=2,0\n7-4=1,0\n2-3=1,0\n5-2=0,0\n6-2=0,0\n7-2=0,0\n4-2=0,0\n2-8=0,0\n8-9=2,0\n2-10=0,0\n10-11=2,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[bis(carbonyl)cyclopentadienyl iron]]></Cell>\n<Cell id=\"3\"><![CDATA[Fp]]></Cell>\n</Row>\n</Content>\n</DataSheet>\n");

/***/ }),

/***/ "./res/data/templates/largerings.ds":
/*!******************************************!*\
  !*** ./res/data/templates/largerings.ds ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DataSheet>\n<Summary>\n<Title>Large Rings</Title>\n<Description><![CDATA[]]></Description>\n</Summary>\n<Header nrows=\"11\" ncols=\"3\">\n<Column name=\"Molecule\" type=\"molecule\" id=\"1\">Molecular structure</Column>\n<Column name=\"Name\" type=\"string\" id=\"2\">Template name</Column>\n<Column name=\"Abbrev\" type=\"string\" id=\"3\">Abbreviation code</Column>\n</Header>\n<Content>\n<Row id=\"1\">\n<Cell id=\"1\"><![CDATA[SketchEl!(9,9)\nC=2.0428,-18.6516;0,0,i2\nC=1.7880,-17.1633;0,0,i2\nC=2.5387,-15.8790;0,0,i2\nC=3.1939,-19.6177;0,0,i2\nC=4.7060,-19.6177;0,0,i2\nC=5.8535,-18.6576;0,0,i2\nC=6.1088,-17.1863;0,0,i2\nC=3.9528,-15.3740;0,0,i2\nC=5.3645,-15.8923;0,0,i2\n1-2=1,0\n2-3=1,0\n1-4=1,0\n4-5=1,0\n5-6=1,0\n6-7=1,0\n8-3=1,0\n8-9=1,0\n9-7=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[cyclo-9]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"2\">\n<Cell id=\"1\"><![CDATA[SketchEl!(10,10)\nC=-3.5491,5.1000;0,0,i2\nC=-4.8481,4.3500;0,0,i2\nC=-4.8481,2.8500;0,0,i2\nC=-3.5491,2.1000;0,0,i2\nC=-2.2500,2.8500;0,0,i2\nC=-2.2500,4.3500;0,0,i2\nC=-0.9509,2.1000;0,0,i2\nC=0.3481,2.8500;0,0,i2\nC=0.3481,4.3500;0,0,i2\nC=-0.9509,5.1000;0,0,i2\n2-3=1,0\n2-1=1,0\n3-4=1,0\n4-5=1,0\n6-1=1,0\n8-9=1,0\n8-7=1,0\n9-10=1,0\n10-6=1,0\n5-7=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[cyclo-10]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"3\">\n<Cell id=\"1\"><![CDATA[SketchEl!(11,11)\nC=-7.7858,2.5448;0,0,i2\nC=-7.8013,1.1000;0,0,i2\nC=-6.4244,0.8579;0,0,i2\nC=-5.3288,-0.5811;0,0,i2\nC=-4.3565,0.8361;0,0,i2\nC=-2.9104,1.0882;0,0,i2\nC=-2.8964,2.5470;0,0,i2\nC=-4.2864,2.8806;0,0,i2\nC=-4.6033,4.2815;0,0,i2\nC=-6.0450,4.2766;0,0,i2\nC=-6.3710,2.8699;0,0,i2\n1-2=1,0\n2-3=1,0\n3-4=1,0\n5-6=1,0\n6-7=1,0\n7-8=1,0\n8-9=1,0\n9-10=1,0\n10-11=1,0\n11-1=1,0\n4-5=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[cyclo-11]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"4\">\n<Cell id=\"1\"><![CDATA[SketchEl!(12,12)\nC=1.1614,6.9975;0,0,i2\nC=2.4604,6.2475;0,0,i2\nC=-0.1376,6.2475;0,0,i2\nC=-0.1376,4.7475;0,0,i2\nC=-1.4367,3.9975;0,0,i2\nC=-1.4367,2.4975;0,0,i2\nC=-0.1376,1.7475;0,0,i2\nC=1.1614,2.4975;0,0,i2\nC=2.4604,1.7475;0,0,i2\nC=3.7595,2.4975;0,0,i2\nC=3.7595,3.9975;0,0,i2\nC=2.4604,4.7475;0,0,i2\n1-2=1,0\n1-3=1,0\n3-4=1,0\n4-5=1,0\n5-6=1,0\n6-7=1,0\n7-8=1,0\n8-9=1,0\n9-10=1,0\n10-11=1,0\n11-12=1,0\n12-2=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[cyclo-12]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"5\">\n<Cell id=\"1\"><![CDATA[SketchEl!(12,12)\nC=0.2503,-1.0236;0,0,i2\nC=1.7491,-1.0236;0,0,i2\nC=2.0788,0.4428;0,0,i2\nC=3.5325,0.7862;0,0,i2\nC=3.5274,2.2829;0,0,i2\nC=2.0508,2.6151;0,0,i2\nC=1.7054,4.0671;0,0,i2\nC=0.1996,4.0655;0,0,i2\nC=-0.1373,2.6137;0,0,i2\nC=-1.5850,2.2710;0,0,i2\nC=-1.5640,0.7758;0,0,i2\nC=-0.0938,0.4547;0,0,i2\n1-2=1,0\n2-3=1,0\n3-4=1,0\n4-5=1,0\n5-6=1,0\n6-7=1,0\n7-8=1,0\n8-9=1,0\n9-10=1,0\n10-11=1,0\n11-12=1,0\n12-1=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[cyclo-12]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"6\">\n<Cell id=\"1\"><![CDATA[SketchEl!(13,13)\nC=-9.0085,1.2181;0,0,i2\nC=-8.4085,2.6671;0,0,i2\nC=-6.9085,2.6671;0,0,i2\nC=-6.3085,1.2181;0,0,i2\nC=-4.8595,0.6181;0,0,i2\nC=-4.8595,-0.8819;0,0,i2\nC=-6.3085,-1.4819;0,0,i2\nC=-9.0085,-1.4819;0,0,i2\nC=-10.4575,-0.8819;0,0,i2\nC=-10.4575,0.6181;0,0,i2\nC=-9.0085,-2.9819;0,0,i2\nC=-6.3085,-2.9819;0,0,i2\nC=-7.7095,-3.7319;0,0,i2\n1-2=1,0\n2-3=1,0\n3-4=1,0\n4-5=1,0\n5-6=1,0\n6-7=1,0\n8-9=1,0\n9-10=1,0\n10-1=1,0\n8-11=1,0\n7-12=1,0\n11-13=1,0\n13-12=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[cyclo-13]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"7\">\n<Cell id=\"1\"><![CDATA[SketchEl!(14,14)\nC=6.9101,-5.9857;0,0,i2\nC=7.5101,-4.5367;0,0,i2\nC=9.0101,-4.5367;0,0,i2\nC=9.6101,-5.9857;0,0,i2\nC=9.6101,-8.6857;0,0,i2\nC=9.0101,-10.1347;0,0,i2\nC=7.5101,-10.1347;0,0,i2\nC=6.9101,-8.6857;0,0,i2\nC=5.4101,-5.9857;0,0,i2\nC=5.4101,-8.6857;0,0,i2\nC=11.1101,-8.6857;0,0,i2\nC=11.1101,-5.9857;0,0,i2\nC=11.8601,-7.3867;0,0,i2\nC=4.6601,-7.2847;0,0,i2\n1-2=1,0\n2-3=1,0\n3-4=1,0\n5-6=1,0\n6-7=1,0\n7-8=1,0\n1-9=1,0\n8-10=1,0\n5-11=1,0\n4-12=1,0\n11-13=1,0\n13-12=1,0\n9-14=1,0\n14-10=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[cyclo-14]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"8\">\n<Cell id=\"1\"><![CDATA[SketchEl!(15,15)\nC=22.1615,-1.5864;0,0,i2\nC=23.3877,-0.7311;0,0,i2\nC=20.9592,-0.7218;0,0,i2\nC=22.9828,0.6878;0,0,i2\nC=19.7379,-1.5763;0,0,i2\nC=24.1796,1.5700;0,0,i2\nC=18.5357,-0.7167;0,0,i2\nC=23.7246,3.0381;0,0,i2\nC=18.9534,0.7033;0,0,i2\nC=22.2021,3.0764;0,0,i2\nC=17.7398,1.6155;0,0,i2\nC=21.7384,4.5021;0,0,i2\nC=18.2148,3.0479;0,0,i2\nC=20.2213,4.5021;0,0,i2\nC=19.7018,3.0711;0,0,i2\n1-2=1,0\n1-3=1,0\n2-4=1,0\n3-5=1,0\n4-6=1,0\n5-7=1,0\n6-8=1,0\n7-9=1,0\n8-10=1,0\n9-11=1,0\n10-12=1,0\n11-13=1,0\n12-14=1,0\n13-15=1,0\n14-15=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[cyclo-15]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"9\">\n<Cell id=\"1\"><![CDATA[SketchEl!(16,16)\nC=-2.3295,-6.3508;0,0,i2\nC=-2.3295,-7.8765;0,0,i2\nC=-1.0175,-8.6353;0,0,i2\nC=0.3099,-7.8765;0,0,i2\nC=2.9416,-6.3508;0,0,i2\nC=2.9416,-7.8765;0,0,i2\nC=1.6218,-8.6353;0,0,i2\nC=-1.0150,-4.2041;0,0,i2\nC=0.2910,-3.4545;0,0,i2\nC=1.6173,-4.2041;0,0,i2\nC=-2.3088,-3.4429;0,0,i2\nC=-3.6056,-4.1961;0,0,i2\nC=-3.6212,-5.5973;0,0,i2\nC=2.9184,-3.4366;0,0,i2\nC=4.2222,-4.1763;0,0,i2\nC=4.2483,-5.5976;0,0,i2\n1-2=1,0\n2-3=1,0\n3-4=1,0\n5-6=1,0\n6-7=1,0\n7-4=1,0\n8-9=1,0\n9-10=1,0\n11-12=1,0\n8-11=1,0\n1-13=1,0\n12-13=1,0\n14-15=1,0\n10-14=1,0\n5-16=1,0\n15-16=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[cyclo-16]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"10\">\n<Cell id=\"1\"><![CDATA[SketchEl!(18,18)\nC=14.0401,-6.5516;0,0,i2\nC=14.7839,-7.8398;0,0,i2\nC=13.8355,-9.0080;0,0,i2\nC=14.6732,-10.2249;0,0,i2\nC=13.8569,-11.4861;0,0,i2\nC=12.3571,-11.2554;0,0,i2\nC=11.7609,-12.6417;0,0,i2\nC=10.2552,-12.6811;0,0,i2\nC=9.6255,-11.3345;0,0,i2\nC=8.1419,-11.5631;0,0,i2\nC=7.3964,-10.2751;0,0,i2\nC=8.3448,-9.1199;0,0,i2\nC=7.5032,-7.8976;0,0,i2\nC=8.3106,-6.6466;0,0,i2\nC=9.8063,-6.8716;0,0,i2\nC=10.4049,-5.4658;0,0,i2\nC=11.9207,-5.4290;0,0,i2\nC=12.5403,-6.7723;0,0,i2\n1-2=1,0\n2-3=1,0\n4-5=1,0\n5-6=1,0\n6-7=1,0\n3-4=1,0\n8-9=1,0\n9-10=1,0\n10-11=1,0\n7-8=1,0\n12-13=1,0\n13-14=1,0\n14-15=1,0\n11-12=1,0\n16-17=1,0\n17-18=1,0\n15-16=1,0\n1-18=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[cyclo-18]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"11\">\n<Cell id=\"1\"><![CDATA[SketchEl!(20,20)\nC=23.0039,-8.7037;0,0,i2\nC=21.6788,-9.4637;0,0,i2\nC=21.6617,-10.9743;0,0,i2\nC=22.9767,-11.7478;0,0,i2\nC=24.2738,-14.0464;0,0,i2\nC=22.9667,-13.2731;0,0,i2\nC=28.1300,-11.8325;0,0,i2\nC=28.1300,-13.3322;0,0,i2\nC=26.8927,-14.0616;0,0,i2\nC=28.1261,-8.8196;0,0,i2\nC=29.4195,-9.5784;0,0,i2\nC=29.4306,-11.0859;0,0,i2\nC=26.8898,-15.5611;0,0,i2\nC=25.5812,-16.3118;0,0,i2\nC=24.2488,-15.5459;0,0,i2\nC=25.5520,-7.2815;0,0,i2\nC=26.8533,-6.5619;0,0,i2\nC=28.1325,-7.3250;0,0,i2\nC=24.2475,-6.5288;0,0,i2\nC=22.9549,-7.2639;0,0,i2\n1-2=1,0\n2-3=1,0\n3-4=1,0\n5-6=1,0\n6-4=1,0\n7-8=1,0\n8-9=1,0\n10-11=1,0\n7-12=1,0\n11-12=1,0\n13-14=1,0\n9-13=1,0\n5-15=1,0\n15-14=1,0\n16-17=1,0\n10-18=1,0\n17-18=1,0\n19-20=1,0\n16-19=1,0\n20-1=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[cyclo-20]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n</Content>\n</DataSheet>\n");

/***/ }),

/***/ "./res/data/templates/ligbident.ds":
/*!*****************************************!*\
  !*** ./res/data/templates/ligbident.ds ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DataSheet>\n<Summary>\n<Title>Bidentate Ligands</Title>\n<Description><![CDATA[]]></Description>\n</Summary>\n<Header nrows=\"11\" ncols=\"3\">\n<Column name=\"Molecule\" type=\"molecule\" id=\"1\">Molecular structure</Column>\n<Column name=\"Name\" type=\"string\" id=\"2\">Template name</Column>\n<Column name=\"Abbrev\" type=\"string\" id=\"3\">Optional abbreviation</Column>\n</Header>\n<Content>\n<Row id=\"1\">\n<Cell id=\"1\"><![CDATA[SketchEl!(13,15)\nC=2.7915,1.5000;0,0,i1\nC=4.0905,0.7500;0,0,i1\nC=1.4925,0.7500;0,0,i1\nC=4.0905,-0.7500;0,0,i1\nC=2.7915,-1.5000;0,0,i0\nN=1.4925,-0.7500;0,0,i0\nC=2.7915,-3.0000;0,0,i0\nC=4.0905,-3.7500;0,0,i1\nN=1.4925,-3.7500;0,0,i0\nC=4.0905,-5.2500;0,0,i1\nC=2.7915,-6.0000;0,0,i1\nC=1.4925,-5.2500;0,0,i1\nX=-1.1000,-2.2500;0,0,i0\n1-2=1,0\n1-3=2,0\n2-4=2,0\n4-5=1,0\n5-6=2,0\n6-3=1,0\n5-7=1,0\n7-8=1,0\n7-9=2,0\n8-10=2,0\n10-11=1,0\n11-12=2,0\n12-9=1,0\n13-9=0,0\n13-6=0,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[bipyridine]]></Cell>\n<Cell id=\"3\"><![CDATA[bipy]]></Cell>\n</Row>\n<Row id=\"2\">\n<Cell id=\"1\"><![CDATA[SketchEl!(13,15)\nC=2.7915,1.5000;0,0,i1\nC=4.0905,0.7500;0,0,i1\nC=1.4925,0.7500;0,0,i1\nC=4.0905,-0.7500;0,0,i1\nC=2.7915,-1.5000;0,0,i0\nN=1.4925,-0.7500;0,0,i0\nC=2.7915,-3.0000;0,0,i0\nC=4.0905,-3.7500;0,0,i1\nC=1.4925,-3.7500;0,0,i0\nC=4.0905,-5.2500;0,0,i1\nC=2.7915,-6.0000;0,0,i1\nC=1.4925,-5.2500;0,0,i1\nX=-1.1000,-2.2500;0,0,i0\n1-2=1,0\n1-3=2,0\n2-4=2,0\n4-5=1,0\n5-6=2,0\n6-3=1,0\n5-7=1,0\n7-8=1,0\n7-9=2,0\n8-10=2,0\n10-11=1,0\n11-12=2,0\n12-9=1,0\n13-9=1,0\n13-6=0,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[phenylpyridine]]></Cell>\n<Cell id=\"3\"><![CDATA[phpy]]></Cell>\n</Row>\n<Row id=\"3\">\n<Cell id=\"1\"><![CDATA[SketchEl!(8,8)\nX=-0.8000,3.2500;0,0,i0\nO=-0.0500,1.9510;0,0,i0,xRESPATH:1:1\nC=1.4500,1.9510;0,0,i0,xRESPATH:1:2\nC=2.2000,3.2499;0,0,i1,xRESPATH:1:3\nC=1.4500,4.5491;0,0,i0,xRESPATH:1:4\nO=-0.0500,4.5491;0,0,i0,xRESPATH:1:5\nC=2.2001,5.8481;0,0,i3\nC=2.1999,0.6519;0,0,i3\n2-3=2,0\n2-1=0,0\n3-4=1,0\n4-5=2,0\n5-6=1,0\n6-1=1,0\n5-7=1,0\n3-8=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[acetylacetonate]]></Cell>\n<Cell id=\"3\"><![CDATA[acac]]></Cell>\n</Row>\n<Row id=\"4\">\n<Cell id=\"1\"><![CDATA[SketchEl!(5,5)\nX=-3.2985,-1.8750;0,0,i0\nC=0.4506,-1.8500;0,0,i3\nC=-1.0494,-1.8500;0,0,i0,xRESPATH:1:2\nO=-1.7995,-3.1491;0,0,i0,xRESPATH:1:1\nO=-1.7994,-0.5509;0,0,i0,xRESPATH:1:3\n2-3=1,0\n3-4=2,0\n3-5=1,0\n5-1=1,0\n4-1=0,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[acetate]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"5\">\n<Cell id=\"1\"><![CDATA[SketchEl!(15,18)\nC=2.7915,1.5000;0,0,i1\nC=4.0905,0.7500;0,0,i1\nC=1.4925,0.7500;0,0,i1\nC=4.0905,-0.7500;0,0,i0\nC=2.7915,-1.5000;0,0,i0\nN=1.4925,-0.7500;0,0,i0\nC=2.7915,-3.0000;0,0,i0\nC=4.0905,-3.7500;0,0,i0\nN=1.4925,-3.7500;0,0,i0\nC=4.0905,-5.2500;0,0,i1\nC=2.7915,-6.0000;0,0,i1\nC=1.4925,-5.2500;0,0,i1\nX=-1.1000,-2.2500;0,0,i0\nC=5.3896,-3.0000;0,0,i1\nC=5.3896,-1.5000;0,0,i1\n1-2=1,0\n1-3=2,0\n2-4=2,0\n4-5=1,0\n5-6=2,0\n6-3=1,0\n5-7=1,0\n7-8=1,0\n7-9=2,0\n8-10=2,0\n10-11=1,0\n11-12=2,0\n12-9=1,0\n13-9=0,0\n13-6=0,0\n8-14=1,0\n14-15=2,0\n15-4=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[phenanthroline]]></Cell>\n<Cell id=\"3\"><![CDATA[phen]]></Cell>\n</Row>\n<Row id=\"6\">\n<Cell id=\"1\"><![CDATA[SketchEl!(5,5)\nX=-1.6500,0.6500;0,0,i0\nN=0.1300,-0.5600;0,0,i2\nC=1.5600,-0.1000;0,0,i2\nN=0.1300,1.8600;0,0,i2\nC=1.5600,1.4000;0,0,i2\n3-2=1,0\n2-1=0,0\n1-4=0,0\n4-5=1,0\n5-3=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[ethylenediamine]]></Cell>\n<Cell id=\"3\"><![CDATA[en]]></Cell>\n</Row>\n<Row id=\"7\">\n<Cell id=\"1\"><![CDATA[SketchEl!(12,14)\nC=4.1514,2.1507;0,0,i1\nC=2.8524,2.9007;0,0,i1\nC=1.5534,2.1507;0,0,i1\nN=1.5534,0.6507;0,0,i0\nC=2.8524,-0.0993;0,0,i0\nC=4.1515,0.6507;0,0,i0\nC=5.4505,-0.0993;0,0,i1\nC=2.8524,-1.5993;0,0,i0\nC=4.1515,-2.3494;0,0,i1\nC=5.4505,-1.5994;0,0,i1\nO=1.5534,-2.3493;0,0,i0\nX=-0.1457,-0.9064;0,0,i0\n2-3=2,0\n2-1=1,0\n3-4=1,0\n4-5=2,0\n5-6=1,0\n6-1=2,0\n7-6=1,0\n5-8=1,0\n8-9=2,0\n9-10=1,0\n10-7=2,0\n8-11=1,0\n11-12=1,0\n12-4=0,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[oxyquinoline]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"8\">\n<Cell id=\"1\"><![CDATA[SketchEl!(29,33)\nX=-0.3660,-0.1210;0,0,i0\nP=1.8140,1.0890;0,0,i0\nC=3.2440,0.6290;0,0,i2\nP=1.8140,-1.3310;0,0,i0\nC=3.2440,-0.8710;0,0,i2\nC=1.0487,2.5150;0,0,i0\nC=2.8725,2.1519;0,0,i0\nC=1.0487,-2.7570;0,0,i0\nC=2.8725,-2.3939;0,0,i0\nC=4.3221,1.7667;0,0,i1\nC=2.4812,3.5999;0,0,i1\nC=5.3806,2.8295;0,0,i1\nC=4.9894,4.2776;0,0,i1\nC=3.5397,4.6628;0,0,i1\nC=1.8387,3.7901;0,0,i1\nC=-0.4505,2.5616;0,0,i1\nC=1.1294,5.1118;0,0,i1\nC=-0.3699,5.1584;0,0,i1\nC=-1.1598,3.8833;0,0,i1\nC=-0.4505,-2.8036;0,0,i1\nC=1.8387,-4.0321;0,0,i1\nC=-1.1598,-4.1253;0,0,i1\nC=-0.3699,-5.4004;0,0,i1\nC=1.1294,-5.3538;0,0,i1\nC=2.4812,-3.8419;0,0,i1\nC=4.3221,-2.0087;0,0,i1\nC=3.5397,-4.9048;0,0,i1\nC=4.9893,-4.5196;0,0,i1\nC=5.3806,-3.0716;0,0,i1\n3-2=1,0\n2-1=0,0\n1-4=0,0\n4-5=1,0\n5-3=1,0\n2-6=1,0\n2-7=1,0\n4-8=1,0\n4-9=1,0\n7-10=1,0\n7-11=2,0\n10-12=2,0\n12-13=1,0\n13-14=2,0\n14-11=1,0\n6-15=1,0\n6-16=2,0\n15-17=2,0\n17-18=1,0\n18-19=2,0\n19-16=1,0\n8-20=1,0\n8-21=2,0\n20-22=2,0\n22-23=1,0\n23-24=2,0\n24-21=1,0\n9-25=1,0\n9-26=2,0\n25-27=2,0\n27-28=1,0\n28-29=2,0\n29-26=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[ethylene bis(diphenylphosphine)]]></Cell>\n<Cell id=\"3\"><![CDATA[dppe]]></Cell>\n</Row>\n<Row id=\"9\">\n<Cell id=\"1\"><![CDATA[SketchEl!(28,32)\nX=-0.3660,-0.1210;0,0,i0\nP=1.8140,1.0890;0,0,i0\nP=1.8140,-1.3310;0,0,i0\nC=1.0487,2.5150;0,0,i0\nC=2.8725,2.1519;0,0,i0\nC=1.0487,-2.7570;0,0,i0\nC=2.8725,-2.3939;0,0,i0\nC=4.3221,1.7667;0,0,i1\nC=2.4812,3.5999;0,0,i1\nC=5.3806,2.8295;0,0,i1\nC=4.9894,4.2776;0,0,i1\nC=3.5397,4.6628;0,0,i1\nC=1.8387,3.7901;0,0,i1\nC=-0.4505,2.5616;0,0,i1\nC=1.1294,5.1118;0,0,i1\nC=-0.3699,5.1584;0,0,i1\nC=-1.1598,3.8833;0,0,i1\nC=-0.4505,-2.8036;0,0,i1\nC=1.8387,-4.0321;0,0,i1\nC=-1.1598,-4.1253;0,0,i1\nC=-0.3699,-5.4004;0,0,i1\nC=1.1294,-5.3538;0,0,i1\nC=2.4812,-3.8419;0,0,i1\nC=4.3221,-2.0087;0,0,i1\nC=3.5397,-4.9048;0,0,i1\nC=4.9893,-4.5196;0,0,i1\nC=5.3806,-3.0716;0,0,i1\nC=3.5430,-0.1210;0,0,i2\n2-1=0,0\n1-3=0,0\n2-4=1,0\n2-5=1,0\n3-6=1,0\n3-7=1,0\n5-8=1,0\n5-9=2,0\n8-10=2,0\n10-11=1,0\n11-12=2,0\n12-9=1,0\n4-13=1,0\n4-14=2,0\n13-15=2,0\n15-16=1,0\n16-17=2,0\n17-14=1,0\n6-18=1,0\n6-19=2,0\n18-20=2,0\n20-21=1,0\n21-22=2,0\n22-19=1,0\n7-23=1,0\n7-24=2,0\n23-25=2,0\n25-26=1,0\n26-27=2,0\n27-24=1,0\n2-28=1,0\n3-28=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[methylene bis(diphenylphonsphine)]]></Cell>\n<Cell id=\"3\"><![CDATA[dppm]]></Cell>\n</Row>\n<Row id=\"10\">\n<Cell id=\"1\"><![CDATA[SketchEl!(9,10)\nX=-3.3500,-0.0500;0,0,i0\nO=-1.6700,-1.2600;0,0,i0\nC=-0.2400,-0.8000;0,0,i0\nO=-1.6700,1.1600;0,0,i0\nC=-0.2400,0.7000;0,0,i0\nC=1.0590,1.4499;0,0,i1\nC=1.0590,-1.5500;0,0,i1\nC=2.3581,-0.8000;0,0,i1\nC=2.3581,0.6999;0,0,i1\n3-2=1,0\n2-1=1,0\n1-4=1,0\n4-5=1,0\n5-3=1,0\n5-6=2,0\n3-7=2,0\n7-8=1,0\n8-9=2,0\n9-6=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[catecholate]]></Cell>\n<Cell id=\"3\"><![CDATA[cat]]></Cell>\n</Row>\n<Row id=\"11\">\n<Cell id=\"1\"><![CDATA[SketchEl!(9,8)\nX=-2.9010,4.6990;0,0,i0\nO=-1.4010,4.6990;0,0,i0\nC=0.0990,4.6990;0,0,i1\nC=0.8490,5.9981;0,0,i3\nC=0.8490,3.4000;0,0,i2\nC=0.0990,2.1010;0,0,i1\nO=-1.4010,2.1010;0,0,i0\nC=0.8490,0.8019;0,0,i3\nX=-2.9010,2.1009;0,0,i0\n1-2=1,0\n2-3=1,0\n3-4=1,0\n3-5=1,0\n5-6=1,0\n6-7=1,0\n6-8=1,0\n7-9=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[bridging acac]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n</Content>\n</DataSheet>\n");

/***/ }),

/***/ "./res/data/templates/ligmonodent.ds":
/*!*******************************************!*\
  !*** ./res/data/templates/ligmonodent.ds ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<DataSheet><Summary><Title>Monodentate Ligands</Title><Description><![CDATA[]]></Description></Summary><Extension/><Header nrows=\"10\" ncols=\"3\"><Column id=\"1\" name=\"Molecule\" type=\"molecule\">Molecular structure</Column><Column id=\"2\" name=\"Name\" type=\"string\">Template name</Column><Column id=\"3\" name=\"Abbrev\" type=\"string\">Optional abbreviation</Column></Header><Content><Row id=\"1\"><Cell id=\"1\"><![CDATA[SketchEl!(20,22)\nP=0.0000,0.0000;0,0,i0\nC=0.0000,2.0000;0,0,i0\nC=2.0000,-0.0000;0,0,i0\nC=-0.0000,-2.0000;0,0,i0\nC=-1.2990,2.7500;0,0,i1\nC=1.2990,2.7500;0,0,i1\nC=-1.2990,4.2500;0,0,i1\nC=0.0000,5.0000;0,0,i1\nC=1.2990,4.2500;0,0,i1\nC=2.7500,1.2990;0,0,i1\nC=2.7500,-1.2990;0,0,i1\nC=4.2500,1.2990;0,0,i1\nC=5.0000,-0.0000;0,0,i1\nC=4.2500,-1.2990;0,0,i1\nC=1.2990,-2.7500;0,0,i1\nC=-1.2990,-2.7500;0,0,i1\nC=1.2990,-4.2500;0,0,i1\nC=-0.0000,-5.0000;0,0,i1\nC=-1.2990,-4.2500;0,0,i1\nX=-2.0000,0.0000;0,0,i0\n1-2=1,0\n1-3=1,0\n1-4=1,0\n2-5=1,0\n2-6=2,0\n5-7=2,0\n7-8=1,0\n8-9=2,0\n9-6=1,0\n3-10=1,0\n3-11=2,0\n10-12=2,0\n12-13=1,0\n13-14=2,0\n14-11=1,0\n4-15=1,0\n4-16=2,0\n15-17=2,0\n17-18=1,0\n18-19=2,0\n19-16=1,0\n1-20=0,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[triphenylphosphine]]></Cell><Cell id=\"3\"><![CDATA[P|Ph{3}]]></Cell></Row><Row id=\"2\"><Cell id=\"1\"><![CDATA[SketchEl!(5,4)\nP=0.0000,0.0000;0,0,i0\nC=0.0000,1.5000;0,0,i3\nC=1.5000,-0.0000;0,0,i3\nC=-0.0000,-1.5000;0,0,i3\nX=-1.5000,0.0000;0,0,i0\n1-2=1,0\n1-3=1,0\n1-4=1,0\n1-5=0,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[trimethylphosphine]]></Cell><Cell id=\"3\"><![CDATA[P|Me{3}]]></Cell></Row><Row id=\"3\"><Cell id=\"1\"><![CDATA[SketchEl!(8,8)\nX=-2.7000,3.9500;0,0,i0\nC=-1.2000,3.9500;0,0,i0\nN=-0.3200,2.7400;0,0,i0\nC=1.1100,3.2000;0,0,i1\nN=-0.3200,5.1600;0,0,i0\nC=1.1100,4.7000;0,0,i1\nC=-0.7853,6.5860;0,0,i3\nC=-0.7853,1.3140;0,0,i3\n1-2=2,0\n4-3=1,0\n3-2=1,0\n2-5=1,0\n5-6=1,0\n6-4=2,0\n5-7=1,0\n3-8=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[imidazolidine]]></Cell><Cell id=\"3\"/></Row><Row id=\"4\"><Cell id=\"1\"><![CDATA[SketchEl!(3,2)\nX=-0.9000,0.3500;0,0,i0\nC=0.6000,0.3500;0,0,e0\nO=2.1000,0.3500;0,0,i0\n1-2=0,0\n2-3=2,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[carbonyl]]></Cell><Cell id=\"3\"/></Row><Row id=\"5\"><Cell id=\"1\"><![CDATA[SketchEl!(6,5)\nX=-2.4000,1.9714;0,0,i0\nO=-0.9000,1.9714;0,0,i0\nC=-0.1500,3.2705;0,0,i2\nC=1.3500,3.2705;0,0,i3\nC=-0.1500,0.6724;0,0,i2\nC=1.3500,0.6724;0,0,i3\n1-2=0,0\n2-3=1,0\n3-4=1,0\n2-5=1,0\n5-6=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[diethylether]]></Cell><Cell id=\"3\"><![CDATA[O|Et{2}]]></Cell></Row><Row id=\"6\"><Cell id=\"1\"><![CDATA[SketchEl!(6,6)\nX=-2.4000,1.9714;0,0,i0\nO=-0.9000,1.9714;0,0,i0\nC=-0.0200,0.7614;0,0,i2\nC=1.4100,1.2214;0,0,i2\nC=-0.0200,3.1814;0,0,i2\nC=1.4100,2.7214;0,0,i2\n1-2=0,0\n4-3=1,0\n3-2=1,0\n2-5=1,0\n5-6=1,0\n6-4=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[tetrahydrofuran]]></Cell><Cell id=\"3\"><![CDATA[THF]]></Cell></Row><Row id=\"7\"><Cell id=\"1\"><![CDATA[SketchEl!(7,6)\nX=-1.0000,-0.9143;0,0,i0\nO=0.5000,-0.9143;0,0,i0\nC=2.0000,-0.9143;0,0,i0\nN=2.7500,-2.2133;0,0,i0\nC=4.2500,-2.2133;0,0,i3\nC=2.0000,-3.5124;0,0,i3\nH=2.7500,0.3848;0,0,i0\n1-2=0,0\n2-3=2,0\n3-4=1,0\n4-5=1,0\n4-6=1,0\n3-7=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[dimethylformamide]]></Cell><Cell id=\"3\"><![CDATA[DMF]]></Cell></Row><Row id=\"8\"><Cell id=\"1\"><![CDATA[SketchEl!(5,4)\nX=-1.0000,-0.9143;0,0,i0\nO=0.5000,-0.9143;0,0,i0\nS=2.0000,-0.9143;0,0,i0\nC=2.7500,-2.2133;0,0,i3\nC=2.7500,0.3848;0,0,i3\n1-2=0,0\n2-3=2,0\n3-4=1,0\n3-5=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[dimethylsulfoxide]]></Cell><Cell id=\"3\"><![CDATA[DMSO]]></Cell></Row><Row id=\"9\"><Cell id=\"1\"><![CDATA[SketchEl!(7,7)\nC=6.8500,0.0490;0,0,i1\nC=5.3500,0.0490;0,0,i1\nC=7.6000,-1.2500;0,0,i1\nN=4.6000,-1.2500;0,0,i0\nC=5.3500,-2.5490;0,0,i1\nC=6.8500,-2.5490;0,0,i1\nX=3.1000,-1.2500;0,0,i0\n1-2=1,0\n1-3=2,0\n2-4=2,0\n4-5=1,0\n5-6=2,0\n6-3=1,0\n4-7=0,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[pyridine]]></Cell><Cell id=\"3\"><![CDATA[Py]]></Cell></Row><Row id=\"10\"><Cell id=\"1\"><![CDATA[SketchEl!(22,24)\nX=0.0000,-0.1997;0,0,i0\nC=0.0000,1.9965;0,2,i0\nN=1.2135,2.8782;0,0,i0\nC=0.7500,4.3048;0,0,i1\nC=-0.7500,4.3048;0,0,i1\nN=-1.2135,2.8782;0,0,i0\nC=-2.7135,2.8782;0,0,i0\nC=2.7135,2.8782;0,0,i0\nC=-3.4635,4.1772;0,0,i0\nC=-4.9635,4.1772;0,0,i1\nC=-5.7135,2.8782;0,0,i1\nC=-4.9635,1.5791;0,0,i1\nC=-3.4635,1.5791;0,0,i0\nC=3.4635,1.5791;0,0,i0\nC=4.9635,1.5791;0,0,i1\nC=5.7135,2.8782;0,0,i1\nC=4.9635,4.1772;0,0,i1\nC=3.4635,4.1772;0,0,i0\n{^i}Pr=-2.7135,0.2801;0,0,i0,aSketchEl!(4\\002C3)\\000A*\\003D-6.4450\\002C2.0214\\003B0\\002C0\\002Ci0\\000AC\\003D-4.1950\\002C3.3204\\003B0\\002C0\\002Ci3\\000AC\\003D-4.1950\\002C0.7224\\003B0\\002C0\\002Ci3\\000AC\\003D-4.9450\\002C2.0214\\003B0\\002C0\\002Ci1\\000A4-2\\003D1\\002C0\\000A4-3\\003D1\\002C0\\000A4-1\\003D1\\002C0\\000A!End\\000A\n{^i}Pr=2.7135,0.2801;0,0,i0,aSketchEl!(4\\002C3)\\000A*\\003D-6.4450\\002C2.0214\\003B0\\002C0\\002Ci0\\000AC\\003D-4.1950\\002C3.3204\\003B0\\002C0\\002Ci3\\000AC\\003D-4.1950\\002C0.7224\\003B0\\002C0\\002Ci3\\000AC\\003D-4.9450\\002C2.0214\\003B0\\002C0\\002Ci1\\000A4-2\\003D1\\002C0\\000A4-3\\003D1\\002C0\\000A4-1\\003D1\\002C0\\000A!End\\000A\n{^i}Pr=2.7135,5.4763;0,0,i0,aSketchEl!(4\\002C3)\\000A*\\003D-6.4450\\002C2.0214\\003B0\\002C0\\002Ci0\\000AC\\003D-4.1950\\002C3.3204\\003B0\\002C0\\002Ci3\\000AC\\003D-4.1950\\002C0.7224\\003B0\\002C0\\002Ci3\\000AC\\003D-4.9450\\002C2.0214\\003B0\\002C0\\002Ci1\\000A4-2\\003D1\\002C0\\000A4-3\\003D1\\002C0\\000A4-1\\003D1\\002C0\\000A!End\\000A\n{^i}Pr=-2.7135,5.4763;0,0,i0,aSketchEl!(4\\002C3)\\000A*\\003D-6.4450\\002C2.0214\\003B0\\002C0\\002Ci0\\000AC\\003D-4.1950\\002C3.3204\\003B0\\002C0\\002Ci3\\000AC\\003D-4.1950\\002C0.7224\\003B0\\002C0\\002Ci3\\000AC\\003D-4.9450\\002C2.0214\\003B0\\002C0\\002Ci1\\000A4-2\\003D1\\002C0\\000A4-3\\003D1\\002C0\\000A4-1\\003D1\\002C0\\000A!End\\000A\n1-2=0,0\n2-3=1,0\n3-4=1,0\n4-5=2,0\n5-6=1,0\n6-2=1,0\n6-7=1,0\n3-8=1,0\n7-9=2,0\n9-10=1,0\n10-11=2,0\n11-12=1,0\n12-13=2,0\n13-7=1,0\n8-14=2,0\n14-15=1,0\n15-16=2,0\n16-17=1,0\n17-18=2,0\n18-8=1,0\n13-19=1,0\n14-20=1,0\n18-21=1,0\n9-22=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[IPr]]></Cell><Cell id=\"3\"/></Row></Content></DataSheet>");

/***/ }),

/***/ "./res/data/templates/ligmultident.ds":
/*!********************************************!*\
  !*** ./res/data/templates/ligmultident.ds ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DataSheet>\n<Summary>\n<Title>Multidentate Ligands</Title>\n<Description><![CDATA[]]></Description>\n</Summary>\n<Header nrows=\"5\" ncols=\"3\">\n<Column name=\"Molecule\" type=\"molecule\" id=\"1\">Molecular structure</Column>\n<Column name=\"Name\" type=\"string\" id=\"2\">Template name</Column>\n<Column name=\"Abbrev\" type=\"string\" id=\"3\">Optional abbreviation</Column>\n</Header>\n<Content>\n<Row id=\"1\">\n<Cell id=\"1\"><![CDATA[SketchEl!(9,12)\nX=3.7990,0.0000;0,0,i0,xARENE:2:1,xARENE:1:1\nC=5.6500,-0.1000;0,0,i1,xARENE:2:2\nC=5.1000,-2.3000;0,0,i1,xARENE:1:3\nC=5.6500,2.4000;0,0,i1,xARENE:2:3\nC=5.1000,0.2000;0,0,i1,xARENE:1:2\nC=7.0319,1.5176;0,0,i2\nC=7.5819,3.0176;0,0,i2\nC=7.5819,-1.0824;0,0,i2\nC=7.0319,-2.5824;0,0,i2\n2-4=2,0\n3-5=2,0\n5-6=1,0\n4-7=1,0\n2-8=1,0\n3-9=1,0\n6-7=1,0\n9-8=1,0\n1-3=0,0\n1-5=0,0\n1-4=0,0\n1-2=0,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[cyclooctadiene]]></Cell>\n<Cell id=\"3\"><![CDATA[COD]]></Cell>\n</Row>\n<Row id=\"2\">\n<Cell id=\"1\"><![CDATA[SketchEl!(8,12)\nX=3.7990,0.0000;0,0,i0,xARENE:2:1,xARENE:1:1\nC=5.8000,0.0500;0,0,i1\nC=7.1000,1.2500;0,0,i1\nC=4.7000,1.7651;0,0,i1,xARENE:1:2\nC=6.3000,2.4651;0,0,i1,xARENE:1:3\nC=5.5500,-2.0000;0,0,i1,xARENE:2:2\nC=6.8500,-0.8000;0,0,i1,xARENE:2:3\nC=8.5000,0.6500;0,0,i2\n2-4=1,0\n3-5=1,0\n2-6=1,0\n3-7=1,0\n6-7=2,0\n2-8=1,0\n8-3=1,0\n4-5=2,0\n1-4=0,0\n1-5=0,0\n1-6=0,0\n1-7=0,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[norbornadiene]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"3\">\n<Cell id=\"1\"><![CDATA[SketchEl!(6,10)\nC=0.2150,2.1200;0,0,i1,xARENE:1:2\nC=-1.0950,3.1700;0,0,i1,xARENE:1:4\nC=-0.1650,3.6300;0,0,i1,xARENE:1:3\nC=-0.1650,0.6100;0,0,i1,xARENE:1:6\nC=-1.0950,1.0700;0,0,i1,xARENE:1:5\nX=-2.2110,2.0800;0,0,i0,xARENE:1:1\n2-3=2,0\n3-1=1,0\n1-4=1,0\n4-5=2,0\n5-2=1,0\n6-1=1,0\n3-6=0,0\n4-6=0,0\n5-6=0,0\n2-6=0,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[cyclopentadienyl]]></Cell>\n<Cell id=\"3\"><![CDATA[Cp]]></Cell>\n</Row>\n<Row id=\"4\">\n<Cell id=\"1\"><![CDATA[SketchEl!(7,12)\nC=0.7490,6.7000;0,0,i1,xARENE:1:2\nC=0.2000,5.9500;0,0,i1,xARENE:1:3\nC=1.2981,6.0500;0,0,i1,xARENE:1:7\nC=0.2000,4.4500;0,0,i1,xARENE:1:4\nC=0.7490,3.7000;0,0,i1,xARENE:1:5\nC=1.2981,4.3500;0,0,i1,xARENE:1:6\nX=-1.3490,5.2000;0,0,i0,xARENE:1:1\n1-2=1,0\n1-3=2,0\n2-4=2,0\n4-5=1,0\n5-6=2,0\n6-3=1,0\n2-7=0,0\n4-7=0,0\n7-1=0,0\n7-5=0,0\n7-6=0,0\n7-3=0,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[arene]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"5\">\n<Cell id=\"1\"><![CDATA[SketchEl!(11,15)\nX=0.0000,0.0000;0,0,i0,xARENE:1:1\nC=2.9263,-0.0154;0,0,i0,xARENE:1:2\nC=1.5927,-1.0352;0,0,i0,xARENE:1:4\nC=2.5119,-1.5163;0,0,i0,xARENE:1:3\nC=2.5809,1.5029;0,0,i0,xARENE:1:6\nC=1.6407,1.0642;0,0,i0,xARENE:1:5\nC=3.7728,-0.0348;0,0,i3\nC=2.8692,2.9749;0,0,i3\nC=0.9137,2.3762;0,0,i3\nC=0.8354,-2.3300;0,0,i3\nC=2.7329,-3.0000;0,0,i3\n3-4=2,0\n4-2=1,0\n2-5=1,0\n5-6=2,0\n6-3=1,0\n1-2=1,0\n4-1=0,0\n5-1=0,0\n6-1=0,0\n3-1=0,0\n2-7=1,0\n5-8=1,0\n6-9=1,0\n3-10=1,0\n4-11=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[pentamethylcyclopentadienyl]]></Cell>\n<Cell id=\"3\"><![CDATA[Cp*]]></Cell>\n</Row>\n</Content>\n</DataSheet>\n");

/***/ }),

/***/ "./res/data/templates/ligtrident.ds":
/*!******************************************!*\
  !*** ./res/data/templates/ligtrident.ds ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DataSheet>\n<Summary>\n<Title>Tridentate Ligands</Title>\n<Description><![CDATA[]]></Description>\n</Summary>\n<Header nrows=\"3\" ncols=\"3\">\n<Column name=\"Molecule\" type=\"molecule\" id=\"1\">Molecular structure</Column>\n<Column name=\"Name\" type=\"string\" id=\"2\">Template name</Column>\n<Column name=\"Abbrev\" type=\"string\" id=\"3\">Optional abbreviation</Column>\n</Header>\n<Content>\n<Row id=\"1\">\n<Cell id=\"1\"><![CDATA[SketchEl!(19,23)\nC=2.9998,2.0011;0,0,i1\nC=4.4998,2.0011;0,0,i1\nC=2.2498,0.7021;0,0,i1\nC=5.2498,0.7021;0,0,i1\nC=4.4998,-0.5969;0,0,i0\nN=2.9998,-0.5969;0,0,i0\nC=5.2498,-1.8960;0,0,i0\nC=6.7498,-1.8960;0,0,i1\nN=4.4998,-3.1950;0,0,i0\nC=7.4998,-3.1950;0,0,i1\nC=6.7498,-4.4940;0,0,i1\nC=5.2498,-4.4940;0,0,i0\nC=4.4999,-5.7930;0,0,i0\nN=2.9999,-5.7930;0,0,i0\nC=5.2499,-7.0921;0,0,i1\nC=2.2498,-7.0921;0,0,i1\nC=2.9998,-8.3911;0,0,i1\nC=4.4998,-8.3912;0,0,i1\nX=1.4998,-3.1950;0,0,i0\n1-2=1,0\n1-3=2,0\n2-4=2,0\n4-5=1,0\n5-6=2,0\n6-3=1,0\n5-7=1,0\n7-8=1,0\n7-9=2,0\n8-10=2,0\n10-11=1,0\n11-12=2,0\n12-9=1,0\n12-13=1,0\n13-14=1,0\n13-15=2,0\n14-16=2,0\n16-17=1,0\n17-18=2,0\n18-15=1,0\n6-19=0,0\n9-19=0,0\n14-19=0,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[terpyridine]]></Cell>\n<Cell id=\"3\"><![CDATA[terpy]]></Cell>\n</Row>\n<Row id=\"2\">\n<Cell id=\"1\"><![CDATA[SketchEl!(4,5)\nX=-7.0728,1.0229;0,0,i0,xARENE:1:1\nC=-5.3624,2.3410;0,0,i2,xARENE:1:2\nC=-4.5676,1.0688;0,0,i1,xARENE:1:3\nC=-5.2718,-0.2556;0,0,i2,xARENE:1:4\n2-3=2,0\n3-4=1,0\n1-4=1,0\n1-3=0,0\n1-2=0,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[allyl]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"3\">\n<Cell id=\"1\"><![CDATA[SketchEl!(8,9)\nC=3.6861,-1.8600;0,0,i2\nN=2.1861,-1.8600;0,0,i2\nC=4.4361,-3.1590;0,0,i2\nN=3.6861,-4.4580;0,0,i1\nC=4.4361,-5.7571;0,0,i2\nC=3.6861,-7.0561;0,0,i2\nN=2.1862,-7.0561;0,0,i2\nX=0.6861,-4.4580;0,0,i0\n1-2=1,0\n1-3=1,0\n3-4=1,0\n5-4=1,0\n5-6=1,0\n6-7=1,0\n2-8=0,0\n4-8=0,0\n7-8=0,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[diethylaminetriamine]]></Cell>\n<Cell id=\"3\"><![CDATA[dien]]></Cell>\n</Row>\n</Content>\n</DataSheet>\n");

/***/ }),

/***/ "./res/data/templates/nonplrings.ds":
/*!******************************************!*\
  !*** ./res/data/templates/nonplrings.ds ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DataSheet>\n <Summary>\n  <Title>Non-planar Rings</Title>\n  <Description><![CDATA[]]></Description>\n </Summary>\n <Header nrows=\"12\" ncols=\"3\">\n  <Column name=\"Molecule\" type=\"molecule\" id=\"1\">Molecular structure</Column>\n  <Column name=\"Name\" type=\"string\" id=\"2\">Template name</Column>\n  <Column name=\"Abbrev\" type=\"string\" id=\"3\">Abbreviation code</Column>\n </Header>\n <Content>\n  <Row id=\"1\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(6,7)\nC=-6.0428,5.1152;0,0,i1\nC=-5.8360,7.2412;0,0,i2\nC=-4.9821,6.1759;0,0,i1\nC=-3.5332,5.7877;0,0,i2\nC=-4.3230,4.4890;0,0,i2\nC=-7.3398,5.1300;0,0,i2\n1-2=1,0\n2-3=1,0\n3-4=1,0\n1-5=1,0\n5-4=1,0\n1-6=1,0\n3-6=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[5-bridge-1]]></Cell>\n   <Cell id=\"3\"/>\n  </Row>\n  <Row id=\"2\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(7,8)\nC=-6.1000,5.0000;0,0,i2\nC=-4.8010,5.7500;0,0,i1\nC=-6.1000,3.5000;0,0,i2\nC=-4.8010,4.2500;0,0,i1\nC=-3.5019,5.0000;0,0,i2\nC=-3.5019,3.5000;0,0,i2\nC=-4.0510,6.8490;0,0,i2\n1-2=1,0\n1-3=1,0\n3-4=1,0\n2-5=1,0\n4-6=1,0\n6-5=1,0\n4-7=1,0\n2-7=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[6-bridge-1]]></Cell>\n   <Cell id=\"3\"/>\n  </Row>\n  <Row id=\"3\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(8,9)\nC=-6.1000,5.0000;0,0,i2\nC=-4.8010,5.7500;0,0,i1\nC=-6.1000,3.5000;0,0,i2\nC=-4.8010,4.2500;0,0,i1\nC=-3.5019,5.0000;0,0,i2\nC=-3.5019,3.5000;0,0,i2\nC=-4.5010,6.7990;0,0,i2\nC=-3.8510,5.7490;0,0,i2\n1-2=1,0\n1-3=1,0\n3-4=1,0\n2-5=1,0\n4-6=1,0\n6-5=1,0\n2-7=1,0\n4-8=1,0\n7-8=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[6-bridge-2]]></Cell>\n   <Cell id=\"3\"/>\n  </Row>\n  <Row id=\"4\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(8,9)\nC=-6.1177,3.0660;0,0,i2\nC=-5.3677,4.3650;0,0,i1\nC=-5.3677,1.7670;0,0,i2\nC=-4.6177,3.0660;0,0,i1\nC=-3.4177,4.2651;0,0,i2\nC=-3.6177,3.0660;0,0,i2\nC=-5.2677,5.6918;0,0,i2\nC=-2.3186,2.3160;0,0,i2\n1-2=1,0\n1-3=1,0\n3-4=1,0\n2-5=1,0\n4-6=1,0\n4-7=1,0\n2-7=1,0\n6-8=1,0\n8-5=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[7-bridge-1]]></Cell>\n   <Cell id=\"3\"/>\n  </Row>\n  <Row id=\"5\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(9,10)\nC=-6.1177,3.0660;0,0,i2\nC=-5.3677,4.3650;0,0,i1\nC=-5.3677,1.7670;0,0,i2\nC=-4.6177,3.0660;0,0,i1\nC=-3.4177,4.2651;0,0,i2\nC=-3.6177,3.0660;0,0,i2\nC=-5.6177,5.8418;0,0,i2\nC=-2.3186,2.3160;0,0,i2\nC=-4.9000,5.5000;0,0,i2\n1-2=1,0\n1-3=1,0\n3-4=1,0\n2-5=1,0\n4-6=1,0\n2-7=1,0\n6-8=1,0\n8-5=1,0\n4-9=1,0\n7-9=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[7-bridge-2]]></Cell>\n   <Cell id=\"3\"/>\n  </Row>\n  <Row id=\"6\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(9,10)\nC=-2.7481,2.7510;0,0,i2\nC=-1.4491,3.1510;0,0,i2\nC=-1.9981,4.0500;0,0,i2\nC=-0.1500,2.4010;0,0,i1\nC=-0.6991,3.3000;0,0,i1\nC=0.6000,4.0500;0,0,i2\nC=-0.4491,1.1500;0,0,i2\nC=0.3078,0.9726;0,0,i2\nC=-1.1922,-0.1265;0,0,i2\n1-2=1,0\n1-3=1,0\n2-4=1,0\n3-5=1,0\n6-5=1,0\n4-6=1,0\n5-7=1,0\n4-8=1,0\n8-9=1,0\n7-9=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[6-bridge-3]]></Cell>\n   <Cell id=\"3\"/>\n  </Row>\n  <Row id=\"7\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(10,11)\nC=-2.8297,-3.0097;0,0,i2\nC=-2.5266,-1.6847;0,0,i2\nC=-3.5797,-1.7107;0,0,i2\nC=-1.2275,-0.9347;0,0,i1\nC=-2.2806,-0.9607;0,0,i1\nC=-2.2806,0.5394;0,0,i2\nC=-0.2937,-1.8192;0,0,i2\nC=0.4384,-1.1524;0,0,i2\nC=0.4402,-3.1010;0,0,i2\nC=1.1902,-1.8019;0,0,i2\n1-2=1,0\n1-3=1,0\n2-4=1,0\n3-5=1,0\n6-5=1,0\n4-6=1,0\n5-7=1,0\n4-8=1,0\n7-9=1,0\n9-10=1,0\n10-8=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[7-bridge-3]]></Cell>\n   <Cell id=\"3\"/>\n  </Row>\n  <Row id=\"8\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(10,11)\nC=-5.9491,0.8000;0,0,i2\nC=-7.2481,0.0500;0,0,i2\nC=-7.2481,-1.4500;0,0,i2\nC=-5.9491,-2.2000;0,0,i2\nC=-4.6500,-1.4500;0,0,i1\nC=-4.6500,0.0500;0,0,i1\nC=-3.2287,0.5194;0,0,i2\nC=-2.3463,-0.6889;0,0,i2\nC=-3.2221,-1.9093;0,0,i2\nC=-3.9000,1.3490;0,0,i2\n2-3=1,0\n2-1=1,0\n3-4=1,0\n4-5=1,0\n6-1=1,0\n6-7=1,0\n7-8=1,0\n8-9=1,0\n9-5=1,0\n6-10=1,0\n5-10=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[9-bridge-1]]></Cell>\n   <Cell id=\"3\"/>\n  </Row>\n  <Row id=\"9\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(11,12)\nC=-4.9010,5.1000;0,0,i2\nC=-6.2000,4.3500;0,0,i2\nC=-6.2000,2.8500;0,0,i2\nC=-4.9010,2.1000;0,0,i2\nC=-3.6019,2.8500;0,0,i1\nC=-3.6019,4.3500;0,0,i1\nC=-2.3029,5.1000;0,0,i2\nC=-2.3029,2.1000;0,0,i2\nC=-1.0038,2.8500;0,0,i2\nC=-1.0038,4.3500;0,0,i2\nC=-2.8519,5.6490;0,0,i2\n2-3=1,0\n2-1=1,0\n3-4=1,0\n4-5=1,0\n6-1=1,0\n6-7=1,0\n5-8=1,0\n8-9=1,0\n9-10=1,0\n10-7=1,0\n6-11=1,0\n5-11=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[10-bridge-1]]></Cell>\n   <Cell id=\"3\"/>\n  </Row>\n  <Row id=\"10\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(12,13)\nC=-5.1991,3.1000;0,0,i2\nC=-6.4981,2.3500;0,0,i2\nC=-6.4981,0.8500;0,0,i2\nC=-5.1991,0.1000;0,0,i2\nC=-3.9000,0.8500;0,0,i1\nC=-3.9000,2.3500;0,0,i1\nC=-2.7265,3.2785;0,0,i2\nC=-2.7252,-0.0840;0,0,i2\nC=-1.2664,2.9421;0,0,i2\nC=-0.6227,1.5908;0,0,i2\nC=-1.2816,0.2423;0,0,i2\nC=-4.6500,3.6490;0,0,i2\n2-3=1,0\n2-1=1,0\n3-4=1,0\n4-5=1,0\n6-1=1,0\n5-8=1,0\n6-7=1,0\n9-7=1,0\n9-10=1,0\n10-11=1,0\n11-8=1,0\n6-12=1,0\n5-12=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[11-bridge-1]]></Cell>\n   <Cell id=\"3\"/>\n  </Row>\n  <Row id=\"11\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(8,12)\nC=-4.3500,3.6500;0,0,i1\nC=-4.3500,2.1500;0,0,i1\nC=-2.8500,2.1500;0,0,i1\nC=-2.8500,3.6500;0,0,i1\nC=-3.5510,4.2000;0,0,i1\nC=-2.0510,4.2000;0,0,i1\nC=-2.0510,2.7000;0,0,i1\nC=-3.5510,2.7000;0,0,i1\n1-2=1,0\n2-3=1,0\n3-4=1,0\n1-4=1,0\n1-5=1,0\n4-6=1,0\n3-7=1,0\n2-8=1,0\n8-5=1,0\n5-6=1,0\n6-7=1,0\n7-8=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[cubane]]></Cell>\n   <Cell id=\"3\"/>\n  </Row>\n  <Row id=\"12\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(10,12)\nC=-5.1000,-1.5490;0,0,i2\nC=-3.8010,-1.1490;0,0,i1\nC=-4.3500,-0.2500;0,0,i1\nC=-2.5019,-1.8990;0,0,i2\nC=-3.0510,-1.0000;0,0,i2\nC=-1.7519,-0.2500;0,0,i1\nC=-4.3500,1.2500;0,0,i2\nC=-3.8010,0.3510;0,0,i2\nC=-1.7519,1.2500;0,0,i2\nC=-3.0510,2.0000;0,0,i1\n1-2=1,0\n1-3=1,0\n2-4=1,0\n3-5=1,0\n6-5=1,0\n4-6=1,0\n3-7=1,0\n2-8=1,0\n6-9=1,0\n7-10=1,0\n9-10=1,0\n8-10=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[adamantane]]></Cell>\n   <Cell id=\"3\"/>\n  </Row>\n </Content>\n</DataSheet>\n");

/***/ }),

/***/ "./res/data/templates/protgrp.ds":
/*!***************************************!*\
  !*** ./res/data/templates/protgrp.ds ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DataSheet>\n<Summary>\n<Title>Functional Groups</Title>\n<Description><![CDATA[]]></Description>\n</Summary>\n<Header nrows=\"11\" ncols=\"3\">\n<Column name=\"Molecule\" type=\"molecule\" id=\"1\">Molecular structure</Column>\n<Column name=\"Name\" type=\"string\" id=\"2\">Template name</Column>\n<Column name=\"Abbrev\" type=\"string\" id=\"3\">Optional abbreviation</Column>\n</Header>\n<Content>\n<Row id=\"1\">\n<Cell id=\"1\"><![CDATA[SketchEl!(8,7)\nX=0.0000,0.0000;0,0,i0\nC=1.5000,0.0000;0,0,i0\nO=2.2500,1.2990;0,0,i0\nO=2.2500,-1.2990;0,0,i0\nC=3.7500,1.2990;0,0,i0\nC=5.2500,1.2990;0,0,i3\nC=3.7500,2.7990;0,0,i3\nC=3.7500,-0.2010;0,0,i3\n1-2=1,0\n2-3=1,0\n2-4=2,0\n3-5=1,0\n5-6=1,0\n5-7=1,0\n5-8=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"></Cell>\n<Cell id=\"3\"><![CDATA[Boc]]></Cell>\n</Row>\n<Row id=\"2\">\n<Cell id=\"1\"><![CDATA[SketchEl!(11,11)\nS=0.0000,0.0000;0,0,i0\nC=1.5000,0.0000;0,0,i0\nX=-1.5000,-0.0000;0,0,i0\nO=-0.0000,1.5000;0,0,i0\nO=0.0000,-1.5000;0,0,i0\nC=2.2500,-1.2990;0,0,i1\nC=3.7500,-1.2990;0,0,i1\nC=4.5000,-0.0000;0,0,i0\nC=3.7500,1.2990;0,0,i1\nC=2.2500,1.2990;0,0,i1\nC=6.0000,-0.0000;0,0,i3\n1-2=1,0\n1-3=1,0\n1-4=2,0\n1-5=2,0\n2-6=2,0\n6-7=1,0\n7-8=2,0\n8-9=1,0\n9-10=2,0\n10-2=1,0\n8-11=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"></Cell>\n<Cell id=\"3\"><![CDATA[Tos]]></Cell>\n</Row>\n<Row id=\"3\">\n<Cell id=\"1\"><![CDATA[SketchEl!(8,7)\nS=0.0000,0.0000;0,0,i0\nC=1.5000,0.0000;0,0,i0\nX=-1.5000,-0.0000;0,0,i0\nO=-0.0000,1.5000;0,0,i0\nO=0.0000,-1.5000;0,0,i0\nF=3.0000,-0.0000;0,0,i0\nF=1.5000,1.5000;0,0,i0\nF=1.5000,-1.5000;0,0,i0\n1-2=1,0\n1-3=1,0\n1-4=2,0\n1-5=2,0\n2-6=1,0\n2-7=1,0\n2-8=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"></Cell>\n<Cell id=\"3\"><![CDATA[Tf]]></Cell>\n</Row>\n<Row id=\"4\">\n<Cell id=\"1\"><![CDATA[SketchEl!(8,7)\nSi=0.0000,0.0000;0,0,i0\nC=1.5000,0.0000;0,0,i0\nX=-1.5000,-0.0000;0,0,i0\nPh=-0.0000,1.5000;0,0,i0,aSketchEl!(7\\002C7)\\000A*\\003D-6.5500\\002C1.6000\\003B0\\002C0\\002Ci0\\000AC\\003D-5.0500\\002C1.6000\\003B0\\002C0\\002Ci0\\000AC\\003D-4.3000\\002C2.8990\\003B0\\002C0\\002Ci1\\000AC\\003D-2.8000\\002C2.8990\\003B0\\002C0\\002Ci1\\000AC\\003D-4.3000\\002C0.3010\\003B0\\002C0\\002Ci1\\000AC\\003D-2.8000\\002C0.3010\\003B0\\002C0\\002Ci1\\000AC\\003D-2.0500\\002C1.6000\\003B0\\002C0\\002Ci1\\000A1-2\\003D1\\002C0\\000A3-2\\003D1\\002C0\\000A3-4\\003D2\\002C0\\000A2-5\\003D2\\002C0\\000A5-6\\003D1\\002C0\\000A6-7\\003D2\\002C0\\000A7-4\\003D1\\002C0\\000A!End\\000A\nPh=0.0000,-1.5000;0,0,i0,aSketchEl!(7\\002C7)\\000A*\\003D-6.5500\\002C1.6000\\003B0\\002C0\\002Ci0\\000AC\\003D-5.0500\\002C1.6000\\003B0\\002C0\\002Ci0\\000AC\\003D-4.3000\\002C2.8990\\003B0\\002C0\\002Ci1\\000AC\\003D-2.8000\\002C2.8990\\003B0\\002C0\\002Ci1\\000AC\\003D-4.3000\\002C0.3010\\003B0\\002C0\\002Ci1\\000AC\\003D-2.8000\\002C0.3010\\003B0\\002C0\\002Ci1\\000AC\\003D-2.0500\\002C1.6000\\003B0\\002C0\\002Ci1\\000A1-2\\003D1\\002C0\\000A3-2\\003D1\\002C0\\000A3-4\\003D2\\002C0\\000A2-5\\003D2\\002C0\\000A5-6\\003D1\\002C0\\000A6-7\\003D2\\002C0\\000A7-4\\003D1\\002C0\\000A!End\\000A\nC=3.0000,-0.0000;0,0,i3\nC=1.5000,1.5000;0,0,i3\nC=1.5000,-1.5000;0,0,i3\n1-2=1,0\n1-3=1,0\n1-4=1,0\n1-5=1,0\n2-6=1,0\n2-7=1,0\n2-8=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"></Cell>\n<Cell id=\"3\"><![CDATA[TBDPS]]></Cell>\n</Row>\n<Row id=\"5\">\n<Cell id=\"1\"><![CDATA[SketchEl!(8,7)\nSi=0.0000,0.0000;0,0,i0\nC=1.5000,0.0000;0,0,i0\nX=-1.5000,-0.0000;0,0,i0\nC=-0.0000,1.5000;0,0,i3\nC=0.0000,-1.5000;0,0,i3\nC=3.0000,-0.0000;0,0,i3\nC=1.5000,1.5000;0,0,i3\nC=1.5000,-1.5000;0,0,i3\n1-2=1,0\n1-3=1,0\n1-4=1,0\n1-5=1,0\n2-6=1,0\n2-7=1,0\n2-8=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"></Cell>\n<Cell id=\"3\"><![CDATA[TBDMS]]></Cell>\n</Row>\n<Row id=\"6\">\n<Cell id=\"1\"><![CDATA[SketchEl!(5,5)\nX=1.0000,0.0000;0,0,i0\nO=1.8817,-1.2135;0,0,i0\nC=3.3083,-0.7500;0,0,i2\nC=3.3083,0.7500;0,0,i2\nO=1.8817,1.2135;0,0,i0\n1-2=1,0\n2-3=1,0\n3-4=1,0\n4-5=1,0\n5-1=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"7\">\n<Cell id=\"1\"><![CDATA[SketchEl!(6,6)\nX=0.0000,0.0000;0,0,i0\nO=0.7500,-1.2990;0,0,i0\nC=2.2500,-1.2990;0,0,i2\nC=3.0000,0.0000;0,0,i2\nC=2.2500,1.2990;0,0,i2\nO=0.7500,1.2990;0,0,i0\n1-2=1,0\n2-3=1,0\n3-4=1,0\n4-5=1,0\n5-6=1,0\n6-1=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[1,3-dioxane]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"8\">\n<Cell id=\"1\"><![CDATA[SketchEl!(6,6)\nX=0.0000,0.0000;0,0,i0\nS=0.7500,-1.2990;0,0,i0\nC=2.2500,-1.2990;0,0,i2\nC=3.0000,0.0000;0,0,i2\nC=2.2500,1.2990;0,0,i2\nS=0.7500,1.2990;0,0,i0\n1-2=1,0\n2-3=1,0\n3-4=1,0\n4-5=1,0\n5-6=1,0\n6-1=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"><![CDATA[1,3-dithiane]]></Cell>\n<Cell id=\"3\"></Cell>\n</Row>\n<Row id=\"9\">\n<Cell id=\"1\"><![CDATA[SketchEl!(7,6)\nX=0.0000,0.0000;0,0,i0\nC=1.5000,0.0000;0,0,i0\nO=2.2500,1.2990;0,0,i0\nC=2.2500,-1.2990;0,0,i0\nC=3.0000,-2.5981;0,0,i3\nC=3.5490,-0.5490;0,0,i3\nC=0.9510,-2.0490;0,0,i3\n1-2=1,0\n2-3=2,0\n2-4=1,0\n4-5=1,0\n4-6=1,0\n4-7=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"></Cell>\n<Cell id=\"3\"><![CDATA[Piv]]></Cell>\n</Row>\n<Row id=\"10\">\n<Cell id=\"1\"><![CDATA[SketchEl!(11,11)\nC=8.5563,4.7294;0,0,i1\nC=9.8554,3.9794;0,0,i1\nC=9.8554,2.4794;0,0,i1\nC=8.5563,1.7294;0,0,i1\nC=7.2573,2.4794;0,0,i1\nC=7.2573,3.9794;0,0,i0\nC=5.9582,4.7294;0,0,i2\nO=4.6592,3.9794;0,0,i0\nC=3.3602,4.7294;0,0,i0\nX=2.0611,3.9794;0,0,i0\nO=3.3602,6.2294;0,0,i0\n1-2=2,0\n2-3=1,0\n3-4=2,0\n4-5=1,0\n5-6=2,0\n6-1=1,0\n6-7=1,0\n7-8=1,0\n8-9=1,0\n9-10=1,0\n9-11=2,0\n!End\n]]></Cell>\n<Cell id=\"2\"></Cell>\n<Cell id=\"3\"><![CDATA[Cbz]]></Cell>\n</Row>\n<Row id=\"11\">\n<Cell id=\"1\"><![CDATA[SketchEl!(18,20)\nC=7.2573,3.9794;0,0,i1\nC=5.9582,4.7294;0,0,i2\nO=4.6592,3.9794;0,0,i0\nC=3.3602,4.7294;0,0,i0\nX=2.0611,3.9794;0,0,i0\nO=3.3602,6.2294;0,0,i0\nC=7.4141,2.4876;0,0,i0\nC=8.8814,2.1758;0,0,i0\nC=9.6313,3.4748;0,0,i0\nC=8.6276,4.5895;0,0,i0\nC=11.0985,3.7867;0,0,i1\nC=11.5620,5.2133;0,0,i1\nC=10.5583,6.3280;0,0,i1\nC=9.0911,6.0161;0,0,i1\nC=6.4105,1.3729;0,0,i1\nC=6.8740,-0.0537;0,0,i1\nC=8.3412,-0.3655;0,0,i1\nC=9.3449,0.7492;0,0,i1\n1-2=1,0\n2-3=1,0\n3-4=1,0\n4-5=1,0\n4-6=2,0\n1-7=1,0\n7-8=2,0\n8-9=1,0\n9-10=2,0\n10-1=1,0\n9-11=1,0\n11-12=2,0\n12-13=1,0\n13-14=2,0\n14-10=1,0\n7-15=1,0\n15-16=2,0\n16-17=1,0\n17-18=2,0\n18-8=1,0\n!End\n]]></Cell>\n<Cell id=\"2\"></Cell>\n<Cell id=\"3\"><![CDATA[FMOC]]></Cell>\n</Row>\n</Content>\n</DataSheet>\n");

/***/ }),

/***/ "./res/data/templates/rings.ds":
/*!*************************************!*\
  !*** ./res/data/templates/rings.ds ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DataSheet>\n <Summary>\n  <Title>Small Rings</Title>\n  <Description><![CDATA[]]></Description>\n </Summary>\n <Header nrows=\"24\" ncols=\"3\">\n  <Column name=\"Molecule\" type=\"molecule\" id=\"1\">Molecular structure</Column>\n  <Column name=\"Name\" type=\"string\" id=\"2\">Template Name</Column>\n  <Column name=\"Abbrev\" type=\"string\" id=\"3\">Abbreviation Code</Column>\n </Header>\n <Content>\n  <Row id=\"1\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(3,3)\nC=1.7500,-6.1500;0,0,i2\nC=2.5000,-7.4490;0,0,i2\nC=1.0000,-7.4490;0,0,i2\n1-2=1,0\n1-3=1,0\n3-2=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[cyclopropane]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"2\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(4,4)\nC=3.6500,-0.9500;0,0,i2\nC=3.6500,-2.4500;0,0,i2\nC=5.1500,-2.4500;0,0,i2\nC=5.1500,-0.9500;0,0,i2\n1-2=1,0\n2-3=1,0\n3-4=1,0\n1-4=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[cyclobutane]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"3\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(5,5)\nC=0.7500,2.3100;0,0,i2\nC=-0.4600,1.4300;0,0,i2\nC=0.0000,0.0000;0,0,i2\nC=1.9600,1.4300;0,0,i2\nC=1.5000,0.0000;0,0,i2\n3-2=1,0\n2-1=1,0\n1-4=1,0\n4-5=1,0\n5-3=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[cyclopentane]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"4\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(5,5)\nC=4.3700,-7.8550;0,0,i2\nC=3.6200,-10.1650;0,0,i1\nC=3.1600,-8.7350;0,0,i1\nC=5.5800,-8.7350;0,0,i1\nC=5.1200,-10.1650;0,0,i1\n2-3=2,0\n3-1=1,0\n1-4=1,0\n4-5=2,0\n5-2=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[cyclopentadiene]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"5\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(6,6)\nC=3.9490,-2.3000;0,0,i2\nC=2.6500,-3.0500;0,0,i2\nC=2.6500,-4.5500;0,0,i2\nC=3.9490,-5.3000;0,0,i2\nC=5.2481,-4.5500;0,0,i2\nC=5.2481,-3.0500;0,0,i2\n2-3=1,0\n2-1=1,0\n3-4=1,0\n4-5=1,0\n5-6=1,0\n6-1=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[cyclohexane1]]></Cell>\n   <Cell id=\"3\"><![CDATA[Cy]]></Cell>\n  </Row>\n  <Row id=\"6\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(6,6)\nC=1.5000,-3.6500;0,0,i2\nC=2.7990,-3.2500;0,0,i2\nC=2.2500,-2.3510;0,0,i2\nC=4.0981,-4.0000;0,0,i2\nC=3.5490,-3.1010;0,0,i2\nC=4.8481,-2.3510;0,0,i2\n1-2=1,0\n1-3=1,0\n2-4=1,0\n3-5=1,0\n6-5=1,0\n4-6=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[cyclohexane2]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"7\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(6,6)\nC=-0.2500,-2.1490;0,0,i2\nC=0.6000,-1.2500;0,0,i2\nC=2.1500,-1.2500;0,0,i2\nC=3.0000,-2.1490;0,0,i2\nC=2.2500,-0.4990;0,0,i2\nC=0.4500,-0.4990;0,0,i2\n1-2=1,0\n3-2=1,0\n3-4=1,0\n4-5=1,0\n1-6=1,0\n6-5=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[cyclohexane3]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"8\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(6,6)\nC=6.1000,0.2500;0,0,i1\nC=4.8010,-0.5000;0,0,i1\nC=7.3990,-0.5000;0,0,i1\nC=4.8010,-2.0000;0,0,i1\nC=6.1000,-2.7500;0,0,i1\nC=7.3990,-2.0000;0,0,i1\n1-2=1,0\n1-3=2,0\n2-4=2,0\n4-5=1,0\n5-6=2,0\n6-3=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[benzene]]></Cell>\n   <Cell id=\"3\"><![CDATA[Ph]]></Cell>\n  </Row>\n  <Row id=\"9\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(7,7)\nC=0.7400,3.2800;0,0,i2\nC=0.0000,0.0000;0,0,i2\nC=-0.9400,1.1700;0,0,i2\nC=-0.6100,2.6300;0,0,i2\nC=2.0900,2.6300;0,0,i2\nC=2.4200,1.1700;0,0,i2\nC=1.4800,0.0000;0,0,i2\n3-2=1,0\n3-4=1,0\n4-1=1,0\n5-1=1,0\n5-6=1,0\n6-7=1,0\n7-2=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[cycloheptane]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"10\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(8,8)\nC=0.0000,3.6200;0,0,i2\nC=0.0000,0.0000;0,0,i2\nC=-1.0600,1.0600;0,0,i2\nC=-1.0600,2.5600;0,0,i2\nC=1.5000,3.6200;0,0,i2\nC=2.5600,2.5600;0,0,i2\nC=2.5600,1.0600;0,0,i2\nC=1.5000,0.0000;0,0,i2\n2-3=1,0\n3-4=1,0\n4-1=1,0\n1-5=1,0\n5-6=1,0\n6-7=1,0\n7-8=1,0\n8-2=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[cyclooctane]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"11\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(9,10)\nC=1.2510,-1.4500;0,0,i1\nC=-0.0481,-2.2000;0,0,i1\nC=2.5500,-2.2000;0,0,i0\nC=-0.0481,-3.7000;0,0,i1\nC=1.2510,-4.4500;0,0,i1\nC=2.5500,-3.7000;0,0,i0\nC=3.9713,-1.7306;0,0,i2\nC=4.8537,-2.9389;0,0,i2\nC=3.9779,-4.1593;0,0,i2\n1-2=1,0\n1-3=2,0\n2-4=2,0\n4-5=1,0\n5-6=2,0\n6-3=1,0\n3-7=1,0\n7-8=1,0\n8-9=1,0\n9-6=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[dihydroindene]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"12\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(10,11)\nC=2.5990,-2.5500;0,0,i1\nC=1.3000,-3.3000;0,0,i1\nC=1.3000,-4.8000;0,0,i1\nC=2.5990,-5.5500;0,0,i1\nC=3.8981,-4.8000;0,0,i0\nC=3.8981,-3.3000;0,0,i0\nC=5.1971,-2.5500;0,0,i1\nC=5.1971,-5.5500;0,0,i1\nC=6.4962,-4.8000;0,0,i1\nC=6.4962,-3.3000;0,0,i1\n2-3=2,0\n2-1=1,0\n3-4=1,0\n4-5=2,0\n5-6=1,0\n6-1=2,0\n7-6=1,0\n5-8=1,0\n8-9=2,0\n9-10=1,0\n10-7=2,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[napthalene]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"13\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(13,15)\nC=-0.1824,-4.7254;0,0,i1\nC=-1.2065,-5.8214;0,0,i1\nC=1.2788,-5.0643;0,0,i0\nC=-0.7693,-7.2563;0,0,i1\nC=0.6919,-7.5952;0,0,i1\nC=1.7160,-6.4992;0,0,i0\nC=2.5017,-4.2011;0,0,i2\nC=3.6979,-5.0997;0,0,i0\nC=3.2158,-6.5224;0,0,i0\nC=5.1689,-4.8063;0,0,i1\nC=6.1585,-5.9336;0,0,i1\nC=4.2061,-7.6477;0,0,i1\nC=5.6772,-7.3542;0,0,i1\n1-2=1,0\n1-3=2,0\n2-4=2,0\n4-5=1,0\n5-6=2,0\n6-3=1,0\n3-7=1,0\n7-8=1,0\n8-9=1,0\n9-6=1,0\n10-11=1,0\n10-8=2,0\n9-12=2,0\n12-13=1,0\n13-11=2,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[fluoroscene]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"14\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(14,16)\nC=2.5990,-2.5500;0,0,i1\nC=1.3000,-3.3000;0,0,i1\nC=1.3000,-4.8000;0,0,i1\nC=2.5990,-5.5500;0,0,i1\nC=3.8981,-4.8000;0,0,i0\nC=3.8981,-3.3000;0,0,i0\nC=5.1971,-2.5500;0,0,i1\nC=5.1971,-5.5500;0,0,i1\nC=6.4962,-4.8000;0,0,i0\nC=6.4962,-3.3000;0,0,i0\nC=7.7952,-2.5500;0,0,i1\nC=7.7952,-5.5500;0,0,i1\nC=9.0943,-4.8000;0,0,i1\nC=9.0943,-3.3000;0,0,i1\n2-3=1,0\n2-1=2,0\n3-4=2,0\n4-5=1,0\n5-6=2,0\n6-1=1,0\n7-6=1,0\n5-8=1,0\n8-9=2,0\n9-10=1,0\n10-7=2,0\n10-11=1,0\n9-12=1,0\n12-13=2,0\n13-14=1,0\n14-11=2,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[anthracene]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"15\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(14,16)\nC=5.4911,-0.2789;0,0,i1\nC=4.7411,-1.5780;0,0,i1\nC=6.9910,-0.2789;0,0,i1\nC=5.4910,-2.8770;0,0,i1\nC=6.9911,-2.8770;0,0,i0\nC=7.7411,-1.5780;0,0,i0\nC=9.2410,-1.5780;0,0,i0\nC=7.7410,-4.1760;0,0,i1\nC=9.2411,-4.1761;0,0,i1\nC=9.9911,-2.8770;0,0,i0\nC=9.9910,-0.2789;0,0,i1\nC=11.4911,-2.8770;0,0,i1\nC=12.2411,-1.5780;0,0,i1\nC=11.4911,-0.2790;0,0,i1\n1-2=1,0\n1-3=2,0\n2-4=2,0\n4-5=1,0\n5-6=2,0\n6-3=1,0\n7-6=1,0\n5-8=1,0\n8-9=2,0\n9-10=1,0\n10-7=2,0\n7-11=1,0\n10-12=1,0\n12-13=2,0\n13-14=1,0\n14-11=2,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[phenanthrene]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"16\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(5,5)\nN=3.3300,-1.7050;0,0,i1\nC=2.5800,-4.0150;0,0,i2\nC=2.1200,-2.5850;0,0,i2\nC=4.5400,-2.5850;0,0,i2\nC=4.0800,-4.0150;0,0,i2\n2-3=1,0\n3-1=1,0\n1-4=1,0\n4-5=1,0\n5-2=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[pyrrolidine]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"17\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(5,5)\nC=1.3200,-2.2350;0,0,i2\nC=1.7800,-3.6650;0,0,i2\nO=2.5300,-1.3550;0,0,i0\nC=3.7400,-2.2350;0,0,i2\nC=3.2800,-3.6650;0,0,i2\n2-1=1,0\n1-3=1,0\n3-4=1,0\n4-5=1,0\n5-2=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[tetrahydrofuran]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"18\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(5,5)\nC=1.3200,-2.2350;0,0,i1\nC=1.7800,-3.6650;0,0,i1\nO=2.5300,-1.3550;0,0,i0\nC=3.7400,-2.2350;0,0,i1\nC=3.2800,-3.6650;0,0,i1\n2-1=2,0\n1-3=1,0\n3-4=1,0\n4-5=2,0\n5-2=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[furan]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"19\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(5,5)\nC=1.3200,-2.2350;0,0,i1\nC=1.7800,-3.6650;0,0,i1\nS=2.5300,-1.3550;0,0,i0\nC=3.7400,-2.2350;0,0,i1\nC=3.2800,-3.6650;0,0,i1\n2-1=2,0\n1-3=1,0\n3-4=1,0\n4-5=2,0\n5-2=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[thiofuran]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"20\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(6,6)\nC=1.6000,-3.0000;0,0,i1\nN=2.8990,-2.2500;0,0,i0\nC=4.1981,-3.0000;0,0,i1\nC=1.6000,-4.5000;0,0,i1\nC=2.8990,-5.2500;0,0,i1\nC=4.1981,-4.5000;0,0,i1\n2-1=1,0\n2-3=2,0\n1-4=2,0\n4-5=1,0\n5-6=2,0\n6-3=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[pyridine]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"21\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(6,6)\nC=0.7019,-2.1000;0,0,i2\nC=0.7019,-3.6000;0,0,i2\nO=2.0009,-1.3500;0,0,i0\nO=2.0009,-4.3500;0,0,i0\nC=3.3000,-3.6000;0,0,i2\nC=3.3000,-2.1000;0,0,i2\n1-2=1,0\n1-3=1,0\n2-4=1,0\n4-5=1,0\n5-6=1,0\n6-3=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[dioxane]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"22\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(6,6)\nC=2.1519,-2.1000;0,0,i2\nC=2.1519,-3.6000;0,0,i2\nO=3.4509,-1.3500;0,0,i0\nN=3.4509,-4.3500;0,0,i1\nC=4.7500,-3.6000;0,0,i2\nC=4.7500,-2.1000;0,0,i2\n1-2=1,0\n1-3=1,0\n2-4=1,0\n4-5=1,0\n5-6=1,0\n6-3=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[morpholine]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"23\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(6,6)\nN=2.6490,-2.3000;0,0,i1\nC=1.3500,-3.0500;0,0,i2\nC=1.3500,-4.5500;0,0,i2\nC=2.6490,-5.3000;0,0,i2\nC=3.9481,-4.5500;0,0,i2\nC=3.9481,-3.0500;0,0,i2\n2-3=1,0\n2-1=1,0\n3-4=1,0\n4-5=1,0\n5-6=1,0\n6-1=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[piperidine]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"24\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(6,6)\nC=1.3500,-3.0500;0,0,i2\nC=1.3500,-4.5500;0,0,i2\nO=2.6490,-2.3000;0,0,i0\nC=2.6490,-5.3000;0,0,i2\nC=3.9481,-4.5500;0,0,i2\nC=3.9481,-3.0500;0,0,i2\n1-2=1,0\n1-3=1,0\n2-4=1,0\n4-5=1,0\n5-6=1,0\n6-3=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[pyran]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n </Content>\n</DataSheet>\n");

/***/ }),

/***/ "./res/data/templates/saccharides.ds":
/*!*******************************************!*\
  !*** ./res/data/templates/saccharides.ds ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DataSheet>\n <Summary>\n  <Title>Saccharides</Title>\n  <Description><![CDATA[]]></Description>\n </Summary>\n <Header nrows=\"7\" ncols=\"3\">\n  <Column name=\"Molecule\" type=\"molecule\" id=\"1\">Molecular structure</Column>\n  <Column name=\"Name\" type=\"string\" id=\"2\">Template name</Column>\n  <Column name=\"Abbrev\" type=\"string\" id=\"3\">Abbreviation code</Column>\n </Header>\n <Content>\n  <Row id=\"1\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(12,12)\nC=1.0000,0.5911;0,0,i1\nC=2.2990,0.1911;0,0,i1\nC=1.7500,-0.7078;0,0,i1\nO=3.5981,0.9411;0,0,i0\nC=3.0490,0.0421;0,0,i1\nC=4.3481,-0.7078;0,0,i1\nO=-0.2797,-0.1912;0,0,i1\nO=0.2727,-0.9682;0,0,i1\nC=1.4079,1.3978;0,0,i2\nO=2.0074,2.7728;0,0,i1\nO=3.4372,-1.4066;0,0,i1\nO=4.5368,-2.1958;0,0,i1\n1-2=1,0\n1-3=1,0\n2-4=1,0\n3-5=1,0\n6-5=1,0\n4-6=1,0\n1-7=1,0\n3-8=1,0\n2-9=1,0\n9-10=1,0\n5-11=1,0\n6-12=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[glucose alpha]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"2\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(12,12)\nC=1.0000,0.5910;0,0,i1\nC=2.2990,0.1911;0,0,i1\nC=1.7500,-0.7077;0,0,i1\nO=3.5980,0.9411;0,0,i0\nC=3.0490,0.0421;0,0,i1\nC=4.3481,-0.7077;0,0,i1\nO=-0.2797,-0.1912;0,0,i1\nO=0.2727,-0.9682;0,0,i1\nC=1.4078,1.3977;0,0,i2\nO=2.0074,2.7727;0,0,i1\nO=3.4372,-1.4065;0,0,i1\nO=5.6169,0.0920;0,0,i1\n1-2=1,0\n1-3=1,0\n2-4=1,0\n3-5=1,0\n6-5=1,0\n4-6=1,0\n1-7=1,0\n3-8=1,0\n2-9=1,0\n9-10=1,0\n5-11=1,0\n6-12=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[glucose beta]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"3\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(16,15)\nC=1.5000,0.0000;0,0,i0\nC=1.4999,1.5000;0,0,i1\nC=1.4999,-1.5000;0,0,i0\nO=3.0000,0.0000;0,0,i1\nH=0.0000,0.0000;0,0,i0\nC=1.4999,-3.0000;0,0,i0\nH=2.9999,-1.5000;0,0,i0\nO=-0.0000,-1.4999;0,0,i1\nC=1.4999,-4.5000;0,0,i0\nO=2.9999,-3.0000;0,0,i1\nH=-0.0000,-2.9999;0,0,i0\nC=1.4999,-6.0000;0,0,i2\nO=2.9999,-4.5000;0,0,i1\nH=-0.0000,-4.5000;0,0,i0\nO=2.7990,-6.7500;0,0,i1\nO=0.2009,2.2499;0,0,i0\n1-2=1,0\n1-3=1,0\n1-4=1,0\n1-5=1,0\n3-6=1,0\n3-7=1,0\n3-8=1,0\n6-9=1,0\n6-10=1,0\n6-11=1,0\n9-12=1,0\n9-13=1,0\n9-14=1,0\n12-15=1,0\n2-16=2,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[glucose chain]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"4\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(12,12)\nC=1.3913,1.2718;0,0,i1\nC=0.4839,-0.0000;0,0,i1\nC=1.3913,-1.2718;0,0,i1\nC=3.2063,-1.2718;0,0,i1\nC=4.1139,0.0000;0,0,i1\nO=3.2063,1.2718;0,0,i0\nC=1.3912,2.7718;0,0,i2\nO=4.1139,-1.4998;0,0,i1\nO=3.2128,-2.7718;0,0,i1\nO=1.3717,0.2280;0,0,i1\nO=0.4839,-1.5000;0,0,i1\nO=0.0922,3.5218;0,0,i1\n2-3=1,0\n2-1=1,0\n3-4=1,0\n4-5=1,0\n5-6=1,0\n6-1=1,0\n1-7=1,1\n5-8=1,2\n4-9=1,2\n3-10=1,1\n2-11=1,2\n7-12=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[glucose alpha]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"5\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(12,12)\nC=1.3912,1.2718;0,0,i1\nC=0.4839,-0.0000;0,0,i1\nC=1.3912,-1.2718;0,0,i1\nC=3.2063,-1.2718;0,0,i1\nC=4.1139,0.0000;0,0,i1\nO=3.2063,1.2718;0,0,i0\nC=1.3911,2.7718;0,0,i2\nO=4.1139,1.4997;0,0,i1\nO=3.2128,-2.7718;0,0,i1\nO=1.3717,0.2280;0,0,i1\nO=0.4839,-1.5000;0,0,i1\nO=0.0922,3.5218;0,0,i1\n2-3=1,0\n2-1=1,0\n3-4=1,0\n4-5=1,0\n5-6=1,0\n6-1=1,0\n1-7=1,1\n5-8=1,1\n4-9=1,2\n3-10=1,1\n2-11=1,2\n7-12=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[glucose beta]]></Cell>\n   <Cell id=\"3\"><![CDATA[]]></Cell>\n  </Row>\n  <Row id=\"6\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(12,12)\nO=2.2100,1.1549;0,0,i0\nC=1.0000,0.2749;0,0,i0\nC=1.4600,-1.1549;0,0,i1\nC=3.4200,0.2749;0,0,i1\nC=2.9600,-1.1549;0,0,i1\nO=3.8434,-2.3672;0,0,i1\nC=4.8460,0.7402;0,0,i2\nO=5.1561,2.2078;0,0,i1\nC=-0.4260,0.7402;0,0,i2\nO=-1.5419,-0.2621;0,0,i1\nO=0.7658,1.7566;0,0,i1\nO=0.5765,-2.3672;0,0,i1\n3-2=1,0\n2-1=1,0\n1-4=1,0\n4-5=1,0\n5-3=1,0\n5-6=1,1\n4-7=1,2\n7-8=1,0\n2-9=1,2\n9-10=1,0\n2-11=1,1\n3-12=1,2\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[fructose alpha]]></Cell>\n   <Cell id=\"3\"/>\n  </Row>\n  <Row id=\"7\">\n   <Cell id=\"1\"><![CDATA[SketchEl!(12,12)\nO=2.2100,1.1549;0,0,i0\nC=1.0000,0.2749;0,0,i0\nC=1.4600,-1.1549;0,0,i1\nC=3.4200,0.2749;0,0,i1\nC=2.9600,-1.1549;0,0,i1\nO=3.8434,-2.3672;0,0,i1\nC=4.8460,0.7402;0,0,i2\nO=5.1561,2.2078;0,0,i1\nO=-0.4260,0.7402;0,0,i1\nC=0.7658,1.7566;0,0,i2\nO=0.5765,-2.3672;0,0,i1\nO=-0.6344,2.2946;0,0,i1\n3-2=1,0\n2-1=1,0\n1-4=1,0\n4-5=1,0\n5-3=1,0\n5-6=1,1\n4-7=1,2\n7-8=1,0\n2-9=1,2\n2-10=1,1\n3-11=1,2\n10-12=1,0\n!End\n]]></Cell>\n   <Cell id=\"2\"><![CDATA[fructose beta]]></Cell>\n   <Cell id=\"3\"/>\n  </Row>\n </Content>\n</DataSheet>\n");

/***/ }),

/***/ "./res/data/templates/termgrp.ds":
/*!***************************************!*\
  !*** ./res/data/templates/termgrp.ds ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<DataSheet><Summary><Title>Terminal Groups</Title><Description><![CDATA[]]></Description></Summary><Extension/><Header nrows=\"11\" ncols=\"3\"><Column id=\"1\" name=\"Molecule\" type=\"molecule\">Molecular structure</Column><Column id=\"2\" name=\"Name\" type=\"string\">Template name</Column><Column id=\"3\" name=\"Abbrev\" type=\"string\">Optional abbreviation</Column></Header><Content><Row id=\"1\"><Cell id=\"1\"><![CDATA[SketchEl!(3,2)\nX=-0.6500,-1.4000;0,0,i0\nC=0.6490,-0.6500;0,0,i2\nC=1.9481,-1.4000;0,0,i3\n1-2=1,0\n2-3=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[ethyl]]></Cell><Cell id=\"3\"><![CDATA[Et]]></Cell></Row><Row id=\"2\"><Cell id=\"1\"><![CDATA[SketchEl!(4,3)\nC=-5.1000,3.4000;0,0,i2\nC=-3.8010,4.1500;0,0,i2\nC=-2.5019,3.4000;0,0,i3\nX=-6.3990,4.1500;0,0,i0\n1-2=1,0\n2-3=1,0\n1-4=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[n-propyl]]></Cell><Cell id=\"3\"><![CDATA[Pr]]></Cell></Row><Row id=\"3\"><Cell id=\"1\"><![CDATA[SketchEl!(4,3)\nC=-4.9450,2.0214;0,0,i1\nC=-4.1950,3.3204;0,0,i3\nC=-4.1950,0.7224;0,0,i3\nX=-6.4450,2.0214;0,0,i0\n1-2=1,0\n1-3=1,0\n1-4=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[i-propyl]]></Cell><Cell id=\"3\"><![CDATA[{^i}Pr]]></Cell></Row><Row id=\"4\"><Cell id=\"1\"><![CDATA[SketchEl!(5,4)\nC=-4.6500,2.9000;0,0,i2\nC=-3.3510,3.6500;0,0,i2\nC=-2.0519,2.9000;0,0,i2\nC=-0.7529,3.6500;0,0,i3\nX=-5.9490,3.6500;0,0,i0\n1-2=1,0\n2-3=1,0\n3-4=1,0\n1-5=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[n-butyl]]></Cell><Cell id=\"3\"><![CDATA[Bu]]></Cell></Row><Row id=\"5\"><Cell id=\"1\"><![CDATA[SketchEl!(5,4)\nC=-3.2000,0.9000;0,0,i0\nC=-3.2000,2.4000;0,0,i3\nC=-3.2000,-0.6000;0,0,i3\nC=-1.7000,0.9000;0,0,i3\nX=-4.7000,0.9000;0,0,i0\n1-2=1,0\n1-3=1,0\n1-4=1,0\n1-5=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[t-butyl]]></Cell><Cell id=\"3\"><![CDATA[{^t}Bu]]></Cell></Row><Row id=\"6\"><Cell id=\"1\"><![CDATA[SketchEl!(3,2)\nX=-7.4188,-4.7944;0,0,i0\nO=-6.1198,-4.0444;0,0,i0\nC=-4.8207,-4.7944;0,0,i3\n1-2=1,0\n2-3=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[methoxy]]></Cell><Cell id=\"3\"><![CDATA[O|Me]]></Cell></Row><Row id=\"7\"><Cell id=\"1\"><![CDATA[SketchEl!(4,3)\nX=-7.4188,-4.7944;0,0,i0\nO=-6.1198,-4.0444;0,0,i0\nC=-4.8207,-4.7944;0,0,i2\nC=-3.5217,-4.0444;0,0,i3\n1-2=1,0\n2-3=1,0\n3-4=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[ethoxy]]></Cell><Cell id=\"3\"><![CDATA[O|Et]]></Cell></Row><Row id=\"8\"><Cell id=\"1\"><![CDATA[SketchEl!(7,7)\nX=-6.5500,1.6000;0,0,i0\nC=-5.0500,1.6000;0,0,i0\nC=-4.3000,2.8990;0,0,i1\nC=-2.8000,2.8990;0,0,i1\nC=-4.3000,0.3010;0,0,i1\nC=-2.8000,0.3010;0,0,i1\nC=-2.0500,1.6000;0,0,i1\n1-2=1,0\n3-2=1,0\n3-4=2,0\n2-5=2,0\n5-6=1,0\n6-7=2,0\n7-4=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[phenyl]]></Cell><Cell id=\"3\"><![CDATA[Ph]]></Cell></Row><Row id=\"9\"><Cell id=\"1\"><![CDATA[SketchEl!(7,7)\nX=-6.5500,1.6000;0,0,i0\nC=-5.0500,1.6000;0,0,i1\nC=-4.3000,2.8990;0,0,i2\nC=-2.8000,2.8990;0,0,i2\nC=-4.3000,0.3010;0,0,i2\nC=-2.8000,0.3010;0,0,i2\nC=-2.0500,1.6000;0,0,i2\n1-2=1,0\n3-2=1,0\n3-4=1,0\n2-5=1,0\n5-6=1,0\n6-7=1,0\n7-4=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[cyclopentyl]]></Cell><Cell id=\"3\"><![CDATA[Cy]]></Cell></Row><Row id=\"10\"><Cell id=\"1\"><![CDATA[SketchEl!(8,8)\nX=0.0500,2.9500;0,0,i0\nC=1.3490,3.7000;0,0,i2\nC=2.6481,2.9500;0,0,i0\nC=2.6481,1.4500;0,0,i1\nC=3.9471,3.7000;0,0,i1\nC=3.9471,0.7000;0,0,i1\nC=5.2461,1.4500;0,0,i1\nC=5.2461,2.9500;0,0,i1\n1-2=1,0\n2-3=1,0\n3-4=1,0\n3-5=2,0\n4-6=2,0\n6-7=1,0\n7-8=2,0\n8-5=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[benzyl]]></Cell><Cell id=\"3\"><![CDATA[Bz]]></Cell></Row><Row id=\"11\"><Cell id=\"1\"><![CDATA[SketchEl!(10,10)\nX=-1.6000,1.6571;0,0,i0\nC=-0.1000,1.6571;0,0,i0\nC=0.6500,0.3581;0,0,i0\nC=0.6500,2.9561;0,0,i0\nC=2.1500,0.3581;0,0,i1\nC=2.9000,1.6571;0,0,i0\nC=2.1500,2.9561;0,0,i1\nC=-0.1000,4.2551;0,0,i3\nC=4.4000,1.6571;0,0,i3\nC=-0.1000,-0.9409;0,0,i3\n1-2=1,0\n2-3=1,0\n2-4=2,0\n3-5=2,0\n5-6=1,0\n6-7=2,0\n7-4=1,0\n4-8=1,0\n6-9=1,0\n3-10=1,0\n!End\n]]></Cell><Cell id=\"2\"><![CDATA[mesityl]]></Cell><Cell id=\"3\"><![CDATA[Mes]]></Cell></Row></Content></DataSheet>");

/***/ }),

/***/ "./res/img/actions/AtomAbbrev.svg":
/*!****************************************!*\
  !*** ./res/img/actions/AtomAbbrev.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r\"\n   version=\"1.0\"\n   sodipodi:docname=\"AtomAbbrev.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomElement.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"206.12564\"\n     inkscape:cy=\"215.40039\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"458\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:0;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:8.13591309;stroke-opacity:1\"\n       id=\"path3960\"\n       sodipodi:cx=\"159.28572\"\n       sodipodi:cy=\"158.92857\"\n       sodipodi:rx=\"159.28572\"\n       sodipodi:ry=\"158.92857\"\n       d=\"M 318.57144 158.92857 A 159.28572 158.92857 0 1 1  0,158.92857 A 159.28572 158.92857 0 1 1  318.57144 158.92857 z\"\n       transform=\"matrix(0.9738456,0,0,0.9782812,4.8803045,5.5945903)\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 160,0 L 160,320\"\n       id=\"path3962\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 0,160 L 320,160\"\n       id=\"path3964\" />\n    <g\n       style=\"font-size:80px\"\n       id=\"text3966\">\n      <path\n         d=\"m 70,181.11523 13.227539,0 16.743164,44.64844 16.831057,-44.64844 13.22754,0 0,65.61036 -8.65723,0 0,-57.61231 -16.91894,45 -8.920903,0 -16.918946,-45 0,57.61231 -8.613281,0 0,-65.61036 z\"\n         style=\"font-size:90px\"\n         id=\"path7008\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3970\">\n      <path\n         d=\"m 109.11328,107.96387 q 2.85645,0.96679 5.53711,4.13086 2.72461,3.16406 5.44922,8.70117 l 9.00879,17.92969 -9.53613,0 -8.39356,-16.83106 q -3.25195,-6.5918 -6.32812,-8.74512 -3.03223,-2.15332 -8.305668,-2.15332 l -9.667969,0 0,27.7295 -8.876953,0 0,-65.610356 20.039062,0 q 11.249998,0 16.787108,4.702149 5.53711,4.702148 5.53711,14.194336 0,6.196289 -2.90039,10.283201 -2.85644,4.08692 -8.34961,5.66895 z m -22.236327,-27.553714 0,23.291014 11.162109,0 q 6.416018,0 9.667968,-2.94433 3.2959,-2.988285 3.2959,-8.745121 0,-5.756836 -3.2959,-8.657227 -3.25195,-2.944336 -9.667968,-2.944336 l -11.162109,0 z\"\n         style=\"font-size:90px\"\n         id=\"path7017\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3974\">\n      <path\n         d=\"m 191.65039,72 9.53613,0 16.30371,24.389648 L 233.88184,72 l 9.53613,0 -21.09375,31.50879 22.5,34.10156 -9.53613,0 -18.45704,-27.90527 -18.58886,27.90527 -9.58008,0 23.42285,-35.02441 L 191.65039,72 Z\"\n         style=\"font-size:90px\"\n         id=\"path7014\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3978\">\n      <path\n         d=\"m 200,180.38965 8.87695,0 0,58.13965 31.94825,0 0,7.4707 -40.8252,0 0,-65.61035 z\"\n         style=\"font-size:90px\"\n         id=\"path7011\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/AtomClearAbbrev.svg":
/*!*********************************************!*\
  !*** ./res/img/actions/AtomClearAbbrev.svg ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r\"\n   version=\"1.0\"\n   sodipodi:docname=\"AtomClearAbbrev.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/iMMDS/res/actions/GenericBack.png\"\n   inkscape:export-xdpi=\"12.375\"\n   inkscape:export-ydpi=\"12.375\">\n  <defs\n     id=\"defs4\">\n    <linearGradient\n       id=\"linearGradient3690\">\n      <stop\n         style=\"stop-color:#ffffff;stop-opacity:0.75294119;\"\n         offset=\"0\"\n         id=\"stop3692\" />\n      <stop\n         style=\"stop-color:#ffffff;stop-opacity:0.25098041;\"\n         offset=\"1\"\n         id=\"stop3694\" />\n    </linearGradient>\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective2906\" />\n    <linearGradient\n       id=\"linearGradient3136\">\n      <stop\n         style=\"stop-color:#b2a5a5;stop-opacity:0.50196081;\"\n         offset=\"0\"\n         id=\"stop3138\" />\n      <stop\n         style=\"stop-color:#000000;stop-opacity:0.19607843;\"\n         offset=\"1\"\n         id=\"stop3140\" />\n    </linearGradient>\n    <linearGradient\n       id=\"linearGradient3204\">\n      <stop\n         style=\"stop-color:#ffffff;stop-opacity:1;\"\n         offset=\"0\"\n         id=\"stop3206\" />\n      <stop\n         id=\"stop3212\"\n         offset=\"1\"\n         style=\"stop-color:#000000;stop-opacity:0.29591838;\" />\n    </linearGradient>\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3136\"\n       id=\"linearGradient3142\"\n       x1=\"301.78571\"\n       y1=\"158.57143\"\n       x2=\"6.0714264\"\n       y2=\"158.57143\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.8629045,0,0,0.8712017,23.773609,21.988053)\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3690\"\n       id=\"radialGradient3696\"\n       cx=\"140\"\n       cy=\"140\"\n       fx=\"140\"\n       fy=\"140\"\n       r=\"142.5\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3690\"\n       id=\"radialGradient3704\"\n       gradientUnits=\"userSpaceOnUse\"\n       cx=\"140\"\n       cy=\"140\"\n       fx=\"140\"\n       fy=\"140\"\n       r=\"142.5\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#00faff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.98125\"\n     inkscape:cx=\"80.025296\"\n     inkscape:cy=\"157.96178\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1920\"\n     inkscape:window-height=\"1028\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\"\n     inkscape:snap-global=\"true\"\n     inkscape:snap-bbox=\"true\"\n     inkscape:object-nodes=\"true\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2908\"\n       empspacing=\"5\"\n       visible=\"true\"\n       enabled=\"true\"\n       snapvisiblegridlinesonly=\"true\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       style=\"font-style:normal;font-variant:normal;font-weight:bold;font-stretch:condensed;font-size:124.49204254px;font-family:'Arial Narrow';-inkscape-font-specification:'Arial Narrow Bold Condensed';fill:#000000;fill-opacity:1;stroke:none\"\n       id=\"text2912\">\n      <path\n         d=\"m 136.41046,198 -6.20029,-21.88337 -26.74634,0 L 97.263545,198 l -14.710486,0 25.591381,-85.64907 17.32433,0 25.5306,85.64907 -14.58891,0 z m -16.41253,-59.9969 q 0,0 -1.21574,-4.31588 -0.54709,-2.12755 -0.9726,-3.89038 l -0.72944,-2.97857 q -0.24315,-1.15495 -0.24315,-1.27653 -0.0608,0.18236 -0.30393,1.33732 -0.24315,1.15495 -0.66866,2.91778 -0.42551,1.76283 -0.9726,3.89038 l -1.21574,4.31588 -6.92973,24.61879 20.18132,0 -6.92973,-24.61879 z\"\n         style=\"\"\n         id=\"path4716\" />\n      <path\n         d=\"m 211.84729,164.87101 q 0,7.47682 -1.21575,13.79868 -1.21574,6.26108 -3.7688,10.8809 -2.55306,4.55903 -6.50422,7.11209 -3.89038,2.55306 -9.17886,2.55306 -2.3707,0 -4.80218,-0.60787 -2.3707,-0.60787 -4.55904,-2.00597 -2.12754,-1.39811 -3.95116,-3.64723 -1.76283,-2.24913 -3.03936,-5.53163 l -0.12157,0 q 0,1.27653 -0.0608,2.91778 -0.0608,1.64125 -0.18236,3.22172 -0.12157,1.51968 -0.24315,2.73542 -0.12157,1.21574 -0.18236,1.70204 l -13.61631,0 q 0.12157,-2.12755 0.24314,-6.01793 0.12158,-3.95116 0.12158,-8.99649 l 0,-75.19368 14.04182,0 0,25.16587 q 0,1.94519 -0.0608,3.82959 0,1.82361 -0.0608,3.40408 -0.0608,1.82361 -0.12157,3.46487 l 0.24314,0 q 2.55306,-6.80816 6.99052,-9.72595 4.43747,-2.91778 10.27303,-2.91778 5.16691,0 8.87492,2.55306 3.7688,2.49227 6.1395,7.05131 2.43149,4.49825 3.58644,10.69853 1.15496,6.20029 1.15496,13.55553 z m -14.58891,0 q 0,-11.18483 -2.73542,-16.59488 -2.67464,-5.41006 -8.26705,-5.41006 -2.12755,0 -4.2551,1.03338 -2.12755,1.03339 -3.76881,3.64723 -1.64125,2.55306 -2.67463,6.92973 -0.97259,4.31589 -0.97259,10.94169 0,6.44343 0.97259,10.69853 1.03338,4.2551 2.61385,6.80816 1.64125,2.55306 3.70801,3.58644 2.12755,1.03338 4.2551,1.03338 5.34927,0 8.20626,-5.34926 2.91779,-5.41006 2.91779,-17.32434 z\"\n         style=\"\"\n         id=\"path4718\" />\n      <path\n         d=\"m 252.57467,198 -16.71646,0 -19.26952,-65.77167 14.77127,0 9.42201,36.77621 q 0,0 0.9118,3.82959 0.54709,2.06676 0.9726,4.07274 l 0.9118,3.89037 q 0.42551,1.8844 0.72945,3.40408 0.30393,-1.45889 0.79023,-3.34329 l 0.91181,-3.82959 1.03338,-4.01195 0.97259,-3.82959 9.84752,-36.95857 14.6497,0 L 252.57467,198 Z\"\n         style=\"\"\n         id=\"path4720\" />\n    </g>\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:url(#radialGradient3704);fill-opacity:1;stroke:#000000;stroke-width:10.24196363;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       id=\"path2910\"\n       sodipodi:cx=\"140\"\n       sodipodi:cy=\"140\"\n       sodipodi:rx=\"140\"\n       sodipodi:ry=\"140\"\n       d=\"m 280,140 a 140,140 0 1 1 -280,0 140,140 0 1 1 280,0 z\"\n       transform=\"matrix(0.97637527,0,0,0.97637527,39.246505,23.488986)\" />\n    <path\n       style=\"color:#000000;fill:#ff0000;fill-opacity:1;fill-rule:nonzero;stroke:#000000;stroke-width:17.34259796;stroke-linecap:square;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate\"\n       d=\"m 8.105653,160.47283 23.562761,0\"\n       id=\"path2916\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 80,255 265,55\"\n       id=\"path4714\"\n       inkscape:connector-curvature=\"0\"\n       sodipodi:nodetypes=\"cc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/AtomDBlock.svg":
/*!****************************************!*\
  !*** ./res/img/actions/AtomDBlock.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r\"\n   version=\"1.0\"\n   sodipodi:docname=\"AtomDBlock.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomElement.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"206.12564\"\n     inkscape:cy=\"215.40039\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"458\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:0;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:8.13591309;stroke-opacity:1\"\n       id=\"path3960\"\n       sodipodi:cx=\"159.28572\"\n       sodipodi:cy=\"158.92857\"\n       sodipodi:rx=\"159.28572\"\n       sodipodi:ry=\"158.92857\"\n       d=\"M 318.57144 158.92857 A 159.28572 158.92857 0 1 1  0,158.92857 A 159.28572 158.92857 0 1 1  318.57144 158.92857 z\"\n       transform=\"matrix(0.9738456,0,0,0.9782812,4.8803045,5.5945903)\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 160,0 L 160,320\"\n       id=\"path3962\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 0,160 L 320,160\"\n       id=\"path3964\" />\n    <g\n       style=\"font-size:80px\"\n       id=\"text3966\">\n      <path\n         d=\"m 73.413235,217.96387 q 2.856445,0.96679 5.537109,4.13086 2.724609,3.16406 5.449219,8.70117 l 9.008789,17.92969 -9.536133,0 -8.393555,-16.83106 q -3.251953,-6.5918 -6.328125,-8.74512 -3.032226,-2.15332 -8.305664,-2.15332 l -9.667968,0 0,27.7295 -8.876954,0 0,-65.61036 20.039063,0 q 11.25,0 16.787109,4.70215 5.53711,4.70215 5.53711,14.19434 0,6.19629 -2.900391,10.2832 -2.856445,4.08692 -8.349609,5.66895 z m -22.236328,-27.55371 0,23.29101 11.162109,0 q 6.416016,0 9.667969,-2.94433 3.295898,-2.98829 3.295898,-8.74512 0,-5.75684 -3.295898,-8.65723 -3.251953,-2.94433 -9.667969,-2.94433 l -11.162109,0 z\"\n         style=\"font-size:90px\"\n         id=\"path6988\" />\n      <path\n         d=\"m 99.648586,229.30176 0,-29.79492 8.085934,0 0,29.4873 q 0,6.98731 2.72461,10.50293 2.72461,3.47168 8.17383,3.47168 6.54785,0 10.32715,-4.1748 3.82324,-4.17481 3.82324,-11.38184 l 0,-27.90527 8.08594,0 0,49.21875 -8.08594,0 0,-7.5586 q -2.94433,4.48242 -6.85547,6.67969 Q 122.0607,250 116.91909,250 q -8.48144,0 -12.87597,-5.27344 -4.394534,-5.27344 -4.394534,-15.4248 z m 20.346684,-30.98145 0,0 z\"\n         style=\"font-size:90px\"\n         id=\"path6990\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3970\">\n      <path\n         d=\"m 48,73.115234 37.705078,0 0,7.470703 -28.828125,0 0,19.335938 26.015625,0 0,7.470705 -26.015625,0 0,31.33301 -8.876953,0 0,-65.610356 z\"\n         style=\"font-size:90px\"\n         id=\"path7003\" />\n      <path\n         d=\"m 136.68164,112.09473 0,3.95507 -37.177734,0 q 0.527344,8.34961 5.009764,12.74415 4.52637,4.35058 12.56836,4.35058 4.6582,0 9.00879,-1.14258 4.39453,-1.14258 8.70117,-3.42773 l 0,7.64648 q -4.35058,1.84571 -8.9209,2.8125 -4.57031,0.9668 -9.27246,0.9668 -11.77734,0 -18.676755,-6.85547 -6.855469,-6.85547 -6.855469,-18.54492 0,-12.08496 6.503906,-19.160157 6.547848,-7.119141 17.622068,-7.119141 9.93164,0 15.68848,6.416016 5.80078,6.372072 5.80078,17.358402 z m -8.08594,-2.37305 q -0.0879,-6.63574 -3.73535,-10.590821 -3.60351,-3.955078 -9.58008,-3.955078 -6.76757,0 -10.85449,3.823242 -4.04297,3.823247 -4.658202,10.766607 l 28.828122,-0.0439 z\"\n         style=\"font-size:90px\"\n         id=\"path7005\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3974\">\n      <path\n         d=\"m 229.94531,77.053711 0,9.360351 q -4.48242,-4.174804 -9.58008,-6.240234 -5.05371,-2.06543 -10.7666,-2.06543 -11.25,0 -17.22656,6.899414 -5.97656,6.855469 -5.97656,19.863278 0,12.96387 5.97656,19.86329 5.97656,6.85546 17.22656,6.85546 5.71289,0 10.7666,-2.06543 5.09766,-2.06543 9.58008,-6.24023 l 0,9.27246 q -4.6582,3.16406 -9.88769,4.74609 -5.18555,1.58204 -10.98633,1.58204 -14.89746,0 -23.4668,-9.09668 -8.56933,-9.14063 -8.56933,-24.917 0,-15.820309 8.56933,-24.916988 8.56934,-9.140625 23.4668,-9.140625 5.88867,0 11.07422,1.582031 5.22949,1.538086 9.7998,4.658203 z\"\n         style=\"font-size:90px\"\n         id=\"path6998\" />\n      <path\n         d=\"m 262.46484,94.060547 q -6.5039,0 -10.2832,5.097656 -3.7793,5.053707 -3.7793,13.886717 0,8.83301 3.73536,13.93067 3.77929,5.05371 10.32714,5.05371 6.45996,0 10.23926,-5.09766 3.7793,-5.09766 3.7793,-13.88672 0,-8.74512 -3.7793,-13.842772 -3.7793,-5.141601 -10.23926,-5.141601 z m 0,-6.855469 q 10.54688,0 16.56739,6.855469 6.0205,6.855473 6.0205,18.984373 0,12.08496 -6.0205,18.98438 -6.02051,6.85547 -16.56739,6.85547 -10.59082,0 -16.61132,-6.85547 -5.97657,-6.89942 -5.97657,-18.98438 0,-12.1289 5.97657,-18.984373 6.0205,-6.855469 16.61132,-6.855469 z\"\n         style=\"font-size:90px\"\n         id=\"path7000\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3978\">\n      <path\n         d=\"m 211.11328,219.23828 q 2.85645,0.9668 5.53711,4.13086 2.72461,3.16406 5.44922,8.70117 L 231.1084,250 l -9.53613,0 -8.39356,-16.83105 q -3.25195,-6.5918 -6.32812,-8.74512 -3.03223,-2.15332 -8.30567,-2.15332 l -9.66797,0 0,27.72949 -8.87695,0 0,-65.61035 20.03906,0 q 11.25,0 16.78711,4.70215 5.53711,4.70215 5.53711,14.19433 0,6.19629 -2.90039,10.28321 -2.85644,4.08691 -8.34961,5.66894 z m -22.23633,-27.55371 0,23.29102 11.16211,0 q 6.41602,0 9.66797,-2.94434 3.2959,-2.98828 3.2959,-8.74512 0,-5.75683 -3.2959,-8.65722 -3.25195,-2.94434 -9.66797,-2.94434 l -11.16211,0 z\"\n         style=\"font-size:90px\"\n         id=\"path6993\" />\n      <path\n         d=\"m 283.13965,220.29297 0,29.70703 -8.08594,0 0,-29.44336 q 0,-6.9873 -2.72461,-10.45898 -2.72461,-3.47168 -8.17383,-3.47168 -6.54785,0 -10.32715,4.1748 -3.77929,4.17481 -3.77929,11.38184 l 0,27.81738 -8.12988,0 0,-68.37891 8.12988,0 0,26.80664 q 2.90039,-4.43847 6.81152,-6.63574 3.95508,-2.19726 9.09668,-2.19726 8.48145,0 12.83203,5.27343 4.35059,5.2295 4.35059,15.42481 z\"\n         style=\"font-size:90px\"\n         id=\"path6995\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/AtomExpandAbbrev.svg":
/*!**********************************************!*\
  !*** ./res/img/actions/AtomExpandAbbrev.svg ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r\"\n   version=\"1.0\"\n   sodipodi:docname=\"AtomExpandAbbrev.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/iMMDS/res/actions/GenericBack.png\"\n   inkscape:export-xdpi=\"12.375\"\n   inkscape:export-ydpi=\"12.375\">\n  <defs\n     id=\"defs4\">\n    <linearGradient\n       id=\"linearGradient3690\">\n      <stop\n         style=\"stop-color:#ffffff;stop-opacity:0.75294119;\"\n         offset=\"0\"\n         id=\"stop3692\" />\n      <stop\n         style=\"stop-color:#ffffff;stop-opacity:0.25098041;\"\n         offset=\"1\"\n         id=\"stop3694\" />\n    </linearGradient>\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective2906\" />\n    <linearGradient\n       id=\"linearGradient3136\">\n      <stop\n         style=\"stop-color:#b2a5a5;stop-opacity:0.50196081;\"\n         offset=\"0\"\n         id=\"stop3138\" />\n      <stop\n         style=\"stop-color:#000000;stop-opacity:0.19607843;\"\n         offset=\"1\"\n         id=\"stop3140\" />\n    </linearGradient>\n    <linearGradient\n       id=\"linearGradient3204\">\n      <stop\n         style=\"stop-color:#ffffff;stop-opacity:1;\"\n         offset=\"0\"\n         id=\"stop3206\" />\n      <stop\n         id=\"stop3212\"\n         offset=\"1\"\n         style=\"stop-color:#000000;stop-opacity:0.29591838;\" />\n    </linearGradient>\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3136\"\n       id=\"linearGradient3142\"\n       x1=\"301.78571\"\n       y1=\"158.57143\"\n       x2=\"6.0714264\"\n       y2=\"158.57143\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.8629045,0,0,0.8712017,23.773609,21.988053)\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3690\"\n       id=\"radialGradient3696\"\n       cx=\"140\"\n       cy=\"140\"\n       fx=\"140\"\n       fy=\"140\"\n       r=\"142.5\"\n       gradientUnits=\"userSpaceOnUse\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#00faff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.9625\"\n     inkscape:cx=\"167.64331\"\n     inkscape:cy=\"160\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1920\"\n     inkscape:window-height=\"1028\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\"\n     inkscape:snap-midpoints=\"true\"\n     inkscape:snap-intersection-paths=\"true\"\n     inkscape:object-paths=\"true\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2908\"\n       empspacing=\"5\"\n       visible=\"true\"\n       enabled=\"true\"\n       snapvisiblegridlinesonly=\"true\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       style=\"font-style:normal;font-variant:normal;font-weight:bold;font-stretch:condensed;font-size:124.49204254px;font-family:'Arial Narrow';-inkscape-font-specification:'Arial Narrow Bold Condensed';fill:#929292;fill-opacity:1;stroke:none\"\n       id=\"text2912\">\n      <path\n         d=\"m 136.41046,202 -6.20029,-21.88337 -26.74634,0 L 97.263545,202 l -14.710486,0 25.591381,-85.64907 17.32433,0 25.5306,85.64907 -14.58891,0 z m -16.41253,-59.9969 q 0,0 -1.21574,-4.31588 -0.54709,-2.12755 -0.9726,-3.89038 l -0.72944,-2.97857 q -0.24315,-1.15495 -0.24315,-1.27653 -0.0608,0.18236 -0.30393,1.33732 -0.24315,1.15495 -0.66866,2.91778 -0.42551,1.76283 -0.9726,3.89038 l -1.21574,4.31588 -6.92973,24.61879 20.18132,0 -6.92973,-24.61879 z\"\n         style=\"\"\n         id=\"path4723\" />\n      <path\n         d=\"m 211.84729,168.87101 q 0,7.47682 -1.21575,13.79868 -1.21574,6.26108 -3.7688,10.8809 -2.55306,4.55903 -6.50422,7.11209 -3.89038,2.55306 -9.17886,2.55306 -2.3707,0 -4.80218,-0.60787 -2.3707,-0.60787 -4.55904,-2.00597 -2.12754,-1.39811 -3.95116,-3.64723 -1.76283,-2.24913 -3.03936,-5.53163 l -0.12157,0 q 0,1.27653 -0.0608,2.91778 -0.0608,1.64125 -0.18236,3.22172 -0.12157,1.51968 -0.24315,2.73542 -0.12157,1.21574 -0.18236,1.70204 l -13.61631,0 q 0.12157,-2.12755 0.24314,-6.01793 0.12158,-3.95116 0.12158,-8.99649 l 0,-75.19368 14.04182,0 0,25.16587 q 0,1.94519 -0.0608,3.82959 0,1.82361 -0.0608,3.40408 -0.0608,1.82361 -0.12157,3.46487 l 0.24314,0 q 2.55306,-6.80816 6.99052,-9.72595 4.43747,-2.91778 10.27303,-2.91778 5.16691,0 8.87492,2.55306 3.7688,2.49227 6.1395,7.05131 2.43149,4.49825 3.58644,10.69853 1.15496,6.20029 1.15496,13.55553 z m -14.58891,0 q 0,-11.18483 -2.73542,-16.59488 -2.67464,-5.41006 -8.26705,-5.41006 -2.12755,0 -4.2551,1.03338 -2.12755,1.03339 -3.76881,3.64723 -1.64125,2.55306 -2.67463,6.92973 -0.97259,4.31589 -0.97259,10.94169 0,6.44343 0.97259,10.69853 1.03338,4.2551 2.61385,6.80816 1.64125,2.55306 3.70801,3.58644 2.12755,1.03338 4.2551,1.03338 5.34927,0 8.20626,-5.34926 2.91779,-5.41006 2.91779,-17.32434 z\"\n         style=\"\"\n         id=\"path4725\" />\n      <path\n         d=\"m 252.57467,202 -16.71646,0 -19.26952,-65.77167 14.77127,0 9.42201,36.77621 q 0,0 0.9118,3.82959 0.54709,2.06676 0.9726,4.07274 l 0.9118,3.89037 q 0.42551,1.8844 0.72945,3.40408 0.30393,-1.45889 0.79023,-3.34329 l 0.91181,-3.82959 1.03338,-4.01195 0.97259,-3.82959 9.84752,-36.95857 14.6497,0 L 252.57467,202 Z\"\n         style=\"\"\n         id=\"path4727\" />\n    </g>\n    <path\n       style=\"color:#000000;display:inline;overflow:visible;visibility:visible;fill:#ff0000;fill-opacity:1;fill-rule:nonzero;stroke:#000000;stroke-width:17.34300041;stroke-linecap:square;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;enable-background:accumulate\"\n       d=\"m 8.105653,164.47283 63.562761,0\"\n       id=\"path2916\"\n       inkscape:connector-curvature=\"0\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       id=\"path4449\"\n       d=\"M 209.1153,300.40828 165.33392,216.00234\"\n       style=\"color:#000000;display:inline;overflow:visible;visibility:visible;fill:#ff0000;fill-opacity:1;fill-rule:nonzero;stroke:#000000;stroke-width:17.34300041;stroke-linecap:square;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;enable-background:accumulate\"\n       inkscape:connector-curvature=\"0\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       sodipodi:nodetypes=\"cc\"\n       inkscape:connector-curvature=\"0\"\n       style=\"color:#000000;display:inline;overflow:visible;visibility:visible;fill:#ff0000;fill-opacity:1;fill-rule:nonzero;stroke:#000000;stroke-width:17.34300041;stroke-linecap:square;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;enable-background:accumulate\"\n       d=\"M 165.33392,98.40828 209.1153,14.00234\"\n       id=\"path4451\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/AtomFBlock.svg":
/*!****************************************!*\
  !*** ./res/img/actions/AtomFBlock.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r\"\n   version=\"1.0\"\n   sodipodi:docname=\"AtomFBlock.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomElement.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective18\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"81.839927\"\n     inkscape:cy=\"215.40039\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1680\"\n     inkscape:window-height=\"974\"\n     inkscape:window-x=\"96\"\n     inkscape:window-y=\"14\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:0;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:8.13591309;stroke-opacity:1\"\n       id=\"path3960\"\n       sodipodi:cx=\"159.28572\"\n       sodipodi:cy=\"158.92857\"\n       sodipodi:rx=\"159.28572\"\n       sodipodi:ry=\"158.92857\"\n       d=\"M 318.57144 158.92857 A 159.28572 158.92857 0 1 1  0,158.92857 A 159.28572 158.92857 0 1 1  318.57144 158.92857 z\"\n       transform=\"matrix(0.9738456,0,0,0.9782812,4.8803045,5.5945903)\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 160,0 L 160,320\"\n       id=\"path3962\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 0,160 L 320,160\"\n       id=\"path3964\" />\n    <g\n       style=\"font-size:80px\"\n       id=\"text3966\">\n      <path\n         d=\"m 68.82914,189.86035 -12.041016,32.65137 24.125977,0 -12.084961,-32.65137 z m -5.009766,-8.74512 10.063477,0 25.004882,65.61036 -9.228515,0 -5.976563,-16.83106 -29.575195,0 -5.976562,16.83106 -9.360352,0 25.048828,-65.61036 z\"\n         style=\"font-size:90px\"\n         id=\"path6970\" />\n      <path\n         d=\"m 141.91019,199.39648 0,7.5586 q -3.42773,-1.88965 -6.89941,-2.8125 -3.42773,-0.9668 -6.94336,-0.9668 -7.86621,0 -12.2168,5.00977 -4.35058,4.96582 -4.35058,13.97461 0,9.00879 4.35058,14.01855 4.35059,4.96582 12.2168,4.96582 3.51563,0 6.94336,-0.92285 3.47168,-0.9668 6.89941,-2.85645 l 0,7.47071 q -3.38378,1.58203 -7.03125,2.37304 Q 131.27543,248 127.18851,248 q -11.11816,0 -17.66601,-6.9873 -6.54785,-6.98731 -6.54785,-18.85254 0,-12.04102 6.59179,-18.94043 6.63575,-6.89942 18.14942,-6.89942 3.73535,0 7.29492,0.79102 3.55957,0.74707 6.89941,2.28515 z\"\n         style=\"font-size:90px\"\n         id=\"path6972\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3970\">\n      <path\n         d=\"m 50,73.115234 8.876953,0 0,58.139646 31.948242,0 0,7.47071 -40.825195,0 0,-65.610356 z\"\n         style=\"font-size:90px\"\n         id=\"path6983\" />\n      <path\n         d=\"m 122.11426,113.98438 q -9.79981,0 -13.5791,2.24121 -3.7793,2.24121 -3.7793,7.64648 0,4.30664 2.8125,6.85547 2.85644,2.50488 7.73437,2.50488 6.72364,0 10.76661,-4.74609 4.08691,-4.79004 4.08691,-12.7002 l 0,-1.80175 -8.04199,0 z m 16.12793,-3.33985 0,28.08106 -8.08594,0 0,-7.47071 q -2.76855,4.48242 -6.89941,6.63574 Q 119.12598,140 113.14941,140 q -7.55859,0 -12.04101,-4.21875 -4.438478,-4.2627 -4.438478,-11.38184 0,-8.30566 5.537108,-12.52441 5.58106,-4.21875 16.61133,-4.21875 l 11.33789,0 0,-0.79102 q 0,-5.58105 -3.69141,-8.613277 -3.64746,-3.076172 -10.2832,-3.076172 -4.21875,0 -8.21777,1.010742 -3.99903,1.010743 -7.69043,3.032227 l 0,-7.470703 q 4.43847,-1.713867 8.61328,-2.548828 4.1748,-0.878907 8.12988,-0.878907 10.67871,0 15.95215,5.53711 5.27344,5.537109 5.27344,16.787108 z\"\n         style=\"font-size:90px\"\n         id=\"path6985\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3974\">\n      <path\n         d=\"m 233.94531,77.053711 0,9.360351 q -4.48242,-4.174804 -9.58008,-6.240234 -5.05371,-2.06543 -10.7666,-2.06543 -11.25,0 -17.22656,6.899414 -5.97656,6.855469 -5.97656,19.863278 0,12.96387 5.97656,19.86329 5.97656,6.85546 17.22656,6.85546 5.71289,0 10.7666,-2.06543 5.09766,-2.06543 9.58008,-6.24023 l 0,9.27246 q -4.6582,3.16406 -9.88769,4.74609 -5.18555,1.58204 -10.98633,1.58204 -14.89746,0 -23.4668,-9.09668 -8.56933,-9.14063 -8.56933,-24.917 0,-15.820309 8.56933,-24.916988 8.56934,-9.140625 23.4668,-9.140625 5.88867,0 11.07422,1.582031 5.22949,1.538086 9.7998,4.658203 z\"\n         style=\"font-size:90px\"\n         id=\"path6978\" />\n      <path\n         d=\"m 289.49219,110.97949 0,3.95508 -37.17774,0 q 0.52735,8.34961 5.00977,12.74414 4.52637,4.35059 12.56836,4.35059 4.6582,0 9.00879,-1.14258 4.39453,-1.14258 8.70117,-3.42774 l 0,7.64649 q -4.35059,1.8457 -8.9209,2.8125 -4.57031,0.9668 -9.27246,0.9668 -11.77734,0 -18.67676,-6.85547 -6.85547,-6.85547 -6.85547,-18.54492 0,-12.08497 6.50391,-19.160161 6.54785,-7.119141 17.62207,-7.119141 9.93164,0 15.68848,6.416016 5.80078,6.37207 5.80078,17.358396 z m -8.08594,-2.37304 q -0.0879,-6.63575 -3.73535,-10.590825 -3.60352,-3.955078 -9.58008,-3.955078 -6.76758,0 -10.85449,3.823242 -4.04297,3.823241 -4.65821,10.766601 l 28.82813,-0.0439 z\"\n         style=\"font-size:90px\"\n         id=\"path6980\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3978\">\n      <path\n         d=\"m 194.98926,184.38965 8.9209,0 0,39.8584 q 0,10.54687 3.82324,15.20507 3.82324,4.61426 12.39258,4.61426 8.52539,0 12.34863,-4.61426 3.82324,-4.6582 3.82324,-15.20507 l 0,-39.8584 8.9209,0 0,40.95703 q 0,12.83203 -6.37207,19.37988 -6.32813,6.54785 -18.7207,6.54785 -12.43653,0 -18.8086,-6.54785 -6.32812,-6.54785 -6.32812,-19.37988 l 0,-40.95703 z\"\n         style=\"font-size:90px\"\n         id=\"path6975\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/AtomFormula.svg":
/*!*****************************************!*\
  !*** ./res/img/actions/AtomFormula.svg ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r\"\n   version=\"1.0\"\n   sodipodi:docname=\"AtomFormula.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/iMMDS/res/actions/GenericBack.png\"\n   inkscape:export-xdpi=\"12.375\"\n   inkscape:export-ydpi=\"12.375\">\n  <defs\n     id=\"defs4\">\n    <linearGradient\n       id=\"linearGradient3690\">\n      <stop\n         style=\"stop-color:#ffffff;stop-opacity:0.75294119;\"\n         offset=\"0\"\n         id=\"stop3692\" />\n      <stop\n         style=\"stop-color:#ffffff;stop-opacity:0.25098041;\"\n         offset=\"1\"\n         id=\"stop3694\" />\n    </linearGradient>\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective2906\" />\n    <linearGradient\n       id=\"linearGradient3136\">\n      <stop\n         style=\"stop-color:#b2a5a5;stop-opacity:0.50196081;\"\n         offset=\"0\"\n         id=\"stop3138\" />\n      <stop\n         style=\"stop-color:#000000;stop-opacity:0.19607843;\"\n         offset=\"1\"\n         id=\"stop3140\" />\n    </linearGradient>\n    <linearGradient\n       id=\"linearGradient3204\">\n      <stop\n         style=\"stop-color:#ffffff;stop-opacity:1;\"\n         offset=\"0\"\n         id=\"stop3206\" />\n      <stop\n         id=\"stop3212\"\n         offset=\"1\"\n         style=\"stop-color:#000000;stop-opacity:0.29591838;\" />\n    </linearGradient>\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3136\"\n       id=\"linearGradient3142\"\n       x1=\"301.78571\"\n       y1=\"158.57143\"\n       x2=\"6.0714264\"\n       y2=\"158.57143\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.8629045,0,0,0.8712017,23.773609,21.988053)\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3690\"\n       id=\"radialGradient3696\"\n       cx=\"140\"\n       cy=\"140\"\n       fx=\"140\"\n       fy=\"140\"\n       r=\"142.5\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3690\"\n       id=\"radialGradient3704\"\n       gradientUnits=\"userSpaceOnUse\"\n       cx=\"140\"\n       cy=\"140\"\n       fx=\"140\"\n       fy=\"140\"\n       r=\"142.5\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3690\"\n       id=\"radialGradient3645\"\n       cx=\"165\"\n       cy=\"160\"\n       fx=\"165\"\n       fy=\"160\"\n       r=\"130\"\n       gradientTransform=\"matrix(1,0,0,0.80769231,0,30.769231)\"\n       gradientUnits=\"userSpaceOnUse\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#00faff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.1503782\"\n     inkscape:cx=\"147.23233\"\n     inkscape:cy=\"155.47208\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1213\"\n     inkscape:window-height=\"876\"\n     inkscape:window-x=\"161\"\n     inkscape:window-y=\"103\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2908\"\n       empspacing=\"5\"\n       visible=\"true\"\n       enabled=\"true\"\n       snapvisiblegridlinesonly=\"true\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <rect\n       style=\"fill:url(#radialGradient3645);fill-opacity:1.0;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0\"\n       id=\"rect2865\"\n       width=\"250\"\n       height=\"200\"\n       x=\"40\"\n       y=\"60\" />\n    <g\n       style=\"font-style:normal;font-variant:normal;font-weight:bold;font-stretch:condensed;font-size:124.49204254px;font-family:'Arial Narrow';-inkscape-font-specification:'Arial Narrow Bold Condensed';fill:#000000;fill-opacity:1;stroke:none\"\n       id=\"text2912\">\n      <path\n         d=\"m 103.57242,189.11313 q 4.13353,0 7.17288,-1.39811 3.03936,-1.45889 5.2277,-3.7688 2.24912,-2.30991 3.70801,-5.22769 1.45889,-2.91778 2.43149,-5.89635 l 12.76529,5.89635 q -1.51967,4.61982 -4.01195,9.05728 -2.49227,4.43746 -6.26107,7.84154 -3.70802,3.40408 -8.87492,5.53163 -5.16691,2.06676 -12.15743,2.06676 -9.118068,0 -15.804652,-3.2825 -6.625797,-3.34329 -11.002471,-9.23965 -4.376673,-5.95713 -6.504223,-14.10261 -2.066762,-8.14548 -2.066762,-17.81063 0,-10.02988 2.066762,-18.11456 2.12755,-8.08469 6.382649,-13.7379 4.315886,-5.71399 10.880896,-8.75334 6.56501,-3.10015 15.439931,-3.10015 6.86895,0 12.03585,1.76283 5.16691,1.76283 8.87492,4.98455 3.76881,3.16093 6.20029,7.5376 2.49227,4.31589 3.89038,9.54358 l -12.94766,4.31589 q -0.66866,-2.73543 -2.12755,-5.2277 -1.45889,-2.55306 -3.70802,-4.49825 -2.18833,-1.94518 -5.1669,-3.10014 -2.97857,-1.21574 -6.74737,-1.21574 -5.349271,0 -9.178861,2.12755 -3.829589,2.06676 -6.321861,5.95714 -2.431485,3.89037 -3.647228,9.36121 -1.154955,5.41006 -1.154955,12.15743 0,6.68658 1.154955,12.279 1.215743,5.53163 3.708015,9.54358 2.492272,4.01195 6.382649,6.26107 3.890376,2.24913 9.361216,2.24913 z\"\n         style=\"\"\n         id=\"path4157\" />\n      <path\n         d=\"m 218.21695,202 0,-36.71543 -30.57592,0 0,36.71543 -14.71049,0 0,-85.64907 14.71049,0 0,34.10158 30.57592,0 0,-34.10158 14.71049,0 0,85.64907 -14.71049,0 z\"\n         style=\"\"\n         id=\"path4159\" />\n    </g>\n    <path\n       style=\"color:#000000;fill:#ff0000;fill-opacity:1;fill-rule:nonzero;stroke:#000000;stroke-width:17.34259796;stroke-linecap:square;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate\"\n       d=\"m 8.105653,160.47283 23.562761,0\"\n       id=\"path2916\" />\n    <g\n       style=\"font-style:normal;font-variant:normal;font-weight:bold;font-stretch:condensed;font-size:87.69158173px;font-family:'Arial Narrow';-inkscape-font-specification:'Arial Narrow Bold Condensed';fill:#000000;fill-opacity:1;stroke:none\"\n       id=\"text2857\">\n      <path\n         d=\"m 162.47581,218.36884 -8.86336,-16.78472 -8.90617,16.78472 -10.53327,0 13.9159,-23.93535 -13.23081,-22.3939 10.66172,0 8.09263,15.15763 8.09263,-15.15763 10.70454,0 -13.23081,22.26544 14.00154,24.06381 -10.70454,0 z\"\n         style=\"\"\n         id=\"path4162\" />\n    </g>\n    <g\n       style=\"font-style:normal;font-variant:normal;font-weight:bold;font-stretch:condensed;font-size:87.69158173px;font-family:'Arial Narrow';-inkscape-font-specification:'Arial Narrow Bold Condensed';fill:#000000;fill-opacity:1;stroke:none\"\n       id=\"text2861\">\n      <path\n         d=\"m 260.83842,220.80946 q -1.37018,4.06772 -2.78318,7.02217 -1.41299,2.95446 -3.12572,4.88127 -1.66991,1.96964 -3.81082,2.91164 -2.09809,0.942 -4.92408,0.942 -1.54146,0 -3.16855,-0.12846 -1.58427,-0.12845 -3.04009,-0.42818 l 0,-8.56363 q 0.68509,0.12845 1.66991,0.21409 1.02764,0.12845 1.71273,0.12845 1.45581,0 2.56909,-0.38536 1.15609,-0.38536 2.05527,-1.28454 0.89918,-0.89918 1.66991,-2.39782 0.81354,-1.49864 1.54145,-3.768 l 0.64227,-2.05527 -15.02917,-45.85824 10.44763,0 5.95172,21.7088 q 0,0 0.42818,1.58427 l 0.68509,2.56909 0.77073,2.99727 0.72791,2.99727 q 0.34255,1.45582 0.55664,2.56909 0.25691,1.11328 0.38536,1.58427 0.0856,-0.47099 0.29973,-1.58427 l 0.55663,-2.48345 0.64227,-2.91163 0.6851,-2.95446 0.55663,-2.52627 q 0.25691,-1.15609 0.42818,-1.66991 l 5.60918,-21.88007 10.31918,0 -15.02918,48.76988 z\"\n         style=\"\"\n         id=\"path4165\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/AtomInline.svg":
/*!****************************************!*\
  !*** ./res/img/actions/AtomInline.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r\"\n   version=\"1.0\"\n   sodipodi:docname=\"AtomInline.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/iMMDS/res/actions/GenericBack.png\"\n   inkscape:export-xdpi=\"12.375\"\n   inkscape:export-ydpi=\"12.375\">\n  <defs\n     id=\"defs4\">\n    <linearGradient\n       id=\"linearGradient3690\">\n      <stop\n         style=\"stop-color:#ffffff;stop-opacity:0.75294119;\"\n         offset=\"0\"\n         id=\"stop3692\" />\n      <stop\n         style=\"stop-color:#ffffff;stop-opacity:0.25098041;\"\n         offset=\"1\"\n         id=\"stop3694\" />\n    </linearGradient>\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective2906\" />\n    <linearGradient\n       id=\"linearGradient3136\">\n      <stop\n         style=\"stop-color:#b2a5a5;stop-opacity:0.50196081;\"\n         offset=\"0\"\n         id=\"stop3138\" />\n      <stop\n         style=\"stop-color:#000000;stop-opacity:0.19607843;\"\n         offset=\"1\"\n         id=\"stop3140\" />\n    </linearGradient>\n    <linearGradient\n       id=\"linearGradient3204\">\n      <stop\n         style=\"stop-color:#ffffff;stop-opacity:1;\"\n         offset=\"0\"\n         id=\"stop3206\" />\n      <stop\n         id=\"stop3212\"\n         offset=\"1\"\n         style=\"stop-color:#000000;stop-opacity:0.29591838;\" />\n    </linearGradient>\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3136\"\n       id=\"linearGradient3142\"\n       x1=\"301.78571\"\n       y1=\"158.57143\"\n       x2=\"6.0714264\"\n       y2=\"158.57143\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.8629045,0,0,0.8712017,23.773609,21.988053)\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3690\"\n       id=\"radialGradient3696\"\n       cx=\"140\"\n       cy=\"140\"\n       fx=\"140\"\n       fy=\"140\"\n       r=\"142.5\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3690\"\n       id=\"radialGradient3704\"\n       gradientUnits=\"userSpaceOnUse\"\n       cx=\"140\"\n       cy=\"140\"\n       fx=\"140\"\n       fy=\"140\"\n       r=\"142.5\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#00faff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.98125\"\n     inkscape:cx=\"72.356688\"\n     inkscape:cy=\"160\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1213\"\n     inkscape:window-height=\"876\"\n     inkscape:window-x=\"161\"\n     inkscape:window-y=\"103\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2908\"\n       empspacing=\"5\"\n       visible=\"true\"\n       enabled=\"true\"\n       snapvisiblegridlinesonly=\"true\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:url(#radialGradient3704);fill-opacity:1;stroke:#000000;stroke-width:10.24196363;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       id=\"path2910\"\n       sodipodi:cx=\"140\"\n       sodipodi:cy=\"140\"\n       sodipodi:rx=\"140\"\n       sodipodi:ry=\"140\"\n       d=\"m 280,140 a 140,140 0 1 1 -280,0 140,140 0 1 1 280,0 z\"\n       transform=\"matrix(0.97637527,0,0,0.97637527,39.246505,23.488986)\" />\n    <g\n       style=\"font-style:normal;font-variant:normal;font-weight:bold;font-stretch:condensed;font-size:124.49204254px;font-family:'Arial Narrow';-inkscape-font-specification:'Arial Narrow Bold Condensed';fill:#000000;fill-opacity:1;stroke:none\"\n       id=\"text2912\">\n      <path\n         d=\"m 136.41046,198 -6.20029,-21.88337 -26.74634,0 L 97.263545,198 l -14.710486,0 25.591381,-85.64907 17.32433,0 25.5306,85.64907 -14.58891,0 z m -16.41253,-59.9969 q 0,0 -1.21574,-4.31588 -0.54709,-2.12755 -0.9726,-3.89038 l -0.72944,-2.97857 q -0.24315,-1.15495 -0.24315,-1.27653 -0.0608,0.18236 -0.30393,1.33732 -0.24315,1.15495 -0.66866,2.91778 -0.42551,1.76283 -0.9726,3.89038 l -1.21574,4.31588 -6.92973,24.61879 20.18132,0 -6.92973,-24.61879 z\"\n         style=\"\"\n         id=\"path4152\" />\n      <path\n         d=\"m 211.84729,164.87101 q 0,7.47682 -1.21575,13.79868 -1.21574,6.26108 -3.7688,10.8809 -2.55306,4.55903 -6.50422,7.11209 -3.89038,2.55306 -9.17886,2.55306 -2.3707,0 -4.80218,-0.60787 -2.3707,-0.60787 -4.55904,-2.00597 -2.12754,-1.39811 -3.95116,-3.64723 -1.76283,-2.24913 -3.03936,-5.53163 l -0.12157,0 q 0,1.27653 -0.0608,2.91778 -0.0608,1.64125 -0.18236,3.22172 -0.12157,1.51968 -0.24315,2.73542 -0.12157,1.21574 -0.18236,1.70204 l -13.61631,0 q 0.12157,-2.12755 0.24314,-6.01793 0.12158,-3.95116 0.12158,-8.99649 l 0,-75.19368 14.04182,0 0,25.16587 q 0,1.94519 -0.0608,3.82959 0,1.82361 -0.0608,3.40408 -0.0608,1.82361 -0.12157,3.46487 l 0.24314,0 q 2.55306,-6.80816 6.99052,-9.72595 4.43747,-2.91778 10.27303,-2.91778 5.16691,0 8.87492,2.55306 3.7688,2.49227 6.1395,7.05131 2.43149,4.49825 3.58644,10.69853 1.15496,6.20029 1.15496,13.55553 z m -14.58891,0 q 0,-11.18483 -2.73542,-16.59488 -2.67464,-5.41006 -8.26705,-5.41006 -2.12755,0 -4.2551,1.03338 -2.12755,1.03339 -3.76881,3.64723 -1.64125,2.55306 -2.67463,6.92973 -0.97259,4.31589 -0.97259,10.94169 0,6.44343 0.97259,10.69853 1.03338,4.2551 2.61385,6.80816 1.64125,2.55306 3.70801,3.58644 2.12755,1.03338 4.2551,1.03338 5.34927,0 8.20626,-5.34926 2.91779,-5.41006 2.91779,-17.32434 z\"\n         style=\"\"\n         id=\"path4154\" />\n      <path\n         d=\"m 252.57467,198 -16.71646,0 -19.26952,-65.77167 14.77127,0 9.42201,36.77621 q 0,0 0.9118,3.82959 0.54709,2.06676 0.9726,4.07274 l 0.9118,3.89037 q 0.42551,1.8844 0.72945,3.40408 0.30393,-1.45889 0.79023,-3.34329 l 0.91181,-3.82959 1.03338,-4.01195 0.97259,-3.82959 9.84752,-36.95857 14.6497,0 L 252.57467,198 Z\"\n         style=\"\"\n         id=\"path4156\" />\n    </g>\n    <path\n       style=\"color:#000000;fill:#ff0000;fill-opacity:1;fill-rule:nonzero;stroke:#000000;stroke-width:17.34259796;stroke-linecap:square;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate\"\n       d=\"m 8.105653,160.47283 23.562761,0\"\n       id=\"path2916\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/AtomMinus.svg":
/*!***************************************!*\
  !*** ./res/img/actions/AtomMinus.svg ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"AtomMinus.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomMinus.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective9\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"59.813669\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"467\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2815\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:0.75;stroke:#000000;stroke-width:20;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:8.13591309000000070\"\n       id=\"path3758\"\n       sodipodi:cx=\"161.07143\"\n       sodipodi:cy=\"160.35715\"\n       sodipodi:rx=\"149.64285\"\n       sodipodi:ry=\"149.64285\"\n       d=\"m 310.71428,160.35715 a 149.64285,149.64285 0 1 1 -299.285706,0 149.64285,149.64285 0 1 1 299.285706,0 z\"\n       transform=\"matrix(0.60591986,0,0,0.60381033,62.403623,63.530598)\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:12.95214939;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"m 96.131868,160.58706 129.596922,-0.4623\"\n       id=\"path3754\"\n       sodipodi:nodetypes=\"cc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/AtomNoble.svg":
/*!***************************************!*\
  !*** ./res/img/actions/AtomNoble.svg ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r\"\n   version=\"1.0\"\n   sodipodi:docname=\"AtomNoble.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomElement.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"206.12564\"\n     inkscape:cy=\"215.40039\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:0;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:8.13591309;stroke-opacity:1\"\n       id=\"path3960\"\n       sodipodi:cx=\"159.28572\"\n       sodipodi:cy=\"158.92857\"\n       sodipodi:rx=\"159.28572\"\n       sodipodi:ry=\"158.92857\"\n       d=\"M 318.57144 158.92857 A 159.28572 158.92857 0 1 1  0,158.92857 A 159.28572 158.92857 0 1 1  318.57144 158.92857 z\"\n       transform=\"matrix(0.9738456,0,0,0.9782812,4.8803045,5.5945903)\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 160,0 L 160,320\"\n       id=\"path3962\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 0,160 L 320,160\"\n       id=\"path3964\" />\n    <g\n       style=\"font-size:80px\"\n       id=\"text3966\">\n      <path\n         d=\"m 71.928711,191.86035 -12.041016,32.65137 24.125977,0 -12.084961,-32.65137 z m -5.009766,-8.74512 10.063477,0 25.004878,65.61036 -9.228511,0 -5.976562,-16.83106 -29.575196,0 -5.976562,16.83106 -9.360352,0 25.048828,-65.61036 z\"\n         style=\"font-size:90px\"\n         id=\"path6950\" />\n      <path\n         d=\"m 139.69238,207.06543 q -1.3623,-0.79102 -2.98828,-1.14258 -1.58203,-0.39551 -3.51562,-0.39551 -6.85547,0 -10.54688,4.48243 -3.64746,4.43847 -3.64746,12.78808 l 0,25.92774 -8.12988,0 0,-49.21875 8.12988,0 0,7.64648 q 2.54883,-4.48242 6.63574,-6.63574 4.08692,-2.19727 9.93164,-2.19727 0.83496,0 1.84571,0.13184 1.01074,0.0879 2.24121,0.30762 l 0.0439,8.30566 z\"\n         style=\"font-size:90px\"\n         id=\"path6952\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3970\">\n      <path\n         d=\"m 40,73.115234 8.876953,0 0,26.894536 32.255859,0 0,-26.894536 8.876954,0 0,65.610356 -8.876954,0 0,-31.24512 -32.255859,0 0,31.24512 -8.876953,0 0,-65.610356 z\"\n         style=\"font-size:90px\"\n         id=\"path6965\" />\n      <path\n         d=\"m 149.42383,112.09473 0,3.95507 -37.17774,0 q 0.52735,8.34961 5.00977,12.74415 4.52637,4.35058 12.56836,4.35058 4.6582,0 9.00879,-1.14258 4.39453,-1.14258 8.70117,-3.42773 l 0,7.64648 q -4.35059,1.84571 -8.9209,2.8125 -4.57031,0.9668 -9.27246,0.9668 -11.77734,0 -18.67676,-6.85547 -6.85547,-6.85547 -6.85547,-18.54492 0,-12.08496 6.50391,-19.160157 6.54785,-7.119141 17.62207,-7.119141 9.93164,0 15.68848,6.416016 5.80078,6.372072 5.80078,17.358402 z m -8.08594,-2.37305 q -0.0879,-6.63574 -3.73535,-10.590821 -3.60352,-3.955078 -9.58008,-3.955078 -6.76758,0 -10.85449,3.823242 -4.04297,3.823247 -4.6582,10.766607 l 28.82812,-0.0439 z\"\n         style=\"font-size:90px\"\n         id=\"path6967\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3974\">\n      <path\n         d=\"m 184.81445,72 11.95313,0 29.09179,54.8877 0,-54.8877 8.61329,0 0,65.61035 -11.95313,0 -29.0918,-54.887694 0,54.887694 -8.61328,0 0,-65.61035 z\"\n         style=\"font-size:90px\"\n         id=\"path6960\" />\n      <path\n         d=\"m 293.88672,110.97949 0,3.95508 -37.17774,0 q 0.52735,8.34961 5.00977,12.74414 4.52637,4.35059 12.56836,4.35059 4.6582,0 9.00879,-1.14258 4.39453,-1.14258 8.70117,-3.42774 l 0,7.64649 q -4.35059,1.8457 -8.9209,2.8125 -4.57031,0.9668 -9.27246,0.9668 -11.77734,0 -18.67676,-6.85547 -6.85547,-6.85547 -6.85547,-18.54492 0,-12.08497 6.50391,-19.160161 6.54785,-7.119141 17.62207,-7.119141 9.93164,0 15.68848,6.416016 5.80078,6.37207 5.80078,17.358396 z m -8.08594,-2.37304 q -0.0879,-6.63575 -3.73535,-10.590825 -3.60352,-3.955078 -9.58008,-3.955078 -6.76758,0 -10.85449,3.823242 -4.04297,3.823241 -4.6582,10.766601 l 28.82812,-0.0439 z\"\n         style=\"font-size:90px\"\n         id=\"path6962\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3978\">\n      <path\n         d=\"m 180,184.38965 8.87695,0 0,27.72949 29.44336,-27.72949 11.42578,0 -32.56347,30.58594 L 232.0752,250 l -11.68946,0 -31.50879,-31.59668 0,31.59668 -8.87695,0 0,-65.61035 z\"\n         style=\"font-size:90px\"\n         id=\"path6955\" />\n      <path\n         d=\"m 267.23145,208.33984 q -1.36231,-0.79101 -2.98829,-1.14257 -1.58203,-0.39551 -3.51562,-0.39551 -6.85547,0 -10.54688,4.48242 -3.64746,4.43848 -3.64746,12.78809 l 0,25.92773 -8.12988,0 0,-49.21875 8.12988,0 0,7.64648 q 2.54883,-4.48242 6.63575,-6.63574 4.08691,-2.19726 9.93164,-2.19726 0.83496,0 1.8457,0.13183 1.01074,0.0879 2.24121,0.30762 l 0.0439,8.30566 z\"\n         style=\"font-size:90px\"\n         id=\"path6957\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/AtomPBlock.svg":
/*!****************************************!*\
  !*** ./res/img/actions/AtomPBlock.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r\"\n   version=\"1.0\"\n   sodipodi:docname=\"AtomPBlock.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomElement.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective18\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"206.12564\"\n     inkscape:cy=\"215.40039\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"458\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:0;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:8.13591309;stroke-opacity:1\"\n       id=\"path3960\"\n       sodipodi:cx=\"159.28572\"\n       sodipodi:cy=\"158.92857\"\n       sodipodi:rx=\"159.28572\"\n       sodipodi:ry=\"158.92857\"\n       d=\"M 318.57144 158.92857 A 159.28572 158.92857 0 1 1  0,158.92857 A 159.28572 158.92857 0 1 1  318.57144 158.92857 z\"\n       transform=\"matrix(0.9738456,0,0,0.9782812,4.8803045,5.5945903)\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 160,0 L 160,320\"\n       id=\"path3962\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 0,160 L 320,160\"\n       id=\"path3964\" />\n    <g\n       style=\"font-size:80px\"\n       id=\"text3966\">\n      <path\n         d=\"m 107.33105,183.26855 0,8.65723 q -5.05371,-2.41699 -9.536128,-3.60351 -4.482422,-1.18653 -8.657227,-1.18653 -7.250976,0 -11.206054,2.8125 -3.911133,2.8125 -3.911133,7.99805 0,4.35058 2.592773,6.5918 2.636719,2.19726 9.931641,3.55957 l 5.361328,1.09863 q 9.93164,1.88965 14.63379,6.67969 4.74609,4.74609 4.74609,12.74414 0,9.53613 -6.41601,14.458 Q 98.498047,248 86.149414,248 q -4.658203,0 -9.931641,-1.05469 -5.229492,-1.05469 -10.854492,-3.12011 l 0,-9.14063 q 5.405274,3.03223 10.590821,4.57031 5.185546,1.53809 10.195312,1.53809 7.602539,0 11.733398,-2.98828 4.130858,-2.98828 4.130858,-8.52539 0,-4.83399 -2.988279,-7.5586 -2.944336,-2.72461 -9.711914,-4.08691 l -5.405274,-1.05469 q -9.931641,-1.97754 -14.370117,-6.19629 -4.438477,-4.21875 -4.438477,-11.7334 0,-8.70117 6.108399,-13.71093 6.152344,-5.00977 16.918945,-5.00977 4.614258,0 9.404297,0.83496 4.79004,0.83496 9.7998,2.50488 z\"\n         style=\"font-size:90px\"\n         id=\"path6942\" />\n      <path\n         d=\"m 124.77734,197.50684 8.08594,0 0,49.21875 -8.08594,0 0,-49.21875 z m 0,-19.16016 8.08594,0 0,10.23926 -8.08594,0 0,-10.23926 z\"\n         style=\"font-size:90px\"\n         id=\"path6944\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3970\">\n      <path\n         d=\"m 84.876953,107.39258 0,24.03808 14.238281,0 q 7.163086,0 10.590816,-2.94433 3.47168,-2.98828 3.47168,-9.09668 0,-6.15235 -3.47168,-9.05274 -3.42773,-2.94433 -10.590816,-2.94433 l -14.238281,0 z m 0,-26.982424 0,19.775394 13.139649,0 q 6.503908,0 9.667968,-2.416995 3.20801,-2.460938 3.20801,-7.470703 0,-4.965821 -3.20801,-7.426758 -3.16406,-2.460938 -9.667968,-2.460938 l -13.139649,0 z M 76,73.115234 l 22.675781,0 q 10.151369,0 15.644529,4.21875 5.49317,4.21875 5.49317,11.997071 0,6.020507 -2.8125,9.580078 -2.8125,3.559567 -8.26172,4.438477 6.54785,1.40625 10.15137,5.88867 3.64746,4.43848 3.64746,11.11817 0,8.78906 -5.97657,13.5791 -5.97656,4.79004 -17.006833,4.79004 l -23.554687,0 0,-65.610356 z\"\n         style=\"font-size:90px\"\n         id=\"path6947\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3974\">\n      <path\n         d=\"m 210.74316,80.745117 -12.04101,32.651363 24.12597,0 -12.08496,-32.651363 z M 205.7334,72 l 10.06347,0 25.00489,65.61035 -9.22852,0 -5.97656,-16.83105 -29.5752,0 -5.97656,16.83105 -9.36035,0 L 205.7334,72 Z\"\n         style=\"font-size:90px\"\n         id=\"path6932\" />\n      <path\n         d=\"m 281.36328,89.841797 0,7.646484 q -3.42773,-1.757812 -7.11914,-2.636719 -3.69141,-0.878906 -7.64648,-0.878906 -6.02051,0 -9.05274,1.845703 -2.98828,1.845703 -2.98828,5.537111 0,2.8125 2.15332,4.43848 2.15332,1.58203 8.65723,3.03222 l 2.76855,0.61524 q 8.61328,1.8457 12.2168,5.22949 3.64746,3.33984 3.64746,9.36035 0,6.85547 -5.44922,10.85449 -5.40527,3.99903 -14.89746,3.99903 -3.95508,0 -8.26172,-0.79102 -4.26269,-0.74707 -9.00879,-2.28516 l 0,-8.34961 q 4.48242,2.32911 8.83301,3.51563 4.35059,1.14258 8.61328,1.14258 5.71289,0 8.78906,-1.9336 3.07618,-1.97754 3.07618,-5.53711 0,-3.29589 -2.24122,-5.05371 -2.19726,-1.75781 -9.71191,-3.38379 l -2.8125,-0.65918 q -7.51465,-1.58203 -10.85449,-4.83398 -3.33985,-3.2959 -3.33985,-9.00879 0,-6.943358 4.92188,-10.722655 4.92187,-3.779297 13.97461,-3.779297 4.48242,0 8.4375,0.65918 3.95508,0.659179 7.29492,1.977539 z\"\n         style=\"font-size:90px\"\n         id=\"path6934\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3978\">\n      <path\n         d=\"m 190.87695,189.68457 0,24.65332 11.16211,0 q 6.19629,0 9.58008,-3.20801 3.38379,-3.20801 3.38379,-9.14062 0,-5.88867 -3.38379,-9.09668 -3.38379,-3.20801 -9.58008,-3.20801 l -11.16211,0 z M 182,182.38965 l 20.03906,0 q 11.03028,0 16.65528,5.00976 5.66894,4.96582 5.66894,14.58985 0,9.71191 -5.66894,14.67773 -5.625,4.96582 -16.65528,4.96582 l -11.16211,0 0,26.36719 -8.87695,0 0,-65.61035 z\"\n         style=\"font-size:90px\"\n         id=\"path6937\" />\n      <path\n         d=\"m 271.29687,223.43457 q 0,-8.9209 -3.6914,-13.97461 -3.64746,-5.09766 -10.06348,-5.09766 -6.41601,0 -10.10742,5.09766 -3.64746,5.05371 -3.64746,13.97461 0,8.9209 3.64746,14.01855 3.69141,5.05372 10.10742,5.05372 6.41602,0 10.06348,-5.05372 3.6914,-5.09765 3.6914,-14.01855 z m -27.50976,-17.18262 q 2.54883,-4.39453 6.41601,-6.5039 3.91114,-2.15332 9.31641,-2.15332 8.96484,0 14.5459,7.11914 5.625,7.11914 5.625,18.7207 0,11.60156 -5.625,18.7207 -5.58106,7.11914 -14.5459,7.11914 -5.40527,0 -9.31641,-2.10937 -3.86718,-2.15332 -6.41601,-6.54785 l 0,7.38281 -8.12988,0 0,-68.37891 8.12988,0 0,26.63086 z\"\n         style=\"font-size:90px\"\n         id=\"path6939\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/AtomPlus.svg":
/*!**************************************!*\
  !*** ./res/img/actions/AtomPlus.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"AtomPlus.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomPlus.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective10\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"-64.472045\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1857\"\n     inkscape:window-height=\"1155\"\n     inkscape:window-x=\"63\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2818\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:0.75;stroke:#000000;stroke-width:20;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:8.13591309000000070\"\n       id=\"path3758\"\n       sodipodi:cx=\"161.07143\"\n       sodipodi:cy=\"160.35715\"\n       sodipodi:rx=\"149.64285\"\n       sodipodi:ry=\"149.64285\"\n       d=\"m 310.71428,160.35715 a 149.64285,149.64285 0 1 1 -299.285706,0 149.64285,149.64285 0 1 1 299.285706,0 z\"\n       transform=\"matrix(0.60145026,0,0,0.6014321,63.123549,63.556079)\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:14.75459385;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 91.367971,160.26223 230.74482,159.73468\"\n       id=\"path3754\"\n       sodipodi:nodetypes=\"cc\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:14.75459385;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"m 160.52478,90.246356 0.53163,138.246984\"\n       id=\"path3756\"\n       sodipodi:nodetypes=\"cc\"\n       inkscape:connector-curvature=\"0\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/AtomSBlock.svg":
/*!****************************************!*\
  !*** ./res/img/actions/AtomSBlock.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r\"\n   version=\"1.0\"\n   sodipodi:docname=\"AtomSBlock.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomElement.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"98.625641\"\n     inkscape:cy=\"215.40039\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1447\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:0;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:8.13591309;stroke-opacity:1\"\n       id=\"path3960\"\n       sodipodi:cx=\"159.28572\"\n       sodipodi:cy=\"158.92857\"\n       sodipodi:rx=\"159.28572\"\n       sodipodi:ry=\"158.92857\"\n       d=\"M 318.57144 158.92857 A 159.28572 158.92857 0 1 1  0,158.92857 A 159.28572 158.92857 0 1 1  318.57144 158.92857 z\"\n       transform=\"matrix(0.9738456,0,0,0.9782812,4.8803045,5.5945903)\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 160,0 L 160,320\"\n       id=\"path3962\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 0,160 L 320,160\"\n       id=\"path3964\" />\n    <g\n       style=\"font-size:80px\"\n       id=\"text3966\">\n      <path\n         d=\"m 52.876953,215.39258 0,24.03808 14.238281,0 q 7.163086,0 10.590821,-2.94433 3.471679,-2.98828 3.471679,-9.09668 0,-6.15235 -3.471679,-9.05274 -3.427735,-2.94433 -10.590821,-2.94433 l -14.238281,0 z m 0,-26.98242 0,19.77539 13.139649,0 q 6.503906,0 9.667968,-2.417 3.208008,-2.46093 3.208008,-7.4707 0,-4.96582 -3.208008,-7.42676 -3.164062,-2.46093 -9.667968,-2.46093 l -13.139649,0 z M 44,181.11523 l 22.675781,0 q 10.151367,0 15.644531,4.21875 5.493165,4.21875 5.493165,11.99707 0,6.02051 -2.8125,9.58008 -2.8125,3.55957 -8.261719,4.43848 6.547851,1.40625 10.151367,5.88867 3.647461,4.43848 3.647461,11.11817 0,8.78906 -5.976563,13.5791 -5.976562,4.79004 -17.006836,4.79004 l -23.554687,0 0,-65.61036 z\"\n         style=\"font-size:90px\"\n         id=\"path6940\" />\n      <path\n         d=\"m 147.44727,220.09473 0,3.95507 -37.17774,0 q 0.52735,8.34961 5.00977,12.74415 4.52636,4.35058 12.56836,4.35058 4.6582,0 9.00879,-1.14258 4.39453,-1.14258 8.70117,-3.42773 l 0,7.64648 q -4.35059,1.84571 -8.9209,2.8125 -4.57031,0.9668 -9.27246,0.9668 -11.77735,0 -18.67676,-6.85547 -6.85547,-6.85547 -6.85547,-18.54492 0,-12.08496 6.50391,-19.16016 6.54785,-7.11914 17.62207,-7.11914 9.93164,0 15.68847,6.41602 5.80079,6.37207 5.80079,17.3584 z m -8.08594,-2.37305 q -0.0879,-6.63574 -3.73535,-10.59082 -3.60352,-3.95508 -9.58008,-3.95508 -6.76758,0 -10.85449,3.82324 -4.04297,3.82325 -4.65821,10.7666 l 28.82813,-0.0439 z\"\n         style=\"font-size:90px\"\n         id=\"path6942\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3970\">\n      <path\n         d=\"m 64,73.115234 8.876953,0 0,58.139646 31.948247,0 0,7.47071 -40.8252,0 0,-65.610356 z\"\n         style=\"font-size:90px\"\n         id=\"path6945\" />\n      <path\n         d=\"m 113.74609,89.506836 8.08594,0 0,49.218754 -8.08594,0 0,-49.218754 z m 0,-19.160156 8.08594,0 0,10.239257 -8.08594,0 0,-10.239257 z\"\n         style=\"font-size:90px\"\n         id=\"path6947\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3974\">\n      <path\n         d=\"m 178.81445,72 11.95313,0 29.09179,54.8877 0,-54.8877 8.61329,0 0,65.61035 -11.95313,0 -29.0918,-54.887694 0,54.887694 -8.61328,0 0,-65.61035 z\"\n         style=\"font-size:90px\"\n         id=\"path6932\" />\n      <path\n         d=\"m 268.15527,112.86914 q -9.7998,0 -13.5791,2.24121 -3.7793,2.24121 -3.7793,7.64649 0,4.30664 2.8125,6.85546 2.85645,2.50489 7.73438,2.50489 6.72363,0 10.7666,-4.7461 4.08692,-4.79004 4.08692,-12.70019 l 0,-1.80176 -8.042,0 z m 16.12793,-3.33984 0,28.08105 -8.08593,0 0,-7.4707 q -2.76856,4.48242 -6.89942,6.63574 -4.13086,2.10938 -10.10742,2.10938 -7.55859,0 -12.04102,-4.21875 -4.43847,-4.2627 -4.43847,-11.38184 0,-8.30566 5.53711,-12.52441 5.58105,-4.21875 16.61132,-4.21875 l 11.3379,0 0,-0.79102 q 0,-5.58105 -3.69141,-8.613281 -3.64746,-3.076172 -10.2832,-3.076172 -4.21875,0 -8.21778,1.010742 -3.99902,1.010742 -7.69043,3.032227 l 0,-7.470704 q 4.43848,-1.713867 8.61328,-2.548828 4.17481,-0.878906 8.12989,-0.878906 10.67871,0 15.95215,5.537109 5.27343,5.53711 5.27343,16.787113 z\"\n         style=\"font-size:90px\"\n         id=\"path6934\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text3978\">\n      <path\n         d=\"m 174,184.38965 13.22754,0 16.74316,44.64844 16.83106,-44.64844 13.22754,0 0,65.61035 -8.65723,0 0,-57.6123 -16.91895,45 -8.92089,0 -16.91895,-45 0,57.6123 -8.61328,0 0,-65.61035 z\"\n         style=\"font-size:90px\"\n         id=\"path6937\" />\n    </g>\n    <g\n       style=\"font-size:80px\"\n       id=\"text2248\">\n      <path\n         d=\"m 275.90332,226.09863 q 0,-8.78906 -3.64746,-13.62304 -3.60352,-4.83399 -10.15137,-4.83399 -6.5039,0 -10.15137,4.83399 -3.60351,4.83398 -3.60351,13.62304 0,8.74512 3.60351,13.5791 3.64747,4.83399 10.15137,4.83399 6.54785,0 10.15137,-4.83399 3.64746,-4.83398 3.64746,-13.5791 z m 8.08594,19.07227 q 0,12.56836 -5.58106,18.67676 Q 272.82715,270 261.31348,270 q -4.2627,0 -8.042,-0.65918 -3.77929,-0.61523 -7.33886,-1.93359 l 0,-7.86621 q 3.55957,1.93359 7.03125,2.85644 3.47168,0.92285 7.07519,0.92285 7.9541,0 11.90918,-4.1748 3.95508,-4.13086 3.95508,-12.52442 l 0,-3.99902 q -2.50488,4.35059 -6.41602,6.50391 -3.91113,2.15332 -9.36035,2.15332 -9.05273,0 -14.58984,-6.89942 Q 240,237.48047 240,226.09863 q 0,-11.42578 5.53711,-18.32519 5.53711,-6.89942 14.58984,-6.89942 5.44922,0 9.36035,2.15332 3.91114,2.15332 6.41602,6.50391 l 0,-7.4707 8.08594,0 0,43.11035 z\"\n         style=\"font-size:90px\"\n         id=\"path6929\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondAddTwo.svg":
/*!****************************************!*\
  !*** ./res/img/actions/BondAddTwo.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"BondAddTwo.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondTrigonal.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective2948\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"39.099383\"\n     inkscape:cy=\"92.512755\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1421\"\n     inkscape:window-height=\"893\"\n     inkscape:window-x=\"278\"\n     inkscape:window-y=\"110\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;stroke:#000000;stroke-width:4.1221571;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:2.00970001\"\n       id=\"path2160\"\n       sodipodi:cx=\"131.78572\"\n       sodipodi:cy=\"135\"\n       sodipodi:rx=\"8.9285717\"\n       sodipodi:ry=\"9.2857141\"\n       d=\"m 140.71429,135 a 8.9285717,9.2857141 0 1 1 -17.85714,0 8.9285717,9.2857141 0 1 1 17.85714,0 z\"\n       transform=\"matrix(0,1.9791656,-1.9030439,0,400.81202,-104.81214)\"\n       inkscape:export-xdpi=\"9\"\n       inkscape:export-ydpi=\"9\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:19.31853294;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"M 126.24182,130.35436 51.64564,35.560356\"\n       id=\"path3152\" />\n    <path\n       style=\"font-size:medium;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-indent:0;text-align:start;text-decoration:none;line-height:normal;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;text-anchor:start;color:#000000;fill:#ffffff;fill-opacity:0.75294118;fill-rule:nonzero;stroke:#000000;stroke-width:8;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate;font-family:Bitstream Vera Sans;-inkscape-font-specification:Bitstream Vera Sans\"\n       d=\"m 176.5625,165.59375 a 9.6254627,9.6254627 0 0 0 -3.875,18.3125 L 280,237 a 9.6254627,9.6254627 0 1 0 8.53125,-17.25 l -107.3125,-53.09375 a 9.6254627,9.6254627 0 0 0 -4.65625,-1.0625 z\"\n       id=\"path3154\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:19.31853294;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"M 126.24182,181.56035 51.64564,276.35436\"\n       id=\"path3162\" />\n    <path\n       style=\"font-size:medium;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-indent:0;text-align:start;text-decoration:none;line-height:normal;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;text-anchor:start;color:#000000;fill:#ffffff;fill-opacity:0.75294118;fill-rule:nonzero;stroke:#000000;stroke-width:8;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate;font-family:Bitstream Vera Sans;-inkscape-font-specification:Bitstream Vera Sans\"\n       d=\"m 283.65625,72.625 a 9.6254627,9.6254627 0 0 0 -4.34375,1.0625 l -107.34375,53.125 a 9.6254627,9.6254627 0 1 0 8.53125,17.25 l 107.34375,-53.125 a 9.6254627,9.6254627 0 0 0 -4.1875,-18.3125 z\"\n       id=\"path3164\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondArtifactArene.svg":
/*!***********************************************!*\
  !*** ./res/img/actions/BondArtifactArene.svg ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"BondArtifactArene.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainSelect.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       id=\"perspective8\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <path\n       edge=\"none\"\n       d=\"M1526 0H1328V1283L914 410H796L385 1283V0H200V1489H470L867 660L1251 1489H1526V0Z\"\n       id=\"char45\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#bcd7fd\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.98994949\"\n     inkscape:cx=\"-12.077558\"\n     inkscape:cy=\"158.28825\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1394\"\n     inkscape:window-height=\"855\"\n     inkscape:window-x=\"46\"\n     inkscape:window-y=\"1\"\n     showgrid=\"false\"\n     inkscape:window-maximized=\"1\"\n     inkscape:snap-global=\"false\"\n     inkscape:snap-bbox=\"true\"\n     inkscape:snap-smooth-nodes=\"true\"\n     inkscape:object-nodes=\"true\"\n     inkscape:snap-intersection-paths=\"true\"\n     inkscape:object-paths=\"true\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid4135\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       id=\"g4369\"\n       style=\"stroke-width:8;stroke-miterlimit:4;stroke-dasharray:none\">\n      <line\n         x1=\"79.874969\"\n         y1=\"53.341728\"\n         x2=\"42.383801\"\n         y2=\"124.96636\"\n         id=\"line4253\"\n         style=\"stroke:#000000;stroke-width:8;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none\" />\n      <line\n         x1=\"42.383801\"\n         y1=\"124.96636\"\n         x2=\"159.32974\"\n         y2=\"157.25311\"\n         id=\"line4255\"\n         style=\"stroke:#000000;stroke-width:8;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none\" />\n      <line\n         x1=\"159.32974\"\n         y1=\"157.25311\"\n         x2=\"277.61575\"\n         y2=\"130.34207\"\n         id=\"line4257\"\n         style=\"stroke:#000000;stroke-width:8;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none\" />\n      <line\n         x1=\"277.61575\"\n         y1=\"130.34207\"\n         x2=\"243.44348\"\n         y2=\"57.081509\"\n         id=\"line4259\"\n         style=\"stroke:#000000;stroke-width:8;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none\" />\n      <line\n         x1=\"243.44348\"\n         y1=\"57.081509\"\n         x2=\"79.874969\"\n         y2=\"53.341728\"\n         id=\"line4261\"\n         style=\"stroke:#000000;stroke-width:8;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none\" />\n    </g>\n    <line\n       style=\"stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none\"\n       id=\"line4275\"\n       y2=\"104.59695\"\n       x2=\"160.5295\"\n       y1=\"208.16769\"\n       x1=\"160.5295\" />\n    <ellipse\n       style=\"fill:none;stroke:#000000;stroke-width:15;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:15,30;stroke-dashoffset:39\"\n       id=\"ellipse4281\"\n       ry=\"28.668024\"\n       rx=\"69.736992\"\n       cy=\"100.79803\"\n       cx=\"160\" />\n    <use\n       height=\"100%\"\n       width=\"100%\"\n       y=\"0\"\n       style=\"fill:#000000;fill-opacity:1\"\n       xlink:href=\"#char45\"\n       x=\"0\"\n       id=\"use4287\"\n       transform=\"matrix(0.03709198,0,0,-0.03709198,128.5194,269.61687)\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondArtifactClear.svg":
/*!***********************************************!*\
  !*** ./res/img/actions/BondArtifactClear.svg ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"BondArtifactClear.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainSelect.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       id=\"perspective8\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#bcd7fd\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.7\"\n     inkscape:cx=\"109.54685\"\n     inkscape:cy=\"158.28825\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1394\"\n     inkscape:window-height=\"855\"\n     inkscape:window-x=\"46\"\n     inkscape:window-y=\"1\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\"\n     inkscape:snap-global=\"true\"\n     inkscape:snap-bbox=\"true\"\n     inkscape:snap-smooth-nodes=\"true\"\n     inkscape:object-nodes=\"true\"\n     inkscape:snap-intersection-paths=\"true\"\n     inkscape:object-paths=\"true\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid4135\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <circle\n       style=\"fill:none;stroke:#000000;stroke-width:15;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:15,30;stroke-dashoffset:13.15014392\"\n       id=\"ellipse4231\"\n       cy=\"160\"\n       cx=\"160\"\n       r=\"121.49729\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"m 131.71573,131.71573 56.56854,56.56854\"\n       id=\"path4142\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"m 188.28427,131.71573 -56.56854,56.56854\"\n       id=\"path4144\"\n       inkscape:connector-curvature=\"0\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondArtifactPath.svg":
/*!**********************************************!*\
  !*** ./res/img/actions/BondArtifactPath.svg ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"BondArtifactPath.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainSelect.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       id=\"perspective8\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#bcd7fd\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.98994949\"\n     inkscape:cx=\"161.66868\"\n     inkscape:cy=\"158.28825\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1394\"\n     inkscape:window-height=\"855\"\n     inkscape:window-x=\"46\"\n     inkscape:window-y=\"1\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\"\n     inkscape:snap-global=\"true\"\n     inkscape:snap-bbox=\"true\"\n     inkscape:snap-smooth-nodes=\"true\"\n     inkscape:object-nodes=\"true\"\n     inkscape:snap-intersection-paths=\"true\"\n     inkscape:object-paths=\"true\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid4135\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       id=\"g4206\"\n       transform=\"matrix(1.1572994,0,0,1.1572994,-14.188294,6.2718173)\"\n       style=\"stroke-width:6.91264508;stroke-miterlimit:4;stroke-dasharray:none\">\n      <line\n         x1=\"150.51276\"\n         y1=\"99.510551\"\n         x2=\"35.082012\"\n         y2=\"166.15654\"\n         id=\"line4180\"\n         style=\"stroke:#000000;stroke-width:6.91264508;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none\" />\n      <line\n         x1=\"150.51276\"\n         y1=\"99.510551\"\n         x2=\"265.94345\"\n         y2=\"166.15654\"\n         id=\"line4182\"\n         style=\"stroke:#000000;stroke-width:6.91264508;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none\" />\n    </g>\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:15;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:15,30;stroke-dashoffset:6\"\n       d=\"m 60,210 c 90,-70 110,-70 200,0\"\n       id=\"path4210\"\n       inkscape:connector-curvature=\"0\"\n       sodipodi:nodetypes=\"cc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondArtifactRing.svg":
/*!**********************************************!*\
  !*** ./res/img/actions/BondArtifactRing.svg ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"BondArtifactRing.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainSelect.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       id=\"perspective8\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#bcd7fd\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.98994949\"\n     inkscape:cx=\"14.186408\"\n     inkscape:cy=\"158.28825\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1394\"\n     inkscape:window-height=\"855\"\n     inkscape:window-x=\"46\"\n     inkscape:window-y=\"1\"\n     showgrid=\"false\"\n     inkscape:window-maximized=\"1\"\n     inkscape:snap-global=\"true\"\n     inkscape:snap-bbox=\"true\"\n     inkscape:snap-smooth-nodes=\"true\"\n     inkscape:object-nodes=\"true\"\n     inkscape:snap-intersection-paths=\"true\"\n     inkscape:object-paths=\"true\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid4135\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       id=\"g4271\"\n       style=\"stroke-width:8;stroke-miterlimit:4;stroke-dasharray:none\"\n       transform=\"translate(27.870353,1.568337)\">\n      <line\n         x1=\"132.12965\"\n         y1=\"38.988956\"\n         x2=\"17.069948\"\n         y2=\"122.58849\"\n         id=\"line4215\"\n         style=\"stroke:#000000;stroke-width:8;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none\" />\n      <line\n         x1=\"17.069948\"\n         y1=\"122.58849\"\n         x2=\"61.017296\"\n         y2=\"257.85382\"\n         id=\"line4217\"\n         style=\"stroke:#000000;stroke-width:8;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none\" />\n      <line\n         x1=\"61.017296\"\n         y1=\"257.85382\"\n         x2=\"203.24199\"\n         y2=\"257.85382\"\n         id=\"line4219\"\n         style=\"stroke:#000000;stroke-width:8;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none\" />\n      <line\n         x1=\"247.18935\"\n         y1=\"122.58849\"\n         x2=\"203.24199\"\n         y2=\"257.85382\"\n         id=\"line4221\"\n         style=\"stroke:#000000;stroke-width:8;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none\" />\n      <line\n         x1=\"247.18935\"\n         y1=\"122.58849\"\n         x2=\"132.12965\"\n         y2=\"38.988956\"\n         id=\"line4223\"\n         style=\"stroke:#000000;stroke-width:8;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none\" />\n    </g>\n    <circle\n       style=\"fill:none;stroke:#000000;stroke-width:15;stroke-miterlimit:4;stroke-dasharray:15,30;stroke-dashoffset:24;stroke-linecap:round;stroke-linejoin:round\"\n       id=\"ellipse4231\"\n       cy=\"160\"\n       cx=\"160\"\n       r=\"66.571121\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondDown.svg":
/*!**************************************!*\
  !*** ./res/img/actions/BondDown.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"BondDown.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondLinear.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"171.24224\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:20;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 40.382649,165.00403 L 40.382649,155.19597\"\n       id=\"path3152\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:20;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 100,174.2408 L 100,144.59666\"\n       id=\"path3712\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:20;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 160,184.32705 L 160,134.74379\"\n       id=\"path3714\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:20;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 280,204.78908 L 280,115.08664\"\n       id=\"path3716\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:20;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 220,195.22384 L 220,125.64966\"\n       id=\"path3718\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondFour.svg":
/*!**************************************!*\
  !*** ./res/img/actions/BondFour.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"BondFour.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondFour.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"171.24224\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.96105766;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 280.0389,180 L 39.961095,180\"\n       id=\"path3152\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.96105766;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 280.01947,219.98053 L 39.941666,219.98053\"\n       id=\"path3574\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.96105766;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 280.01947,139.98053 L 39.941663,139.98053\"\n       id=\"path3576\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.96105766;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 280.01947,99.980529 L 39.941665,99.980529\"\n       id=\"path3578\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondInsert.svg":
/*!****************************************!*\
  !*** ./res/img/actions/BondInsert.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"BondInsert.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondLinear.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective2958\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"103.22259\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1204\"\n     inkscape:window-height=\"925\"\n     inkscape:window-x=\"508\"\n     inkscape:window-y=\"54\"\n     showgrid=\"false\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid4800\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:19.31853294;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"M 113.39098,158.69004 53.078266,263.15473\"\n       id=\"path3152\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"M 299.98723,58.483019 240.10753,162.19765\"\n       id=\"path3154\" />\n    <path\n       style=\"font-size:medium;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-indent:0;text-align:start;text-decoration:none;line-height:normal;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;text-anchor:start;color:#000000;fill:#ffffff;fill-opacity:0.75294118;stroke:#000000;stroke-width:8;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate;font-family:Bitstream Vera Sans;-inkscape-font-specification:Bitstream Vera Sans\"\n       d=\"M 116.5625 151.3125 A 9.6254923 9.6254923 0 0 0 111.09375 152.90625 A 9.6254923 9.6254923 0 0 0 116.53125 170.53125 L 159.75 170.5625 C 158.10087 167.65453 157.15625 164.30057 157.15625 160.71875 C 157.15625 157.31663 158.0016 154.11729 159.5 151.3125 L 116.5625 151.3125 z M 194.78125 151.3125 C 196.27965 154.11729 197.15625 157.31663 197.15625 160.71875 C 197.15625 164.30057 196.18038 167.65453 194.53125 170.5625 L 236.28125 170.59375 A 9.6321508 9.6321508 0 0 0 236.28125 151.3125 L 194.78125 151.3125 z \"\n       id=\"path4284\" />\n    <path\n       transform=\"translate(157.71429,141.42857)\"\n       d=\"M 40,20 A 20,20 0 1 1 0,20 20,20 0 1 1 40,20 z\"\n       sodipodi:ry=\"20\"\n       sodipodi:rx=\"20\"\n       sodipodi:cy=\"20\"\n       sodipodi:cx=\"20\"\n       id=\"path3660\"\n       style=\"fill:none;stroke:#000000;stroke-width:9;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       sodipodi:type=\"arc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondLinear.svg":
/*!****************************************!*\
  !*** ./res/img/actions/BondLinear.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"BondLinear.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondLinear.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"171.24224\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:4.12215689;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:2.00970001;stroke-opacity:1\"\n       id=\"path2160\"\n       sodipodi:cx=\"131.78572\"\n       sodipodi:cy=\"135\"\n       sodipodi:rx=\"8.9285717\"\n       sodipodi:ry=\"9.2857141\"\n       d=\"M 140.71429 135 A 8.9285717 9.2857141 0 1 1  122.85715,135 A 8.9285717 9.2857141 0 1 1  140.71429 135 z\"\n       transform=\"matrix(1.9791656,0,0,1.9030439,-100.82577,-96.910927)\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.31853294;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 130.66986,160 L 10.04443,160\"\n       id=\"path3152\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 309.02255,160 L 189.26316,160\"\n       id=\"path3154\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondMetalLigate.svg":
/*!*********************************************!*\
  !*** ./res/img/actions/BondMetalLigate.svg ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   inkscape:export-ydpi=\"9\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainSelect.png\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   sodipodi:docname=\"BondMetalLigate.svg\"\n   version=\"1.0\"\n   inkscape:version=\"1.0 (4035a4f, 2020-05-01)\"\n   sodipodi:version=\"0.32\"\n   id=\"svg2\"\n   height=\"320\"\n   width=\"320\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective8\" />\n    <path\n       id=\"char45\"\n       d=\"M1526 0H1328V1283L914 410H796L385 1283V0H200V1489H470L867 660L1251 1489H1526V0Z\"\n       edge=\"none\" />\n  </defs>\n  <sodipodi:namedview\n     inkscape:document-rotation=\"0\"\n     inkscape:object-paths=\"true\"\n     inkscape:snap-intersection-paths=\"true\"\n     inkscape:object-nodes=\"true\"\n     inkscape:snap-smooth-nodes=\"true\"\n     inkscape:snap-bbox=\"true\"\n     inkscape:snap-global=\"true\"\n     inkscape:window-maximized=\"0\"\n     showgrid=\"true\"\n     inkscape:window-y=\"23\"\n     inkscape:window-x=\"53\"\n     inkscape:window-height=\"943\"\n     inkscape:window-width=\"1650\"\n     showborder=\"true\"\n     height=\"320px\"\n     width=\"320px\"\n     inkscape:current-layer=\"layer1\"\n     inkscape:document-units=\"px\"\n     inkscape:cy=\"146.31871\"\n     inkscape:cx=\"74.452978\"\n     inkscape:zoom=\"0.98994949\"\n     inkscape:pageshadow=\"2\"\n     inkscape:pageopacity=\"0\"\n     objecttolerance=\"10\"\n     guidetolerance=\"10\"\n     gridtolerance=\"10000\"\n     borderopacity=\"1.0\"\n     bordercolor=\"#666666\"\n     pagecolor=\"#bcd7fd\"\n     id=\"base\">\n    <inkscape:grid\n       id=\"grid4135\"\n       type=\"xygrid\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     id=\"layer1\"\n     inkscape:groupmode=\"layer\"\n     inkscape:label=\"Layer 1\">\n    <use\n       transform=\"matrix(0.03709198,0,0,-0.03709198,127.98962,187.61498)\"\n       id=\"use4287\"\n       x=\"0\"\n       xlink:href=\"#char45\"\n       style=\"fill:#000000;fill-opacity:1\"\n       y=\"0\"\n       width=\"100%\"\n       height=\"100%\" />\n    <path\n       sodipodi:nodetypes=\"cc\"\n       id=\"path850\"\n       d=\"M 160,110 V 20\"\n       style=\"fill:none;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 160,300 V 210\"\n       id=\"path852\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 205,135 282.94228,90\"\n       id=\"path854\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       sodipodi:nodetypes=\"cc\"\n       id=\"path856\"\n       d=\"m 205,185 77.94228,45\"\n       style=\"fill:none;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 37.05772,90 115,135\"\n       id=\"path858\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       sodipodi:nodetypes=\"cc\"\n       id=\"path860\"\n       d=\"M 37.05772,230 115,185\"\n       style=\"fill:none;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondOcta1.svg":
/*!***************************************!*\
  !*** ./res/img/actions/BondOcta1.svg ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"BondOcta1.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondOcta2.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"171.24224\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:4.12215689;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:2.00970001;stroke-opacity:1\"\n       id=\"path2160\"\n       sodipodi:cx=\"131.78572\"\n       sodipodi:cy=\"135\"\n       sodipodi:rx=\"8.9285717\"\n       sodipodi:ry=\"9.2857141\"\n       d=\"M 140.71429 135 A 8.9285717 9.2857141 0 1 1  122.85715,135 A 8.9285717 9.2857141 0 1 1  140.71429 135 z\"\n       transform=\"matrix(1.9791656,0,0,1.9030439,-100.82577,-96.910927)\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 159.62453,130.37547 L 159.62453,10.616072\"\n       id=\"path2271\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 160.37547,309.38392 L 160.37547,189.62453\"\n       id=\"path2273\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 26.905712,230.35583 L 132.37547,173.62453\"\n       id=\"path2305\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 188.12226,146.50851 L 293.59202,89.777207\"\n       id=\"path2505\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 26.905714,89.62453 L 132.37547,146.35583\"\n       id=\"path2507\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 188.55084,173.92006 L 294.02059,230.65136\"\n       id=\"path2509\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondOcta2.svg":
/*!***************************************!*\
  !*** ./res/img/actions/BondOcta2.svg ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"BondOcta2.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondSqPlan.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"171.24224\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:4.12215689;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:2.00970001;stroke-opacity:1\"\n       id=\"path2160\"\n       sodipodi:cx=\"131.78572\"\n       sodipodi:cy=\"135\"\n       sodipodi:rx=\"8.9285717\"\n       sodipodi:ry=\"9.2857141\"\n       d=\"M 140.71429 135 A 8.9285717 9.2857141 0 1 1  122.85715,135 A 8.9285717 9.2857141 0 1 1  140.71429 135 z\"\n       transform=\"matrix(1.9791656,0,0,1.9030439,-100.82577,-96.910927)\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.31853294;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 130.66986,160 L 10.04443,160\"\n       id=\"path3152\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 309.02255,160 L 189.26316,160\"\n       id=\"path3154\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 159.62453,130.37547 L 159.62453,10.616072\"\n       id=\"path2271\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 160.37547,309.38392 L 160.37547,189.62453\"\n       id=\"path2273\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 182.07157,136.65434 L 268.37547,53.62453\"\n       id=\"path2303\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 52.07157,264.65433 L 138.37547,181.62453\"\n       id=\"path2305\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondOne.svg":
/*!*************************************!*\
  !*** ./res/img/actions/BondOne.svg ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"BondOne.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondLinear.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"171.24224\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.96105766;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 280.0389,160 L 39.961095,160\"\n       id=\"path3152\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondPolymer.svg":
/*!*****************************************!*\
  !*** ./res/img/actions/BondPolymer.svg ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   inkscape:export-ydpi=\"9\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainSelect.png\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   sodipodi:docname=\"BondPolymer.svg\"\n   version=\"1.0\"\n   inkscape:version=\"1.0 (4035a4f, 2020-05-01)\"\n   sodipodi:version=\"0.32\"\n   id=\"svg2\"\n   height=\"320\"\n   width=\"320\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective8\" />\n    <path\n       id=\"char45\"\n       d=\"M1526 0H1328V1283L914 410H796L385 1283V0H200V1489H470L867 660L1251 1489H1526V0Z\"\n       edge=\"none\" />\n  </defs>\n  <sodipodi:namedview\n     inkscape:document-rotation=\"0\"\n     inkscape:object-paths=\"true\"\n     inkscape:snap-intersection-paths=\"true\"\n     inkscape:object-nodes=\"true\"\n     inkscape:snap-smooth-nodes=\"true\"\n     inkscape:snap-bbox=\"true\"\n     inkscape:snap-global=\"false\"\n     inkscape:window-maximized=\"1\"\n     showgrid=\"true\"\n     inkscape:window-y=\"23\"\n     inkscape:window-x=\"56\"\n     inkscape:window-height=\"1155\"\n     inkscape:window-width=\"1864\"\n     showborder=\"true\"\n     height=\"320px\"\n     width=\"320px\"\n     inkscape:current-layer=\"layer1\"\n     inkscape:document-units=\"px\"\n     inkscape:cy=\"163.33901\"\n     inkscape:cx=\"23.277781\"\n     inkscape:zoom=\"0.35\"\n     inkscape:pageshadow=\"2\"\n     inkscape:pageopacity=\"0\"\n     objecttolerance=\"10\"\n     guidetolerance=\"10\"\n     gridtolerance=\"10000\"\n     borderopacity=\"1.0\"\n     bordercolor=\"#666666\"\n     pagecolor=\"#bcd7fd\"\n     id=\"base\">\n    <inkscape:grid\n       id=\"grid4135\"\n       type=\"xygrid\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     id=\"layer1\"\n     inkscape:groupmode=\"layer\"\n     inkscape:label=\"Layer 1\">\n    <text\n       id=\"text844\"\n       y=\"296.98486\"\n       x=\"241.67216\"\n       style=\"font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:97.5637px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:'sans-serif, Bold';font-variant-ligatures:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-east-asian:normal;fill:#000000;fill-opacity:1;stroke:none;stroke-width:2.43909\"\n       xml:space=\"preserve\"><tspan\n         style=\"font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:97.5637px;font-family:sans-serif;-inkscape-font-specification:'sans-serif, Bold';font-variant-ligatures:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-east-asian:normal;stroke-width:2.43909\"\n         y=\"296.98486\"\n         x=\"241.67216\"\n         id=\"tspan842\"\n         sodipodi:role=\"line\">n</tspan></text>\n    <path\n       sodipodi:nodetypes=\"cccc\"\n       id=\"path846\"\n       d=\"M 110,30 H 50 v 260 h 60\"\n       style=\"fill:none;stroke:#000000;stroke-width:12;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       sodipodi:nodetypes=\"cccc\"\n       style=\"fill:none;stroke:#000000;stroke-width:12;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"m 164,30 h 60 v 260 h -60\"\n       id=\"path848\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondQAny.svg":
/*!**************************************!*\
  !*** ./res/img/actions/BondQAny.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"1.0.2 (1.0.2+r75+1)\"\n   version=\"1.0\"\n   sodipodi:docname=\"BondAny.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondLinear.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective2966\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.36294465\"\n     inkscape:cx=\"-23.567935\"\n     inkscape:cy=\"160\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1920\"\n     inkscape:window-height=\"1023\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\"\n     inkscape:document-rotation=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2968\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <circle\n       id=\"path3744\"\n       style=\"fill:#000000;fill-opacity:1;stroke:none;stroke-width:1.25\"\n       cx=\"20.5\"\n       cy=\"160\"\n       r=\"12.5\" />\n    <circle\n       style=\"fill:#000000;fill-opacity:1;stroke:none;stroke-width:1.25\"\n       id=\"path3746\"\n       cx=\"60.5\"\n       cy=\"160\"\n       r=\"12.5\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:20;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 150,160 H 100\"\n       id=\"path838\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:20;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 230,140 H 180\"\n       id=\"path840\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:20;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 230,180 H 180\"\n       id=\"path842\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:20;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 310,120 H 260\"\n       id=\"path844\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:20;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 310,160 H 260\"\n       id=\"path846\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:20;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 310,200 H 260\"\n       id=\"path848\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondRotate.svg":
/*!****************************************!*\
  !*** ./res/img/actions/BondRotate.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"BondRotate.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondTrigonal.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective4871\" />\n    <marker\n       inkscape:stockid=\"Arrow2Send\"\n       orient=\"auto\"\n       refY=\"0.0\"\n       refX=\"0.0\"\n       id=\"Arrow2Send\"\n       style=\"overflow:visible;\">\n      <path\n         id=\"path3178\"\n         style=\"font-size:12px;fill:#8b8b8b;fill-rule:evenodd;stroke-width:0.625;stroke-linejoin:round\"\n         d=\"M 8.7185878,4.0337352 L -2.2072895,0.016013256 L 8.7185884,-4.0017078 C 6.97309,-1.6296469 6.9831476,1.6157441 8.7185878,4.0337352 z \"\n         transform=\"matrix(-0.3,0,0,-0.3,0.69,0)\" />\n    </marker>\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#4a8be0\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"229.81367\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1859\"\n     inkscape:window-height=\"1156\"\n     inkscape:window-x=\"61\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\"\n     inkscape:snap-global=\"true\"\n     inkscape:snap-smooth-nodes=\"true\"\n     inkscape:object-nodes=\"true\"\n     inkscape:snap-intersection-paths=\"true\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid4149\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title></dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       id=\"g4477\"\n       transform=\"translate(-6.9348763,2.361824)\">\n      <path\n         inkscape:connector-curvature=\"0\"\n         id=\"path3132\"\n         d=\"m 285.375,15.59375 a 9.6254923,9.6254923 0 0 0 -8.125,5.5 l -60.28125,123.0625 a 9.6295647,9.6295647 0 1 0 17.3125,8.4375 l 60.25,-123.03125 A 9.6254923,9.6254923 0 0 0 285.375,15.59375 Z\"\n         style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:'Bitstream Vera Sans';-inkscape-font-specification:'Bitstream Vera Sans';text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;text-anchor:start;display:inline;overflow:visible;visibility:visible;fill:#ffffff;fill-opacity:0.75294118;stroke:#000000;stroke-width:8;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;marker:none;enable-background:accumulate\" />\n      <circle\n         r=\"17.671122\"\n         cy=\"160\"\n         cx=\"216\"\n         inkscape:export-ydpi=\"9\"\n         inkscape:export-xdpi=\"9\"\n         id=\"path2160\"\n         style=\"fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:8;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:2.00970006;stroke-opacity:1\" />\n      <path\n         sodipodi:nodetypes=\"cc\"\n         inkscape:connector-curvature=\"0\"\n         id=\"path3152\"\n         d=\"M 201.61589,160 63.97327,160\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:15.49904156;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         inkscape:connector-curvature=\"0\"\n         sodipodi:nodetypes=\"cc\"\n         id=\"path3158\"\n         d=\"M 285.41813,293.9522 225.1533,170.90493\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <circle\n         style=\"fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:8;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:2.00970006;stroke-opacity:1\"\n         id=\"circle4151\"\n         inkscape:export-xdpi=\"9\"\n         inkscape:export-ydpi=\"9\"\n         cx=\"56\"\n         cy=\"160\"\n         r=\"17.671122\" />\n      <path\n         sodipodi:nodetypes=\"ccccc\"\n         inkscape:connector-curvature=\"0\"\n         id=\"path4155\"\n         d=\"m 110,140 c 0,-30 10,-80 36,-80 24,0 34,60 34,100 0,40 -10.12741,99.49035 -34,100 -26,0 -36,-48.6 -36,-78.6\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#ffffff;stroke-width:8;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         sodipodi:nodetypes=\"cccc\"\n         inkscape:connector-curvature=\"0\"\n         id=\"path4475\"\n         d=\"m 110,175 -15,25 30,0 z\"\n         style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondSqPlan.svg":
/*!****************************************!*\
  !*** ./res/img/actions/BondSqPlan.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"BondSqPlan.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondSqPlan.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"171.24224\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:4.12215689;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:2.00970001;stroke-opacity:1\"\n       id=\"path2160\"\n       sodipodi:cx=\"131.78572\"\n       sodipodi:cy=\"135\"\n       sodipodi:rx=\"8.9285717\"\n       sodipodi:ry=\"9.2857141\"\n       d=\"M 140.71429 135 A 8.9285717 9.2857141 0 1 1  122.85715,135 A 8.9285717 9.2857141 0 1 1  140.71429 135 z\"\n       transform=\"matrix(1.9791656,0,0,1.9030439,-100.82577,-96.910927)\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.31853294;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 130.66986,160 L 10.04443,160\"\n       id=\"path3152\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 309.02255,160 L 189.26316,160\"\n       id=\"path3154\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 159.62453,130.37547 L 159.62453,10.616072\"\n       id=\"path2271\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 160.37547,309.38392 L 160.37547,189.62453\"\n       id=\"path2273\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondSquig.svg":
/*!***************************************!*\
  !*** ./res/img/actions/BondSquig.svg ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"BondSquig.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondSquig.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"171.24224\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.70939255;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 13.854696,160 C 23.404427,145.60525 31.644659,120.73451 42.883757,119.8547 C 52.560111,118.19483 66.522178,143.90673 71.912818,160 C 82.300825,178.10026 83.522733,199.152 100.94188,200.1453 C 119.40219,200.81786 121.80479,177.7981 129.97094,160 C 137.74367,142.33593 144.46966,118.67452 159,119.8547 C 175.82856,118.93206 179.97706,143.36954 188.02906,160 C 196.14175,177.45474 205.82635,200.76232 217.05812,200.1453 C 231.09125,199.83385 237.2755,175.9758 246.08718,160 C 254.09821,142.34457 263.95628,119.88399 275.11624,119.8547 C 289.09333,120.33425 295.4277,143.74196 304.1453,160 L 304.1453,160 L 304.1453,160\"\n       id=\"path3749\"\n       sodipodi:nodetypes=\"ccccccccccccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondSwitch.svg":
/*!****************************************!*\
  !*** ./res/img/actions/BondSwitch.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"BondSwitch.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondTrigonal.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective4871\" />\n    <marker\n       inkscape:stockid=\"Arrow2Send\"\n       orient=\"auto\"\n       refY=\"0.0\"\n       refX=\"0.0\"\n       id=\"Arrow2Send\"\n       style=\"overflow:visible;\">\n      <path\n         id=\"path3178\"\n         style=\"font-size:12px;fill:#8b8b8b;fill-rule:evenodd;stroke-width:0.625;stroke-linejoin:round\"\n         d=\"M 8.7185878,4.0337352 L -2.2072895,0.016013256 L 8.7185884,-4.0017078 C 6.97309,-1.6296469 6.9831476,1.6157441 8.7185878,4.0337352 z \"\n         transform=\"matrix(-0.3,0,0,-0.3,0.69,0)\" />\n    </marker>\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"39.099383\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1215\"\n     inkscape:window-height=\"839\"\n     inkscape:window-x=\"145\"\n     inkscape:window-y=\"105\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"font-size:medium;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-indent:0;text-align:start;text-decoration:none;line-height:normal;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;text-anchor:start;color:#000000;fill:#ffffff;fill-opacity:0.75294119;stroke:#000000;stroke-width:8;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate;font-family:Bitstream Vera Sans;-inkscape-font-specification:Bitstream Vera Sans;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"m 225.375,15.59375 a 9.6254923,9.6254923 0 0 0 -8.125,5.5 l -60.28125,123.0625 a 9.6295647,9.6295647 0 1 0 17.3125,8.4375 l 60.25,-123.03125 A 9.6254923,9.6254923 0 0 0 225.375,15.59375 z\"\n       id=\"path3132\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:4.1221571;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:2.00970001;stroke-opacity:1\"\n       id=\"path2160\"\n       sodipodi:cx=\"131.78572\"\n       sodipodi:cy=\"135\"\n       sodipodi:rx=\"8.9285717\"\n       sodipodi:ry=\"9.2857141\"\n       d=\"M 140.71429 135 A 8.9285717 9.2857141 0 1 1  122.85715,135 A 8.9285717 9.2857141 0 1 1  140.71429 135 z\"\n       transform=\"matrix(1.9791656,0,0,1.9030439,-104.82577,-96.910927)\"\n       inkscape:export-xdpi=\"9\"\n       inkscape:export-ydpi=\"9\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:15.49904156;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 141.61589,160 L 63.973265,160\"\n       id=\"path3152\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 225.41813,293.9522 L 165.1533,170.90493\"\n       id=\"path3158\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#8b8b8b;stroke-width:6.58357668;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;marker-end:url(#Arrow2Send)\"\n       d=\"M 197.79178,142.41668 C 208.33227,154.9762 208.33227,166.6984 197.79178,177.58331\"\n       id=\"path3134\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#8b8b8b;stroke-width:6.58357668;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;marker-end:url(#Arrow2Send)\"\n       d=\"M 213.88997,98.458413 C 237.84561,141.99804 237.84561,183.02576 213.88997,221.54158\"\n       id=\"path3136\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#8b8b8b;stroke-width:6.584;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;marker-end:url(#Arrow2Send);fill-opacity:1\"\n       d=\"M 238.03726,63.291789 C 275.40805,126.92663 275.40805,191.39877 238.03726,256.70821\"\n       id=\"path3140\"\n       sodipodi:nodetypes=\"cc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondTetra1.svg":
/*!****************************************!*\
  !*** ./res/img/actions/BondTetra1.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"BondTetra1.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondTrigonal.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"171.24224\"\n     inkscape:cy=\"148.55302\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"743\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:4.1221571;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:2.00970001;stroke-opacity:1\"\n       id=\"path2160\"\n       sodipodi:cx=\"131.78572\"\n       sodipodi:cy=\"135\"\n       sodipodi:rx=\"8.9285717\"\n       sodipodi:ry=\"9.2857141\"\n       d=\"M 140.71429 135 A 8.9285717 9.2857141 0 1 1  122.85715,135 A 8.9285717 9.2857141 0 1 1  140.71429 135 z\"\n       transform=\"matrix(1.9791656,0,0,1.9030439,-96.82577,-80.910927)\"\n       inkscape:export-xdpi=\"9\"\n       inkscape:export-ydpi=\"9\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.31853294;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 138.34073,193.65927 L 43.546726,268.25545\"\n       id=\"path3152\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 236.37547,43.62453 L 183.2535,150.95751\"\n       id=\"path3154\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.31853294;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 189.54672,193.65927 L 284.34073,268.25545\"\n       id=\"path3162\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 90.29616,44.33351 L 143.41813,151.66649\"\n       id=\"path3164\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondTetra2.svg":
/*!****************************************!*\
  !*** ./res/img/actions/BondTetra2.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"BondTetra2.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondTetra2.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"146.11708\"\n     inkscape:cy=\"127.88711\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:4.12215689;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:2.00970001;stroke-opacity:1\"\n       id=\"path2160\"\n       sodipodi:cx=\"131.78572\"\n       sodipodi:cy=\"135\"\n       sodipodi:rx=\"8.9285717\"\n       sodipodi:ry=\"9.2857141\"\n       d=\"M 140.71429 135 A 8.9285717 9.2857141 0 1 1  122.85715,135 A 8.9285717 9.2857141 0 1 1  140.71429 135 z\"\n       transform=\"matrix(1.9791656,0,0,1.9030439,-100.82577,-96.910927)\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.31853294;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 130.66986,160 L 10.04443,160\"\n       id=\"path3152\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 309.02255,160 L 189.26316,160\"\n       id=\"path3154\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 256.37547,43.62453 L 176.82086,133.14201\"\n       id=\"path2233\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 255.17914,276.37547 L 175.62453,186.85799\"\n       id=\"path2235\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondThree.svg":
/*!***************************************!*\
  !*** ./res/img/actions/BondThree.svg ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"BondThree.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondTwo.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"171.24224\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.96105766;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 280.0389,160 L 39.961095,160\"\n       id=\"path3152\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.96105766;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 280.01947,199.98053 L 39.941666,199.98053\"\n       id=\"path3574\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.96105766;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 280.01947,119.98053 L 39.941663,119.98053\"\n       id=\"path3576\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondTrigonal.svg":
/*!******************************************!*\
  !*** ./res/img/actions/BondTrigonal.svg ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"BondTrigonal.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondTrigonal.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"171.24224\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"743\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:4.1221571;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:2.00970001;stroke-opacity:1\"\n       id=\"path2160\"\n       sodipodi:cx=\"131.78572\"\n       sodipodi:cy=\"135\"\n       sodipodi:rx=\"8.9285717\"\n       sodipodi:ry=\"9.2857141\"\n       d=\"M 140.71429 135 A 8.9285717 9.2857141 0 1 1  122.85715,135 A 8.9285717 9.2857141 0 1 1  140.71429 135 z\"\n       transform=\"matrix(1.9791656,0,0,1.9030439,-82.82577,-96.910927)\"\n       inkscape:export-xdpi=\"9\"\n       inkscape:export-ydpi=\"9\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.31853294;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 148.66986,160 L 28.04443,160\"\n       id=\"path3152\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 248.37547,27.62453 L 195.2535,134.95751\"\n       id=\"path3154\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.24905968;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 247.41813,293.9522 L 194.29616,186.61922\"\n       id=\"path3158\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondTwo.svg":
/*!*************************************!*\
  !*** ./res/img/actions/BondTwo.svg ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"BondTwo.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondOne.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"171.24224\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.96105766;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 280.0389,140 L 39.961095,140\"\n       id=\"path3152\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:19.96105766;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 280.01947,179.98053 L 39.941666,179.98053\"\n       id=\"path3574\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondUp.svg":
/*!************************************!*\
  !*** ./res/img/actions/BondUp.svg ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"BondUp.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondUp.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"171.24224\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#000000;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;fill-opacity:1\"\n       d=\"M 10,160 L 300,100 L 300,220.71429 L 10,160 z \"\n       id=\"path3610\"\n       sodipodi:nodetypes=\"cccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/BondZero.svg":
/*!**************************************!*\
  !*** ./res/img/actions/BondZero.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"BondZero.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondLinear.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective2966\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4517786\"\n     inkscape:cx=\"160\"\n     inkscape:cy=\"160\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1390\"\n     inkscape:window-height=\"1119\"\n     inkscape:window-x=\"422\"\n     inkscape:window-y=\"0\"\n     showgrid=\"false\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2968\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:1;stroke:none\"\n       id=\"path3742\"\n       sodipodi:cx=\"40\"\n       sodipodi:cy=\"135\"\n       sodipodi:rx=\"10\"\n       sodipodi:ry=\"10\"\n       d=\"m 50,135 a 10,10 0 1 1 -20,0 10,10 0 1 1 20,0 z\"\n       transform=\"matrix(1.25,0,0,1.25,132.5,-8.75)\" />\n    <path\n       transform=\"matrix(1.25,0,0,1.25,-17.5,-8.75)\"\n       d=\"m 50,135 a 10,10 0 1 1 -20,0 10,10 0 1 1 20,0 z\"\n       sodipodi:ry=\"10\"\n       sodipodi:rx=\"10\"\n       sodipodi:cy=\"135\"\n       sodipodi:cx=\"40\"\n       id=\"path3744\"\n       style=\"fill:#000000;fill-opacity:1;stroke:none\"\n       sodipodi:type=\"arc\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:1;stroke:none\"\n       id=\"path3746\"\n       sodipodi:cx=\"40\"\n       sodipodi:cy=\"135\"\n       sodipodi:rx=\"10\"\n       sodipodi:ry=\"10\"\n       d=\"m 50,135 a 10,10 0 1 1 -20,0 10,10 0 1 1 20,0 z\"\n       transform=\"matrix(1.25,0,0,1.25,32.5,-8.75)\" />\n    <path\n       transform=\"matrix(1.25,0,0,1.25,82.5,-8.75)\"\n       d=\"m 50,135 a 10,10 0 1 1 -20,0 10,10 0 1 1 20,0 z\"\n       sodipodi:ry=\"10\"\n       sodipodi:rx=\"10\"\n       sodipodi:cy=\"135\"\n       sodipodi:cx=\"40\"\n       id=\"path3748\"\n       style=\"fill:#000000;fill-opacity:1;stroke:none\"\n       sodipodi:type=\"arc\" />\n    <path\n       transform=\"matrix(1.25,0,0,1.25,232.5,-8.75)\"\n       d=\"m 50,135 a 10,10 0 1 1 -20,0 10,10 0 1 1 20,0 z\"\n       sodipodi:ry=\"10\"\n       sodipodi:rx=\"10\"\n       sodipodi:cy=\"135\"\n       sodipodi:cx=\"40\"\n       id=\"path3750\"\n       style=\"fill:#000000;fill-opacity:1;stroke:none\"\n       sodipodi:type=\"arc\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:1;stroke:none\"\n       id=\"path3752\"\n       sodipodi:cx=\"40\"\n       sodipodi:cy=\"135\"\n       sodipodi:rx=\"10\"\n       sodipodi:ry=\"10\"\n       d=\"m 50,135 a 10,10 0 1 1 -20,0 10,10 0 1 1 20,0 z\"\n       transform=\"matrix(1.25,0,0,1.25,182.5,-8.75)\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/GenericAccept.svg":
/*!*******************************************!*\
  !*** ./res/img/actions/GenericAccept.svg ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"GenericAccept.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainQuit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"159.5736\"\n     inkscape:cy=\"158.28825\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"793\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"21\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none;fill-opacity:1\"\n       d=\"M 300.71429,39.285714 C 221.40032,73.699762 164.28823,126.10076 120,210 C 82.667331,182.4368 64.188257,170.57196 8.5714286,174.28571 C 88.702873,232.3286 116.45809,273.89571 131.42857,295 C 138.61324,305.12842 189.62059,127.77256 300.71429,39.285714 z \"\n       id=\"path3211\"\n       sodipodi:nodetypes=\"cccsc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainAtom.svg":
/*!**************************************!*\
  !*** ./res/img/actions/MainAtom.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MainAtom.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainAtom.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective2848\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"48.145029\"\n     inkscape:cy=\"158.28825\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"793\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"597\"\n     inkscape:window-y=\"53\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#050404;stroke-width:0.99991798;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path2173\"\n       sodipodi:cx=\"80\"\n       sodipodi:cy=\"59.285713\"\n       sodipodi:rx=\"9.2857141\"\n       sodipodi:ry=\"8.5714283\"\n       d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n       transform=\"matrix(3.9083767,0,0,4.4541355,-191.02317,-104.15694)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:1;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path3146\"\n       sodipodi:cx=\"80\"\n       sodipodi:cy=\"59.285713\"\n       sodipodi:rx=\"9.2857141\"\n       sodipodi:ry=\"8.5714283\"\n       d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n       transform=\"matrix(4.1274211,0,0,4.7037667,-170.63132,-160.28246)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#050404;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path3148\"\n       sodipodi:cx=\"80\"\n       sodipodi:cy=\"59.285713\"\n       sodipodi:rx=\"9.2857141\"\n       sodipodi:ry=\"8.5714283\"\n       d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n       transform=\"matrix(3.9083767,0,0,4.4541355,-123.67417,-89.452119)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:1;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path3150\"\n       sodipodi:cx=\"80\"\n       sodipodi:cy=\"59.285713\"\n       sodipodi:rx=\"9.2857141\"\n       sodipodi:ry=\"8.5714283\"\n       d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n       transform=\"matrix(4.1274211,0,0,4.7037667,-189.79433,-79.64646)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;fill-opacity:1;stroke:#7b7777;stroke-width:7.5817451;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path3152\"\n       sodipodi:cx=\"164.28572\"\n       sodipodi:cy=\"173.57143\"\n       sodipodi:rx=\"85.714287\"\n       sodipodi:ry=\"157.14285\"\n       d=\"M 250.00001 173.57143 A 85.714287 157.14285 0 1 1  78.571434,173.57143 A 85.714287 157.14285 0 1 1  250.00001 173.57143 z\"\n       transform=\"matrix(0.5559432,-0.9629219,0.8671851,0.5006696,-82.679852,232.98137)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;fill-opacity:1;stroke:#7b7777;stroke-width:7.58174519;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path3160\"\n       sodipodi:cx=\"164.28572\"\n       sodipodi:cy=\"173.57143\"\n       sodipodi:rx=\"85.714287\"\n       sodipodi:ry=\"157.14285\"\n       d=\"M 250.00001 173.57143 A 85.714287 157.14285 0 1 1  78.571434,173.57143 A 85.714287 157.14285 0 1 1  250.00001 173.57143 z\"\n       transform=\"matrix(-0.5559432,-0.962922,0.8671851,-0.5006694,98.56249,410.307)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:1;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path3166\"\n       sodipodi:cx=\"80\"\n       sodipodi:cy=\"59.285713\"\n       sodipodi:rx=\"9.2857141\"\n       sodipodi:ry=\"8.5714283\"\n       d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n       transform=\"matrix(1.1659548,0,0,1.3287666,177.55034,-16.166303)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:1;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path3168\"\n       sodipodi:cx=\"80\"\n       sodipodi:cy=\"59.285713\"\n       sodipodi:rx=\"9.2857141\"\n       sodipodi:ry=\"8.5714283\"\n       d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n       transform=\"matrix(1.1659548,0,0,1.3287666,147.55034,143.8337)\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainBond.svg":
/*!**************************************!*\
  !*** ./res/img/actions/MainBond.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"MainBond.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainAtom.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"159.5736\"\n     inkscape:cy=\"158.28825\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"793\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"479\"\n     inkscape:window-y=\"21\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       id=\"g3182\"\n       transform=\"translate(11.909887,59.760501)\">\n      <path\n         transform=\"matrix(2.0292346,0,0,2.3125933,-112.32262,-38.207236)\"\n         d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path2173\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#050404;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(2.1429628,0,0,2.4422022,-101.73514,-67.347684)\"\n         d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path3146\"\n         style=\"fill:#000000;fill-opacity:1;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(2.0292346,0,0,2.3125933,-77.354923,-30.572473)\"\n         d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path3148\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#050404;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(2.1429628,0,0,2.4422022,-111.6846,-25.481361)\"\n         d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path3150\"\n         style=\"fill:#000000;fill-opacity:1;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <g\n       id=\"g3188\"\n       transform=\"translate(-15.161547,-19.009179)\">\n      <path\n         transform=\"matrix(-2.0292346,0,0,2.3125933,428.39405,40.562444)\"\n         d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path3174\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#050404;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(-2.1429628,0,0,2.4422022,417.80657,11.421996)\"\n         d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path3176\"\n         style=\"fill:#000000;fill-opacity:1;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(-2.0292346,0,0,2.3125933,393.42635,48.197207)\"\n         d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path3178\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#050404;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(-2.1429628,0,0,2.4422022,427.75603,53.288319)\"\n         d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path3180\"\n         style=\"fill:#000000;fill-opacity:1;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;fill-opacity:1;stroke:#7b7777;stroke-width:7.58174515;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path3152\"\n       sodipodi:cx=\"164.28572\"\n       sodipodi:cy=\"173.57143\"\n       sodipodi:rx=\"85.714287\"\n       sodipodi:ry=\"157.14285\"\n       d=\"M 250.00001 173.57143 A 85.714287 157.14285 0 1 1  78.571434,173.57143 A 85.714287 157.14285 0 1 1  250.00001 173.57143 z\"\n       transform=\"matrix(-1.3630223e-8,-1.1150628,0.8671872,4.2624012e-8,9.4810906,343.88434)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;fill-opacity:1;stroke:#7b7777;stroke-width:7.58174515;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path3195\"\n       sodipodi:cx=\"164.28572\"\n       sodipodi:cy=\"173.57143\"\n       sodipodi:rx=\"85.714287\"\n       sodipodi:ry=\"157.14285\"\n       d=\"M 250.00001 173.57143 A 85.714287 157.14285 0 1 1  78.571434,173.57143 A 85.714287 157.14285 0 1 1  250.00001 173.57143 z\"\n       transform=\"matrix(0.8308212,-1.0223571e-8,-3.1758687e-8,0.6504479,-60.492046,52.100836)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;fill-opacity:1;stroke:#7b7777;stroke-width:7.58174515;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path3197\"\n       sodipodi:cx=\"164.28572\"\n       sodipodi:cy=\"173.57143\"\n       sodipodi:rx=\"85.714287\"\n       sodipodi:ry=\"157.14285\"\n       d=\"M 250.00001 173.57143 A 85.714287 157.14285 0 1 1  78.571434,173.57143 A 85.714287 157.14285 0 1 1  250.00001 173.57143 z\"\n       transform=\"matrix(0.8308212,-1.0223571e-8,-3.1758687e-8,0.6504479,107.50794,52.100828)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:1;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path3168\"\n       sodipodi:cx=\"80\"\n       sodipodi:cy=\"59.285713\"\n       sodipodi:rx=\"9.2857141\"\n       sodipodi:ry=\"8.5714283\"\n       d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n       transform=\"matrix(1.1659548,0,0,1.3287666,89.896893,-11.387448)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:1;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path3200\"\n       sodipodi:cx=\"80\"\n       sodipodi:cy=\"59.285713\"\n       sodipodi:rx=\"9.2857141\"\n       sodipodi:ry=\"8.5714283\"\n       d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n       transform=\"matrix(1.1659548,0,0,1.3287666,-12.449661,159.8337)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:1;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path3202\"\n       sodipodi:cx=\"80\"\n       sodipodi:cy=\"59.285713\"\n       sodipodi:rx=\"9.2857141\"\n       sodipodi:ry=\"8.5714283\"\n       d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n       transform=\"matrix(1.1659548,0,0,1.3287666,-74.103107,22.612552)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:1;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path3204\"\n       sodipodi:cx=\"80\"\n       sodipodi:cy=\"59.285713\"\n       sodipodi:rx=\"9.2857141\"\n       sodipodi:ry=\"8.5714283\"\n       d=\"M 89.285714 59.285713 A 9.2857141 8.5714283 0 1 1  70.714286,59.285713 A 9.2857141 8.5714283 0 1 1  89.285714 59.285713 z\"\n       transform=\"matrix(1.1659548,0,0,1.3287666,179.55034,179.8337)\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainCopy.svg":
/*!**************************************!*\
  !*** ./res/img/actions/MainCopy.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MainCopy.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomEdit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective26\" />\n    <inkscape:perspective\n       id=\"perspective3630\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1\"\n     inkscape:cx=\"103.77793\"\n     inkscape:cy=\"88.169551\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1440\"\n     inkscape:window-height=\"838\"\n     inkscape:window-x=\"-8\"\n     inkscape:window-y=\"-8\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2832\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-opacity:0.5;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"m 47.647496,250.03858 46.764383,-103.11546 0,-29.46156 -62.352511,0 0,-29.46156 L 110,88 C 94.411879,88 85.058997,73.26922 85.058997,58.538439 c 0,-14.73078 9.352882,-29.46156 24.941003,-29.46156 l 15.58814,0 c 15.58811,0 24.94098,14.73078 24.94098,29.46156 C 150.52912,73.26922 141.17625,88 125.58814,88 l 77.94063,0 0,29.46156 -62.35252,0 0,29.46156 46.76439,103.11546 -37.41152,0 -31.17624,-73.65389 -34.293883,73.65389 -37.411501,0 z\"\n       id=\"path3606-1\"\n       sodipodi:nodetypes=\"cccccccccccccccccccc\" />\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"m 148.05936,290.03859 46.76439,-103.11546 0,-29.46157 -62.35252,0 0,-29.46156 77.94063,0 c -15.58811,0 -24.941,-14.73077 -24.941,-29.46156 0,-14.73078 9.35289,-29.46156 24.941,-29.46156 l 15.58814,0 c 15.58811,0 24.941,14.73078 24.941,29.46156 C 250.941,113.26923 241.58811,128 226,128 l 77.94063,0 0,29.46156 -62.35252,0 0,29.46157 46.76439,103.11546 -37.4115,0 -31.17626,-73.6539 -34.29388,73.6539 -37.4115,0 z\"\n       id=\"path3606\"\n       sodipodi:nodetypes=\"cccccccccccccccccccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainCut.svg":
/*!*************************************!*\
  !*** ./res/img/actions/MainCut.svg ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MainCut.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomEdit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective13\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"2.8284272\"\n     inkscape:cx=\"170.6097\"\n     inkscape:cy=\"215.55961\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1440\"\n     inkscape:window-height=\"838\"\n     inkscape:window-x=\"-8\"\n     inkscape:window-y=\"-8\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"font-size:medium;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-indent:0;text-align:start;text-decoration:none;line-height:normal;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;text-anchor:start;color:#000000;fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:4.93447638;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate;font-family:Bitstream Vera Sans;-inkscape-font-specification:Bitstream Vera Sans\"\n       d=\"m 159.84431,4.0536087 c -0.29508,0.00449 -0.58207,0.030042 -0.87522,0.060857 -0.0514,-0.00404 -0.10482,0.00322 -0.15629,0 -0.26793,-0.016729 -0.54407,-0.036361 -0.8127,-0.030428 -2.52061,0.055258 -5.00989,1.1162381 -6.75172,2.8907158 -1.74182,1.7744777 -2.71473,4.2405775 -2.65692,6.6942895 L 149.90429,134.04453 47.472011,85.328366 45.346471,83.624365 c -1.676342,-1.065683 -3.687289,-1.624994 -5.688946,-1.582287 -0.143902,0.003 -0.294356,0.02089 -0.437611,0.03043 -0.397202,-0.03723 -0.78889,-0.04182 -1.187802,-0.03043 -4.295438,0.112766 -8.28419,3.359535 -9.158577,7.455004 -0.874388,4.09547 1.451553,8.636997 5.345108,10.406581 l 0.562644,0.273857 109.840403,68.03832 c 1.67488,1.03918 3.67355,1.56833 5.6577,1.52143 l 0.46886,43.99973 c 0.005,0.64693 0.10661,1.28576 0.25007,1.91701 -8.81541,5.38078 -15.33495,12.77739 -19.41119,21.75644 -5.08278,11.19622 -6.52603,24.62804 -5.15756,39.98316 0.0144,0.14281 0.0352,0.28499 0.0625,0.426 1.83482,10.3447 4.15972,19.71772 9.34612,26.95973 5.16099,7.20651 13.78411,11.64917 24.97511,11.13687 l 0,0.0304 c 18.09365,-0.39567 30.45126,-6.60038 37.25946,-16.7053 6.80821,-10.10493 8.17398,-23.08912 7.65819,-37.0316 -0.007,-0.1017 -0.0175,-0.20319 -0.0312,-0.30428 -1.7739,-18.11192 -9.59128,-28.87305 -18.53596,-35.54059 -6.03478,-4.49844 -12.34072,-7.3741 -17.56696,-10.01101 0.27934,-0.90435 0.41844,-1.85482 0.40635,-2.79942 l -0.53139,-49.32475 46.69938,22.21288 c 0.083,0.0395 0.16586,0.0847 0.25006,0.1217 -3.31001,17.14209 2.79839,30.23586 11.78424,40.2266 0.34773,0.39526 0.76108,0.73572 1.21906,1.00414 11.30221,6.4521 20.79655,6.99911 28.38221,4.41215 7.58567,-2.58696 13.73725,-4.92629 18.81728,-10.68044 6.76902,-5.94633 9.04203,-16.49269 9.90878,-25.01229 0.11784,-10.04709 -5.59112,-21.3058 -20.88032,-28.75502 -0.45188,-0.22178 -0.93854,-0.37626 -1.43786,-0.45643 -6.30082,-1.02286 -12.65323,-2.0926 -18.97357,-1.94743 -2.10678,0.0484 -4.22421,0.23694 -6.3141,0.60857 -4.21959,0.75035 -8.31043,2.4329 -12.00305,5.17287 -0.69153,-0.62747 -1.46297,-1.14863 -2.3131,-1.55187 l -42.94844,-20.41753 c 1.1306,-1.8011 1.65144,-3.95307 1.43786,-6.05529 L 169.94063,12.999613 c -0.20349,-2.429755 -1.39886,-4.7794669 -3.25082,-6.4204317 -1.85197,-1.6409647 -4.34143,-2.5562438 -6.8455,-2.5255726 z m -9.59618,163.9492313 0,0 z m 111.55959,12.82428 c 8.34066,2.98048 12.80146,8.83371 12.7225,15.56559 -0.52192,14.16651 -10.39975,21.02728 -20.03685,22.62502 -4.93943,1.6845 -12.73755,-0.57732 -17.22364,-5.22544 -4.30437,-5.36245 -8.22528,-12.25024 -4.56467,-27.41058 6.00237,-10.50581 21.04796,-10.76963 29.10266,-5.55459 z m -101.33825,50.22103 c 9.69468,-0.0714 19.13216,5.11216 24.59899,13.04553 8.86571,10.18835 10.08761,40.94213 0.62719,47.7922 -10.21171,9.37645 -27.6858,12.97759 -37.42521,3.78947 -3.54224,-4.94619 -6.12245,-9.52873 -7.86958,-19.28591 -2.56041,-21.47176 7.13036,-43.01402 20.06861,-45.34129 z\"\n       id=\"path3256\"\n       sodipodi:nodetypes=\"cssssccccssssccccccsccsccsccscccccccscccssscccccsccccccccccccccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainDelete.svg":
/*!****************************************!*\
  !*** ./res/img/actions/MainDelete.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"MainDelete.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainQuit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"159.5736\"\n     inkscape:cy=\"158.28825\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"793\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"21\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"opacity:1;fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       d=\"M 159.65625 30.71875 C 88.093395 30.71875 30 88.487677 30 159.65625 C 30 230.82482 88.093395 288.56252 159.65625 288.5625 C 231.2191 288.5625 289.28125 230.82482 289.28125 159.65625 C 289.28125 88.487677 231.2191 30.71875 159.65625 30.71875 z M 157.84375 72 C 158.59438 71.985792 159.33922 71.994392 160.09375 72 C 176.61399 72.122789 194.05818 77.018142 211.4375 88.5625 L 86.4375 213.5625 C 60.537368 184.56234 69.685666 120.89857 96.4375 96.4375 C 113.21391 82.331272 134.57422 72.440433 157.84375 72 z M 235.53125 110.625 C 261.43138 139.62516 252.28307 203.32017 225.53125 227.78125 C 196.3648 252.30549 153.31112 264.04188 110.53125 235.625 L 235.53125 110.625 z \"\n       id=\"path3281\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainMove.svg":
/*!**************************************!*\
  !*** ./res/img/actions/MainMove.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"MainMove.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainMove.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"198.18854\"\n     inkscape:cy=\"129.1885\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"166\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       transform=\"translate(62.703026,241.98783)\"\n       id=\"g3444\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3446\">\n        <use\n           xlink:href=\"#char51\"\n           x=\"0\"\n           id=\"use3448\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(92.31631,241.98783)\"\n       id=\"g3450\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3452\">\n        <use\n           xlink:href=\"#char46\"\n           x=\"0\"\n           id=\"use3454\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(62.081933,211.98783)\"\n       id=\"g3456\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3458\">\n        <use\n           xlink:href=\"#char47\"\n           x=\"0\"\n           id=\"use3460\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(62.081933,271.98783)\"\n       id=\"g3462\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3464\">\n        <use\n           xlink:href=\"#char47\"\n           x=\"0\"\n           id=\"use3466\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(243.63564,271.98783)\"\n       id=\"g3468\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3470\">\n        <use\n           xlink:href=\"#char38\"\n           x=\"0\"\n           id=\"use3472\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n        <use\n           xlink:href=\"#char69\"\n           x=\"1227\"\n           id=\"use3474\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(208.2958,247.96859)\"\n       id=\"g3476\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3478\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3480\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(215.2958,204.00707)\"\n       id=\"g3482\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3484\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3486\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(275.2958,204.00707)\"\n       id=\"g3488\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3490\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3492\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(283.2958,243.96859)\"\n       id=\"g3494\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3496\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3498\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(102.68629,241.50525)\"\n       id=\"g3500\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3502\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3504\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(112.65748,242.7117)\"\n       id=\"g3506\">\n      <g\n         transform=\"scale(2.9296875e-3,-2.9296875e-3)\"\n         id=\"g3508\">\n        <use\n           xlink:href=\"#char18\"\n           x=\"0\"\n           id=\"use3510\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <path\n       style=\"fill:#ffffff;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:round;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none;fill-opacity:1\"\n       d=\"M 130,130 L 70,130 L 70,100 L 10,160 L 70,220 L 70,190 L 130,190 L 130,250 L 100,250 L 160,310 L 220,250 L 190,250 L 190,190 L 250,190 L 250,220 L 310,160 L 250,100 L 250,130 L 190,130 L 190,70 L 220,70 L 160,10 L 100,70 L 130,70 L 130,130 z \"\n       id=\"path4831\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainNew.svg":
/*!*************************************!*\
  !*** ./res/img/actions/MainNew.svg ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MainNew.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainNew.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <linearGradient\n       id=\"linearGradient3748\">\n      <stop\n         id=\"stop3750\"\n         offset=\"0\"\n         style=\"stop-color:#b1b1b1;stop-opacity:1;\" />\n      <stop\n         id=\"stop3752\"\n         offset=\"1\"\n         style=\"stop-color:#f8f8f8;stop-opacity:1;\" />\n    </linearGradient>\n    <linearGradient\n       id=\"linearGradient3732\">\n      <stop\n         style=\"stop-color:#2c2c2c;stop-opacity:0.75294119;\"\n         offset=\"0\"\n         id=\"stop3734\" />\n      <stop\n         style=\"stop-color:#aaaaaa;stop-opacity:0.75294119;\"\n         offset=\"1\"\n         id=\"stop3736\" />\n    </linearGradient>\n    <linearGradient\n       id=\"linearGradient3724\">\n      <stop\n         style=\"stop-color:#888888;stop-opacity:1;\"\n         offset=\"0\"\n         id=\"stop3726\" />\n      <stop\n         style=\"stop-color:#000000;stop-opacity:0;\"\n         offset=\"1\"\n         id=\"stop3728\" />\n    </linearGradient>\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective14\" />\n    <linearGradient\n       id=\"linearGradient3302\">\n      <stop\n         style=\"stop-color:#9d9d9d;stop-opacity:1;\"\n         offset=\"0\"\n         id=\"stop3304\" />\n      <stop\n         style=\"stop-color:#dfdfdf;stop-opacity:1;\"\n         offset=\"1\"\n         id=\"stop3306\" />\n    </linearGradient>\n    <inkscape:perspective\n       id=\"perspective2858\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2858-1\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2858-4\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2919\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3732\"\n       id=\"radialGradient3738\"\n       cx=\"162.18814\"\n       cy=\"173.88938\"\n       fx=\"162.18814\"\n       fy=\"173.88938\"\n       r=\"121.40368\"\n       gradientTransform=\"matrix(1,0,0,0.99372304,0,1.0914969)\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3748\"\n       id=\"radialGradient3746\"\n       cx=\"159.69394\"\n       cy=\"159.28571\"\n       fx=\"159.69394\"\n       fy=\"159.28571\"\n       r=\"155.90823\"\n       gradientTransform=\"matrix(1,0,0,1.0019631,0,-0.31268812)\"\n       gradientUnits=\"userSpaceOnUse\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.98994949\"\n     inkscape:cx=\"51.002171\"\n     inkscape:cy=\"165.43111\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1283\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"23\"\n     inkscape:window-y=\"14\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:url(#radialGradient3738);stroke:#000000;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;fill-opacity:1;stroke-miterlimit:4;stroke-dasharray:none;opacity:1\"\n       d=\"M 70.323695,204.27689 C 41.841631,206.80461 27.43488,166.54249 59.305446,137.55529 49.873891,113.58226 39.63241,89.128318 90.523819,87.361033 106.27301,49.269942 126.50785,43.380107 172.54857,70.221535 c 24.08035,-4.949896 54.09769,-38.514586 71.00648,30.606245 42.5116,9.78214 51.34305,33.15299 23.87288,77.12773 16.04417,28.54308 14.43112,49.54596 -18.36375,56.92763 0.70405,25.67554 0.0649,50.80591 -47.13361,31.8305 -27.699,35.95486 -57.19689,38.30078 -88.146,-3.67275 -34.966493,0.38164 -56.960187,2.40605 -43.460875,-58.764 z\"\n       id=\"path2948\"\n       sodipodi:nodetypes=\"cccccccccc\" />\n    <path\n       style=\"fill:url(#radialGradient3746);stroke:#000000;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;fill-opacity:1;stroke-miterlimit:4;stroke-dasharray:none;opacity:1\"\n       d=\"M 77.05707,182.24039 C 63.933812,160.98392 31.572476,151.75124 4.2142019,139.39165 30.679923,141.54169 57.327987,144.60344 81.954069,137.55529 72.559539,108.605 63.929901,79.569724 37.881073,52.469912 c 24.509908,20.813833 50.021015,38.957802 80.188367,44.68512 4.8179,-29.638769 8.20842,-60.229129 7.3455,-93.6551159 7.91156,33.7919259 24.82706,63.0818819 44.073,91.2066169 18.18443,-22.393883 31.73946,-46.639529 40.40025,-72.842869 -3.97926,28.157749 -6.10209,56.315497 1.22425,84.473246 30.1815,-5.53135 54.99364,-18.221839 79.57624,-31.218376 -21.4992,23.026775 -42.89749,46.093916 -55.09124,72.842866 25.48741,8.04662 52.18744,10.03009 79.57624,8.56974 -29.54737,11.57525 -58.76632,23.25998 -77.12774,38.56388 12.53395,26.2048 32.69325,46.69059 52.64274,67.33374 -25.06648,-10.42451 -44.73179,-24.08972 -78.35199,-29.38199 -3.69624,29.59544 5.33453,54.10007 10.40613,80.18837 -17.43375,-21.93842 -27.4327,-46.35509 -60.60037,-63.04887 -35.09654,11.6295 -42.37898,40.95888 -58.15188,64.88524 4.3981,-26.75973 7.48188,-53.95757 0.61212,-84.47325 -28.70497,-0.76993 -55.11896,14.49699 -82.02474,26.32138 19.90929,-22.09375 43.397129,-38.46182 54.47912,-74.67925 z\"\n       id=\"path2950\"\n       sodipodi:nodetypes=\"ccccccccccccccccccccc\" />\n    <g\n       id=\"g2933\"\n       transform=\"matrix(0.66308916,0,0,0.66308916,51.085812,66.604893)\">\n      <path\n         transform=\"matrix(4.1274211,0,0,4.7037667,-168.76512,-87.437593)\"\n         d=\"m 89.285714,59.285713 c 0,4.733869 -4.157356,8.571428 -9.285714,8.571428 -5.128358,0 -9.285714,-3.837559 -9.285714,-8.571428 0,-4.733869 4.157356,-8.571428 9.285714,-8.571428 5.128358,0 9.285714,3.837559 9.285714,8.571428 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path3146-8-5\"\n         style=\"fill:#000000;fill-opacity:1;stroke:none\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(4.1274211,0,0,4.7037667,-170.1158,-189.26245)\"\n         d=\"m 89.285714,59.285713 c 0,4.733869 -4.157356,8.571428 -9.285714,8.571428 -5.128358,0 -9.285714,-3.837559 -9.285714,-8.571428 0,-4.733869 4.157356,-8.571428 9.285714,-8.571428 5.128358,0 9.285714,3.837559 9.285714,8.571428 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path3150-9\"\n         style=\"fill:#000000;fill-opacity:1;stroke:none\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(4.1274211,0,0,4.7037667,-231.66709,-98.469883)\"\n         d=\"m 89.285714,59.285713 c 0,4.733869 -4.157356,8.571428 -9.285714,8.571428 -5.128358,0 -9.285714,-3.837559 -9.285714,-8.571428 0,-4.733869 4.157356,-8.571428 9.285714,-8.571428 5.128358,0 9.285714,3.837559 9.285714,8.571428 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path3146\"\n         style=\"fill:#000000;fill-opacity:1;stroke:none\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(3.9083767,0,0,4.4541355,-99.709926,-156.21097)\"\n         d=\"m 89.285714,59.285713 c 0,4.733869 -4.157356,8.571428 -9.285714,8.571428 -5.128358,0 -9.285714,-3.837559 -9.285714,-8.571428 0,-4.733869 4.157356,-8.571428 9.285714,-8.571428 5.128358,0 9.285714,3.837559 9.285714,8.571428 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path3148\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#050404;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(3.9083767,0,0,4.4541355,-189.70992,-49.068112)\"\n         d=\"m 89.285714,59.285713 c 0,4.733869 -4.157356,8.571428 -9.285714,8.571428 -5.128358,0 -9.285714,-3.837559 -9.285714,-8.571428 0,-4.733869 4.157356,-8.571428 9.285714,-8.571428 5.128358,0 9.285714,3.837559 9.285714,8.571428 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path3148-0\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#050404;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(4.1274211,0,0,4.7037667,-133.68722,-145.69101)\"\n         d=\"m 89.285714,59.285713 c 0,4.733869 -4.157356,8.571428 -9.285714,8.571428 -5.128358,0 -9.285714,-3.837559 -9.285714,-8.571428 0,-4.733869 4.157356,-8.571428 9.285714,-8.571428 5.128358,0 9.285714,3.837559 9.285714,8.571428 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path3150-4\"\n         style=\"fill:#000000;fill-opacity:1;stroke:none\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(3.9083767,0,0,4.4541355,-209.20179,-147.34435)\"\n         d=\"m 89.285714,59.285713 c 0,4.733869 -4.157356,8.571428 -9.285714,8.571428 -5.128358,0 -9.285714,-3.837559 -9.285714,-8.571428 0,-4.733869 4.157356,-8.571428 9.285714,-8.571428 5.128358,0 9.285714,3.837559 9.285714,8.571428 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path2173\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#050404;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(4.1274211,0,0,4.7037667,-148.68722,-55.691026)\"\n         d=\"m 89.285714,59.285713 c 0,4.733869 -4.157356,8.571428 -9.285714,8.571428 -5.128358,0 -9.285714,-3.837559 -9.285714,-8.571428 0,-4.733869 4.157356,-8.571428 9.285714,-8.571428 5.128358,0 9.285714,3.837559 9.285714,8.571428 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path3150\"\n         style=\"fill:#000000;fill-opacity:1;stroke:none\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(4.1274211,0,0,4.7037667,-198.80993,-119.18415)\"\n         d=\"m 89.285714,59.285713 c 0,4.733869 -4.157356,8.571428 -9.285714,8.571428 -5.128358,0 -9.285714,-3.837559 -9.285714,-8.571428 0,-4.733869 4.157356,-8.571428 9.285714,-8.571428 5.128358,0 9.285714,3.837559 9.285714,8.571428 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path3146-8\"\n         style=\"fill:#000000;fill-opacity:1;stroke:none\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(3.9083767,0,0,4.4541355,-93.487486,-110.91579)\"\n         d=\"m 89.285714,59.285713 c 0,4.733869 -4.157356,8.571428 -9.285714,8.571428 -5.128358,0 -9.285714,-3.837559 -9.285714,-8.571428 0,-4.733869 4.157356,-8.571428 9.285714,-8.571428 5.128358,0 9.285714,3.837559 9.285714,8.571428 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path2173-7\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#050404;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(3.9083767,0,0,4.4541355,-152.05893,-154.48722)\"\n         d=\"m 89.285714,59.285713 c 0,4.733869 -4.157356,8.571428 -9.285714,8.571428 -5.128358,0 -9.285714,-3.837559 -9.285714,-8.571428 0,-4.733869 4.157356,-8.571428 9.285714,-8.571428 5.128358,0 9.285714,3.837559 9.285714,8.571428 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path2173-8\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#050404;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(3.9083767,0,0,4.4541355,-144.70993,-87.639533)\"\n         d=\"m 89.285714,59.285713 c 0,4.733869 -4.157356,8.571428 -9.285714,8.571428 -5.128358,0 -9.285714,-3.837559 -9.285714,-8.571428 0,-4.733869 4.157356,-8.571428 9.285714,-8.571428 5.128358,0 9.285714,3.837559 9.285714,8.571428 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path3148-2\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#050404;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(4.1274211,0,0,4.7037667,-104.52421,-89.184173)\"\n         d=\"m 89.285714,59.285713 c 0,4.733869 -4.157356,8.571428 -9.285714,8.571428 -5.128358,0 -9.285714,-3.837559 -9.285714,-8.571428 0,-4.733869 4.157356,-8.571428 9.285714,-8.571428 5.128358,0 9.285714,3.837559 9.285714,8.571428 z\"\n         sodipodi:ry=\"8.5714283\"\n         sodipodi:rx=\"9.2857141\"\n         sodipodi:cy=\"59.285713\"\n         sodipodi:cx=\"80\"\n         id=\"path3146-4\"\n         style=\"fill:#000000;fill-opacity:1;stroke:none\"\n         sodipodi:type=\"arc\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainPaste.svg":
/*!***************************************!*\
  !*** ./res/img/actions/MainPaste.svg ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"SelectionPaste.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomEdit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4142136\"\n     inkscape:cx=\"174.19811\"\n     inkscape:cy=\"158.99107\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"0\"\n     showgrid=\"false\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#646169;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;fill-opacity:1\"\n       d=\"M 49.497473,254.94617 C 47.825874,262.83305 36.201583,261.20579 30.405591,265.55278 C 28.322858,267.11483 31.539377,271.49006 29.698484,273.33095 C 26.809794,276.21964 14.54002,280.60096 21.213203,283.93756 C 25.917942,286.28992 18.777684,290.61571 16.970562,292.42284 C 16.407185,292.98621 11.862619,303.34583 10.606601,305.85786 C 8.8718742,309.32732 0.66378058,311.62811 -1.4142135,312.22183 C -5.3815501,313.35535 -6.7727732,317.67427 -2.1213203,320 C 4.7353319,323.42833 10.071931,322.29954 16.970562,320 C 21.596201,318.45812 26.669572,317.77844 31.112698,320 C 36.578588,322.73295 50.364949,320 56.568541,320 C 62.249059,320 67.612413,321.41421 73.539103,321.41421 C 78.147222,321.41421 83.161272,321.90643 86.974132,320 C 87.233912,319.87011 86.176512,316.99055 84.852811,314.34315 C 84.737012,314.11155 86.869217,308.51143 84.852811,305.15076 C 82.266966,300.84102 73.174191,304.07874 70.003569,300.90812 C 68.147372,299.05192 69.987876,293.16133 71.417783,290.30152 C 71.59232,289.95244 65.401454,280.15842 65.053822,279.69491 C 63.028881,276.99499 57.766096,271.20963 63.639609,271.20963 C 66.398433,271.20963 65.234252,265.89903 66.468036,263.43146 C 68.386098,259.59534 68.589356,257.469 68.589356,252.82486 C 68.589356,252.05846 63.356113,251.15582 62.225395,250.70354 C 60.461018,249.99779 62.861998,252.89536 61.518288,254.23907 C 60.546463,255.2109 50.675985,254.23907 49.497473,254.94617 z \"\n       id=\"path3196\"\n       sodipodi:nodetypes=\"cssssssssssssssssssssssc\" />\n    <path\n       style=\"fill:#c5c2c2;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:butt;stroke-linejoin:round;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 53.8295,185.43081 C 48.117551,230.16693 94.90917,267.3379 133.61555,268.32077 C 162.93137,153.99105 110.3127,171.17033 53.8295,185.43081 z \"\n       id=\"path3188\"\n       sodipodi:nodetypes=\"ccc\" />\n    <path\n       style=\"fill:#fcfbff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:butt;stroke-linejoin:round;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 182.96729,2.557079 L 54.035294,186.04372 C 85.905043,179.15842 144.16417,242.05257 133.15455,268.24096 L 321.426,146.40224 C 302.97323,72.703226 258.08103,23.582864 182.96729,2.557079 z \"\n       id=\"path3184\"\n       sodipodi:nodetypes=\"ccccc\" />\n    <path\n       style=\"fill:#fcfbff;fill-opacity:1;fill-rule:evenodd;stroke:#030303;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 86.523375,220.41621 L 50.5,255.09065 C 61.048111,255.62428 64.617354,261.18692 64.369775,269.5 L 100.39315,234.82557 C 100.05192,225.90076 96.35526,220.20575 86.523375,220.41621 z \"\n       id=\"path3190\"\n       sodipodi:nodetypes=\"ccccc\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 141.76067,103.45156 L 152.49269,163.67952 L 212.07438,184.96328 L 259.56663,143.19171 L 249.13583,87.282865 L 189.09687,58.210192 L 141.76067,103.45156 z \"\n       id=\"path3251\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3277\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.319372,-5.459132e-2,4.6165247e-2,0.2700775,110.7288,43.297737)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3173\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.319372,-5.459132e-2,4.6165247e-2,0.2700775,63.614871,89.09596)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3177\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.319372,-5.459132e-2,4.6165247e-2,0.2700775,170.91744,72.502614)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3181\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.319372,-5.459132e-2,4.6165247e-2,0.2700775,74.104227,147.90424)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3185\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.319372,-5.459132e-2,4.6165247e-2,0.2700775,132.84879,169.84315)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3189\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.319372,-5.459132e-2,4.6165247e-2,0.2700775,180.61948,128.82311)\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainRedo.svg":
/*!**************************************!*\
  !*** ./res/img/actions/MainRedo.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MainRedo.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainExport.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <linearGradient\n       id=\"linearGradient3604\">\n      <stop\n         style=\"stop-color:#000000;stop-opacity:0.25098041;\"\n         offset=\"0\"\n         id=\"stop3606\" />\n      <stop\n         style=\"stop-color:#000000;stop-opacity:0.1254902;\"\n         offset=\"1\"\n         id=\"stop3608\" />\n    </linearGradient>\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective23\" />\n    <pattern\n       patternUnits=\"userSpaceOnUse\"\n       width=\"30\"\n       height=\"33\"\n       patternTransform=\"translate(0,0)\"\n       id=\"pattern5043\">\n      <rect\n         id=\"rect5041\"\n         y=\"0\"\n         x=\"0\"\n         height=\"33\"\n         width=\"30\"\n         style=\"fill:none;stroke:none;stroke-linecap:round\" />\n      <path\n         id=\"path5039\"\n         d=\"M 21.5,31.5 L 31.5,21.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5037\"\n         d=\"M 11.5,31.5 L 31.5,11.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5035\"\n         d=\"M 1.5,31.5 L 31.5,1.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5033\"\n         d=\"M 1.5,21.5 L 21.5,1.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    </pattern>\n    <pattern\n       patternUnits=\"userSpaceOnUse\"\n       width=\"30\"\n       height=\"33\"\n       patternTransform=\"translate(18.5,-71.5)\"\n       id=\"pattern5062\">\n      <path\n         id=\"path5060\"\n         d=\"M 1.5,21.5 L 21.5,1.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5058\"\n         d=\"M 1.5,31.5 L 31.5,1.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5056\"\n         d=\"M 11.5,31.5 L 31.5,11.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5054\"\n         d=\"M 21.5,31.5 L 31.5,21.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <rect\n         id=\"rect5052\"\n         y=\"0\"\n         x=\"0\"\n         height=\"33\"\n         width=\"30\"\n         style=\"fill:none;stroke:none;stroke-linecap:round\" />\n      <rect\n         id=\"rect5050\"\n         y=\"0\"\n         x=\"0\"\n         height=\"33\"\n         width=\"30\"\n         style=\"fill:none;stroke:none\" />\n      <path\n         id=\"path5000\"\n         d=\"M 1.5,11.5 L 11.5,1.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <rect\n         id=\"rect5030\"\n         y=\"0\"\n         x=\"0\"\n         height=\"33\"\n         width=\"30\"\n         style=\"fill:none;stroke:none\" />\n    </pattern>\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3604\"\n       id=\"radialGradient3610\"\n       cx=\"210\"\n       cy=\"140\"\n       fx=\"210\"\n       fy=\"140\"\n       r=\"152.5\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(1.0491803,-0.78688524,0.78096126,1.0412817,-119.66246,159.46646)\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.2586836\"\n     inkscape:cx=\"16.170725\"\n     inkscape:cy=\"164.16609\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1716\"\n     inkscape:window-height=\"1116\"\n     inkscape:window-x=\"144\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid3600\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:url(#radialGradient3610);fill-opacity:1;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0\"\n       id=\"path3602\"\n       sodipodi:cx=\"160\"\n       sodipodi:cy=\"160\"\n       sodipodi:rx=\"150\"\n       sodipodi:ry=\"150\"\n       d=\"m 310,160 a 150,150 0 1 1 -300,0 150,150 0 1 1 300,0 z\"\n       transform=\"matrix(0.93333333,0,0,0.93333333,10.666666,10.666666)\" />\n    <path\n       style=\"font-size:medium;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-indent:0;text-align:start;text-decoration:none;line-height:normal;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;text-anchor:start;color:#000000;fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate;font-family:Bitstream Vera Sans;-inkscape-font-specification:Bitstream Vera Sans\"\n       d=\"m 124.537,12.690252 90,50 -90,49.999998 0,-12.8125 c -20.29664,12.07637 -33.75,34.2109 -33.75,59.78125 0,38.68907 30.81093,69.5 69.5,69.5 38.68907,0 69.53125,-30.81093 69.53125,-69.5 -0.0934,-6.60391 2.559,-13.20451 7.196,-17.90755 4.637,-4.70304 11.19944,-7.4485 17.804,-7.4485 6.60457,0 13.16701,2.74546 17.804,7.4485 4.637,4.70304 7.2894,11.30364 7.196,17.90755 0,65.71107 -53.82018,119.5 -119.53125,119.5 -65.71107,0 -119.5,-53.78892 -119.5,-119.5 0,-53.27576 35.34828,-98.733461 83.75,-114.031248 l 0,-32.9375 z\"\n       id=\"path3612\"\n       sodipodi:nodetypes=\"ccccsscssscsscc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainSelAll.svg":
/*!****************************************!*\
  !*** ./res/img/actions/MainSelAll.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MainSelAll.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomEdit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective20\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4142136\"\n     inkscape:cx=\"189.90735\"\n     inkscape:cy=\"158.99107\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"0\"\n     showgrid=\"false\"\n     inkscape:window-maximized=\"0\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 76.36753,113.52483 L 77.074637,213.93399 L 167.5843,264.84567 L 255.97265,210.39845 L 254.55843,117.06036 L 165.46298,53.420751 L 76.36753,113.52483 z \"\n       id=\"path3251\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n       id=\"path3241\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(1.7898996,0,0,1.4097586,-248.04603,-85.05335)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n       id=\"path3288\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,42.797336,11.621703)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3171\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(1.7898996,0,0,1.4097586,-337.35469,-26.947524)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3173\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,-46.092499,68.688162)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3243\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(1.7898996,0,0,1.4097586,-159.19783,-25.889527)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3177\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,132.0984,71.516592)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3249\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(1.7898996,0,0,1.4097586,-336.95273,70.72442)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3181\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,-45.385389,166.73337)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3247\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(1.7898996,0,0,1.4097586,-246.2033,123.92331)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3185\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,43.58874,218.47348)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3245\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(1.7898996,0,0,1.4097586,-158.39386,69.713238)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3189\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,132.21973,165.31915)\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainSelNext.svg":
/*!*****************************************!*\
  !*** ./res/img/actions/MainSelNext.svg ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"SelectionNext.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomEdit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4142136\"\n     inkscape:cx=\"189.90735\"\n     inkscape:cy=\"158.99107\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"false\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 144.95689,266.25988 L 265.16504,266.25988 L 266.57925,147.46595 L 144.95689,266.25988 z \"\n       id=\"path3273\"\n       sodipodi:nodetypes=\"cccc\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 55.861434,55.542071 L 56.568541,172.21469 L 171.82694,55.542071 L 55.861434,55.542071 z \"\n       id=\"path3271\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3288\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,49.161297,11.157237)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3173\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,-66.598595,11.412514)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3243\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(1.7898996,0,0,1.4097586,-148.59123,4.5160638)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3177\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,142.705,101.92218)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3181\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,-65.891485,125.72117)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3247\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(1.7898996,0,0,1.4097586,-266.7094,126.04463)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3185\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,23.082644,220.5948)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3245\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(1.7898996,0,0,1.4097586,-148.49437,124.16046)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3189\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,142.11922,219.76637)\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainSelNone.svg":
/*!*****************************************!*\
  !*** ./res/img/actions/MainSelNone.svg ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MainSelNone.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomEdit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective14\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4142136\"\n     inkscape:cx=\"189.90735\"\n     inkscape:cy=\"158.99107\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"0\"\n     showgrid=\"false\"\n     inkscape:window-maximized=\"0\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"m 76.36753,113.52483 0.707107,100.40916 88.509663,50.91168 90.38835,-54.44722 -1.41422,-93.33809 -89.09545,-59.639609 -89.09545,56.104079 z\"\n       id=\"path3251\"\n       sodipodi:nodetypes=\"ccccccc\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n       id=\"path3288\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,42.797336,11.621703)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3173\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,-46.092499,68.688162)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3177\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,132.0984,71.516592)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3181\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,-45.385389,166.73337)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3185\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,43.58874,218.47348)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3189\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,132.21973,165.31915)\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainSelPrev.svg":
/*!*****************************************!*\
  !*** ./res/img/actions/MainSelPrev.svg ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"SelectionPrev.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomEdit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4142136\"\n     inkscape:cx=\"189.90735\"\n     inkscape:cy=\"158.99107\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"458\"\n     inkscape:window-y=\"104\"\n     showgrid=\"false\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 144.95689,266.25988 L 265.16504,266.25988 L 266.57925,147.46595 L 144.95689,266.25988 z \"\n       id=\"path3273\"\n       sodipodi:nodetypes=\"cccc\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 55.861434,55.542071 L 56.568541,172.21469 L 171.82694,55.542071 L 55.861434,55.542071 z \"\n       id=\"path3271\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3241\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(1.7898996,0,0,1.4097586,-241.68207,-85.517816)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3288\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,49.161297,11.157237)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3171\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(1.7898996,0,0,1.4097586,-357.86079,-84.223172)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3173\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,-66.598595,11.412514)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3177\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,142.705,101.92218)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3249\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(1.7898996,0,0,1.4097586,-357.45883,29.712228)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3181\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,-65.891485,125.72117)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3185\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,23.082644,220.5948)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3189\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.5318008,0,0,0.4497183,142.11922,219.76637)\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainSelSide.svg":
/*!*****************************************!*\
  !*** ./res/img/actions/MainSelSide.svg ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"SelectionSide.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomEdit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4142136\"\n     inkscape:cx=\"199.96541\"\n     inkscape:cy=\"158.99107\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 48.664209,245.16396 L 108.91547,160.16396 L 50.664209,75.163966\"\n       id=\"path3273\"\n       sodipodi:nodetypes=\"ccc\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:15;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 108.7868,160.70711 L 226.16295,161.41421\"\n       id=\"path2170\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 283.22481,77.213358 L 226.68065,159.21336 L 284.22481,241.21336\"\n       id=\"path3271\"\n       sodipodi:nodetypes=\"ccc\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3288\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.37604,-0.37604,0.3179989,0.3179989,165.10228,132.56626)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3243\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(1.2656501,-1.2656501,0.9968499,0.9968499,-343.98648,267.653)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3177\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.37604,-0.37604,0.3179989,0.3179989,-69.132419,130.55198)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3181\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.37604,-0.37604,0.3179989,0.3179989,164.75661,294.92979)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3247\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(1.2656501,-1.2656501,0.9968499,0.9968499,-341.57497,437.10883)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3185\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.37604,-0.37604,0.3179989,0.3179989,-69.803983,299.05197)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3245\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(1.2656501,-1.2656501,0.9968499,0.9968499,-283.31663,352.18587)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3173\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.37604,-0.37604,0.3179989,0.3179989,107.42818,214.60137)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4.00000022;stroke-opacity:1\"\n       id=\"path3189\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"M 255.97266 101.15045 A 24.748737 30.052038 0 1 1  206.47519,101.15045 A 24.748737 30.052038 0 1 1  255.97266 101.15045 z\"\n       transform=\"matrix(0.37604,-0.37604,0.3179989,0.3179989,-10.218211,214.29461)\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainSelect.svg":
/*!****************************************!*\
  !*** ./res/img/actions/MainSelect.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"MainSelect.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainSelect.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"159.5736\"\n     inkscape:cy=\"158.28825\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"793\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"21\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:12;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:1.89162562, 18.91625616;stroke-dashoffset:0;stroke-opacity:1\"\n       d=\"M 30.44335,26.729064 L 30.44335,291.55665 L 295.27094,291.55665 L 295.27094,26.729064 L 30.44335,26.729064 z \"\n       id=\"path3343\"\n       inkscape:export-xdpi=\"9\"\n       inkscape:export-ydpi=\"9\" />\n    <path\n       style=\"fill:#ffffff;fill-rule:evenodd;stroke:#000000;stroke-width:8;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1;fill-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 89.051436,52.692713 L 80.264142,218.75776 L 136.18329,186.31714 L 190.50474,269.73586 L 246.42389,237.29525 L 192.10243,153.87653 L 248.02157,121.43591 L 89.051436,52.692713 z \"\n       id=\"path3345\"\n       sodipodi:nodetypes=\"cccccccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainUndo.svg":
/*!**************************************!*\
  !*** ./res/img/actions/MainUndo.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MainUndo.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainExport.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <linearGradient\n       id=\"linearGradient3604\">\n      <stop\n         style=\"stop-color:#000000;stop-opacity:0.25098041;\"\n         offset=\"0\"\n         id=\"stop3606\" />\n      <stop\n         style=\"stop-color:#000000;stop-opacity:0.1254902;\"\n         offset=\"1\"\n         id=\"stop3608\" />\n    </linearGradient>\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective23\" />\n    <pattern\n       patternUnits=\"userSpaceOnUse\"\n       width=\"30\"\n       height=\"33\"\n       patternTransform=\"translate(0,0)\"\n       id=\"pattern5043\">\n      <rect\n         id=\"rect5041\"\n         y=\"0\"\n         x=\"0\"\n         height=\"33\"\n         width=\"30\"\n         style=\"fill:none;stroke:none;stroke-linecap:round\" />\n      <path\n         id=\"path5039\"\n         d=\"M 21.5,31.5 L 31.5,21.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5037\"\n         d=\"M 11.5,31.5 L 31.5,11.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5035\"\n         d=\"M 1.5,31.5 L 31.5,1.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5033\"\n         d=\"M 1.5,21.5 L 21.5,1.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    </pattern>\n    <pattern\n       patternUnits=\"userSpaceOnUse\"\n       width=\"30\"\n       height=\"33\"\n       patternTransform=\"translate(18.5,-71.5)\"\n       id=\"pattern5062\">\n      <path\n         id=\"path5060\"\n         d=\"M 1.5,21.5 L 21.5,1.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5058\"\n         d=\"M 1.5,31.5 L 31.5,1.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5056\"\n         d=\"M 11.5,31.5 L 31.5,11.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5054\"\n         d=\"M 21.5,31.5 L 31.5,21.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <rect\n         id=\"rect5052\"\n         y=\"0\"\n         x=\"0\"\n         height=\"33\"\n         width=\"30\"\n         style=\"fill:none;stroke:none;stroke-linecap:round\" />\n      <rect\n         id=\"rect5050\"\n         y=\"0\"\n         x=\"0\"\n         height=\"33\"\n         width=\"30\"\n         style=\"fill:none;stroke:none\" />\n      <path\n         id=\"path5000\"\n         d=\"M 1.5,11.5 L 11.5,1.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <rect\n         id=\"rect5030\"\n         y=\"0\"\n         x=\"0\"\n         height=\"33\"\n         width=\"30\"\n         style=\"fill:none;stroke:none\" />\n    </pattern>\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3604\"\n       id=\"radialGradient3610\"\n       cx=\"210\"\n       cy=\"140\"\n       fx=\"210\"\n       fy=\"140\"\n       r=\"152.5\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(1.0491803,-0.78688524,0.78096126,1.0412817,-119.66246,159.46646)\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.2586836\"\n     inkscape:cx=\"163.14968\"\n     inkscape:cy=\"164.16609\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1716\"\n     inkscape:window-height=\"1116\"\n     inkscape:window-x=\"144\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid3600\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:url(#radialGradient3610);fill-opacity:1;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0\"\n       id=\"path3602\"\n       sodipodi:cx=\"160\"\n       sodipodi:cy=\"160\"\n       sodipodi:rx=\"150\"\n       sodipodi:ry=\"150\"\n       d=\"m 310,160 a 150,150 0 1 1 -300,0 150,150 0 1 1 300,0 z\"\n       transform=\"matrix(0.93333333,0,0,0.93333333,10.666666,10.666666)\" />\n    <path\n       style=\"font-size:medium;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-indent:0;text-align:start;text-decoration:none;line-height:normal;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;text-anchor:start;color:#000000;fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate;font-family:Bitstream Vera Sans;-inkscape-font-specification:Bitstream Vera Sans\"\n       d=\"m 196.07064,12.690252 -90,50 90,49.999998 0,-12.8125 c 20.29664,12.07637 33.75,34.2109 33.75,59.78125 0,38.68907 -30.81093,69.5 -69.5,69.5 -38.68907,0 -69.531254,-30.81093 -69.531254,-69.5 0.0934,-6.60391 -2.559001,-13.20451 -7.195999,-17.90755 -4.636997,-4.70304 -11.199433,-7.4485 -17.804001,-7.4485 -6.604568,0 -13.167004,2.74546 -17.804001,7.4485 -4.636998,4.70304 -7.289395,11.30364 -7.195999,17.90755 0,65.71107 53.82018,119.5 119.531254,119.5 65.71107,0 119.5,-53.78892 119.5,-119.5 0,-53.27576 -35.34828,-98.733461 -83.75,-114.031248 l 0,-32.9375 z\"\n       id=\"path3612\"\n       sodipodi:nodetypes=\"ccccsscssscsscc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainZoomFit.svg":
/*!*****************************************!*\
  !*** ./res/img/actions/MainZoomFit.svg ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r\"\n   version=\"1.0\"\n   sodipodi:docname=\"MainZoomFit.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"C:\\work\\eclipse\\MMDS\\scratch\\msk\\MainZoomFit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective60\" />\n    <pattern\n       patternUnits=\"userSpaceOnUse\"\n       width=\"30\"\n       height=\"33\"\n       patternTransform=\"translate(0,0)\"\n       id=\"pattern5043\">\n      <rect\n         id=\"rect5041\"\n         y=\"0\"\n         x=\"0\"\n         height=\"33\"\n         width=\"30\"\n         style=\"fill:none;stroke:none;stroke-linecap:round\" />\n      <path\n         id=\"path5039\"\n         d=\"M 21.5,31.5 L 31.5,21.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5037\"\n         d=\"M 11.5,31.5 L 31.5,11.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5035\"\n         d=\"M 1.5,31.5 L 31.5,1.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5033\"\n         d=\"M 1.5,21.5 L 21.5,1.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    </pattern>\n    <pattern\n       patternUnits=\"userSpaceOnUse\"\n       width=\"30\"\n       height=\"33\"\n       patternTransform=\"translate(18.5,-71.5)\"\n       id=\"pattern5062\">\n      <path\n         id=\"path5060\"\n         d=\"M 1.5,21.5 L 21.5,1.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5058\"\n         d=\"M 1.5,31.5 L 31.5,1.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5056\"\n         d=\"M 11.5,31.5 L 31.5,11.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <path\n         id=\"path5054\"\n         d=\"M 21.5,31.5 L 31.5,21.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <rect\n         id=\"rect5052\"\n         y=\"0\"\n         x=\"0\"\n         height=\"33\"\n         width=\"30\"\n         style=\"fill:none;stroke:none;stroke-linecap:round\" />\n      <rect\n         id=\"rect5050\"\n         y=\"0\"\n         x=\"0\"\n         height=\"33\"\n         width=\"30\"\n         style=\"fill:none;stroke:none\" />\n      <path\n         id=\"path5000\"\n         d=\"M 1.5,11.5 L 11.5,1.5\"\n         style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n      <rect\n         id=\"rect5030\"\n         y=\"0\"\n         x=\"0\"\n         height=\"33\"\n         width=\"30\"\n         style=\"fill:none;stroke:none\" />\n    </pattern>\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"282.47425\"\n     inkscape:cy=\"140.55244\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1478\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"166\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       transform=\"translate(62.703026,241.98783)\"\n       id=\"g3444\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3446\">\n        <use\n           xlink:href=\"#char51\"\n           x=\"0\"\n           id=\"use3448\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(92.31631,241.98783)\"\n       id=\"g3450\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3452\">\n        <use\n           xlink:href=\"#char46\"\n           x=\"0\"\n           id=\"use3454\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(62.081933,211.98783)\"\n       id=\"g3456\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3458\">\n        <use\n           xlink:href=\"#char47\"\n           x=\"0\"\n           id=\"use3460\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(62.081933,271.98783)\"\n       id=\"g3462\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3464\">\n        <use\n           xlink:href=\"#char47\"\n           x=\"0\"\n           id=\"use3466\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(243.63564,271.98783)\"\n       id=\"g3468\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3470\">\n        <use\n           xlink:href=\"#char38\"\n           x=\"0\"\n           id=\"use3472\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n        <use\n           xlink:href=\"#char69\"\n           x=\"1227\"\n           id=\"use3474\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(208.2958,247.96859)\"\n       id=\"g3476\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3478\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3480\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(215.2958,204.00707)\"\n       id=\"g3482\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3484\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3486\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(275.2958,204.00707)\"\n       id=\"g3488\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3490\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3492\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(283.2958,243.96859)\"\n       id=\"g3494\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3496\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3498\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(102.68629,241.50525)\"\n       id=\"g3500\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3502\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3504\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(112.65748,242.7117)\"\n       id=\"g3506\">\n      <g\n         transform=\"scale(2.9296875e-3,-2.9296875e-3)\"\n         id=\"g3508\">\n        <use\n           xlink:href=\"#char18\"\n           x=\"0\"\n           id=\"use3510\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#dddddd;fill-opacity:0.5;stroke:#000000;stroke-width:10.00008255000000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path4971\"\n       sodipodi:cx=\"157.5\"\n       sodipodi:cy=\"158.92857\"\n       sodipodi:rx=\"148.21428\"\n       sodipodi:ry=\"147.5\"\n       d=\"M 305.71428 158.92857 A 148.21428 147.5 0 1 1  9.2857208,158.92857 A 148.21428 147.5 0 1 1  305.71428 158.92857 z\"\n       transform=\"matrix(0.8709386,0,0,0.8950109,23.61288,16.185766)\" />\n    <g\n       style=\"font-style:normal;font-weight:normal;font-size:10.44176006px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       id=\"text4835\">\n      <path\n         d=\"m 70.985713,183.23596 11.216734,0 0,-38.71472 L 70,146.96852 l 0,-6.25418 12.134467,-2.44728 6.866001,0 0,44.9689 11.216732,0 0,5.77832 -29.231487,0 0,-5.77832 z\"\n         style=\"font-size:69.61173248px\"\n         id=\"path4188\" />\n      <path\n         d=\"m 128.80288,142.78774 q -5.30246,0 -7.98768,5.23448 -2.65123,5.20048 -2.65123,15.66943 0,10.43497 2.65123,15.66944 2.68522,5.20049 7.98768,5.20049 5.33644,0 7.98767,-5.20049 2.68522,-5.23447 2.68522,-15.66944 0,-10.46895 -2.68522,-15.66943 -2.65123,-5.23448 -7.98767,-5.23448 z m 0,-5.43842 q 8.53151,0 13.01821,6.76404 4.52068,6.73004 4.52068,19.57829 0,12.81427 -4.52068,19.5783 Q 137.33439,190 128.80288,190 q -8.53152,0 -13.0522,-6.73005 -4.4867,-6.76403 -4.4867,-19.5783 0,-12.84825 4.4867,-19.57829 4.52068,-6.76404 13.0522,-6.76404 z\"\n         style=\"font-size:69.61173248px\"\n         id=\"path4190\" />\n      <path\n         d=\"m 173.12597,142.78774 q -5.30246,0 -7.98767,5.23448 -2.65123,5.20048 -2.65123,15.66943 0,10.43497 2.65123,15.66944 2.68521,5.20049 7.98767,5.20049 5.33645,0 7.98768,-5.20049 2.68521,-5.23447 2.68521,-15.66944 0,-10.46895 -2.68521,-15.66943 -2.65123,-5.23448 -7.98768,-5.23448 z m 0,-5.43842 q 8.53152,0 13.01821,6.76404 4.52068,6.73004 4.52068,19.57829 0,12.81427 -4.52068,19.5783 Q 181.65749,190 173.12597,190 q -8.53152,0 -13.0522,-6.73005 -4.48669,-6.76403 -4.48669,-19.5783 0,-12.84825 4.48669,-19.57829 4.52068,-6.76404 13.0522,-6.76404 z\"\n         style=\"font-size:69.61173248px\"\n         id=\"path4192\" />\n      <path\n         d=\"m 245.93277,166.68278 q -2.95713,0 -4.65664,2.51527 -1.66551,2.51527 -1.66551,7.00196 0,4.41872 1.66551,6.96797 1.69951,2.51527 4.65664,2.51527 2.88916,0 4.55468,-2.51527 1.6995,-2.54925 1.6995,-6.96797 0,-4.4527 -1.6995,-6.96797 -1.66552,-2.54926 -4.55468,-2.54926 z m 0,-4.31674 q 5.37044,0 8.53152,3.73891 3.16108,3.73891 3.16108,10.09506 0,6.35615 -3.19507,10.09506 Q 251.26922,190 245.93277,190 q -5.43841,0 -8.59949,-3.70493 -3.16108,-3.73891 -3.16108,-10.09506 0,-6.39014 3.16108,-10.09506 3.19507,-3.73891 8.59949,-3.73891 z m -35.07778,-20.69997 q -2.92315,0 -4.62266,2.54926 -1.66551,2.51526 -1.66551,6.93398 0,4.48669 1.66551,7.00196 1.66552,2.51527 4.62266,2.51527 2.95714,0 4.62265,-2.51527 1.69951,-2.51527 1.69951,-7.00196 0,-4.38473 -1.69951,-6.93398 -1.6995,-2.54926 -4.62265,-2.54926 z m 30.69306,-4.31675 5.43842,0 L 215.23971,190 l -5.43842,0 31.74676,-52.65068 z m -30.69306,0 q 5.37043,0 8.5655,3.73892 3.19507,3.70492 3.19507,10.06107 0,6.42413 -3.19507,10.12905 -3.16108,3.70492 -8.5655,3.70492 -5.40443,0 -8.56551,-3.70492 -3.12709,-3.73891 -3.12709,-10.12905 0,-6.32216 3.16108,-10.06107 3.16108,-3.73892 8.53152,-3.73892 z\"\n         style=\"font-size:69.61173248px\"\n         id=\"path4194\" />\n    </g>\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path4967\"\n       sodipodi:cx=\"157.5\"\n       sodipodi:cy=\"158.92857\"\n       sodipodi:rx=\"148.21428\"\n       sodipodi:ry=\"147.5\"\n       d=\"M 305.71428 158.92857 A 148.21428 147.5 0 1 1  9.2857208,158.92857 A 148.21428 147.5 0 1 1  305.71428 158.92857 z\"\n       transform=\"matrix(0.981039,0,0,1.0003176,5.8435029,-5.0472616e-2)\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainZoomIn.svg":
/*!****************************************!*\
  !*** ./res/img/actions/MainZoomIn.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MainZoomIn.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"C:\\work\\eclipse\\MMDS\\scratch\\msk\\MainZoomIn.png\"\n   inkscape:export-xdpi=\"12.375\"\n   inkscape:export-ydpi=\"12.375\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective3766\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"184.61711\"\n     inkscape:cy=\"128.35938\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1440\"\n     inkscape:window-height=\"838\"\n     inkscape:window-x=\"-8\"\n     inkscape:window-y=\"-8\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid3768\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       transform=\"translate(62.703026,241.98783)\"\n       id=\"g3444\"\n       style=\"stroke-width:4.791;stroke-miterlimit:4;stroke-dasharray:none\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3446\"\n         style=\"stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\">\n        <use\n           xlink:href=\"#char51\"\n           x=\"0\"\n           id=\"use3448\"\n           style=\"fill:#000000;stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(92.31631,241.98783)\"\n       id=\"g3450\"\n       style=\"stroke-width:4.791;stroke-miterlimit:4;stroke-dasharray:none\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3452\"\n         style=\"stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\">\n        <use\n           xlink:href=\"#char46\"\n           x=\"0\"\n           id=\"use3454\"\n           style=\"fill:#000000;stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(62.081933,211.98783)\"\n       id=\"g3456\"\n       style=\"stroke-width:4.791;stroke-miterlimit:4;stroke-dasharray:none\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3458\"\n         style=\"stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\">\n        <use\n           xlink:href=\"#char47\"\n           x=\"0\"\n           id=\"use3460\"\n           style=\"fill:#000000;stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(62.081933,271.98783)\"\n       id=\"g3462\"\n       style=\"stroke-width:4.791;stroke-miterlimit:4;stroke-dasharray:none\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3464\"\n         style=\"stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\">\n        <use\n           xlink:href=\"#char47\"\n           x=\"0\"\n           id=\"use3466\"\n           style=\"fill:#000000;stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(243.63564,271.98783)\"\n       id=\"g3468\"\n       style=\"stroke-width:4.791;stroke-miterlimit:4;stroke-dasharray:none\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3470\"\n         style=\"stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\">\n        <use\n           xlink:href=\"#char38\"\n           x=\"0\"\n           id=\"use3472\"\n           style=\"fill:#000000;stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n        <use\n           xlink:href=\"#char69\"\n           x=\"1227\"\n           id=\"use3474\"\n           style=\"fill:#000000;stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(208.2958,247.96859)\"\n       id=\"g3476\"\n       style=\"stroke-width:4.791;stroke-miterlimit:4;stroke-dasharray:none\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3478\"\n         style=\"stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3480\"\n           style=\"fill:#000000;stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(215.2958,204.00707)\"\n       id=\"g3482\"\n       style=\"stroke-width:4.791;stroke-miterlimit:4;stroke-dasharray:none\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3484\"\n         style=\"stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3486\"\n           style=\"fill:#000000;stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(275.2958,204.00707)\"\n       id=\"g3488\"\n       style=\"stroke-width:4.791;stroke-miterlimit:4;stroke-dasharray:none\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3490\"\n         style=\"stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3492\"\n           style=\"fill:#000000;stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(283.2958,243.96859)\"\n       id=\"g3494\"\n       style=\"stroke-width:4.791;stroke-miterlimit:4;stroke-dasharray:none\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3496\"\n         style=\"stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3498\"\n           style=\"fill:#000000;stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(102.68629,241.50525)\"\n       id=\"g3500\"\n       style=\"stroke-width:4.791;stroke-miterlimit:4;stroke-dasharray:none\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3502\"\n         style=\"stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3504\"\n           style=\"fill:#000000;stroke-width:817.664;stroke-miterlimit:4;stroke-dasharray:none\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(112.65748,242.7117)\"\n       id=\"g3506\"\n       style=\"stroke-width:4.791;stroke-miterlimit:4;stroke-dasharray:none\">\n      <g\n         transform=\"scale(2.9296875e-3,-2.9296875e-3)\"\n         id=\"g3508\"\n         style=\"stroke-width:1635.328;stroke-miterlimit:4;stroke-dasharray:none\">\n        <use\n           xlink:href=\"#char18\"\n           x=\"0\"\n           id=\"use3510\"\n           style=\"fill:#000000;stroke-width:1635.328;stroke-miterlimit:4;stroke-dasharray:none\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <path\n       style=\"font-size:medium;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-indent:0;text-align:start;text-decoration:none;line-height:normal;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;text-anchor:start;color:#000000;fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:4.791;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate;font-family:Bitstream Vera Sans;-inkscape-font-specification:Bitstream Vera Sans\"\n       d=\"m 159.9337,7.3957969 c -1.22836,0.017783 -2.44251,0.5361707 -3.31003,1.4132395 L 127.99649,37.675208 c -1.32116,1.336065 -1.7593,3.488685 -1.0437,5.231992 0.71562,1.743309 2.54225,2.973143 4.41336,2.976825 l 23.85599,0 0,32.594718 c -19.03094,1.043649 -36.29578,8.792862 -49.59062,20.927974 L 81.596615,75.50192 98.593999,58.603182 c 1.337912,-1.329214 1.784181,-3.508978 1.073521,-5.262062 -0.710656,-1.753085 -2.535151,-2.973199 -4.413356,-2.976825 l -40.46571,-0.270619 c -0.158907,-0.0079 -0.318211,-0.0079 -0.477119,0 -2.335535,0.221972 -4.319354,2.415492 -4.323896,4.780958 l -0.298201,40.803535 c -0.01994,1.896771 1.188724,3.743885 2.922358,4.480271 1.733635,0.73639 3.886482,0.31711 5.218495,-1.022343 L 74.797659,82.237359 98.922018,106.26244 c -11.630556,13.42652 -19.014244,30.73454 -19.949562,49.73401 l -33.487834,0 0,-24.05515 c 9.54e-4,-2.56989 -2.372929,-4.89108 -4.920297,-4.81103 -1.198278,0.0406 -2.374437,0.55669 -3.220558,1.41324 L 8.7165889,157.40968 c -1.7614043,1.78077 -1.7614043,5.01481 0,6.79558 l 28.6271781,28.86618 c 1.325004,1.33218 3.4598,1.77398 5.188676,1.0524 1.728876,-0.72158 2.948527,-2.56345 2.952179,-4.4502 l 0,-24.05515 33.607114,0 c 1.240981,18.80865 8.766006,35.88989 20.486319,49.10257 L 76.169379,238.65594 59.171991,221.75718 c -1.335156,-1.31903 -3.467046,-1.72624 -5.188676,-0.99227 -1.72163,0.73398 -2.930541,2.56544 -2.922358,4.4502 l 0.26838,40.83362 c 0.01573,2.5291 2.322811,4.81236 4.830836,4.78095 l 40.465711,-0.30069 c 1.873236,-0.0154 3.680176,-1.25616 4.383526,-3.00689 0.70337,-1.75074 0.26095,-3.90631 -1.073508,-5.232 L 82.968334,245.39136 106.3472,221.48657 c 13.35681,11.91347 30.59938,19.44988 49.56079,20.32659 l 0,32.38424 -23.85597,0 c -1.87113,0.004 -3.69775,1.23352 -4.41337,2.97683 -0.71561,1.7433 -0.27746,3.89593 1.0437,5.23198 l 28.62718,28.86618 c 1.76603,1.7761 4.97329,1.7761 6.73932,0 l 28.62718,-28.86618 c 1.32117,-1.33605 1.75932,-3.48868 1.0437,-5.23198 -0.71562,-1.74331 -2.54224,-2.97314 -4.41336,-2.97683 l -23.85599,0 0,-32.50452 c 18.91988,-1.36942 36.01699,-9.38124 49.11351,-21.70975 l 23.67706,25.97954 -16.99739,16.89874 c -1.33789,1.32921 -1.78418,3.50897 -1.07351,5.26207 0.71065,1.75307 2.53515,2.97319 4.41336,2.97682 l 40.4657,0.27062 c 2.49814,0.0155 4.7852,-2.26196 4.80102,-4.78097 l 0.29821,-40.80352 c 0.009,-1.88477 -1.20074,-3.71624 -2.92237,-4.45021 -1.72162,-0.73397 -3.85353,-0.32678 -5.18866,0.99227 l -16.9974,16.89875 -23.8858,-26.19004 c 11.5936,-13.79235 18.76194,-31.49959 19.23388,-50.87663 l 34.11406,0 0,24.05514 c -0.008,1.89176 1.19113,3.72124 2.92236,4.45021 1.73125,0.72896 3.88998,0.31342 5.21849,-1.02234 l 28.62718,-28.86617 c 1.77918,-1.78291 1.77918,-5.04275 0,-6.82565 L 282.6429,125.08559 c -0.90259,-0.91262 -2.1811,-1.43496 -3.45912,-1.41325 -2.46815,0.047 -4.68191,2.32184 -4.68173,4.81103 l 0,24.05515 -34.44207,0 c -1.6396,-17.98221 -9.04936,-34.27895 -20.33723,-46.99774 l 23.40868,-24.536247 16.99739,16.898738 c 1.33515,1.319049 3.46704,1.726245 5.18867,0.992274 1.72162,-0.73397 2.93055,-2.565432 2.92236,-4.4502 L 267.97148,53.61174 c -0.0313,-2.519034 -2.33266,-4.782323 -4.83084,-4.750891 l -40.46571,0.270621 c -1.87323,0.01535 -3.68017,1.256162 -4.38354,3.006893 -0.70337,1.750731 -0.26095,3.906314 1.07352,5.231992 L 236.36229,74.269093 212.95361,98.7452 C 199.918,87.125675 183.17867,79.683488 164.76453,78.508812 l 0,-32.624787 23.85598,0 c 1.87112,-0.0037 3.69774,-1.233516 4.41336,-2.976825 0.71561,-1.743307 0.27747,-3.895927 -1.0437,-5.231992 L 163.36299,8.8090364 C 162.46736,7.9036606 161.20183,7.3821292 159.9337,7.3957969 z m -0.29821,90.1767151 c 37.68702,2.849578 62.29024,31.065418 61.69754,62.543368 -0.66052,35.07958 -25.42255,62.86092 -61.69754,62.54337 -33.68472,-0.29486 -64.464992,-23.49428 -63.576187,-62.54337 0.890095,-39.10566 27.382967,-61.739358 63.576187,-62.543368 z\"\n       id=\"path4847\"\n       sodipodi:nodetypes=\"cccsccccccscccccsccccccsccccsccccccsccccsccccccsccccsccccccsccccsccccccsccccsccccccsccccsccccccsccccsssc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MainZoomOut.svg":
/*!*****************************************!*\
  !*** ./res/img/actions/MainZoomOut.svg ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MainZoomOut.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"C:\\work\\eclipse\\MMDS\\scratch\\msk\\MainZoomOut.png\"\n   inkscape:export-xdpi=\"12.375\"\n   inkscape:export-ydpi=\"12.375\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective3832\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"154.5481\"\n     inkscape:cy=\"146.35603\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1440\"\n     inkscape:window-height=\"838\"\n     inkscape:window-x=\"-8\"\n     inkscape:window-y=\"-8\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid3854\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title></dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       transform=\"translate(62.703026,241.98783)\"\n       id=\"g3444\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3446\">\n        <use\n           xlink:href=\"#char51\"\n           x=\"0\"\n           id=\"use3448\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(92.31631,241.98783)\"\n       id=\"g3450\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3452\">\n        <use\n           xlink:href=\"#char46\"\n           x=\"0\"\n           id=\"use3454\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(62.081933,211.98783)\"\n       id=\"g3456\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3458\">\n        <use\n           xlink:href=\"#char47\"\n           x=\"0\"\n           id=\"use3460\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(62.081933,271.98783)\"\n       id=\"g3462\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3464\">\n        <use\n           xlink:href=\"#char47\"\n           x=\"0\"\n           id=\"use3466\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(243.63564,271.98783)\"\n       id=\"g3468\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3470\">\n        <use\n           xlink:href=\"#char38\"\n           x=\"0\"\n           id=\"use3472\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n        <use\n           xlink:href=\"#char69\"\n           x=\"1227\"\n           id=\"use3474\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(208.2958,247.96859)\"\n       id=\"g3476\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3478\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3480\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(215.2958,204.00707)\"\n       id=\"g3482\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3484\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3486\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(275.2958,204.00707)\"\n       id=\"g3488\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3490\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3492\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(283.2958,243.96859)\"\n       id=\"g3494\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3496\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3498\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(102.68629,241.50525)\"\n       id=\"g3500\">\n      <g\n         transform=\"scale(5.859375e-3,-5.859375e-3)\"\n         id=\"g3502\">\n        <use\n           xlink:href=\"#char40\"\n           x=\"0\"\n           id=\"use3504\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <g\n       transform=\"translate(112.65748,242.7117)\"\n       id=\"g3506\">\n      <g\n         transform=\"scale(2.9296875e-3,-2.9296875e-3)\"\n         id=\"g3508\">\n        <use\n           xlink:href=\"#char18\"\n           x=\"0\"\n           id=\"use3510\"\n           style=\"fill:#000000\"\n           y=\"0\"\n           width=\"320\"\n           height=\"320\" />\n      </g>\n    </g>\n    <path\n       style=\"font-size:medium;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-indent:0;text-align:start;text-decoration:none;line-height:normal;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;text-anchor:start;color:#000000;fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:5;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate;font-family:Bitstream Vera Sans;-inkscape-font-specification:Bitstream Vera Sans;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 159.25 10 C 77.278938 10 10.71875 76.943918 10.71875 159.21875 C 10.71875 241.49357 77.278938 308.40625 159.25 308.40625 C 241.22106 308.40625 307.84375 241.49357 307.84375 159.21875 C 307.84375 76.943918 241.22106 10 159.25 10 z M 155.875 27.59375 C 155.91666 27.592693 155.95833 27.594768 156 27.59375 L 156 61.4375 L 131 61.4375 C 129.03915 61.4413 127.12493 62.719466 126.375 64.53125 C 125.62507 66.343035 126.08423 68.580206 127.46875 69.96875 L 157.46875 99.96875 C 159.32168 101.83325 162.70957 101.83325 164.5625 99.96875 L 194.5625 69.96875 C 195.95072 68.576522 196.3826 66.314253 195.625 64.5 C 194.8674 62.685746 192.96606 61.429035 191 61.4375 L 166 61.4375 L 166 27.71875 C 233.43435 31.142779 287.33666 85.620853 290.1875 153.5625 L 258.4375 153.5625 L 258.4375 128.5625 C 258.4385 125.89168 255.95078 123.47931 253.28125 123.5625 C 252.02551 123.6047 250.79295 124.14106 249.90625 125.03125 L 219.90625 155.03125 C 218.06038 156.88197 218.06038 160.24303 219.90625 162.09375 L 249.90625 192.09375 C 251.29479 193.47827 253.53196 193.93743 255.34375 193.1875 C 257.15553 192.43757 258.43367 190.52335 258.4375 188.5625 L 258.4375 163.5625 L 290.25 163.5625 C 288.03607 232.42829 233.36911 287.73364 165.0625 290.71875 L 165.0625 260 L 190.0625 260 C 192.03598 260.009 193.96634 258.73069 194.71875 256.90625 C 195.47117 255.08181 194.99955 252.82257 193.59375 251.4375 L 163.59375 221.4375 C 162.64999 220.50778 161.3246 219.97762 160 220 C 158.71699 220.0103 157.44542 220.53722 156.53125 221.4375 L 126.53125 251.4375 C 125.12545 252.82257 124.65383 255.08181 125.40625 256.90625 C 126.15866 258.73069 128.08902 260.00857 130.0625 260 L 155.0625 260 L 155.0625 290.78125 C 86.483864 288.62253 31.34883 233.7369 28.40625 165 L 62.15625 165 L 62.15625 190 C 62.16005 191.96085 63.438216 193.84382 65.25 194.59375 C 67.061785 195.34368 69.298956 194.91577 70.6875 193.53125 L 100.6875 163.53125 C 102.53337 161.68053 102.53337 158.31947 100.6875 156.46875 L 70.6875 126.46875 C 69.741627 125.52028 68.401813 124.97743 67.0625 125 C 64.475993 125.0488 62.156049 127.41303 62.15625 130 L 62.15625 155 L 28.34375 155 C 30.519811 85.260706 86.399976 29.356768 155.875 27.59375 z \"\n       id=\"path4847\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveDown.svg":
/*!**************************************!*\
  !*** ./res/img/actions/MoveDown.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveDown.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveUp.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective8\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"93.268499\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"75\"\n     inkscape:window-y=\"20\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;fill-opacity:1\"\n       d=\"M 159.78571,275.05896 L 57.691929,170.69538 L 114.0424,170.69538 L 114.0424,43.728529 L 205.58038,43.691929 L 206.19198,170.01769 L 261.8795,170.69538 L 159.78571,275.05896 z \"\n       id=\"path3982\"\n       sodipodi:nodetypes=\"cccccccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveDownFar.svg":
/*!*****************************************!*\
  !*** ./res/img/actions/MoveDownFar.svg ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveDownFar.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveUp.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective8\" />\n    <inkscape:perspective\n       id=\"perspective2846\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"93.268499\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"585\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2814\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:7.45996714;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"m 261.03675,297.27002 c 30.31102,-5.50801 30.31102,-22.03203 0,-27.54004 l -202.073498,0 c -30.311025,5.50801 -30.311025,22.03203 0,27.54004 l 202.073498,0 z\"\n       id=\"path3982-1\"\n       sodipodi:nodetypes=\"ccccc\" />\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"M 159.78571,257.05896 57.691929,152.69538 l 56.350471,0 0,-126.966851 91.53798,-0.0366 0.6116,126.325761 55.68752,0.67769 -102.09379,104.36358 z\"\n       id=\"path3982\"\n       sodipodi:nodetypes=\"cccccccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveDownLots.svg":
/*!******************************************!*\
  !*** ./res/img/actions/MoveDownLots.svg ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveDownFar.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveUp.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective8\" />\n    <inkscape:perspective\n       id=\"perspective2846\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"93.268499\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"458\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2814\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"M 159.90621,296.36358 262,192 57.812425,192 159.90621,296.36358 z\"\n       id=\"path3982-1\"\n       sodipodi:nodetypes=\"cccc\" />\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"M 159.78571,257.05896 57.691929,152.69538 l 56.350471,0 0,-126.966851 91.53798,-0.0366 0.6116,126.325761 55.68752,0.67769 -102.09379,104.36358 z\"\n       id=\"path3982\"\n       sodipodi:nodetypes=\"cccccccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveGrow.svg":
/*!**************************************!*\
  !*** ./res/img/actions/MoveGrow.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"MoveGrow.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveUp.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <linearGradient\n       id=\"linearGradient3204\">\n      <stop\n         style=\"stop-color:#ffffff;stop-opacity:1;\"\n         offset=\"0\"\n         id=\"stop3206\" />\n      <stop\n         id=\"stop3212\"\n         offset=\"1\"\n         style=\"stop-color:#000000;stop-opacity:0.29591838;\" />\n    </linearGradient>\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3204\"\n       id=\"radialGradient3210\"\n       cx=\"97.784004\"\n       cy=\"119.01254\"\n       fx=\"97.784004\"\n       fy=\"119.01254\"\n       r=\"150.23499\"\n       gradientTransform=\"matrix(1.0855802,0.3993744,-0.3209242,0.8723369,29.825633,-21.800103)\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3204\"\n       id=\"radialGradient3222\"\n       cx=\"156.07143\"\n       cy=\"300.35715\"\n       fx=\"156.07143\"\n       fy=\"300.35715\"\n       r=\"40.35714\"\n       gradientTransform=\"matrix(1,0,0,0.5044248,0,148.84954)\"\n       gradientUnits=\"userSpaceOnUse\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"204.69707\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:url(#radialGradient3210);fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 152.85714,282.85714 C 77.754858,282.29557 25.677197,216.09197 13.571429,143.57143 C 7.347206,39.401886 96.731177,13.499887 162.85714,13.571429 C 250.16174,20.445262 307.17949,64.110107 303.57143,149.28571 C 297.04861,249.7588 215.23148,282.68932 152.85714,282.85714 z \"\n       id=\"path3200\"\n       sodipodi:nodetypes=\"ccccc\"\n       inkscape:transform-center-x=\"55\" />\n    <path\n       style=\"fill:url(#radialGradient3222);fill-rule:evenodd;stroke:#000000;stroke-width:9.40279675;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;fill-opacity:1.0\"\n       d=\"M 149.94872,284.7014 C 135.35088,292.38351 123.55941,301.69213 120.41569,316.01289 L 191.72717,314.1342 C 180.3414,303.88155 170.53007,293.35515 149.94872,284.7014 z \"\n       id=\"path3202\"\n       sodipodi:nodetypes=\"cccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveHFlip.svg":
/*!***************************************!*\
  !*** ./res/img/actions/MoveHFlip.svg ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"MoveHFlip.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveDown.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"204.69707\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1;fill-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 10,160 L 100,70 L 100,130 L 220,130 L 220,70 L 310,160 L 220,250 L 220,190 L 100,190 L 100,250 L 10,160 z \"\n       id=\"path3274\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveJoin.svg":
/*!**************************************!*\
  !*** ./res/img/actions/MoveJoin.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"MoveJoin.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveRotM01.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"204.69707\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 10,160 L 310,160\"\n       id=\"path2161\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#000000;fill-opacity:1\"\n       id=\"path2163\"\n       sodipodi:cx=\"160.35715\"\n       sodipodi:cy=\"160.71428\"\n       sodipodi:rx=\"10.357142\"\n       sodipodi:ry=\"10\"\n       d=\"M 170.71429 160.71428 A 10.357142 10 0 1 1  150,160.71428 A 10.357142 10 0 1 1  170.71429 160.71428 z\"\n       transform=\"matrix(1.9310346,0,0,2,-149.65519,-161.42855)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:10.5;stroke-miterlimit:4;stroke-dasharray:10.5, 21;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"path3136\"\n       sodipodi:cx=\"160\"\n       sodipodi:cy=\"159.64285\"\n       sodipodi:rx=\"40\"\n       sodipodi:ry=\"39.642857\"\n       d=\"M 200 159.64285 A 40 39.642857 0 1 1  120,159.64285 A 40 39.642857 0 1 1  200 159.64285 z\"\n       transform=\"matrix(0.8835172,0,0,0.8914768,18.63725,17.682092)\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveLeft.svg":
/*!**************************************!*\
  !*** ./res/img/actions/MoveLeft.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveLeft.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveDown.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective8\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"93.268499\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;fill-opacity:1\"\n       d=\"M 44.102199,159.37544 L 148.46578,57.281659 L 148.46578,113.63213 L 275.43263,113.63213 L 275.46923,205.17011 L 149.14347,205.78171 L 148.46578,261.46923 L 44.102199,159.37544 z \"\n       id=\"path3982\"\n       sodipodi:nodetypes=\"cccccccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveLeftFar.svg":
/*!*****************************************!*\
  !*** ./res/img/actions/MoveLeftFar.svg ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveLeftFar.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveDown.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective8\" />\n    <inkscape:perspective\n       id=\"perspective2824\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2838\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"93.268499\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2814\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:7.42203379;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"m 24.849388,259.83188 c 5.515594,29.96228 22.062373,29.96228 27.577967,0 l 0,-199.748559 c -5.515594,-29.962283 -22.062373,-29.962283 -27.577967,0 l 0,199.748559 z\"\n       id=\"path3982-1-1\"\n       sodipodi:nodetypes=\"ccccc\" />\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"M 63.63642,159.74331 168,57.64953 168,114 l 126.96685,0 0.0366,91.53798 -126.32576,0.6116 L 168,261.8371 63.63642,159.74331 z\"\n       id=\"path3982-7\"\n       sodipodi:nodetypes=\"cccccccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveLeftLots.svg":
/*!******************************************!*\
  !*** ./res/img/actions/MoveLeftLots.svg ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveLeftFar.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveDown.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective8\" />\n    <inkscape:perspective\n       id=\"perspective2824\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"93.268499\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2814\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"M 25.63642,160.09378 130,58 130,262.18757 25.63642,160.09378 z\"\n       id=\"path3982-1\"\n       sodipodi:nodetypes=\"cccc\" />\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"M 64.102199,159.37544 168.46578,57.281659 l 0,56.350471 126.96685,0 0.0366,91.53798 -126.32576,0.6116 -0.67769,55.68752 L 64.102199,159.37544 z\"\n       id=\"path3982\"\n       sodipodi:nodetypes=\"cccccccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveRight.svg":
/*!***************************************!*\
  !*** ./res/img/actions/MoveRight.svg ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveRight.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveLeft.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective8\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"93.268499\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"458\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;fill-opacity:1\"\n       d=\"M 275.46923,159.37544 L 171.10565,57.281659 L 171.10565,113.63213 L 44.138799,113.63213 L 44.102199,205.17011 L 170.42796,205.78171 L 171.10565,261.46923 L 275.46923,159.37544 z \"\n       id=\"path3982\"\n       sodipodi:nodetypes=\"cccccccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveRightFar.svg":
/*!******************************************!*\
  !*** ./res/img/actions/MoveRightFar.svg ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveRightFar.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveLeft.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective8\" />\n    <inkscape:perspective\n       id=\"perspective2846\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2839\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"93.268499\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"458\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2814\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:7.45996714;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"m 295.57464,260.99435 c -5.50801,30.31102 -22.03203,30.31102 -27.54004,0 l 0,-202.073498 c 5.50801,-30.311025 22.03203,-30.311025 27.54004,0 l 0,202.073498 z\"\n       id=\"path3982-1-1\"\n       sodipodi:nodetypes=\"ccccc\" />\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"M 256.36358,159.74331 152,57.64953 152,114 l -126.96685,0 -0.0366,91.53798 126.32576,0.6116 L 152,261.8371 256.36358,159.74331 z\"\n       id=\"path3982-7\"\n       sodipodi:nodetypes=\"cccccccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveRightLots.svg":
/*!*******************************************!*\
  !*** ./res/img/actions/MoveRightLots.svg ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveRightFar.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveLeft.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective8\" />\n    <inkscape:perspective\n       id=\"perspective2846\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"93.268499\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"458\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2814\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"M 296,160 191.63642,57.90622 l 0,204.18757 L 296,160 z\"\n       id=\"path3982-1\"\n       sodipodi:nodetypes=\"cccc\" />\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"M 257.46923,159.37544 153.10565,57.281659 l 0,56.350471 -126.966851,0 -0.0366,91.53798 126.325761,0.6116 0.67769,55.68752 104.36358,-102.09379 z\"\n       id=\"path3982\"\n       sodipodi:nodetypes=\"cccccccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveRotM01.svg":
/*!****************************************!*\
  !*** ./res/img/actions/MoveRotM01.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveRotM01.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveRotM01.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective11\" />\n    <inkscape:perspective\n       id=\"perspective2850\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"206.12564\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1644\"\n     inkscape:window-height=\"898\"\n     inkscape:window-x=\"154\"\n     inkscape:window-y=\"90\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2840\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       style=\"font-style:normal;font-weight:normal;font-size:19.54706955px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n       id=\"text3988\"\n       transform=\"matrix(0.82715322,0,0,0.82715322,1.6734456,-2.9378058)\">\n      <path\n         d=\"m -2.0231386,38.428781 21.4352826,0 0,6.522053 -21.4352826,0 0,-6.522053 z\"\n         style=\"font-size:81.44612122px\"\n         id=\"path8041\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 33.530002,57.239336 13.123642,0 0,-45.296452 -14.276932,2.863341 0,-7.3174253 14.197395,-2.8633402 8.03326,0 0,52.6138765 13.123643,0 0,6.760664 -34.201008,0 0,-6.760664 z\"\n         style=\"font-size:81.44612122px\"\n         id=\"path8043\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 95.648579,8.6818581 q -3.181489,0 -5.368763,2.2270419 -2.187274,2.187274 -2.187274,5.368763 0,3.141721 2.187274,5.328995 2.187274,2.147505 5.368763,2.147505 3.181489,0 5.368761,-2.147505 2.18728,-2.187274 2.18728,-5.328995 0,-3.14172 -2.22705,-5.368763 -2.187271,-2.2270419 -5.328991,-2.2270419 z m 0,-5.1301512 q 2.545191,0 4.891541,0.9942154 2.34635,0.9544467 4.0564,2.7838029 1.82935,1.7895877 2.74403,4.0563988 0.91468,2.266811 0.91468,4.891539 0,5.249457 -3.69848,8.90817 -3.65871,3.618944 -8.987709,3.618944 -5.368762,0 -8.947938,-3.579176 -3.579175,-3.579175 -3.579175,-8.947938 0,-5.328994 3.658713,-9.027475 3.658712,-3.6984811 8.947938,-3.6984811 z\"\n         style=\"font-size:81.44612122px\"\n         id=\"path8045\"\n         inkscape:connector-curvature=\"0\" />\n    </g>\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:0.25;stroke:#000000;stroke-width:5;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       id=\"path2819\"\n       sodipodi:cx=\"125\"\n       sodipodi:cy=\"125\"\n       sodipodi:rx=\"125\"\n       sodipodi:ry=\"125\"\n       d=\"m 250,125 a 125,125 0 1 1 -250,0 125,125 0 1 1 250,0 z\"\n       transform=\"matrix(-1,0,0,1,286,58)\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3, 9;stroke-dashoffset:0\"\n       d=\"m 34,181.00001 250,0\"\n       id=\"path3593\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:2.86018682;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:2.86018677, 8.58056031;stroke-dashoffset:0\"\n       d=\"m 162,298.65435 0,-112.27312\"\n       id=\"path3593-1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 162,179.00001 219.85714,74.71429\"\n       id=\"path3617\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"m 162,179.00001 110,-60\"\n       id=\"path3619\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 162.57143,180.57143 169,20 l -7,-1 0.57143,161.57143 z\"\n       id=\"path3643\"\n       sodipodi:nodetypes=\"cccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveRotM05.svg":
/*!****************************************!*\
  !*** ./res/img/actions/MoveRotM05.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveRotM05.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveRotM05.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective11\" />\n    <inkscape:perspective\n       id=\"perspective3631\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"-138.16008\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1857\"\n     inkscape:window-height=\"1156\"\n     inkscape:window-x=\"63\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2817\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       style=\"font-style:normal;font-weight:normal;font-size:19.54706955px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n       id=\"text3988\"\n       transform=\"matrix(0.81166745,0,0,0.81166745,1.6421157,-1.25947)\">\n      <path\n         d=\"m -2.0231386,36.428781 21.4352826,0 0,6.522053 -21.4352826,0 0,-6.522053 z\"\n         style=\"font-size:81.44612122px\"\n         id=\"path8064\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 32.217638,2.6254595 31.53651,0 0,6.7606643 -24.179317,0 0,14.5553132 q 1.749819,-0.59653 3.499638,-0.87491 1.749819,-0.318149 3.499638,-0.318149 9.942154,0 15.748371,5.4483 5.806218,5.4483 5.806218,14.754156 0,9.584236 -5.965292,14.91323 -5.965292,5.289226 -16.822124,5.289226 -3.73825,0 -7.635574,-0.636298 -3.857555,-0.636298 -7.993491,-1.908893 l 0,-8.073029 q 3.579175,1.948662 7.396962,2.903109 3.817787,0.954446 8.073029,0.954446 6.87997,0 10.8966,-3.618943 4.01663,-3.618944 4.01663,-9.822848 0,-6.203904 -4.01663,-9.822848 -4.01663,-3.618944 -10.8966,-3.618944 -3.221258,0 -6.442516,0.715836 -3.181489,0.715835 -6.522052,2.227042 l 0,-29.8264605 z\"\n         style=\"font-size:81.44612122px\"\n         id=\"path8066\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 95.648579,6.6818581 q -3.181489,0 -5.368763,2.2270424 -2.187274,2.1872735 -2.187274,5.3687625 0,3.141721 2.187274,5.328995 2.187274,2.147505 5.368763,2.147505 3.181489,0 5.368761,-2.147505 2.18728,-2.187274 2.18728,-5.328995 0,-3.14172 -2.22705,-5.3687625 -2.187271,-2.2270424 -5.328991,-2.2270424 z m 0,-5.1301512 q 2.545191,0 4.891541,0.9942154 2.34635,0.9544467 4.0564,2.7838029 1.82935,1.7895877 2.74403,4.0563986 0.91468,2.2668112 0.91468,4.8915392 0,5.249457 -3.69848,8.90817 -3.65871,3.618944 -8.987709,3.618944 -5.368762,0 -8.947938,-3.579176 -3.579175,-3.579175 -3.579175,-8.947938 0,-5.3289939 3.658713,-9.027475 3.658712,-3.6984811 8.947938,-3.6984811 z\"\n         style=\"font-size:81.44612122px\"\n         id=\"path8068\"\n         inkscape:connector-curvature=\"0\" />\n    </g>\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:0.25;stroke:#000000;stroke-width:5;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       id=\"path2819\"\n       sodipodi:cx=\"125\"\n       sodipodi:cy=\"125\"\n       sodipodi:rx=\"125\"\n       sodipodi:ry=\"125\"\n       d=\"m 250,125 a 125,125 0 1 1 -250,0 125,125 0 1 1 250,0 z\"\n       transform=\"matrix(-1,0,0,1,287,58.999997)\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3, 9;stroke-dashoffset:0\"\n       d=\"m 35,182 250,0\"\n       id=\"path3593\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:2.86018682;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:2.86018677, 8.58056031;stroke-dashoffset:0\"\n       d=\"m 163,299.65434 0,-112.27312\"\n       id=\"path3593-1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 163,180 220.85714,75.714283\"\n       id=\"path3617\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 163,180 273,120\"\n       id=\"path3619\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 163.57143,181.57142 180.85714,22.142854 163,19.999997 163.57143,181.57142 z\"\n       id=\"path3643\"\n       sodipodi:nodetypes=\"cccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveRotM15.svg":
/*!****************************************!*\
  !*** ./res/img/actions/MoveRotM15.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveRotM15.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveRotM15.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective11\" />\n    <inkscape:perspective\n       id=\"perspective3631\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3653\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"-133.16007\"\n     inkscape:cy=\"148.99555\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1857\"\n     inkscape:window-height=\"1156\"\n     inkscape:window-x=\"63\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2849\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:0.25;stroke:#000000;stroke-width:5;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       id=\"path2819\"\n       sodipodi:cx=\"125\"\n       sodipodi:cy=\"125\"\n       sodipodi:rx=\"125\"\n       sodipodi:ry=\"125\"\n       d=\"m 250,125 a 125,125 0 1 1 -250,0 125,125 0 1 1 250,0 z\"\n       transform=\"matrix(-1,0,0,1,287,59)\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3, 9;stroke-dashoffset:0\"\n       d=\"m 35,182 250,0\"\n       id=\"path3593\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:2.86018682;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:2.86018677, 8.58056031;stroke-dashoffset:0\"\n       d=\"m 163,299.65434 0,-112.27312\"\n       id=\"path3593-1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 163,180 220.85714,75.714286\"\n       id=\"path3617\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 163,180 273,120\"\n       id=\"path3619\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 163.57143,181.57142 202.28571,24.285714 163,20 l 0.57143,161.57142 z\"\n       id=\"path3643\"\n       sodipodi:nodetypes=\"cccc\" />\n    <g\n       style=\"font-style:normal;font-weight:normal;font-size:19.54706955px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n       id=\"text3988\"\n       transform=\"matrix(0.81166745,0,0,0.81166745,1.6421157,-1.25947)\">\n      <path\n         d=\"m -2.0231386,36.428781 21.4352826,0 0,6.522053 -21.4352826,0 0,-6.522053 z\"\n         style=\"font-size:81.44612122px\"\n         id=\"path8071\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 33.530002,55.239336 13.123642,0 0,-45.2964516 -14.276932,2.8633406 0,-7.3174253 14.197395,-2.8633402 8.03326,0 0,52.6138765 13.123643,0 0,6.760664 -34.201008,0 0,-6.760664 z\"\n         style=\"font-size:81.44612122px\"\n         id=\"path8073\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 84.075912,2.6254595 31.536508,0 0,6.7606643 -24.179314,0 0,14.5553132 q 1.749819,-0.59653 3.499638,-0.87491 1.749819,-0.318149 3.499638,-0.318149 9.942158,0 15.748368,5.4483 5.80622,5.4483 5.80622,14.754156 0,9.584236 -5.96529,14.91323 -5.96529,5.289226 -16.822125,5.289226 -3.73825,0 -7.635574,-0.636298 -3.857556,-0.636298 -7.993492,-1.908893 l 0,-8.073029 q 3.579176,1.948662 7.396963,2.903109 3.817786,0.954446 8.073028,0.954446 6.87997,0 10.8966,-3.618943 4.01663,-3.618944 4.01663,-9.822848 0,-6.203904 -4.01663,-9.822848 -4.01663,-3.618944 -10.8966,-3.618944 -3.221258,0 -6.442515,0.715836 -3.181489,0.715835 -6.522053,2.227042 l 0,-29.8264605 z\"\n         style=\"font-size:81.44612122px\"\n         id=\"path8075\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 147.50686,6.6818581 q -3.18149,0 -5.36877,2.2270424 -2.18727,2.1872735 -2.18727,5.3687625 0,3.141721 2.18727,5.328995 2.18728,2.147505 5.36877,2.147505 3.18148,0 5.36876,-2.147505 2.18727,-2.187274 2.18727,-5.328995 0,-3.14172 -2.22704,-5.3687625 -2.18727,-2.2270424 -5.32899,-2.2270424 z m 0,-5.1301512 q 2.54519,0 4.89153,0.9942154 2.34635,0.9544467 4.0564,2.7838029 1.82936,1.7895877 2.74404,4.0563986 0.91468,2.2668112 0.91468,4.8915392 0,5.249457 -3.69849,8.90817 -3.65871,3.618944 -8.9877,3.618944 -5.36877,0 -8.94794,-3.579176 -3.57918,-3.579175 -3.57918,-8.947938 0,-5.3289939 3.65872,-9.027475 3.65871,-3.6984811 8.94794,-3.6984811 z\"\n         style=\"font-size:81.44612122px\"\n         id=\"path8077\"\n         inkscape:connector-curvature=\"0\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveRotM30.svg":
/*!****************************************!*\
  !*** ./res/img/actions/MoveRotM30.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveRotM30.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveRotM30.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective11\" />\n    <inkscape:perspective\n       id=\"perspective3603\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"152.55422\"\n     inkscape:cy=\"163.97182\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1857\"\n     inkscape:window-height=\"1156\"\n     inkscape:window-x=\"63\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2817\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:0.25;stroke:#000000;stroke-width:5;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       id=\"path2819\"\n       sodipodi:cx=\"125\"\n       sodipodi:cy=\"125\"\n       sodipodi:rx=\"125\"\n       sodipodi:ry=\"125\"\n       d=\"m 250,125 a 125,125 0 1 1 -250,0 125,125 0 1 1 250,0 z\"\n       transform=\"matrix(-1,0,0,1,287,59)\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3, 9;stroke-dashoffset:0\"\n       d=\"m 35,182 250,0\"\n       id=\"path3593\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:2.86018682;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:2.86018677, 8.58056031;stroke-dashoffset:0\"\n       d=\"m 163,299.65434 0,-112.27312\"\n       id=\"path3593-1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 163,180 273,120\"\n       id=\"path3619\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 163,180.71428 244.42857,33.571428 163,16 l 0,164.71428 z\"\n       id=\"path3643\"\n       sodipodi:nodetypes=\"cccc\" />\n    <g\n       style=\"font-style:normal;font-weight:normal;font-size:19.54706955px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n       id=\"text3988\"\n       transform=\"matrix(0.81166745,0,0,0.81166745,1.6421157,-1.25947)\">\n      <path\n         d=\"m -2.0231386,36.428781 21.4352826,0 0,6.522053 -21.4352826,0 0,-6.522053 z\"\n         style=\"font-size:81.44612122px\"\n         id=\"path8048\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 56.476492,29.986266 q 5.766449,1.232827 8.987707,5.130151 3.261026,3.897324 3.261026,9.624005 0,8.788863 -6.044829,13.600866 -6.04483,4.812002 -17.180041,4.812002 -3.73825,0 -7.715112,-0.755604 -3.937092,-0.715835 -8.152565,-2.187274 l 0,-7.754879 q 3.340563,1.948662 7.317425,2.942877 3.976861,0.994215 8.31164,0.994215 7.556037,0 11.493129,-2.982646 3.976862,-2.982646 3.976862,-8.669557 0,-5.249457 -3.698481,-8.192335 -3.658713,-2.982646 -10.220534,-2.982646 l -6.919739,0 0,-6.60159 7.237888,0 q 5.925523,0 9.067244,-2.346348 3.14172,-2.386117 3.14172,-6.840202 0,-4.57339 -3.261026,-6.999276 -3.221258,-2.4656537 -9.266087,-2.4656537 -3.300795,0 -7.078813,0.715835 -3.778019,0.7158351 -8.311641,2.2270427 l 0,-7.1583508 q 4.573391,-1.2725956 8.550252,-1.9088935 4.01663,-0.6362978 7.556037,-0.6362978 9.146781,0 14.475775,4.1757045 5.328995,4.1359358 5.328995,11.2147486 0,4.931309 -2.823572,8.351409 -2.823572,3.380333 -8.03326,4.692697 z\"\n         style=\"font-size:81.44612122px\"\n         id=\"path8050\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 101.17642,7.9146851 q -6.203908,0 -9.345628,6.1243669 -3.101952,6.084598 -3.101952,18.333331 0,12.208964 3.101952,18.333331 3.14172,6.084598 9.345628,6.084598 6.24367,0 9.34562,-6.084598 3.14172,-6.124367 3.14172,-18.333331 0,-12.248733 -3.14172,-18.333331 -3.10195,-6.1243669 -9.34562,-6.1243669 z m 0,-6.3629782 q 9.98192,0 15.23138,7.9139542 5.28922,7.8741859 5.28922,22.9067219 0,14.992767 -5.28922,22.906721 -5.24946,7.874186 -15.23138,7.874186 -9.981926,0 -15.271152,-7.874186 -5.249457,-7.913954 -5.249457,-22.906721 0,-15.032536 5.249457,-22.9067219 5.289226,-7.9139542 15.271152,-7.9139542 z\"\n         style=\"font-size:81.44612122px\"\n         id=\"path8052\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 147.50686,6.6818581 q -3.18149,0 -5.36877,2.2270424 -2.18727,2.1872735 -2.18727,5.3687625 0,3.141721 2.18727,5.328995 2.18728,2.147505 5.36877,2.147505 3.18148,0 5.36876,-2.147505 2.18727,-2.187274 2.18727,-5.328995 0,-3.14172 -2.22704,-5.3687625 -2.18727,-2.2270424 -5.32899,-2.2270424 z m 0,-5.1301512 q 2.54519,0 4.89153,0.9942154 2.34635,0.9544467 4.0564,2.7838029 1.82936,1.7895877 2.74404,4.0563986 0.91468,2.2668112 0.91468,4.8915392 0,5.249457 -3.69849,8.90817 -3.65871,3.618944 -8.9877,3.618944 -5.36877,0 -8.94794,-3.579176 -3.57918,-3.579175 -3.57918,-8.947938 0,-5.3289939 3.65872,-9.027475 3.65871,-3.6984811 8.94794,-3.6984811 z\"\n         style=\"font-size:81.44612122px\"\n         id=\"path8054\"\n         inkscape:connector-curvature=\"0\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveRotP01.svg":
/*!****************************************!*\
  !*** ./res/img/actions/MoveRotP01.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveRotP01.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveRotM01.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective11\" />\n    <inkscape:perspective\n       id=\"perspective2850\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"-2.4457843\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1468\"\n     inkscape:window-height=\"892\"\n     inkscape:window-x=\"267\"\n     inkscape:window-y=\"87\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2840\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       id=\"g8189\"\n       transform=\"matrix(0.82715321,0,0,0.82715321,58.222329,-1.8743271)\">\n      <path\n         d=\"m 210.48975,15.472333 0,15.230468 15.23046,0 0,4.648438 -15.23046,0 0,15.230469 -4.59375,0 0,-15.230469 -15.23047,0 0,-4.648438 15.23047,0 0,-15.230468 4.59375,0 z\"\n         style=\"font-style:normal;font-weight:normal;font-size:56px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n         id=\"path8057\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 241.75504,55.953626 13.12364,0 0,-45.296451 -14.27693,2.86334 0,-7.3174247 14.19739,-2.8633402 8.03326,0 0,52.6138759 13.12364,0 0,6.760665 -34.201,0 0,-6.760665 z\"\n         style=\"font-style:normal;font-weight:normal;font-size:81.44612122px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n         id=\"path8059\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 303.87362,7.3961487 q -3.18149,0 -5.36877,2.2270424 -2.18727,2.1872739 -2.18727,5.3687629 0,3.14172 2.18727,5.328994 2.18728,2.147505 5.36877,2.147505 3.18148,0 5.36876,-2.147505 2.18727,-2.187274 2.18727,-5.328994 0,-3.141721 -2.22704,-5.3687629 -2.18727,-2.2270424 -5.32899,-2.2270424 z m 0,-5.1301512 q 2.54519,0 4.89153,0.9942154 2.34635,0.9544467 4.0564,2.7838029 1.82936,1.7895877 2.74404,4.0563982 0.91468,2.266811 0.91468,4.89154 0,5.249457 -3.69849,8.908169 -3.65871,3.618944 -8.9877,3.618944 -5.36876,0 -8.94794,-3.579175 -3.57918,-3.579175 -3.57918,-8.947938 0,-5.3289943 3.65872,-9.0274754 3.65871,-3.6984811 8.94794,-3.6984811 z\"\n         style=\"font-style:normal;font-weight:normal;font-size:81.44612122px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n         id=\"path8061\"\n         inkscape:connector-curvature=\"0\" />\n    </g>\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:0.25;stroke:#000000;stroke-width:5;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       id=\"path2819\"\n       sodipodi:cx=\"125\"\n       sodipodi:cy=\"125\"\n       sodipodi:rx=\"125\"\n       sodipodi:ry=\"125\"\n       d=\"m 250,125 a 125,125 0 1 1 -250,0 125,125 0 1 1 250,0 z\"\n       transform=\"translate(35,58)\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3, 9;stroke-dashoffset:0\"\n       d=\"m 287,181.00001 -250,0\"\n       id=\"path3593\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:2.86018682;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:2.86018677, 8.58056031;stroke-dashoffset:0\"\n       d=\"m 159,298.65435 0,-112.27312\"\n       id=\"path3593-1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 159,179.00001 101.14286,74.71429\"\n       id=\"path3617\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"m 159,179.00001 -110,-60\"\n       id=\"path3619\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 158.42857,180.57143 152,20 l 7,-1 -0.57143,161.57143 z\"\n       id=\"path3643\"\n       sodipodi:nodetypes=\"cccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveRotP05.svg":
/*!****************************************!*\
  !*** ./res/img/actions/MoveRotP05.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveRotP05.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveRotM05.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective11\" />\n    <inkscape:perspective\n       id=\"perspective3631\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"63.2685\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1857\"\n     inkscape:window-height=\"1156\"\n     inkscape:window-x=\"63\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2817\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       id=\"g8172\"\n       transform=\"matrix(0.81166745,0,0,0.81166745,63.934934,-1.0275628)\">\n      <path\n         d=\"m 209.48975,15.04897 0,15.230469 15.23046,0 0,4.648437 -15.23046,0 0,15.230469 -4.59375,0 0,-15.230469 -15.23047,0 0,-4.648437 15.23047,0 0,-15.230469 4.59375,0 z\"\n         style=\"font-style:normal;font-weight:normal;font-size:56px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n         id=\"path8080\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 239.44267,2.3397425 31.53651,0 0,6.7606643 -24.17931,0 0,14.5553132 q 1.74981,-0.59653 3.49963,-0.87491 1.74982,-0.318149 3.49964,-0.318149 9.94216,0 15.74837,5.4483 5.80622,5.4483 5.80622,14.754156 0,9.584236 -5.96529,14.91323 -5.96529,5.289226 -16.82213,5.289226 -3.73824,0 -7.63557,-0.636298 -3.85755,-0.636298 -7.99349,-1.908893 l 0,-8.073029 q 3.57917,1.948662 7.39696,2.903109 3.81779,0.954446 8.07303,0.954446 6.87997,0 10.8966,-3.618943 4.01663,-3.618944 4.01663,-9.822848 0,-6.203904 -4.01663,-9.822848 -4.01663,-3.618944 -10.8966,-3.618944 -3.22126,0 -6.44252,0.715836 -3.18148,0.715835 -6.52205,2.227042 l 0,-29.8264605 z\"\n         style=\"font-style:normal;font-weight:normal;font-size:81.44612122px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n         id=\"path8082\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 302.87362,6.3961411 q -3.18149,0 -5.36877,2.2270424 -2.18727,2.1872735 -2.18727,5.3687625 0,3.141721 2.18727,5.328995 2.18728,2.147505 5.36877,2.147505 3.18148,0 5.36876,-2.147505 2.18727,-2.187274 2.18727,-5.328995 0,-3.14172 -2.22704,-5.3687625 -2.18727,-2.2270424 -5.32899,-2.2270424 z m 0,-5.1301512 q 2.54519,0 4.89153,0.9942153 2.34635,0.9544468 4.0564,2.783803 1.82936,1.7895876 2.74404,4.0563986 0.91468,2.2668112 0.91468,4.8915392 0,5.249457 -3.69849,8.90817 -3.65871,3.618944 -8.9877,3.618944 -5.36876,0 -8.94794,-3.579176 -3.57918,-3.579175 -3.57918,-8.947938 0,-5.3289939 3.65872,-9.027475 3.65871,-3.6984811 8.94794,-3.6984811 z\"\n         style=\"font-style:normal;font-weight:normal;font-size:81.44612122px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n         id=\"path8084\"\n         inkscape:connector-curvature=\"0\" />\n    </g>\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:0.25;stroke:#000000;stroke-width:5;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       id=\"path2819\"\n       sodipodi:cx=\"125\"\n       sodipodi:cy=\"125\"\n       sodipodi:rx=\"125\"\n       sodipodi:ry=\"125\"\n       d=\"m 250,125 a 125,125 0 1 1 -250,0 125,125 0 1 1 250,0 z\"\n       transform=\"translate(36,58.999997)\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3, 9;stroke-dashoffset:0\"\n       d=\"M 288,182 38,182\"\n       id=\"path3593\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:2.86018682;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:2.86018677, 8.58056031;stroke-dashoffset:0\"\n       d=\"m 160,299.65434 0,-112.27312\"\n       id=\"path3593-1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 160,180 102.14286,75.714283\"\n       id=\"path3617\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 160,180 50,120\"\n       id=\"path3619\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 159.42857,181.57142 142.14286,22.142854 160,19.999997 159.42857,181.57142 z\"\n       id=\"path3643\"\n       sodipodi:nodetypes=\"cccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveRotP15.svg":
/*!****************************************!*\
  !*** ./res/img/actions/MoveRotP15.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveRotP15.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveRotM15.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective11\" />\n    <inkscape:perspective\n       id=\"perspective3631\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3653\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"108.98279\"\n     inkscape:cy=\"152.56698\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1857\"\n     inkscape:window-height=\"1156\"\n     inkscape:window-x=\"63\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\"\n     showguides=\"false\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2849\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:0.25;stroke:#000000;stroke-width:5;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       id=\"path2819\"\n       sodipodi:cx=\"125\"\n       sodipodi:cy=\"125\"\n       sodipodi:rx=\"125\"\n       sodipodi:ry=\"125\"\n       d=\"m 250,125 a 125,125 0 1 1 -250,0 125,125 0 1 1 250,0 z\"\n       transform=\"translate(36,59)\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:3, 9;stroke-dashoffset:0\"\n       d=\"M 288,182 38,182\"\n       id=\"path3593\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:2.86018682;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:2.86018677, 8.58056031;stroke-dashoffset:0\"\n       d=\"m 160,299.65434 0,-112.27312\"\n       id=\"path3593-1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 160,180 102.14286,75.714286\"\n       id=\"path3617\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 160,180 50,120\"\n       id=\"path3619\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 159.42857,181.57142 120.71429,24.285714 160,20 159.42857,181.57142 z\"\n       id=\"path3643\"\n       sodipodi:nodetypes=\"cccc\" />\n    <g\n       id=\"g8177\"\n       transform=\"matrix(0.81166745,0,0,0.81166745,64.049971,-1.0275659)\">\n      <path\n         d=\"m 157.48975,14.472329 0,15.230469 15.23046,0 0,4.648437 -15.23046,0 0,15.230469 -4.59375,0 0,-15.230469 -15.23047,0 0,-4.648437 15.23047,0 0,-15.230469 4.59375,0 z\"\n         style=\"font-style:normal;font-weight:normal;font-size:56px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n         id=\"path8087\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 188.75504,54.953622 13.12364,0 0,-45.2964508 -14.27693,2.8633398 0,-7.3174245 14.19739,-2.8633402 8.03326,0 0,52.6138757 13.12364,0 0,6.760665 -34.201,0 0,-6.760665 z\"\n         style=\"font-style:normal;font-weight:normal;font-size:81.44612122px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n         id=\"path8089\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 239.30095,2.3397463 31.53651,0 0,6.7606643 -24.17932,0 0,14.5553124 q 1.74982,-0.596529 3.49964,-0.874909 1.74982,-0.318149 3.49964,-0.318149 9.94215,0 15.74837,5.4483 5.80622,5.4483 5.80622,14.754156 0,9.584236 -5.9653,14.91323 -5.96529,5.289226 -16.82212,5.289226 -3.73825,0 -7.63557,-0.636298 -3.85756,-0.636298 -7.99349,-1.908894 l 0,-8.073028 q 3.57917,1.948662 7.39696,2.903109 3.81779,0.954446 8.07303,0.954446 6.87997,0 10.8966,-3.618944 4.01663,-3.618943 4.01663,-9.822847 0,-6.203904 -4.01663,-9.822848 -4.01663,-3.618944 -10.8966,-3.618944 -3.22126,0 -6.44252,0.715835 -3.18149,0.715835 -6.52205,2.227043 l 0,-29.8264607 z\"\n         style=\"font-style:normal;font-weight:normal;font-size:81.44612122px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n         id=\"path8091\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 302.73189,6.3961449 q -3.18149,0 -5.36876,2.2270424 -2.18728,2.1872737 -2.18728,5.3687627 0,3.141721 2.18728,5.328994 2.18727,2.147506 5.36876,2.147506 3.18149,0 5.36876,-2.147506 2.18728,-2.187273 2.18728,-5.328994 0,-3.14172 -2.22704,-5.3687627 -2.18728,-2.2270424 -5.329,-2.2270424 z m 0,-5.1301512 q 2.54519,0 4.89154,0.9942154 2.34635,0.9544467 4.0564,2.7838029 1.82936,1.7895877 2.74403,4.0563986 0.91468,2.2668114 0.91468,4.8915394 0,5.249457 -3.69848,8.90817 -3.65871,3.618944 -8.98771,3.618944 -5.36876,0 -8.94793,-3.579176 -3.57918,-3.579175 -3.57918,-8.947938 0,-5.3289941 3.65871,-9.0274752 3.65872,-3.6984811 8.94794,-3.6984811 z\"\n         style=\"font-style:normal;font-weight:normal;font-size:81.44612122px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n         id=\"path8093\"\n         inkscape:connector-curvature=\"0\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveRotP30.svg":
/*!****************************************!*\
  !*** ./res/img/actions/MoveRotP30.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveRotP30.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveRotM30.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective11\" />\n    <inkscape:perspective\n       id=\"perspective3603\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"12.554216\"\n     inkscape:cy=\"162.54324\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1857\"\n     inkscape:window-height=\"1156\"\n     inkscape:window-x=\"63\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2817\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:0.25;stroke:#000000;stroke-width:5;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       id=\"path2819\"\n       sodipodi:cx=\"125\"\n       sodipodi:cy=\"125\"\n       sodipodi:rx=\"125\"\n       sodipodi:ry=\"125\"\n       d=\"m 250,125 a 125,125 0 1 1 -250,0 125,125 0 1 1 250,0 z\"\n       transform=\"translate(36,59)\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:3,9;stroke-dashoffset:0\"\n       d=\"M 288,182 38,182\"\n       id=\"path3593\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:2.86018682;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:2.86018677, 8.58056031;stroke-dashoffset:0\"\n       d=\"m 160,299.65434 0,-112.27312\"\n       id=\"path3593-1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"M 160,180 50,120\"\n       id=\"path3619\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:#ffffff;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;fill-opacity:1\"\n       d=\"M 160,180.71428 78.571427,33.571428 160,16 l 0,164.71428 z\"\n       id=\"path3643\"\n       sodipodi:nodetypes=\"cccc\" />\n    <g\n       id=\"g8183\"\n       transform=\"matrix(0.81166745,0,0,0.81166745,63.136667,-0.79565869)\">\n      <path\n         d=\"m 158.61496,14.226381 0,15.230469 15.23047,0 0,4.648437 -15.23047,0 0,15.230469 -4.59375,0 0,-15.230469 -15.23047,0 0,-4.648437 15.23047,0 0,-15.230469 4.59375,0 z\"\n         style=\"font-style:normal;font-weight:normal;font-size:56px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n         id=\"path8096\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 212.82674,29.414836 q 5.76645,1.232827 8.98771,5.130151 3.26102,3.897324 3.26102,9.624004 0,8.788864 -6.04483,13.600866 -6.04483,4.812003 -17.18004,4.812003 -3.73825,0 -7.71511,-0.755604 -3.93709,-0.715835 -8.15256,-2.187274 l 0,-7.75488 q 3.34056,1.948663 7.31742,2.942878 3.97686,0.994215 8.31164,0.994215 7.55604,0 11.49313,-2.982646 3.97686,-2.982646 3.97686,-8.669558 0,-5.249457 -3.69848,-8.192334 -3.65871,-2.982646 -10.22053,-2.982646 l -6.91974,0 0,-6.60159 7.23789,0 q 5.92552,0 9.06724,-2.346348 3.14172,-2.386117 3.14172,-6.840202 0,-4.57339 -3.26103,-6.999276 -3.22125,-2.4656539 -9.26608,-2.4656539 -3.3008,0 -7.07882,0.715835 -3.77801,0.7158351 -8.31164,2.2270419 l 0,-7.15835 q 4.57339,-1.2725957 8.55026,-1.9088935 4.01663,-0.6362978 7.55603,-0.6362978 9.14678,0 14.47578,4.1757045 5.32899,4.1359358 5.32899,11.2147488 0,4.931308 -2.82357,8.351409 -2.82357,3.380332 -8.03326,4.692697 z\"\n         style=\"font-style:normal;font-weight:normal;font-size:81.44612122px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n         id=\"path8098\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 257.52667,7.3432549 q -6.20391,0 -9.34563,6.1243661 -3.10195,6.084598 -3.10195,18.333331 0,12.208965 3.10195,18.333331 3.14172,6.084598 9.34563,6.084598 6.24367,0 9.34562,-6.084598 3.14172,-6.124366 3.14172,-18.333331 0,-12.248733 -3.14172,-18.333331 -3.10195,-6.1243661 -9.34562,-6.1243661 z m 0,-6.3629782 q 9.98192,0 15.23138,7.9139542 5.28922,7.8741851 5.28922,22.9067211 0,14.992768 -5.28922,22.906722 -5.24946,7.874186 -15.23138,7.874186 -9.98193,0 -15.27115,-7.874186 -5.24946,-7.913954 -5.24946,-22.906722 0,-15.032536 5.24946,-22.9067211 5.28922,-7.9139542 15.27115,-7.9139542 z\"\n         style=\"font-style:normal;font-weight:normal;font-size:81.44612122px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n         id=\"path8100\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         d=\"m 303.85711,6.1104279 q -3.18149,0 -5.36877,2.2270424 -2.18727,2.1872737 -2.18727,5.3687627 0,3.141721 2.18727,5.328994 2.18728,2.147506 5.36877,2.147506 3.18148,0 5.36876,-2.147506 2.18727,-2.187273 2.18727,-5.328994 0,-3.14172 -2.22704,-5.3687627 -2.18727,-2.2270424 -5.32899,-2.2270424 z m 0,-5.1301512 q 2.54519,0 4.89153,0.9942154 2.34635,0.9544467 4.0564,2.7838029 1.82936,1.7895876 2.74404,4.0563986 0.91468,2.2668114 0.91468,4.8915394 0,5.249457 -3.69849,8.90817 -3.65871,3.618944 -8.9877,3.618944 -5.36876,0 -8.94794,-3.579176 -3.57918,-3.579175 -3.57918,-8.947938 0,-5.3289941 3.65872,-9.0274752 3.65871,-3.6984811 8.94794,-3.6984811 z\"\n         style=\"font-style:normal;font-weight:normal;font-size:81.44612122px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n         id=\"path8102\"\n         inkscape:connector-curvature=\"0\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveShrink.svg":
/*!****************************************!*\
  !*** ./res/img/actions/MoveShrink.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"MoveShrink.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveUp.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <linearGradient\n       id=\"linearGradient3204\">\n      <stop\n         style=\"stop-color:#ffffff;stop-opacity:1;\"\n         offset=\"0\"\n         id=\"stop3206\" />\n      <stop\n         id=\"stop3212\"\n         offset=\"1\"\n         style=\"stop-color:#000000;stop-opacity:0.29591838;\" />\n    </linearGradient>\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3204\"\n       id=\"radialGradient3210\"\n       cx=\"97.784004\"\n       cy=\"119.01254\"\n       fx=\"97.784004\"\n       fy=\"119.01254\"\n       r=\"150.23499\"\n       gradientTransform=\"matrix(1.0943065,0.3182308,-0.3235039,0.6950983,44.992262,22.609241)\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient3204\"\n       id=\"radialGradient3222\"\n       cx=\"156.07143\"\n       cy=\"300.35715\"\n       fx=\"156.07143\"\n       fy=\"300.35715\"\n       r=\"40.35714\"\n       gradientTransform=\"matrix(1.0080384,0,0,0.4019374,14.926879,158.58684)\"\n       gradientUnits=\"userSpaceOnUse\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"204.69707\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:url(#radialGradient3210);fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:8.96230125;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 169.01275,265.3672 C 93.306764,264.91973 184.09594,254.28496 171.89287,196.49891 C 136.81751,116.90916 48.312987,78.904811 130.8513,57.624012 C 173.1434,48.101242 249.69276,67.159794 188.4535,112.26331 C 168.91776,123.45431 278.69027,247.58954 169.01275,265.3672 z \"\n       id=\"path3200\"\n       sodipodi:nodetypes=\"ccccc\"\n       inkscape:transform-center-x=\"55.442114\" />\n    <path\n       style=\"fill:url(#radialGradient3222);fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:8.42706966;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 166.08095,266.83675 C 151.36577,272.95804 139.47952,280.37536 136.31052,291.78647 L 208.19524,290.28949 C 196.71794,282.11994 186.82775,273.73226 166.08095,266.83675 z \"\n       id=\"path3202\"\n       sodipodi:nodetypes=\"cccc\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 110,226 L 83.571429,243.85714\"\n       id=\"path3224\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 90,176 L 57.857143,183.14286\"\n       id=\"path3226\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 80,116 L 50,116\"\n       id=\"path3228\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 80,56 L 50,36\"\n       id=\"path3230\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 230,56 L 260,46\"\n       id=\"path3232\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 230,116 L 265.71429,116\"\n       id=\"path3234\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 240,166 L 275,171\"\n       id=\"path3236\"\n       sodipodi:nodetypes=\"cc\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 240,226 L 270,246\"\n       id=\"path3238\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 120,36 L 110,6\"\n       id=\"path3240\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\"\n       d=\"M 180,36 L 190,6\"\n       id=\"path3242\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveUp.svg":
/*!************************************!*\
  !*** ./res/img/actions/MoveUp.svg ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveUp.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveUp.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective8\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"93.268499\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;fill-opacity:1\"\n       d=\"M 159.78571,43.691929 L 57.691929,148.05551 L 114.0424,148.05551 L 114.0424,275.02236 L 205.58038,275.05896 L 206.19198,148.7332 L 261.8795,148.05551 L 159.78571,43.691929 z \"\n       id=\"path3982\"\n       sodipodi:nodetypes=\"cccccccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveUpFar.svg":
/*!***************************************!*\
  !*** ./res/img/actions/MoveUpFar.svg ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveUpFar.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveUp.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective8\" />\n    <inkscape:perspective\n       id=\"perspective2833\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2838\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"93.268499\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2814\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:7.45996714;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"m 261.25104,24.788943 c 30.31102,5.508007 30.31102,22.032027 0,27.540034 l -202.073498,0 c -30.311025,-5.508007 -30.311025,-22.032027 0,-27.540034 l 202.073498,0 z\"\n       id=\"path3982-1\"\n       sodipodi:nodetypes=\"ccccc\" />\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"m 160,64 -102.093781,104.36358 56.350471,0 0,126.96685 91.53798,0.0366 0.6116,-126.32576 55.68752,-0.67769 L 160,64 z\"\n       id=\"path3982\"\n       sodipodi:nodetypes=\"cccccccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveUpLots.svg":
/*!****************************************!*\
  !*** ./res/img/actions/MoveUpLots.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"MoveUpFar.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveUp.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective8\" />\n    <inkscape:perspective\n       id=\"perspective2833\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"93.268499\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2814\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"m 160,26 102.09379,104.36358 -204.18757,0 L 160,26 z\"\n       id=\"path3982-1\"\n       sodipodi:nodetypes=\"cccc\" />\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\"\n       d=\"M 159.78571,61.691929 57.691929,166.05551 l 56.350471,0 0,126.96685 91.53798,0.0366 0.6116,-126.32576 55.68752,-0.67769 L 159.78571,61.691929 z\"\n       id=\"path3982\"\n       sodipodi:nodetypes=\"cccccccc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/MoveVFlip.svg":
/*!***************************************!*\
  !*** ./res/img/actions/MoveVFlip.svg ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://web.resource.org/cc/\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.45.1\"\n   version=\"1.0\"\n   sodipodi:docbase=\"/home/aclark/CRK3/MMTk/images/msk\"\n   sodipodi:docname=\"MoveVFlip.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MoveDown.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"204.69707\"\n     inkscape:cy=\"158.25753\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"814\"\n     inkscape:window-height=\"842\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"104\"\n     showgrid=\"true\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 160,10 L 250,100 L 190,100 L 190,220 L 250,220 L 160,310 L 70,220 L 130,220 L 130,100 L 70,100 L 160,10 z \"\n       id=\"path3274\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/SelectionChain.svg":
/*!********************************************!*\
  !*** ./res/img/actions/SelectionChain.svg ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"SelectionChain.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomEdit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective20\" />\n    <inkscape:perspective\n       id=\"perspective2876\"\n       inkscape:persp3d-origin=\"54 : 26.333333 : 1\"\n       inkscape:vp_z=\"108 : 39.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 39.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2895\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3692\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3742\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3742-2\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3832\"\n       inkscape:persp3d-origin=\"54 : 31.333333 : 1\"\n       inkscape:vp_z=\"108 : 47 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 47 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3853\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3853-1\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4142136\"\n     inkscape:cx=\"201.01679\"\n     inkscape:cy=\"170.41273\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1440\"\n     inkscape:window-height=\"838\"\n     inkscape:window-x=\"-8\"\n     inkscape:window-y=\"-8\"\n     showgrid=\"false\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid3770\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       id=\"g3810\"\n       style=\"stroke:#000000;stroke-width:1.5;stroke-linecap:round\"\n       transform=\"matrix(2.621464,0,0,2.621464,4.540555,48.791192)\">\n      <line\n         id=\"line3812\"\n         y2=\"77\"\n         x2=\"2\"\n         y1=\"47\"\n         x1=\"2\" />\n      <line\n         id=\"line3814\"\n         y2=\"32\"\n         x2=\"27.98\"\n         y1=\"47\"\n         x1=\"2\" />\n      <line\n         id=\"line3816\"\n         y2=\"92\"\n         x2=\"27.98\"\n         y1=\"77\"\n         x1=\"2\" />\n      <line\n         id=\"line3818\"\n         y2=\"77\"\n         x2=\"53.962002\"\n         y1=\"92\"\n         x1=\"27.98\" />\n      <line\n         id=\"line3820\"\n         y2=\"47\"\n         x2=\"53.962002\"\n         y1=\"77\"\n         x1=\"53.962002\" />\n      <line\n         id=\"line3822\"\n         y2=\"32\"\n         x2=\"27.98\"\n         y1=\"47\"\n         x1=\"53.962002\" />\n      <line\n         id=\"line3824\"\n         y2=\"31.999731\"\n         x2=\"79.942604\"\n         y1=\"47\"\n         x1=\"53.962002\" />\n      <line\n         id=\"line3826\"\n         y2=\"46.999462\"\n         x2=\"105.92352\"\n         y1=\"31.999731\"\n         x1=\"79.942604\" />\n      <line\n         id=\"line3828\"\n         y2=\"1.999732\"\n         x2=\"79.942299\"\n         y1=\"31.999731\"\n         x1=\"79.942604\" />\n    </g>\n    <g\n       id=\"g3885\"\n       transform=\"matrix(0.8900413,0,0,0.8900413,-171.09202,33.69748)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,158.10549,34.777218)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,405.75369,116.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <g\n       id=\"g3889\"\n       transform=\"matrix(0.8900413,0,0,0.8900413,-141.7775,-40.634342)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,48.105487,74.777215)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-1\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,295.75368,156.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-7\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <g\n       id=\"g3881\"\n       transform=\"matrix(0.8900413,0,0,0.8900413,-196.12626,-147.6538)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,108.10549,104.77721)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-15\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,355.75368,186.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-2\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/SelectionCurElement.svg":
/*!*************************************************!*\
  !*** ./res/img/actions/SelectionCurElement.svg ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r\"\n   version=\"1.0\"\n   sodipodi:docname=\"SelectionCurElement.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomEdit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective20\" />\n    <inkscape:perspective\n       id=\"perspective2876\"\n       inkscape:persp3d-origin=\"54 : 26.333333 : 1\"\n       inkscape:vp_z=\"108 : 39.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 39.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2895\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3692\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3742\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3742-2\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2853\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2915\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2915-8\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4142136\"\n     inkscape:cx=\"-30.914228\"\n     inkscape:cy=\"168.99852\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1920\"\n     inkscape:window-height=\"1028\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid3770\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <ellipse\n       ry=\"45.784992\"\n       rx=\"47.872509\"\n       cy=\"170\"\n       cx=\"160.1275\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:5.40349102;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:4;stroke-opacity:1\"\n       id=\"path3171\" />\n    <g\n       style=\"font-style:normal;font-weight:normal;font-size:79.51308441px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n       id=\"text2841\"\n       transform=\"translate(-1.19968,0)\">\n      <path\n         d=\"m 162.0258,144.65547 -10.63798,28.84679 21.31479,0 -10.67681,-28.84679 z m -4.42602,-7.72612 8.89087,0 22.09128,57.96535 -8.1532,0 -5.28016,-14.86988 -26.12906,0 -5.28016,14.86988 -8.26967,0 22.1301,-57.96535 z\"\n         id=\"path4196\"\n         inkscape:connector-curvature=\"0\" />\n    </g>\n    <ellipse\n       style=\"fill:#ffffff;fill-opacity:0.75;stroke:#000000;stroke-width:10.16818333;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:10.16818342, 30.50455026;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"path3171-1-4\"\n       cx=\"255.71176\"\n       cy=\"259.69077\"\n       rx=\"47.872509\"\n       ry=\"45.784992\" />\n    <g\n       style=\"font-style:normal;font-weight:normal;font-size:79.51308441px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n       id=\"text2841-1\">\n      <path\n         d=\"m 257.17732,233.76078 -10.63798,28.84678 21.31479,0 -10.67681,-28.84678 z m -4.42602,-7.72613 8.89087,0 22.09128,57.96535 -8.1532,0 -5.28016,-14.86988 -26.12906,0 -5.28016,14.86988 -8.26967,0 22.1301,-57.96535 z\"\n         style=\"\"\n         id=\"path4190\" />\n    </g>\n    <ellipse\n       style=\"fill:#ffffff;fill-opacity:0.75;stroke:#000000;stroke-width:10.16818333;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:10.16818342, 30.50455026;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"path3171-1-4-9\"\n       cx=\"62.127495\"\n       cy=\"260\"\n       rx=\"47.872509\"\n       ry=\"45.784992\" />\n    <g\n       style=\"font-style:normal;font-weight:normal;font-size:79.51308441px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n       id=\"text2841-1-4\">\n      <path\n         d=\"m 63.593049,234.07001 -10.637981,28.84679 21.314787,0 -10.676806,-28.84679 z m -4.426021,-7.72612 8.890868,0 22.091281,57.96534 -8.153197,0 -5.280166,-14.86987 -26.129055,0 -5.280166,14.86987 -8.269671,0 22.130106,-57.96534 z\"\n         style=\"\"\n         id=\"path4187\" />\n    </g>\n    <ellipse\n       style=\"fill:#ffffff;fill-opacity:0.75;stroke:#000000;stroke-width:10.16818333;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:10.16818342, 30.50455026;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"path3171-1-4-5\"\n       cx=\"160.1275\"\n       cy=\"60\"\n       rx=\"47.872509\"\n       ry=\"45.784992\" />\n    <g\n       style=\"font-style:normal;font-weight:normal;font-size:79.51308441px;font-family:'Bitstream Vera Sans';fill:#000000;fill-opacity:1;stroke:none\"\n       id=\"text2841-1-5\"\n       transform=\"translate(-1.49992,0)\">\n      <path\n         d=\"m 161.59305,34.070018 -10.63798,28.846788 21.31479,0 -10.67681,-28.846788 z m -4.42602,-7.726125 8.89087,0 22.09128,57.965349 -8.1532,0 -5.28017,-14.869878 -26.12905,0 -5.28017,14.869878 -8.26967,0 22.13011,-57.965349 z\"\n         id=\"path4193\"\n         inkscape:connector-curvature=\"0\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/SelectionGrow.svg":
/*!*******************************************!*\
  !*** ./res/img/actions/SelectionGrow.svg ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"SelectionGrow.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomEdit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective20\" />\n    <inkscape:perspective\n       id=\"perspective2876\"\n       inkscape:persp3d-origin=\"54 : 26.333333 : 1\"\n       inkscape:vp_z=\"108 : 39.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 39.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2895\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3692\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3742\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3742-2\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4142136\"\n     inkscape:cx=\"90.708135\"\n     inkscape:cy=\"170.41273\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1440\"\n     inkscape:window-height=\"838\"\n     inkscape:window-x=\"-8\"\n     inkscape:window-y=\"-8\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid3770\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       id=\"g2858\"\n       style=\"stroke:#000000;stroke-width:1.5;stroke-linecap:round\"\n       transform=\"matrix(2.9600019,0,0,2.9600019,0.86338889,59.519971)\">\n      <line\n         id=\"line2860\"\n         y2=\"2\"\n         x2=\"54\"\n         y1=\"32\"\n         x1=\"54\" />\n      <line\n         id=\"line2862\"\n         y2=\"47\"\n         x2=\"28.019238\"\n         y1=\"32\"\n         x1=\"54\" />\n      <line\n         id=\"line2864\"\n         y2=\"47\"\n         x2=\"79.980759\"\n         y1=\"32\"\n         x1=\"54\" />\n      <line\n         id=\"line2866\"\n         y2=\"77\"\n         x2=\"79.980759\"\n         y1=\"47\"\n         x1=\"79.980759\" />\n      <line\n         id=\"line2868\"\n         y2=\"32\"\n         x2=\"105.96152\"\n         y1=\"47\"\n         x1=\"79.980759\" />\n      <line\n         id=\"line2870\"\n         y2=\"32\"\n         x2=\"2.0384758\"\n         y1=\"47\"\n         x1=\"28.019238\" />\n      <line\n         id=\"line2872\"\n         y2=\"77\"\n         x2=\"28.019238\"\n         y1=\"47\"\n         x1=\"28.019238\" />\n    </g>\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:0.75000000000000000;stroke:#000000;stroke-width:5.92314277;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:5.92314277,17.76942831;stroke-dashoffset:0\"\n       id=\"path3171-1\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(1.5218776,0,0,1.1986594,-114.54779,78.005469)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n       id=\"path3173-7\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(0.45216823,0,0,0.38237687,133.10042,159.32054)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:0.75000000000000000;stroke:#000000;stroke-width:5.92314277;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:5.92314277,17.76942831;stroke-dashoffset:0\"\n       id=\"path3171-1-8\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(1.5218776,0,0,1.1986594,-268.45509,78.218145)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n       id=\"path3173-7-8\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(0.45216823,0,0,0.38237687,-20.806885,159.53322)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n       id=\"path3171\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(1.5218776,0,0,1.1986594,-191.89451,34.331302)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n       id=\"path3173\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(0.45216823,0,0,0.38237687,55.753684,115.64637)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:0.75000000000000000;stroke:#000000;stroke-width:5.92314277;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:5.92314277,17.76942831;stroke-dashoffset:0\"\n       id=\"path3171-1-4\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(1.5218776,0,0,1.1986594,-193.01077,-55.760055)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n       id=\"path3173-7-0\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(0.45216823,0,0,0.38237687,54.637436,25.555021)\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/SelectionRingBlk.svg":
/*!**********************************************!*\
  !*** ./res/img/actions/SelectionRingBlk.svg ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"SelectionRingBlk.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomEdit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective20\" />\n    <inkscape:perspective\n       id=\"perspective2876\"\n       inkscape:persp3d-origin=\"54 : 26.333333 : 1\"\n       inkscape:vp_z=\"108 : 39.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 39.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2895\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3692\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3742\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3742-2\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3832\"\n       inkscape:persp3d-origin=\"54 : 31.333333 : 1\"\n       inkscape:vp_z=\"108 : 47 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 47 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3853\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3853-1\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3967\"\n       inkscape:persp3d-origin=\"54 : 31.333333 : 1\"\n       inkscape:vp_z=\"108 : 47 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 47 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-4\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-2\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-7\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-9\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-3\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-1\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-42\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-8\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4142136\"\n     inkscape:cx=\"201.01679\"\n     inkscape:cy=\"170.41273\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1440\"\n     inkscape:window-height=\"838\"\n     inkscape:window-x=\"-8\"\n     inkscape:window-y=\"-8\"\n     showgrid=\"false\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid3770\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       id=\"g3937\"\n       style=\"stroke:#000000;stroke-width:1.5;stroke-linecap:round\"\n       transform=\"matrix(2.4899701,0,0,2.4899701,26.948713,30.700421)\">\n      <line\n         id=\"line3939\"\n         y2=\"77\"\n         x2=\"2\"\n         y1=\"47\"\n         x1=\"2\" />\n      <line\n         id=\"line3941\"\n         y2=\"32\"\n         x2=\"27.98\"\n         y1=\"47\"\n         x1=\"2\" />\n      <line\n         id=\"line3943\"\n         y2=\"92\"\n         x2=\"27.98\"\n         y1=\"77\"\n         x1=\"2\" />\n      <line\n         id=\"line3945\"\n         y2=\"77\"\n         x2=\"53.962002\"\n         y1=\"92\"\n         x1=\"27.98\" />\n      <line\n         id=\"line3947\"\n         y2=\"47\"\n         x2=\"53.962002\"\n         y1=\"77\"\n         x1=\"53.962002\" />\n      <line\n         id=\"line3949\"\n         y2=\"32\"\n         x2=\"27.98\"\n         y1=\"47\"\n         x1=\"53.962002\" />\n      <line\n         id=\"line3951\"\n         y2=\"32\"\n         x2=\"79.942001\"\n         y1=\"47\"\n         x1=\"53.962002\" />\n      <line\n         id=\"line3953\"\n         y2=\"92\"\n         x2=\"79.942001\"\n         y1=\"77\"\n         x1=\"53.962002\" />\n      <line\n         id=\"line3955\"\n         y2=\"77\"\n         x2=\"105.924\"\n         y1=\"92\"\n         x1=\"79.942001\" />\n      <line\n         id=\"line3957\"\n         y2=\"47\"\n         x2=\"105.924\"\n         y1=\"77\"\n         x1=\"105.924\" />\n      <line\n         id=\"line3959\"\n         y2=\"32\"\n         x2=\"79.942001\"\n         y1=\"47\"\n         x1=\"105.924\" />\n      <line\n         id=\"line3961\"\n         y2=\"2\"\n         x2=\"27.9795\"\n         y1=\"32\"\n         x1=\"27.98\" />\n      <line\n         id=\"line3963\"\n         y2=\"2\"\n         x2=\"79.941498\"\n         y1=\"32\"\n         x1=\"79.942001\" />\n    </g>\n    <g\n       id=\"g3881\"\n       transform=\"matrix(0.66797841,0,0,0.66797841,-81.933097,-38.115125)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,108.10549,104.77721)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-15\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,355.75368,186.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-2\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <g\n       id=\"g3881-7\"\n       transform=\"matrix(0.66797841,0,0,0.66797841,-210.7766,109.10718)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,108.10549,104.77721)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-15-6\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,355.75368,186.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-2-1\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <g\n       id=\"g3881-2\"\n       transform=\"matrix(0.66797841,0,0,0.66797841,-276.17313,72.504683)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,108.10549,104.77721)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-15-3\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,355.75368,186.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-2-2\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <g\n       id=\"g3881-1\"\n       transform=\"matrix(0.66797841,0,0,0.66797841,-276.17314,-1.722748)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,108.10549,104.77721)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-15-68\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,355.75368,186.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-2-5\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <g\n       id=\"g3881-6\"\n       transform=\"matrix(0.66797841,0,0,0.66797841,-210.77659,-38.895518)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,108.10549,104.77721)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-15-1\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,355.75368,186.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-2-8\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <g\n       id=\"g3881-27\"\n       transform=\"matrix(0.66797841,0,0,0.66797841,-146.06844,-3.787902)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,108.10549,104.77721)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-15-9\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,355.75368,186.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-2-54\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <g\n       id=\"g3881-12\"\n       transform=\"matrix(0.66797841,0,0,0.66797841,-146.75682,71.934407)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,108.10549,104.77721)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-15-33\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,355.75368,186.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-2-4\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <g\n       id=\"g3881-13\"\n       transform=\"matrix(0.66797841,0,0,0.66797841,-82.048668,108.41879)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,108.10549,104.77721)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-15-8\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,355.75368,186.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-2-7\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <g\n       id=\"g3881-77\"\n       transform=\"matrix(0.66797841,0,0,0.66797841,-18.028899,71.246022)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,108.10549,104.77721)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-15-93\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,355.75368,186.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-2-19\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <g\n       id=\"g3881-65\"\n       transform=\"matrix(0.66797841,0,0,0.66797841,-17.340514,-3.217626)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,108.10549,104.77721)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-15-0\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,355.75368,186.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-2-28\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/SelectionShrink.svg":
/*!*********************************************!*\
  !*** ./res/img/actions/SelectionShrink.svg ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"SelectionShrink.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomEdit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective20\" />\n    <inkscape:perspective\n       id=\"perspective2876\"\n       inkscape:persp3d-origin=\"54 : 26.333333 : 1\"\n       inkscape:vp_z=\"108 : 39.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 39.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2895\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3692\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3742\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3742-2\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4142136\"\n     inkscape:cx=\"201.01679\"\n     inkscape:cy=\"170.41273\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1440\"\n     inkscape:window-height=\"838\"\n     inkscape:window-x=\"-8\"\n     inkscape:window-y=\"-8\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid3770\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title></dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       id=\"g2858\"\n       style=\"stroke:#000000;stroke-width:1.5;stroke-linecap:round\"\n       transform=\"matrix(2.9600019,0,0,2.9600019,0.86338889,59.519971)\">\n      <line\n         id=\"line2860\"\n         y2=\"2\"\n         x2=\"54\"\n         y1=\"32\"\n         x1=\"54\" />\n      <line\n         id=\"line2862\"\n         y2=\"47\"\n         x2=\"28.019238\"\n         y1=\"32\"\n         x1=\"54\" />\n      <line\n         id=\"line2864\"\n         y2=\"47\"\n         x2=\"79.980759\"\n         y1=\"32\"\n         x1=\"54\" />\n      <line\n         id=\"line2866\"\n         y2=\"77\"\n         x2=\"79.980759\"\n         y1=\"47\"\n         x1=\"79.980759\" />\n      <line\n         id=\"line2868\"\n         y2=\"32\"\n         x2=\"105.96152\"\n         y1=\"47\"\n         x1=\"79.980759\" />\n      <line\n         id=\"line2870\"\n         y2=\"32\"\n         x2=\"2.0384758\"\n         y1=\"47\"\n         x1=\"28.019238\" />\n      <line\n         id=\"line2872\"\n         y2=\"77\"\n         x2=\"28.019238\"\n         y1=\"47\"\n         x1=\"28.019238\" />\n    </g>\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:5.92314277;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:5.92314277,17.76942831;stroke-dashoffset:0\"\n       id=\"path3171-1\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(1.5218776,0,0,1.1986594,-114.54779,78.005469)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n       id=\"path3173-7\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(0.45216823,0,0,0.38237687,133.10042,159.32054)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:5.92314277;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:5.92314277,17.76942831;stroke-dashoffset:0\"\n       id=\"path3171-1-8\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(1.5218776,0,0,1.1986594,-268.45509,78.218145)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n       id=\"path3173-7-8\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(0.45216823,0,0,0.38237687,-20.806885,159.53322)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n       id=\"path3171\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(1.5218776,0,0,1.1986594,-191.89451,34.331302)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n       id=\"path3173\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(0.45216823,0,0,0.38237687,55.753684,115.64637)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:5.92314277;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:5.92314277,17.76942831;stroke-dashoffset:0\"\n       id=\"path3171-1-4\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(1.5218776,0,0,1.1986594,-193.01077,-55.760055)\" />\n    <path\n       sodipodi:type=\"arc\"\n       style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n       id=\"path3173-7-0\"\n       sodipodi:cx=\"231.22392\"\n       sodipodi:cy=\"101.15045\"\n       sodipodi:rx=\"24.748737\"\n       sodipodi:ry=\"30.052038\"\n       d=\"m 255.97266,101.15045 a 24.748737,30.052038 0 1 1 -49.49747,0 24.748737,30.052038 0 1 1 49.49747,0 z\"\n       transform=\"matrix(0.45216823,0,0,0.38237687,54.637436,25.555021)\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/SelectionSmRing.svg":
/*!*********************************************!*\
  !*** ./res/img/actions/SelectionSmRing.svg ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"SelectionSmRing.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomEdit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective20\" />\n    <inkscape:perspective\n       id=\"perspective2876\"\n       inkscape:persp3d-origin=\"54 : 26.333333 : 1\"\n       inkscape:vp_z=\"108 : 39.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 39.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2895\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3692\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3742\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3742-2\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3832\"\n       inkscape:persp3d-origin=\"54 : 31.333333 : 1\"\n       inkscape:vp_z=\"108 : 47 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 47 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3853\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3853-1\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3967\"\n       inkscape:persp3d-origin=\"54 : 31.333333 : 1\"\n       inkscape:vp_z=\"108 : 47 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 47 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-4\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-2\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-7\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-9\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-3\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-1\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-42\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-8\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective4170\"\n       inkscape:persp3d-origin=\"54 : 21.333333 : 1\"\n       inkscape:vp_z=\"108 : 32 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 32 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective4190\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective4190-4\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective4190-0\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective4190-1\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective4190-3\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4142136\"\n     inkscape:cx=\"201.01679\"\n     inkscape:cy=\"170.41273\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1440\"\n     inkscape:window-height=\"838\"\n     inkscape:window-x=\"-8\"\n     inkscape:window-y=\"-8\"\n     showgrid=\"false\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid3770\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title></dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       id=\"g4150\"\n       style=\"stroke:#000000;stroke-width:1.5;stroke-linecap:round\"\n       transform=\"matrix(2.9029405,0,0,2.9029405,4.6189711,81.382589)\">\n      <line\n         id=\"line4152\"\n         y2=\"47\"\n         x2=\"28\"\n         y1=\"17\"\n         x1=\"28\" />\n      <line\n         id=\"line4154\"\n         y2=\"2\"\n         x2=\"53.98\"\n         y1=\"17\"\n         x1=\"28\" />\n      <line\n         id=\"line4156\"\n         y2=\"62\"\n         x2=\"53.98\"\n         y1=\"47\"\n         x1=\"28\" />\n      <line\n         id=\"line4158\"\n         y2=\"47\"\n         x2=\"79.961998\"\n         y1=\"62\"\n         x1=\"53.98\" />\n      <line\n         id=\"line4160\"\n         y2=\"17\"\n         x2=\"79.961998\"\n         y1=\"47\"\n         x1=\"79.961998\" />\n      <line\n         id=\"line4162\"\n         y2=\"2\"\n         x2=\"53.98\"\n         y1=\"17\"\n         x1=\"79.961998\" />\n      <line\n         id=\"line4164\"\n         y2=\"2.000165\"\n         x2=\"2.0191426\"\n         y1=\"17\"\n         x1=\"28\" />\n      <line\n         id=\"line4166\"\n         y2=\"1.999732\"\n         x2=\"105.9426\"\n         y1=\"17\"\n         x1=\"79.961998\" />\n    </g>\n    <g\n       id=\"g3881-65\"\n       transform=\"matrix(0.74111664,0,0,0.74111664,-255.281,-36.286753)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,108.10549,104.77721)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-15-0\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,355.75368,186.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-2-28\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <g\n       id=\"g3881-65-6\"\n       transform=\"matrix(0.74111664,0,0,0.74111664,-179.98369,-79.76244)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,108.10549,104.77721)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-15-0-0\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,355.75368,186.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-2-28-2\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <g\n       id=\"g3881-65-8\"\n       transform=\"matrix(0.74111664,0,0,0.74111664,-103.88435,-36.613327)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,108.10549,104.77721)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-15-0-6\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,355.75368,186.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-2-28-5\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <g\n       id=\"g3881-65-9\"\n       transform=\"matrix(0.74111664,0,0,0.74111664,-104.66888,51.903875)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,108.10549,104.77721)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-15-0-00\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,355.75368,186.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-2-28-6\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <g\n       id=\"g3881-65-3\"\n       transform=\"matrix(0.74111664,0,0,0.74111664,-179.98369,92.833999)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,108.10549,104.77721)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-15-0-8\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,355.75368,186.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-2-28-9\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n    <g\n       id=\"g3881-65-4\"\n       transform=\"matrix(0.74111664,0,0,0.74111664,-254.51397,52.038479)\">\n      <path\n         transform=\"matrix(1.5218776,0,0,1.1986594,108.10549,104.77721)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3171-15-0-4\"\n         style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:3.14762712;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n      <path\n         transform=\"matrix(0.45216823,0,0,0.38237687,355.75368,186.09229)\"\n         d=\"m 255.97266,101.15045 c 0,16.59728 -11.08039,30.05204 -24.74874,30.05204 -13.66835,0 -24.74873,-13.45476 -24.74873,-30.05204 0,-16.597281 11.08038,-30.052037 24.74873,-30.052037 13.66835,0 24.74874,13.454756 24.74874,30.052037 z\"\n         sodipodi:ry=\"30.052038\"\n         sodipodi:rx=\"24.748737\"\n         sodipodi:cy=\"101.15045\"\n         sodipodi:cx=\"231.22392\"\n         id=\"path3173-2-28-60\"\n         style=\"fill:#6c6666;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:4.00000022\"\n         sodipodi:type=\"arc\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/SelectionToggle.svg":
/*!*********************************************!*\
  !*** ./res/img/actions/SelectionToggle.svg ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"SelectionToggle.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomEdit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective20\" />\n    <inkscape:perspective\n       id=\"perspective2876\"\n       inkscape:persp3d-origin=\"54 : 26.333333 : 1\"\n       inkscape:vp_z=\"108 : 39.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 39.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2895\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3692\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3742\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3742-2\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3832\"\n       inkscape:persp3d-origin=\"54 : 31.333333 : 1\"\n       inkscape:vp_z=\"108 : 47 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 47 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3853\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3853-1\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3967\"\n       inkscape:persp3d-origin=\"54 : 31.333333 : 1\"\n       inkscape:vp_z=\"108 : 47 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 47 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-4\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-2\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-7\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-9\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-3\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-1\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-42\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-8\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2885\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2908\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4142136\"\n     inkscape:cx=\"90.708135\"\n     inkscape:cy=\"170.41273\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1440\"\n     inkscape:window-height=\"838\"\n     inkscape:window-x=\"-8\"\n     inkscape:window-y=\"-8\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid3770\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-opacity:0.75294118;stroke:#000000;stroke-width:4.25;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0\"\n       d=\"m 160,244 c -46.9442,0 -85,-38.0558 -85,-85 0,-46.9442 38.0558,-85 85,-85 l 0,170 z\"\n       id=\"path2875-1\"\n       sodipodi:nodetypes=\"cscc\" />\n    <path\n       style=\"fill:#000000;fill-opacity:0.75294118;stroke:#000000;stroke-width:4.25;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0\"\n       d=\"m 160,244 c 46.9442,0 85,-38.0558 85,-85 0,-46.9442 -38.0558,-85 -85,-85 l 0,170 z\"\n       id=\"path2875-1-7\"\n       sodipodi:nodetypes=\"cscc\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/SelectionUncurrent.svg":
/*!************************************************!*\
  !*** ./res/img/actions/SelectionUncurrent.svg ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"SelectionUncurrent.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/AtomEdit.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective20\" />\n    <inkscape:perspective\n       id=\"perspective2876\"\n       inkscape:persp3d-origin=\"54 : 26.333333 : 1\"\n       inkscape:vp_z=\"108 : 39.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 39.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2895\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3692\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3742\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3742-2\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3832\"\n       inkscape:persp3d-origin=\"54 : 31.333333 : 1\"\n       inkscape:vp_z=\"108 : 47 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 47 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3853\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3853-1\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3967\"\n       inkscape:persp3d-origin=\"54 : 31.333333 : 1\"\n       inkscape:vp_z=\"108 : 47 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 47 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-4\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-2\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-7\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-9\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-3\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-1\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-42\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective3992-8\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2885\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n    <inkscape:perspective\n       id=\"perspective2908\"\n       inkscape:persp3d-origin=\"0.5 : 0.33333333 : 1\"\n       inkscape:vp_z=\"1 : 0.5 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 0.5 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4142136\"\n     inkscape:cx=\"-40.106616\"\n     inkscape:cy=\"170.41273\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1850\"\n     inkscape:window-height=\"1156\"\n     inkscape:window-x=\"70\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid3770\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-opacity:0.75294118;stroke:#000000;stroke-width:4.25;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0\"\n       d=\"M 160 74 C 113.0558 74 75 112.0558 75 159 C 75 205.9442 113.0558 244 160 244 C 206.9442 244 245 205.9442 245 159 C 245 112.0558 206.9442 74 160 74 z \"\n       id=\"path2875-1\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/TemplateNext.svg":
/*!******************************************!*\
  !*** ./res/img/actions/TemplateNext.svg ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"TemplateNext.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/TemplateNext.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective8\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"93.268499\"\n     inkscape:cy=\"215.40039\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1440\"\n     inkscape:window-height=\"838\"\n     inkscape:window-x=\"-8\"\n     inkscape:window-y=\"-8\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#fffbfb;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 310,160 L 190,40 L 190,110 L 10,110 L 10,210 L 190,210 C 190,210 190,280 190,280 L 310,160 z \"\n       id=\"path2161\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/TemplatePrev.svg":
/*!******************************************!*\
  !*** ./res/img/actions/TemplatePrev.svg ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"TemplatePrev.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/TemplatePrev.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective8\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"93.268499\"\n     inkscape:cy=\"215.40039\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1440\"\n     inkscape:window-height=\"838\"\n     inkscape:window-x=\"-8\"\n     inkscape:window-y=\"-8\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\" />\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#fffbfb;fill-rule:evenodd;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:round;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none;fill-opacity:1\"\n       d=\"M 10,160 L 130,40 L 130,110 L 310,110 L 310,210 L 130,210 C 130,210 130,280 130,280 L 10,160 z \"\n       id=\"path2161\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/ToolArom.svg":
/*!**************************************!*\
  !*** ./res/img/actions/ToolArom.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"ToolArom.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainSelect.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       id=\"perspective8\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#bcd7fd\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.7\"\n     inkscape:cx=\"19.717178\"\n     inkscape:cy=\"158.28825\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1857\"\n     inkscape:window-height=\"1155\"\n     inkscape:window-x=\"63\"\n     inkscape:window-y=\"0\"\n     showgrid=\"true\"\n     inkscape:window-maximized=\"1\"\n     inkscape:snap-global=\"true\"\n     inkscape:snap-bbox=\"true\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid4135\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"star\"\n       style=\"opacity:1;fill:none;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"path4140\"\n       sodipodi:sides=\"6\"\n       sodipodi:cx=\"160\"\n       sodipodi:cy=\"160\"\n       sodipodi:r1=\"134.46693\"\n       sodipodi:r2=\"116.45179\"\n       sodipodi:arg1=\"1.5707963\"\n       sodipodi:arg2=\"2.0943951\"\n       inkscape:flatsided=\"true\"\n       inkscape:rounded=\"0\"\n       inkscape:randomized=\"0\"\n       d=\"M 160,294.46693 43.548221,227.23347 43.548217,92.766536 160,25.533066 276.45178,92.76653 l 0,134.46693 z\" />\n    <circle\n       style=\"opacity:1;fill:none;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"path4138\"\n       cx=\"160\"\n       cy=\"160\"\n       r=\"73.650795\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/ToolDrag.svg":
/*!**************************************!*\
  !*** ./res/img/actions/ToolDrag.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"ToolDrag.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainSelect.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       id=\"perspective8\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#bcd5ff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.98994949\"\n     inkscape:cx=\"-114.21469\"\n     inkscape:cy=\"158.28825\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1857\"\n     inkscape:window-height=\"1155\"\n     inkscape:window-x=\"63\"\n     inkscape:window-y=\"0\"\n     showgrid=\"false\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid4135\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title></dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       style=\"fill:#ffffff;fill-opacity:1\"\n       d=\"m 198.5848,262.7811 c 4.20633,-2.11828 10.6979,-6.53843 14.56602,-9.91813 8.37261,-7.31539 14.45656,-16.75062 17.0571,-26.45281 l 1.0485,-3.91179 0.13152,-78.9888 c 0.12928,-77.644351 0.1161,-79.01901 -0.77415,-80.764052 -2.61434,-5.124548 -8.31784,-6.963729 -13.48206,-4.347502 -2.71923,1.377593 -4.29692,3.30956 -5.08124,6.222338 -0.33279,1.235895 -0.3825,12.683532 -0.15789,36.363226 0.35259,37.17213 0.35694,37.08732 -1.99451,38.93698 -2.32354,1.82769 -6.12039,0.96658 -7.48256,-1.69703 -0.35868,-0.70137 -0.51673,-7.58938 -0.51673,-22.52069 0,-12.1911 -0.18698,-22.002082 -0.43159,-22.645446 -0.70246,-1.847607 -3.35617,-4.55936 -5.34669,-5.463631 -3.93544,-1.787837 -9.4322,-0.378546 -12.0852,3.098452 l -1.3336,1.747828 -0.23129,22.471767 c -0.17337,16.84505 -0.37697,22.72645 -0.8131,23.48887 -1.93589,3.38424 -7.07829,3.28127 -8.84694,-0.17715 -0.35869,-0.70137 -0.51672,-7.58938 -0.51672,-22.52069 0,-12.1911 -0.18699,-22.002082 -0.4316,-22.645446 -0.70246,-1.847607 -3.35618,-4.55936 -5.34668,-5.463631 -3.87387,-1.759857 -9.43517,-0.375283 -12.00019,2.987634 -1.8744,2.457453 -2.09288,5.31676 -2.10318,27.525053 l -0.009,20.04219 -1.35216,1.35214 c -1.88621,1.88622 -4.51033,1.88728 -6.62005,0.002 l -1.51068,-1.34958 -0.12936,-20.85437 -0.12937,-20.854377 -11.43597,0 -11.43598,0 -20.3527,13.451137 c -11.19399,7.39813 -20.84853,13.90316 -21.45454,14.45564 -2.60452,2.37443 -3.5731,7.35066 -2.11169,10.84917 1.53903,3.68433 5.1482,6.08608 9.17291,6.10418 2.01671,0.009 3.87187,-0.81214 17.31315,-7.66383 16.39457,-8.35714 16.58526,-8.4167 19.05356,-5.95088 l 1.15645,1.15528 0.23129,23.23462 c 0.12721,12.77904 0.0755,23.87456 -0.11494,24.65671 -0.41334,1.69773 -1.9511,3.20054 -3.69745,3.61342 -1.85784,0.43924 -3.99966,-0.6541 -6.33249,-3.23254 -1.12735,-1.24605 -6.56281,-6.87577 -12.0788,-12.51049 -9.75771,-9.96772 -10.09659,-10.26003 -12.52407,-10.80327 -5.52754,-1.23701 -10.96573,2.29848 -11.76838,7.6509 -0.47382,3.15968 0.52816,6.22712 3.57739,10.95165 3.38012,5.23721 8.36183,15.07942 15.73019,31.07758 7.08217,15.37679 13.71422,28.52253 18.13559,35.94749 8.19423,13.76091 16.10953,22.0795 23.08269,24.25878 1.51837,0.47453 8.21528,0.61604 30.29388,0.64015 l 28.34459,0.0309 3.13903,-1.58079 z\"\n       id=\"path4722\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       style=\"fill:#000000\"\n       d=\"m 134.82466,273.41608 c -5.80862,-1.6108 -10.46095,-4.72519 -16.43545,-11.00231 -4.85695,-5.10295 -8.32243,-9.82569 -13.32153,-18.15452 -3.8183,-6.36155 -13.189163,-25.03627 -18.811557,-37.48861 -5.584843,-12.36919 -11.331247,-23.79278 -14.54321,-28.91127 -3.912906,-6.23548 -4.932004,-8.94395 -5.221532,-13.87741 -0.19007,-3.23866 -0.05317,-4.45531 0.776431,-6.90035 1.08983,-3.21196 2.809606,-5.97011 5.039937,-8.08297 l 1.411555,-1.3372 -2.283176,-2.05276 c -1.524641,-1.37079 -2.855587,-3.21098 -4.00614,-5.53896 -1.531867,-3.09952 -1.7437,-3.96029 -1.90992,-7.76077 -0.22887,-5.23296 0.550666,-8.26182 3.113499,-12.09739 2.180307,-3.26308 0.464333,-2.01174 26.409189,-19.25824 l 21.047404,-13.990971 14.57128,-0.138947 14.57127,-0.138934 1.29094,-1.811486 c 1.75423,-2.461626 4.69929,-4.797698 7.99299,-6.340171 2.47779,-1.160367 3.23542,-1.284647 7.83155,-1.284647 4.7443,0 5.29556,0.09812 8.15223,1.451665 1.68511,0.79842 3.88953,2.197638 4.8987,3.109366 l 1.83486,1.65768 1.34612,-1.406005 c 0.74038,-0.773306 2.8792,-2.163939 4.75294,-3.0903 3.00627,-1.486274 3.90363,-1.705716 7.63257,-1.866503 4.07983,-0.175908 6.07109,0.212155 10.12368,1.972955 0.75135,0.326463 0.80951,-0.165369 0.80951,-6.844982 0,-3.9582 0.2308,-8.299812 0.51286,-9.648026 1.20526,-5.76068 5.29243,-10.78836 10.94834,-13.467677 2.9094,-1.37824 3.43841,-1.473312 8.19847,-1.473312 4.76549,0 5.28676,0.09403 8.21474,1.48093 4.15609,1.968702 7.82558,5.494965 9.71781,9.338492 l 1.49582,3.038319 0.12085,79.570454 c 0.13305,87.59899 0.26376,83.15726 -2.70887,92.04841 -3.74053,11.18789 -11.68774,21.81638 -22.64435,30.2842 -4.65481,3.59747 -11.28374,7.68197 -15.47744,9.53662 l -2.56783,1.13562 -30.40146,-0.0414 c -22.76429,-0.031 -30.92439,-0.18638 -32.48308,-0.61863 z M 198.5848,262.7811 c 4.20633,-2.11828 10.6979,-6.53843 14.56602,-9.91813 8.37261,-7.31539 14.45656,-16.75062 17.0571,-26.45281 l 1.0485,-3.91179 0.13152,-78.9888 c 0.12928,-77.644351 0.1161,-79.01901 -0.77415,-80.764052 -2.61434,-5.124548 -8.31784,-6.963729 -13.48206,-4.347502 -2.71923,1.377593 -4.29692,3.30956 -5.08124,6.222338 -0.33279,1.235895 -0.3825,12.683532 -0.15789,36.363226 0.35259,37.17213 0.35694,37.08732 -1.99451,38.93698 -2.32354,1.82769 -6.12039,0.96658 -7.48256,-1.69703 -0.35868,-0.70137 -0.51673,-7.58938 -0.51673,-22.52069 0,-12.1911 -0.18698,-22.002082 -0.43159,-22.645446 -0.70246,-1.847607 -3.35617,-4.55936 -5.34669,-5.463631 -3.93544,-1.787837 -9.4322,-0.378546 -12.0852,3.098452 l -1.3336,1.747828 -0.23129,22.471767 c -0.17337,16.84505 -0.37697,22.72645 -0.8131,23.48887 -1.93589,3.38424 -7.07829,3.28127 -8.84694,-0.17715 -0.35869,-0.70137 -0.51672,-7.58938 -0.51672,-22.52069 0,-12.1911 -0.18699,-22.002082 -0.4316,-22.645446 -0.70246,-1.847607 -3.35618,-4.55936 -5.34668,-5.463631 -3.87387,-1.759857 -9.43517,-0.375283 -12.00019,2.987634 -1.8744,2.457453 -2.09288,5.31676 -2.10318,27.525053 l -0.009,20.04219 -1.35216,1.35214 c -1.88621,1.88622 -4.51033,1.88728 -6.62005,0.002 l -1.51068,-1.34958 -0.12936,-20.85437 -0.12937,-20.854377 -11.43597,0 -11.43598,0 -20.3527,13.451137 c -11.193992,7.39813 -20.848528,13.90316 -21.454536,14.45564 -2.604526,2.37443 -3.573104,7.35066 -2.111693,10.84917 1.539032,3.68433 5.148195,6.08608 9.172907,6.10418 2.016712,0.009 3.871872,-0.81214 17.313152,-7.66383 16.39457,-8.35714 16.58526,-8.4167 19.05356,-5.95088 l 1.15645,1.15528 0.23129,23.23462 c 0.12721,12.77904 0.0755,23.87456 -0.11494,24.65671 -0.41334,1.69773 -1.9511,3.20054 -3.69745,3.61342 -1.85784,0.43924 -3.99966,-0.6541 -6.33249,-3.23254 -1.12735,-1.24605 -6.56281,-6.87577 -12.0788,-12.51049 -9.757714,-9.96772 -10.096591,-10.26003 -12.524074,-10.80327 -5.527533,-1.23701 -10.965729,2.29848 -11.768371,7.6509 -0.473825,3.15968 0.52816,6.22712 3.577384,10.95165 3.380116,5.23721 8.361832,15.07942 15.730189,31.07758 7.082172,15.37679 13.714222,28.52253 18.135592,35.94749 8.19423,13.76091 16.10953,22.0795 23.08269,24.25878 1.51837,0.47453 8.21528,0.61604 30.29388,0.64015 l 28.34459,0.0309 3.13903,-1.58079 z M 112.90759,139.5978 c -0.21058,-0.21058 -4.68064,1.97376 -11.17695,5.46172 l -4.182758,2.24578 7.652108,7.94148 7.65211,7.94149 0.12373,-11.69925 c 0.0681,-6.43459 0.0373,-11.78563 -0.0682,-11.89122 z\"\n       id=\"path4716\"\n       inkscape:connector-curvature=\"0\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/ToolErasor.svg":
/*!****************************************!*\
  !*** ./res/img/actions/ToolErasor.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.47 r22583\"\n   version=\"1.0\"\n   sodipodi:docname=\"RetroErasor.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/BondLinear.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       sodipodi:type=\"inkscape:persp3d\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       id=\"perspective16\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4\"\n     inkscape:cx=\"101.20996\"\n     inkscape:cy=\"115.93898\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1387\"\n     inkscape:window-height=\"856\"\n     inkscape:window-x=\"53\"\n     inkscape:window-y=\"0\"\n     showgrid=\"false\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid2983\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       id=\"g3805\"\n       transform=\"matrix(0.95048511,0,0,0.95048511,-7.209769,-44.503179)\">\n      <path\n         inkscape:connector-curvature=\"0\"\n         id=\"path3021\"\n         d=\"m 30,220 0,80 130,0 0,-80 z\"\n         style=\"fill:#ffffff;fill-opacity:0.50196078;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\" />\n      <path\n         inkscape:connector-curvature=\"0\"\n         id=\"path3029\"\n         d=\"m 30,220 60,-30 130,0 -60,30 z\"\n         style=\"fill:#ffffff;fill-opacity:0.50196078;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\" />\n      <path\n         sodipodi:nodetypes=\"cccc\"\n         inkscape:connector-curvature=\"0\"\n         id=\"path3031\"\n         d=\"m 90,190 120,-60 120,0 -110,60\"\n         style=\"fill:#000000;fill-opacity:0.50196078;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\" />\n      <path\n         inkscape:connector-curvature=\"0\"\n         id=\"path3033\"\n         d=\"m 160,220 60,-30 0,80 -60,30 z\"\n         style=\"fill:#ffffff;fill-opacity:0.50196078;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\" />\n      <path\n         inkscape:connector-curvature=\"0\"\n         id=\"path3035\"\n         d=\"m 220,190 0,80 110,-60 0,-80\"\n         style=\"fill:#000000;fill-opacity:0.50196078;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/ToolPan.svg":
/*!*************************************!*\
  !*** ./res/img/actions/ToolPan.svg ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"ToolPan.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainSelect.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       id=\"perspective8\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#bcd7fd\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.98994949\"\n     inkscape:cx=\"-33.40249\"\n     inkscape:cy=\"158.28825\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1857\"\n     inkscape:window-height=\"1155\"\n     inkscape:window-x=\"63\"\n     inkscape:window-y=\"0\"\n     showgrid=\"false\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid4135\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title></dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <g\n       id=\"g4759\"\n       transform=\"matrix(1.1035479,0,0,1.1035479,259.85038,18.296497)\">\n      <path\n         inkscape:connector-curvature=\"0\"\n         id=\"path4753\"\n         d=\"m -92.02537,30.740234 c 2.45111,0 4.90206,1.015331 6.93164,3.044922 l 3.06836,3.06836 0,41.93164 0,41.931644 4.95508,0 4.95508,0 0.35742,-12.1875 0.35742,-12.187503 3.375,-0.390625 c 1.85662,-0.214261 4.5285,0.22835 5.9375,0.982422 2.3433,1.254098 2.5625,2.539225 2.5625,15.076176 l 0,13.70703 4.375,0 4.375,0 0,-7.5 0,-7.5 3.80664,0 c 2.37515,0 4.96071,1.15407 6.875,3.06836 l 3.06836,3.06836 0,27.27148 c 0,29.8793 -0.11379,30.57518 -9.17774,55.85742 -2.44343,6.81549 -4.81894,15.39361 -5.27734,19.0625 l -0.83398,6.67188 -34.67188,0 -34.67187,0 -0.78321,-9.25977 c -1.01374,-11.99243 -4.78475,-21.87779 -11.15039,-29.22656 -2.80546,-3.23874 -6.72177,-9.54492 -8.70117,-14.01367 -6.77955,-15.30563 -9.7463,-20.68795 -14.73633,-26.72657 -5.60352,-6.78105 -6.13962,-9.6299 -2.49609,-13.27343 6.23629,-6.23629 15.622,-0.97085 29.00391,16.27148 l 3.3789,4.35352 0.0586,-50.99414 0.0586,-50.994144 3.14648,-3.146485 c 2.32477,-2.324778 4.20069,-3.044178 7.1875,-2.755859 l 4.04102,0.390625 0.33203,37.1875 0.33008,37.187503 4.98242,0 4.98047,0 0,-41.931644 0,-41.93164 3.06836,-3.06836 c 2.02959,-2.029591 4.48053,-3.044922 6.93164,-3.044922 z\"\n         style=\"fill:#ffffff;fill-opacity:1\" />\n      <path\n         id=\"path4746\"\n         d=\"m -92.042969,21.097656 c -4.169447,0.0083 -8.343911,1.22813 -11.527341,3.65625 -2.46099,1.877091 -5.19972,5.050631 -6.08594,7.052735 -1.43274,3.23679 -2.35022,3.702655 -8.29102,4.195312 -7.08275,0.587357 -11.48476,3.067017 -15.875,8.943359 -2.45502,3.286042 -2.59594,5.308607 -2.9414,42.654297 l -0.36133,39.205081 -6.51367,-3.03125 c -3.58178,-1.66763 -8.07753,-3.03792 -9.99024,-3.04492 -5.12526,-0.018 -11.35175,2.95887 -14.46289,6.91406 -5.99633,7.62309 -5.04663,14.71933 3.375,25.21289 3.63938,4.53475 8.11406,12.47823 11.34571,20.13672 3.20064,7.58499 7.30372,14.88134 10.25,18.22851 7.87832,8.95023 10.19097,15.56933 10.84765,31.0586 l 0.56836,13.4375 44.839846,0 44.839843,0 0,-7.83985 c 0,-8.54888 2.179562,-17.0333 9.544922,-37.16015 l 4.802735,-13.125 0.429687,-29.375 c 0.27731,-18.93033 -0.05681,-31.00119 -0.939453,-33.94727 -1.80016,-6.00858 -8.806804,-12.06842 -15.121094,-13.07812 -2.73207,-0.43687 -4.966797,-1.437874 -4.966797,-2.224613 0,-0.78674 -1.694735,-3.485705 -3.765625,-5.998047 -4.1349,-5.016353 -10.661225,-7.804379 -16.328125,-6.972656 l -3.65625,0.537109 0,-24.90625 c 0,-27.98198 -0.682675,-30.943484 -8.515625,-36.917969 -3.16682,-2.415449 -7.332505,-3.619648 -11.501953,-3.611328 z m 0.01758,9.642578 c 2.451114,0 4.902056,1.015331 6.931641,3.044922 l 3.068359,3.06836 0,41.93164 0,41.931644 4.955079,0 4.955078,0 0.357422,-12.1875 0.357421,-12.187503 3.375,-0.390625 c 1.85662,-0.214261 4.5285,0.22835 5.9375,0.982422 2.3433,1.254098 2.5625,2.539225 2.5625,15.076176 l 0,13.70703 4.375,0 4.375,0 0,-7.5 0,-7.5 3.806641,0 c 2.37515,0 4.96071,1.15407 6.875,3.06836 l 3.068359,3.06836 0,27.27148 c 0,29.8793 -0.113784,30.57518 -9.177734,55.85742 -2.44343,6.81549 -4.818944,15.39361 -5.277344,19.0625 l -0.833984,6.67188 -34.671875,0 -34.671874,0 -0.78321,-9.25977 c -1.01374,-11.99243 -4.78475,-21.87779 -11.15039,-29.22656 -2.80546,-3.23874 -6.72177,-9.54492 -8.70117,-14.01367 -6.77955,-15.30563 -9.7463,-20.68795 -14.73633,-26.72657 -5.60352,-6.78105 -6.13962,-9.6299 -2.49609,-13.27343 6.23629,-6.23629 15.622,-0.97085 29.00391,16.27148 l 3.3789,4.35352 0.0586,-50.99414 0.0586,-50.994144 3.14648,-3.146485 c 2.32477,-2.324778 4.20069,-3.044178 7.1875,-2.755859 l 4.04102,0.390625 0.33203,37.1875 0.33008,37.187503 4.98242,0 4.98047,0 0,-41.931644 0,-41.93164 3.068361,-3.06836 c 2.02959,-2.029591 4.480527,-3.044922 6.93164,-3.044922 z\"\n         style=\"fill:#000000\"\n         inkscape:connector-curvature=\"0\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/ToolRing.svg":
/*!**************************************!*\
  !*** ./res/img/actions/ToolRing.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r13725\"\n   version=\"1.0\"\n   sodipodi:docname=\"ToolRing.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainSelect.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       id=\"perspective8\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#bcd7fd\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.98994949\"\n     inkscape:cx=\"195.90214\"\n     inkscape:cy=\"158.28825\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1857\"\n     inkscape:window-height=\"1155\"\n     inkscape:window-x=\"63\"\n     inkscape:window-y=\"0\"\n     showgrid=\"false\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid4135\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       sodipodi:type=\"star\"\n       style=\"opacity:1;fill:none;fill-opacity:1;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"path4140\"\n       sodipodi:sides=\"6\"\n       sodipodi:cx=\"160\"\n       sodipodi:cy=\"160\"\n       sodipodi:r1=\"134.46693\"\n       sodipodi:r2=\"116.45179\"\n       sodipodi:arg1=\"1.5707963\"\n       sodipodi:arg2=\"2.0943951\"\n       inkscape:flatsided=\"true\"\n       inkscape:rounded=\"0\"\n       inkscape:randomized=\"0\"\n       d=\"M 160,294.46693 43.548221,227.23347 43.548217,92.766536 160,25.533066 276.45178,92.76653 l 0,134.46693 z\" />\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/ToolRotate.svg":
/*!****************************************!*\
  !*** ./res/img/actions/ToolRotate.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"320\"\n   height=\"320\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r\"\n   version=\"1.0\"\n   sodipodi:docname=\"ToolRotate.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainSelect.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       id=\"perspective8\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#d3e5ff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.98994949\"\n     inkscape:cx=\"-140.47866\"\n     inkscape:cy=\"198.69435\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1857\"\n     inkscape:window-height=\"1028\"\n     inkscape:window-x=\"61\"\n     inkscape:window-y=\"0\"\n     showgrid=\"false\"\n     inkscape:window-maximized=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid4135\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <path\n       inkscape:connector-curvature=\"0\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:4.55773544;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 68.562496,210.12948 A 34.671101,35.243633 0 0 0 33.890833,245.37285 34.671101,35.243633 0 0 0 68.562496,280.6189 34.671101,35.243633 0 0 0 103.23417,245.37285 34.671101,35.243633 0 0 0 68.562496,210.12948 Z m 0.09935,11.02044 A 23.336319,23.721675 0 0 1 91.999068,244.87094 23.336319,23.721675 0 0 1 68.66185,268.59197 23.336319,23.721675 0 0 1 45.324633,244.87094 23.336319,23.721675 0 0 1 68.66185,221.14992 Z\"\n       id=\"path4237\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:10.40872955;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:10.40872949, 20.81745898;stroke-dashoffset:2.00970006;stroke-opacity:1\"\n       d=\"M 177.52863,34.919161 68.562276,246.38095 l 224.866844,0\"\n       id=\"path5210\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:6.99123812px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"m 128.10545,149.71269 c 28.70161,15.31171 49.84665,42.14544 57.45499,89.61956\"\n       id=\"path5212\"\n       sodipodi:nodetypes=\"cc\" />\n    <g\n       style=\"font-style:normal;font-weight:normal;font-size:129.6784668px;line-height:125%;font-family:Sans;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       id=\"text4750\">\n      <path\n         d=\"m 230.101,96.949874 q 4.93893,0 8.7381,2.026226 3.79918,1.96291 6.33196,5.76208 2.53278,3.79917 3.79917,9.3713 1.32971,5.5088 1.32971,12.60059 0,8.16822 -1.83626,18.48931 -3.92582,22.35181 -12.41064,33.05281 -8.4215,10.63769 -21.08541,10.63769 -4.81229,0 -8.42151,-1.89959 -3.54589,-1.9629 -5.88871,-5.63544 -2.34283,-3.73585 -3.5459,-9.0547 -1.13975,-5.31884 -1.13975,-12.09403 0,-4.49569 0.44323,-9.49794 0.50656,-5.00224 1.51967,-10.57436 3.92582,-22.22517 12.03072,-32.6729 8.16822,-10.511046 20.13562,-10.511046 z m -0.44323,5.065566 q -4.1791,0 -7.21843,2.53278 -2.97602,2.53278 -5.31885,7.40839 -2.2795,4.87561 -4.05245,11.9674 -1.70963,7.09179 -3.29262,16.20981 l 27.67065,0 q 0.88648,-5.69876 1.39303,-10.70101 0.50656,-5.06556 0.50656,-9.3713 0,-4.17909 -0.56988,-7.53502 -0.50655,-3.35594 -1.64631,-5.63544 -1.13975,-2.34283 -2.97602,-3.60922 -1.83626,-1.26639 -4.49568,-1.26639 z m -20.83214,43.6905 q -1.01311,6.142 -1.58299,11.6508 -0.56988,5.44548 -0.56988,10.06781 0,3.73585 0.44324,6.77519 0.44324,3.03934 1.45635,5.19221 1.01311,2.15286 2.65942,3.35593 1.64631,1.13976 3.98913,1.13976 4.11578,0 7.34507,-2.59611 3.29262,-2.5961 5.8254,-7.47171 2.59611,-4.93892 4.55901,-12.03071 1.96291,-7.09179 3.5459,-16.08317 l -27.67065,0 z\"\n         style=\"font-style:italic;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Times New Roman';-inkscape-font-specification:'Times New Roman,  Italic'\"\n         id=\"path4147\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./res/img/actions/ToolSelect.svg":
/*!****************************************!*\
  !*** ./res/img/actions/ToolSelect.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"50\"\n   height=\"50\"\n   id=\"svg2\"\n   sodipodi:version=\"0.32\"\n   inkscape:version=\"0.91 r\"\n   version=\"1.0\"\n   sodipodi:docname=\"ToolSelect.svg\"\n   inkscape:output_extension=\"org.inkscape.output.svg.inkscape\"\n   inkscape:export-filename=\"/home/aclark/CRK3/MMTk/images/msk/MainSelect.png\"\n   inkscape:export-xdpi=\"9\"\n   inkscape:export-ydpi=\"9\">\n  <defs\n     id=\"defs4\">\n    <inkscape:perspective\n       id=\"perspective8\"\n       inkscape:persp3d-origin=\"160 : 106.66667 : 1\"\n       inkscape:vp_z=\"320 : 160 : 1\"\n       inkscape:vp_y=\"0 : 1000 : 0\"\n       inkscape:vp_x=\"0 : 160 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#d3e5ff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     gridtolerance=\"10000\"\n     guidetolerance=\"10\"\n     objecttolerance=\"10\"\n     inkscape:pageopacity=\"0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"8.64\"\n     inkscape:cx=\"22.280093\"\n     inkscape:cy=\"25\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     width=\"320px\"\n     height=\"320px\"\n     showborder=\"true\"\n     inkscape:window-width=\"1920\"\n     inkscape:window-height=\"1028\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"0\"\n     showgrid=\"false\"\n     inkscape:window-maximized=\"1\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid4135\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata7\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title></dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\"\n     transform=\"translate(0,-270)\">\n    <g\n       transform=\"matrix(2.2470395,0,0,2.2470395,1.4827876,-402.18041)\"\n       id=\"layer1-1\"\n       inkscape:label=\"Layer 1\"\n       style=\"fill:#ffffff;fill-opacity:1;stroke-width:0.77823228;stroke-miterlimit:4;stroke-dasharray:none\">\n      <path\n         sodipodi:nodetypes=\"cccccccc\"\n         inkscape:connector-curvature=\"0\"\n         id=\"path4141\"\n         d=\"m 3.994178,302.40331 0.011839,13.60146 4.8493426,-3.53325 4.1221284,5.65757 3.232895,-2.3555 -4.122128,-5.65757 4.849343,-3.53325 z\"\n         style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:0.77823228;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./dist/index-src.ts":
/*!***************************!*\
  !*** ./dist/index-src.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ASCENT_FUDGE: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.ASCENT_FUDGE),
/* harmony export */   AbbrevContainer: () => (/* reexport safe */ _src_data_AbbrevContainer__WEBPACK_IMPORTED_MODULE_14__.AbbrevContainer),
/* harmony export */   ActivityType: () => (/* reexport safe */ _src_sketcher_MoleculeActivity__WEBPACK_IMPORTED_MODULE_57__.ActivityType),
/* harmony export */   ArrangeComponent: () => (/* reexport safe */ _src_gfx_ArrangeExperiment__WEBPACK_IMPORTED_MODULE_20__.ArrangeComponent),
/* harmony export */   ArrangeComponentAnnot: () => (/* reexport safe */ _src_gfx_ArrangeExperiment__WEBPACK_IMPORTED_MODULE_20__.ArrangeComponentAnnot),
/* harmony export */   ArrangeComponentType: () => (/* reexport safe */ _src_gfx_ArrangeExperiment__WEBPACK_IMPORTED_MODULE_20__.ArrangeComponentType),
/* harmony export */   ArrangeExperiment: () => (/* reexport safe */ _src_gfx_ArrangeExperiment__WEBPACK_IMPORTED_MODULE_20__.ArrangeExperiment),
/* harmony export */   ArrangeMolecule: () => (/* reexport safe */ _src_gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_22__.ArrangeMolecule),
/* harmony export */   Aspect: () => (/* reexport safe */ _src_aspect_Aspect__WEBPACK_IMPORTED_MODULE_0__.Aspect),
/* harmony export */   AspectList: () => (/* reexport safe */ _src_aspect_AspectList__WEBPACK_IMPORTED_MODULE_1__.AspectList),
/* harmony export */   AssayProvenance: () => (/* reexport safe */ _src_aspect_AssayProvenance__WEBPACK_IMPORTED_MODULE_2__.AssayProvenance),
/* harmony export */   AssayProvenanceHeader: () => (/* reexport safe */ _src_aspect_AssayProvenance__WEBPACK_IMPORTED_MODULE_2__.AssayProvenanceHeader),
/* harmony export */   Atom: () => (/* reexport safe */ _src_mol_Molecule__WEBPACK_IMPORTED_MODULE_41__.Atom),
/* harmony export */   AxisLabeller: () => (/* reexport safe */ _src_gfx_AxisLabeller__WEBPACK_IMPORTED_MODULE_23__.AxisLabeller),
/* harmony export */   BLineType: () => (/* reexport safe */ _src_gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_22__.BLineType),
/* harmony export */   BONDARTIFACT_EXTRA_ARENE: () => (/* reexport safe */ _src_mol_BondArtifact__WEBPACK_IMPORTED_MODULE_33__.BONDARTIFACT_EXTRA_ARENE),
/* harmony export */   BONDARTIFACT_EXTRA_RESPATH: () => (/* reexport safe */ _src_mol_BondArtifact__WEBPACK_IMPORTED_MODULE_33__.BONDARTIFACT_EXTRA_RESPATH),
/* harmony export */   BONDARTIFACT_EXTRA_RESRING: () => (/* reexport safe */ _src_mol_BondArtifact__WEBPACK_IMPORTED_MODULE_33__.BONDARTIFACT_EXTRA_RESRING),
/* harmony export */   BayesianModel: () => (/* reexport safe */ _src_calc_BayesianModel__WEBPACK_IMPORTED_MODULE_10__.BayesianModel),
/* harmony export */   BayesianPrediction: () => (/* reexport safe */ _src_aspect_BayesianPrediction__WEBPACK_IMPORTED_MODULE_3__.BayesianPrediction),
/* harmony export */   BayesianPredictionModel: () => (/* reexport safe */ _src_aspect_BayesianPrediction__WEBPACK_IMPORTED_MODULE_3__.BayesianPredictionModel),
/* harmony export */   BayesianPredictionOutcome: () => (/* reexport safe */ _src_aspect_BayesianPrediction__WEBPACK_IMPORTED_MODULE_3__.BayesianPredictionOutcome),
/* harmony export */   BayesianSource: () => (/* reexport safe */ _src_aspect_BayesianSource__WEBPACK_IMPORTED_MODULE_4__.BayesianSource),
/* harmony export */   BayesianSourceModel: () => (/* reexport safe */ _src_aspect_BayesianSource__WEBPACK_IMPORTED_MODULE_4__.BayesianSourceModel),
/* harmony export */   BinaryData: () => (/* reexport safe */ _src_aspect_BinaryData__WEBPACK_IMPORTED_MODULE_5__.BinaryData),
/* harmony export */   BinaryDataField: () => (/* reexport safe */ _src_aspect_BinaryData__WEBPACK_IMPORTED_MODULE_5__.BinaryDataField),
/* harmony export */   Bond: () => (/* reexport safe */ _src_mol_Molecule__WEBPACK_IMPORTED_MODULE_41__.Bond),
/* harmony export */   BondArtifact: () => (/* reexport safe */ _src_mol_BondArtifact__WEBPACK_IMPORTED_MODULE_33__.BondArtifact),
/* harmony export */   Box: () => (/* reexport safe */ _src_util_Geom__WEBPACK_IMPORTED_MODULE_77__.Box),
/* harmony export */   BuildSMILES: () => (/* reexport safe */ _src_calc_BuildSMILES__WEBPACK_IMPORTED_MODULE_11__.BuildSMILES),
/* harmony export */   ButtonBank: () => (/* reexport safe */ _src_ui_ButtonBank__WEBPACK_IMPORTED_MODULE_64__.ButtonBank),
/* harmony export */   ButtonView: () => (/* reexport safe */ _src_ui_ButtonView__WEBPACK_IMPORTED_MODULE_65__.ButtonView),
/* harmony export */   ButtonViewPosition: () => (/* reexport safe */ _src_ui_ButtonView__WEBPACK_IMPORTED_MODULE_65__.ButtonViewPosition),
/* harmony export */   Chemistry: () => (/* reexport safe */ _src_mol_Chemistry__WEBPACK_IMPORTED_MODULE_34__.Chemistry),
/* harmony export */   CircularFingerprints: () => (/* reexport safe */ _src_calc_CircularFingerprints__WEBPACK_IMPORTED_MODULE_12__.CircularFingerprints),
/* harmony export */   ClipboardProxy: () => (/* reexport safe */ _src_ui_ClipboardProxy__WEBPACK_IMPORTED_MODULE_66__.ClipboardProxy),
/* harmony export */   ClipboardProxyHandler: () => (/* reexport safe */ _src_ui_ClipboardProxy__WEBPACK_IMPORTED_MODULE_66__.ClipboardProxyHandler),
/* harmony export */   ClipboardProxyWeb: () => (/* reexport safe */ _src_ui_ClipboardProxy__WEBPACK_IMPORTED_MODULE_66__.ClipboardProxyWeb),
/* harmony export */   CommandBank: () => (/* reexport safe */ _src_sketcher_CommandBank__WEBPACK_IMPORTED_MODULE_48__.CommandBank),
/* harmony export */   ContextSketch: () => (/* reexport safe */ _src_sketcher_ContextSketch__WEBPACK_IMPORTED_MODULE_49__.ContextSketch),
/* harmony export */   CoordUtil: () => (/* reexport safe */ _src_mol_CoordUtil__WEBPACK_IMPORTED_MODULE_35__.CoordUtil),
/* harmony export */   DEGRAD: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.DEGRAD),
/* harmony export */   DOM: () => (/* reexport safe */ _src_util_dom__WEBPACK_IMPORTED_MODULE_84__.DOM),
/* harmony export */   DataSheet: () => (/* reexport safe */ _src_ds_DataSheet__WEBPACK_IMPORTED_MODULE_19__.DataSheet),
/* harmony export */   DataSheetColumn: () => (/* reexport safe */ _src_ds_DataSheet__WEBPACK_IMPORTED_MODULE_19__.DataSheetColumn),
/* harmony export */   DataSheetStream: () => (/* reexport safe */ _src_io_DataSheetStream__WEBPACK_IMPORTED_MODULE_29__.DataSheetStream),
/* harmony export */   Dialog: () => (/* reexport safe */ _src_dialog_Dialog__WEBPACK_IMPORTED_MODULE_17__.Dialog),
/* harmony export */   DotPath: () => (/* reexport safe */ _src_mol_DotPath__WEBPACK_IMPORTED_MODULE_36__.DotPath),
/* harmony export */   DotPathBond: () => (/* reexport safe */ _src_mol_DotPath__WEBPACK_IMPORTED_MODULE_36__.DotPathBond),
/* harmony export */   DotPathCharge: () => (/* reexport safe */ _src_mol_DotPath__WEBPACK_IMPORTED_MODULE_36__.DotPathCharge),
/* harmony export */   DraggingTool: () => (/* reexport safe */ _src_sketcher_DrawCanvas__WEBPACK_IMPORTED_MODULE_50__.DraggingTool),
/* harmony export */   DrawCanvas: () => (/* reexport safe */ _src_sketcher_DrawCanvas__WEBPACK_IMPORTED_MODULE_50__.DrawCanvas),
/* harmony export */   DrawCanvasDecoration: () => (/* reexport safe */ _src_sketcher_DrawCanvas__WEBPACK_IMPORTED_MODULE_50__.DrawCanvasDecoration),
/* harmony export */   DrawExperiment: () => (/* reexport safe */ _src_gfx_DrawExperiment__WEBPACK_IMPORTED_MODULE_24__.DrawExperiment),
/* harmony export */   DrawMolecule: () => (/* reexport safe */ _src_gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_25__.DrawMolecule),
/* harmony export */   EditAtom: () => (/* reexport safe */ _src_sketcher_EditAtom__WEBPACK_IMPORTED_MODULE_51__.EditAtom),
/* harmony export */   EditBond: () => (/* reexport safe */ _src_sketcher_EditBond__WEBPACK_IMPORTED_MODULE_52__.EditBond),
/* harmony export */   EditCompound: () => (/* reexport safe */ _src_dialog_EditCompound__WEBPACK_IMPORTED_MODULE_18__.EditCompound),
/* harmony export */   EditPolymer: () => (/* reexport safe */ _src_sketcher_EditPolymer__WEBPACK_IMPORTED_MODULE_53__.EditPolymer),
/* harmony export */   EmbedChemistry: () => (/* reexport safe */ _src_ui_EmbedChemistry__WEBPACK_IMPORTED_MODULE_67__.EmbedChemistry),
/* harmony export */   EmbedCollection: () => (/* reexport safe */ _src_ui_EmbedCollection__WEBPACK_IMPORTED_MODULE_68__.EmbedCollection),
/* harmony export */   EmbedMolecule: () => (/* reexport safe */ _src_ui_EmbedMolecule__WEBPACK_IMPORTED_MODULE_69__.EmbedMolecule),
/* harmony export */   EmbedReaction: () => (/* reexport safe */ _src_ui_EmbedReaction__WEBPACK_IMPORTED_MODULE_70__.EmbedReaction),
/* harmony export */   EmbedReactionFacet: () => (/* reexport safe */ _src_ui_EmbedReaction__WEBPACK_IMPORTED_MODULE_70__.EmbedReactionFacet),
/* harmony export */   Experiment: () => (/* reexport safe */ _src_aspect_Experiment__WEBPACK_IMPORTED_MODULE_6__.Experiment),
/* harmony export */   ExperimentComponent: () => (/* reexport safe */ _src_aspect_Experiment__WEBPACK_IMPORTED_MODULE_6__.ExperimentComponent),
/* harmony export */   ExperimentComponentType: () => (/* reexport safe */ _src_aspect_Experiment__WEBPACK_IMPORTED_MODULE_6__.ExperimentComponentType),
/* harmony export */   ExperimentEntry: () => (/* reexport safe */ _src_aspect_Experiment__WEBPACK_IMPORTED_MODULE_6__.ExperimentEntry),
/* harmony export */   ExperimentMeta: () => (/* reexport safe */ _src_rxn_ExperimentMeta__WEBPACK_IMPORTED_MODULE_46__.ExperimentMeta),
/* harmony export */   ExperimentMetaApplic: () => (/* reexport safe */ _src_rxn_ExperimentMeta__WEBPACK_IMPORTED_MODULE_46__.ExperimentMetaApplic),
/* harmony export */   ExperimentMetaRoleType: () => (/* reexport safe */ _src_rxn_ExperimentMeta__WEBPACK_IMPORTED_MODULE_46__.ExperimentMetaRoleType),
/* harmony export */   ExperimentMetaType: () => (/* reexport safe */ _src_rxn_ExperimentMeta__WEBPACK_IMPORTED_MODULE_46__.ExperimentMetaType),
/* harmony export */   ExperimentMetaValue: () => (/* reexport safe */ _src_rxn_ExperimentMeta__WEBPACK_IMPORTED_MODULE_46__.ExperimentMetaValue),
/* harmony export */   ExperimentStep: () => (/* reexport safe */ _src_aspect_Experiment__WEBPACK_IMPORTED_MODULE_6__.ExperimentStep),
/* harmony export */   ExtraFieldsWidget: () => (/* reexport safe */ _src_sketcher_ExtraFieldsWidget__WEBPACK_IMPORTED_MODULE_54__.ExtraFieldsWidget),
/* harmony export */   FontData: () => (/* reexport safe */ _src_gfx_FontData__WEBPACK_IMPORTED_MODULE_26__.FontData),
/* harmony export */   ForeignMolecule: () => (/* reexport safe */ _src_mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_37__.ForeignMolecule),
/* harmony export */   ForeignMoleculeTransient: () => (/* reexport safe */ _src_mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_37__.ForeignMoleculeTransient),
/* harmony export */   FormatList: () => (/* reexport safe */ _src_data_FormatList__WEBPACK_IMPORTED_MODULE_15__.FormatList),
/* harmony export */   FusionBank: () => (/* reexport safe */ _src_sketcher_TemplateBank__WEBPACK_IMPORTED_MODULE_61__.FusionBank),
/* harmony export */   FusionPermutation: () => (/* reexport safe */ _src_sketcher_TemplateFusion__WEBPACK_IMPORTED_MODULE_62__.FusionPermutation),
/* harmony export */   GeomUtil: () => (/* reexport safe */ _src_util_Geom__WEBPACK_IMPORTED_MODULE_77__.GeomUtil),
/* harmony export */   GeomWidget: () => (/* reexport safe */ _src_sketcher_GeomWidget__WEBPACK_IMPORTED_MODULE_55__.GeomWidget),
/* harmony export */   GeomWidgetSelType: () => (/* reexport safe */ _src_sketcher_GeomWidget__WEBPACK_IMPORTED_MODULE_55__.GeomWidgetSelType),
/* harmony export */   GeomWidgetType: () => (/* reexport safe */ _src_sketcher_GeomWidget__WEBPACK_IMPORTED_MODULE_55__.GeomWidgetType),
/* harmony export */   Geometry: () => (/* reexport safe */ _src_mol_SketchUtil__WEBPACK_IMPORTED_MODULE_44__.Geometry),
/* harmony export */   Graph: () => (/* reexport safe */ _src_mol_Graph__WEBPACK_IMPORTED_MODULE_38__.Graph),
/* harmony export */   GreenMetrics: () => (/* reexport safe */ _src_rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_47__.GreenMetrics),
/* harmony export */   INV_TWOPI: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.INV_TWOPI),
/* harmony export */   KeyCode: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.KeyCode),
/* harmony export */   Line: () => (/* reexport safe */ _src_util_Geom__WEBPACK_IMPORTED_MODULE_77__.Line),
/* harmony export */   MDLMOLReader: () => (/* reexport safe */ _src_io_MDLReader__WEBPACK_IMPORTED_MODULE_30__.MDLMOLReader),
/* harmony export */   MDLMOLWriter: () => (/* reexport safe */ _src_io_MDLWriter__WEBPACK_IMPORTED_MODULE_31__.MDLMOLWriter),
/* harmony export */   MDLMOL_VALENCE: () => (/* reexport safe */ _src_io_MDLReader__WEBPACK_IMPORTED_MODULE_30__.MDLMOL_VALENCE),
/* harmony export */   MDLSDFReader: () => (/* reexport safe */ _src_io_MDLReader__WEBPACK_IMPORTED_MODULE_30__.MDLSDFReader),
/* harmony export */   MDLSDFWriter: () => (/* reexport safe */ _src_io_MDLWriter__WEBPACK_IMPORTED_MODULE_31__.MDLSDFWriter),
/* harmony export */   Matrix: () => (/* reexport safe */ _src_util_Matrix__WEBPACK_IMPORTED_MODULE_78__.Matrix),
/* harmony export */   MeasurementData: () => (/* reexport safe */ _src_aspect_MeasurementData__WEBPACK_IMPORTED_MODULE_7__.MeasurementData),
/* harmony export */   MenuProxy: () => (/* reexport safe */ _src_ui_MenuProxy__WEBPACK_IMPORTED_MODULE_71__.MenuProxy),
/* harmony export */   MenuProxyWeb: () => (/* reexport safe */ _src_ui_MenuProxy__WEBPACK_IMPORTED_MODULE_71__.MenuProxyWeb),
/* harmony export */   MetaMolecule: () => (/* reexport safe */ _src_mol_MetaMolecule__WEBPACK_IMPORTED_MODULE_39__.MetaMolecule),
/* harmony export */   MetaVector: () => (/* reexport safe */ _src_gfx_MetaVector__WEBPACK_IMPORTED_MODULE_27__.MetaVector),
/* harmony export */   MetalLigate: () => (/* reexport safe */ _src_sketcher_MetalLigate__WEBPACK_IMPORTED_MODULE_56__.MetalLigate),
/* harmony export */   Mixture: () => (/* reexport safe */ _src_aspect_Mixture__WEBPACK_IMPORTED_MODULE_8__.Mixture),
/* harmony export */   MixtureAttributeType: () => (/* reexport safe */ _src_aspect_Mixture__WEBPACK_IMPORTED_MODULE_8__.MixtureAttributeType),
/* harmony export */   MolUtil: () => (/* reexport safe */ _src_mol_MolUtil__WEBPACK_IMPORTED_MODULE_40__.MolUtil),
/* harmony export */   Molecule: () => (/* reexport safe */ _src_mol_Molecule__WEBPACK_IMPORTED_MODULE_41__.Molecule),
/* harmony export */   MoleculeActivity: () => (/* reexport safe */ _src_sketcher_MoleculeActivity__WEBPACK_IMPORTED_MODULE_57__.MoleculeActivity),
/* harmony export */   MoleculeStream: () => (/* reexport safe */ _src_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_32__.MoleculeStream),
/* harmony export */   OntologyTree: () => (/* reexport safe */ _src_data_OntologyTree__WEBPACK_IMPORTED_MODULE_16__.OntologyTree),
/* harmony export */   OptionList: () => (/* reexport safe */ _src_ui_OptionList__WEBPACK_IMPORTED_MODULE_72__.OptionList),
/* harmony export */   OutlineMeasurement: () => (/* reexport safe */ _src_gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_21__.OutlineMeasurement),
/* harmony export */   Oval: () => (/* reexport safe */ _src_util_Geom__WEBPACK_IMPORTED_MODULE_77__.Oval),
/* harmony export */   POLYMERBLOCK_EXTRA_POLYMER: () => (/* reexport safe */ _src_mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_42__.POLYMERBLOCK_EXTRA_POLYMER),
/* harmony export */   POLYMERBLOCK_SPECIAL_UNCAPPED: () => (/* reexport safe */ _src_mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_42__.POLYMERBLOCK_SPECIAL_UNCAPPED),
/* harmony export */   PeriodicTableWidget: () => (/* reexport safe */ _src_sketcher_PeriodicTableWidget__WEBPACK_IMPORTED_MODULE_58__.PeriodicTableWidget),
/* harmony export */   Permutation: () => (/* reexport safe */ _src_util_Vec__WEBPACK_IMPORTED_MODULE_82__.Permutation),
/* harmony export */   PolymerBlock: () => (/* reexport safe */ _src_mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_42__.PolymerBlock),
/* harmony export */   PolymerBlockConnectivity: () => (/* reexport safe */ _src_mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_42__.PolymerBlockConnectivity),
/* harmony export */   PolymerBlockUnit: () => (/* reexport safe */ _src_mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_42__.PolymerBlockUnit),
/* harmony export */   Popup: () => (/* reexport safe */ _src_ui_Popup__WEBPACK_IMPORTED_MODULE_73__.Popup),
/* harmony export */   Pos: () => (/* reexport safe */ _src_util_Geom__WEBPACK_IMPORTED_MODULE_77__.Pos),
/* harmony export */   QuantityCalc: () => (/* reexport safe */ _src_rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_47__.QuantityCalc),
/* harmony export */   QuantityCalcComp: () => (/* reexport safe */ _src_rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_47__.QuantityCalcComp),
/* harmony export */   QuantityCalcRole: () => (/* reexport safe */ _src_rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_47__.QuantityCalcRole),
/* harmony export */   QuantityCalcStat: () => (/* reexport safe */ _src_rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_47__.QuantityCalcStat),
/* harmony export */   QueryFieldsWidget: () => (/* reexport safe */ _src_sketcher_QueryFieldsWidget__WEBPACK_IMPORTED_MODULE_59__.QueryFieldsWidget),
/* harmony export */   QueryTypeAtom: () => (/* reexport safe */ _src_mol_QueryUtil__WEBPACK_IMPORTED_MODULE_43__.QueryTypeAtom),
/* harmony export */   QueryTypeBond: () => (/* reexport safe */ _src_mol_QueryUtil__WEBPACK_IMPORTED_MODULE_43__.QueryTypeBond),
/* harmony export */   QueryUtil: () => (/* reexport safe */ _src_mol_QueryUtil__WEBPACK_IMPORTED_MODULE_43__.QueryUtil),
/* harmony export */   QuickHull: () => (/* reexport safe */ _src_util_Geom__WEBPACK_IMPORTED_MODULE_77__.QuickHull),
/* harmony export */   RADDEG: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.RADDEG),
/* harmony export */   Random: () => (/* reexport safe */ _src_util_Random__WEBPACK_IMPORTED_MODULE_79__.Random),
/* harmony export */   RenderEffects: () => (/* reexport safe */ _src_gfx_Rendering__WEBPACK_IMPORTED_MODULE_28__.RenderEffects),
/* harmony export */   RenderMnemonicType: () => (/* reexport safe */ _src_gfx_Rendering__WEBPACK_IMPORTED_MODULE_28__.RenderMnemonicType),
/* harmony export */   RenderMnemonics: () => (/* reexport safe */ _src_gfx_Rendering__WEBPACK_IMPORTED_MODULE_28__.RenderMnemonics),
/* harmony export */   RenderPolicy: () => (/* reexport safe */ _src_gfx_Rendering__WEBPACK_IMPORTED_MODULE_28__.RenderPolicy),
/* harmony export */   ResonanceRemover: () => (/* reexport safe */ _src_calc_ResonanceRemover__WEBPACK_IMPORTED_MODULE_13__.ResonanceRemover),
/* harmony export */   RollingBall: () => (/* reexport safe */ _src_util_Geom__WEBPACK_IMPORTED_MODULE_77__.RollingBall),
/* harmony export */   SARTable: () => (/* reexport safe */ _src_aspect_SARTable__WEBPACK_IMPORTED_MODULE_9__.SARTable),
/* harmony export */   SingularValueDecomposition: () => (/* reexport safe */ _src_util_Matrix__WEBPACK_IMPORTED_MODULE_78__.SingularValueDecomposition),
/* harmony export */   Size: () => (/* reexport safe */ _src_util_Geom__WEBPACK_IMPORTED_MODULE_77__.Size),
/* harmony export */   SketchUtil: () => (/* reexport safe */ _src_mol_SketchUtil__WEBPACK_IMPORTED_MODULE_44__.SketchUtil),
/* harmony export */   Sketcher: () => (/* reexport safe */ _src_sketcher_Sketcher__WEBPACK_IMPORTED_MODULE_60__.Sketcher),
/* harmony export */   Stereochemistry: () => (/* reexport safe */ _src_mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_45__.Stereochemistry),
/* harmony export */   TWOPI: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.TWOPI),
/* harmony export */   TabBar: () => (/* reexport safe */ _src_ui_TabBar__WEBPACK_IMPORTED_MODULE_74__.TabBar),
/* harmony export */   TemplateBank: () => (/* reexport safe */ _src_sketcher_TemplateBank__WEBPACK_IMPORTED_MODULE_61__.TemplateBank),
/* harmony export */   TemplateFusion: () => (/* reexport safe */ _src_sketcher_TemplateFusion__WEBPACK_IMPORTED_MODULE_62__.TemplateFusion),
/* harmony export */   TextAlign: () => (/* reexport safe */ _src_gfx_MetaVector__WEBPACK_IMPORTED_MODULE_27__.TextAlign),
/* harmony export */   Theme: () => (/* reexport safe */ _src_util_Theme__WEBPACK_IMPORTED_MODULE_80__.Theme),
/* harmony export */   ToolBank: () => (/* reexport safe */ _src_sketcher_ToolBank__WEBPACK_IMPORTED_MODULE_63__.ToolBank),
/* harmony export */   ToolBankItem: () => (/* reexport safe */ _src_sketcher_ToolBank__WEBPACK_IMPORTED_MODULE_63__.ToolBankItem),
/* harmony export */   Tooltip: () => (/* reexport safe */ _src_ui_Tooltip__WEBPACK_IMPORTED_MODULE_75__.Tooltip),
/* harmony export */   Triangulation2D: () => (/* reexport safe */ _src_util_Triangulation2D__WEBPACK_IMPORTED_MODULE_81__.Triangulation2D),
/* harmony export */   Vec: () => (/* reexport safe */ _src_util_Vec__WEBPACK_IMPORTED_MODULE_82__.Vec),
/* harmony export */   Widget: () => (/* reexport safe */ _src_ui_Widget__WEBPACK_IMPORTED_MODULE_76__.Widget),
/* harmony export */   XML: () => (/* reexport safe */ _src_util_XML__WEBPACK_IMPORTED_MODULE_83__.XML),
/* harmony export */   addText: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.addText),
/* harmony export */   addTooltip: () => (/* reexport safe */ _src_ui_Tooltip__WEBPACK_IMPORTED_MODULE_75__.addTooltip),
/* harmony export */   addTooltipPromise: () => (/* reexport safe */ _src_ui_Tooltip__WEBPACK_IMPORTED_MODULE_75__.addTooltipPromise),
/* harmony export */   angleDiff: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.angleDiff),
/* harmony export */   angleDiffPos: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.angleDiffPos),
/* harmony export */   angleNorm: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.angleNorm),
/* harmony export */   blendRGB: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.blendRGB),
/* harmony export */   clearTooltip: () => (/* reexport safe */ _src_ui_Tooltip__WEBPACK_IMPORTED_MODULE_75__.clearTooltip),
/* harmony export */   clone: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.clone),
/* harmony export */   colourAlpha: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.colourAlpha),
/* harmony export */   colourCanvas: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.colourCanvas),
/* harmony export */   colourCode: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.colourCode),
/* harmony export */   coordsRoundedRect: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.coordsRoundedRect),
/* harmony export */   deepClone: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.deepClone),
/* harmony export */   dictValues: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.dictValues),
/* harmony export */   dom: () => (/* reexport safe */ _src_util_dom__WEBPACK_IMPORTED_MODULE_84__.dom),
/* harmony export */   domLegacy: () => (/* reexport safe */ _src_util_dom__WEBPACK_IMPORTED_MODULE_84__.domLegacy),
/* harmony export */   drawLine: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.drawLine),
/* harmony export */   empiricalScrollerSize: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.empiricalScrollerSize),
/* harmony export */   escapeHTML: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.escapeHTML),
/* harmony export */   eventCoords: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.eventCoords),
/* harmony export */   findNode: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.findNode),
/* harmony export */   findNodes: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.findNodes),
/* harmony export */   fltEqual: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.fltEqual),
/* harmony export */   fontSansSerif: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.fontSansSerif),
/* harmony export */   formatDate: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.formatDate),
/* harmony export */   formatDouble: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.formatDouble),
/* harmony export */   fromUTF8: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.fromUTF8),
/* harmony export */   getBoundaryPixelsDOM: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.getBoundaryPixelsDOM),
/* harmony export */   getOffsetPixelsDOM: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.getOffsetPixelsDOM),
/* harmony export */   getViewportSize: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.getViewportSize),
/* harmony export */   hasInlineCSS: () => (/* reexport safe */ _src_util_Theme__WEBPACK_IMPORTED_MODULE_80__.hasInlineCSS),
/* harmony export */   htmlToRGB: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.htmlToRGB),
/* harmony export */   initWebMolKit: () => (/* reexport safe */ _src_util_Theme__WEBPACK_IMPORTED_MODULE_80__.initWebMolKit),
/* harmony export */   installInlineCSS: () => (/* reexport safe */ _src_util_Theme__WEBPACK_IMPORTED_MODULE_80__.installInlineCSS),
/* harmony export */   invZ: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.invZ),
/* harmony export */   isDef: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.isDef),
/* harmony export */   jsonPrettyPrint: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.jsonPrettyPrint),
/* harmony export */   maxArray: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.maxArray),
/* harmony export */   minArray: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.minArray),
/* harmony export */   newElement: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.newElement),
/* harmony export */   nodeText: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.nodeText),
/* harmony export */   norm2_xy: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.norm2_xy),
/* harmony export */   norm2_xyz: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.norm2_xyz),
/* harmony export */   norm_xy: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.norm_xy),
/* harmony export */   norm_xyz: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.norm_xyz),
/* harmony export */   notDef: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.notDef),
/* harmony export */   orBlank: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.orBlank),
/* harmony export */   pathRoundedRect: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.pathRoundedRect),
/* harmony export */   pause: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.pause),
/* harmony export */   pixelDensity: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.pixelDensity),
/* harmony export */   plural: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.plural),
/* harmony export */   postJSONURL: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.postJSONURL),
/* harmony export */   raiseToolTip: () => (/* reexport safe */ _src_ui_Tooltip__WEBPACK_IMPORTED_MODULE_75__.raiseToolTip),
/* harmony export */   randomInt: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.randomInt),
/* harmony export */   readTextURL: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.readTextURL),
/* harmony export */   realEqual: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.realEqual),
/* harmony export */   registerAspect: () => (/* reexport safe */ _src_aspect_AspectList__WEBPACK_IMPORTED_MODULE_1__.registerAspect),
/* harmony export */   safeFloat: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.safeFloat),
/* harmony export */   safeInt: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.safeInt),
/* harmony export */   setBoundaryPixels: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.setBoundaryPixels),
/* harmony export */   signum: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.signum),
/* harmony export */   sortAngles: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.sortAngles),
/* harmony export */   sqr: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.sqr),
/* harmony export */   stringSimilarityPermutations: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.stringSimilarityPermutations),
/* harmony export */   toUTF8: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.toUTF8),
/* harmony export */   uniqueAngles: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.uniqueAngles),
/* harmony export */   yieldDOM: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.yieldDOM),
/* harmony export */   zip: () => (/* reexport safe */ _src_util_util__WEBPACK_IMPORTED_MODULE_85__.zip)
/* harmony export */ });
/* harmony import */ var _src_aspect_Aspect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/aspect/Aspect */ "./src/aspect/Aspect.ts");
/* harmony import */ var _src_aspect_AspectList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src/aspect/AspectList */ "./src/aspect/AspectList.ts");
/* harmony import */ var _src_aspect_AssayProvenance__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../src/aspect/AssayProvenance */ "./src/aspect/AssayProvenance.ts");
/* harmony import */ var _src_aspect_BayesianPrediction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../src/aspect/BayesianPrediction */ "./src/aspect/BayesianPrediction.ts");
/* harmony import */ var _src_aspect_BayesianSource__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../src/aspect/BayesianSource */ "./src/aspect/BayesianSource.ts");
/* harmony import */ var _src_aspect_BinaryData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../src/aspect/BinaryData */ "./src/aspect/BinaryData.ts");
/* harmony import */ var _src_aspect_Experiment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../src/aspect/Experiment */ "./src/aspect/Experiment.ts");
/* harmony import */ var _src_aspect_MeasurementData__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../src/aspect/MeasurementData */ "./src/aspect/MeasurementData.ts");
/* harmony import */ var _src_aspect_Mixture__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../src/aspect/Mixture */ "./src/aspect/Mixture.ts");
/* harmony import */ var _src_aspect_SARTable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../src/aspect/SARTable */ "./src/aspect/SARTable.ts");
/* harmony import */ var _src_calc_BayesianModel__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../src/calc/BayesianModel */ "./src/calc/BayesianModel.ts");
/* harmony import */ var _src_calc_BuildSMILES__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../src/calc/BuildSMILES */ "./src/calc/BuildSMILES.ts");
/* harmony import */ var _src_calc_CircularFingerprints__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../src/calc/CircularFingerprints */ "./src/calc/CircularFingerprints.ts");
/* harmony import */ var _src_calc_ResonanceRemover__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../src/calc/ResonanceRemover */ "./src/calc/ResonanceRemover.ts");
/* harmony import */ var _src_data_AbbrevContainer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../src/data/AbbrevContainer */ "./src/data/AbbrevContainer.ts");
/* harmony import */ var _src_data_FormatList__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../src/data/FormatList */ "./src/data/FormatList.ts");
/* harmony import */ var _src_data_OntologyTree__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../src/data/OntologyTree */ "./src/data/OntologyTree.ts");
/* harmony import */ var _src_dialog_Dialog__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../src/dialog/Dialog */ "./src/dialog/Dialog.ts");
/* harmony import */ var _src_dialog_EditCompound__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../src/dialog/EditCompound */ "./src/dialog/EditCompound.ts");
/* harmony import */ var _src_ds_DataSheet__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../src/ds/DataSheet */ "./src/ds/DataSheet.ts");
/* harmony import */ var _src_gfx_ArrangeExperiment__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../src/gfx/ArrangeExperiment */ "./src/gfx/ArrangeExperiment.ts");
/* harmony import */ var _src_gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../src/gfx/ArrangeMeasurement */ "./src/gfx/ArrangeMeasurement.ts");
/* harmony import */ var _src_gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../src/gfx/ArrangeMolecule */ "./src/gfx/ArrangeMolecule.ts");
/* harmony import */ var _src_gfx_AxisLabeller__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../src/gfx/AxisLabeller */ "./src/gfx/AxisLabeller.ts");
/* harmony import */ var _src_gfx_DrawExperiment__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../src/gfx/DrawExperiment */ "./src/gfx/DrawExperiment.ts");
/* harmony import */ var _src_gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../src/gfx/DrawMolecule */ "./src/gfx/DrawMolecule.ts");
/* harmony import */ var _src_gfx_FontData__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../src/gfx/FontData */ "./src/gfx/FontData.ts");
/* harmony import */ var _src_gfx_MetaVector__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../src/gfx/MetaVector */ "./src/gfx/MetaVector.ts");
/* harmony import */ var _src_gfx_Rendering__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../src/gfx/Rendering */ "./src/gfx/Rendering.ts");
/* harmony import */ var _src_io_DataSheetStream__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../src/io/DataSheetStream */ "./src/io/DataSheetStream.ts");
/* harmony import */ var _src_io_MDLReader__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../src/io/MDLReader */ "./src/io/MDLReader.ts");
/* harmony import */ var _src_io_MDLWriter__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../src/io/MDLWriter */ "./src/io/MDLWriter.ts");
/* harmony import */ var _src_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../src/io/MoleculeStream */ "./src/io/MoleculeStream.ts");
/* harmony import */ var _src_mol_BondArtifact__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../src/mol/BondArtifact */ "./src/mol/BondArtifact.ts");
/* harmony import */ var _src_mol_Chemistry__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../src/mol/Chemistry */ "./src/mol/Chemistry.ts");
/* harmony import */ var _src_mol_CoordUtil__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../src/mol/CoordUtil */ "./src/mol/CoordUtil.ts");
/* harmony import */ var _src_mol_DotPath__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../src/mol/DotPath */ "./src/mol/DotPath.ts");
/* harmony import */ var _src_mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../src/mol/ForeignMolecule */ "./src/mol/ForeignMolecule.ts");
/* harmony import */ var _src_mol_Graph__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../src/mol/Graph */ "./src/mol/Graph.ts");
/* harmony import */ var _src_mol_MetaMolecule__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../src/mol/MetaMolecule */ "./src/mol/MetaMolecule.ts");
/* harmony import */ var _src_mol_MolUtil__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../src/mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _src_mol_Molecule__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../src/mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _src_mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../src/mol/PolymerBlock */ "./src/mol/PolymerBlock.ts");
/* harmony import */ var _src_mol_QueryUtil__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../src/mol/QueryUtil */ "./src/mol/QueryUtil.ts");
/* harmony import */ var _src_mol_SketchUtil__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ../src/mol/SketchUtil */ "./src/mol/SketchUtil.ts");
/* harmony import */ var _src_mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ../src/mol/Stereochemistry */ "./src/mol/Stereochemistry.ts");
/* harmony import */ var _src_rxn_ExperimentMeta__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ../src/rxn/ExperimentMeta */ "./src/rxn/ExperimentMeta.ts");
/* harmony import */ var _src_rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ../src/rxn/QuantityCalc */ "./src/rxn/QuantityCalc.ts");
/* harmony import */ var _src_sketcher_CommandBank__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ../src/sketcher/CommandBank */ "./src/sketcher/CommandBank.ts");
/* harmony import */ var _src_sketcher_ContextSketch__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ../src/sketcher/ContextSketch */ "./src/sketcher/ContextSketch.ts");
/* harmony import */ var _src_sketcher_DrawCanvas__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ../src/sketcher/DrawCanvas */ "./src/sketcher/DrawCanvas.ts");
/* harmony import */ var _src_sketcher_EditAtom__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ../src/sketcher/EditAtom */ "./src/sketcher/EditAtom.ts");
/* harmony import */ var _src_sketcher_EditBond__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ../src/sketcher/EditBond */ "./src/sketcher/EditBond.ts");
/* harmony import */ var _src_sketcher_EditPolymer__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ../src/sketcher/EditPolymer */ "./src/sketcher/EditPolymer.ts");
/* harmony import */ var _src_sketcher_ExtraFieldsWidget__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ../src/sketcher/ExtraFieldsWidget */ "./src/sketcher/ExtraFieldsWidget.ts");
/* harmony import */ var _src_sketcher_GeomWidget__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ../src/sketcher/GeomWidget */ "./src/sketcher/GeomWidget.ts");
/* harmony import */ var _src_sketcher_MetalLigate__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ../src/sketcher/MetalLigate */ "./src/sketcher/MetalLigate.ts");
/* harmony import */ var _src_sketcher_MoleculeActivity__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ../src/sketcher/MoleculeActivity */ "./src/sketcher/MoleculeActivity.ts");
/* harmony import */ var _src_sketcher_PeriodicTableWidget__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ../src/sketcher/PeriodicTableWidget */ "./src/sketcher/PeriodicTableWidget.ts");
/* harmony import */ var _src_sketcher_QueryFieldsWidget__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ../src/sketcher/QueryFieldsWidget */ "./src/sketcher/QueryFieldsWidget.ts");
/* harmony import */ var _src_sketcher_Sketcher__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ../src/sketcher/Sketcher */ "./src/sketcher/Sketcher.ts");
/* harmony import */ var _src_sketcher_TemplateBank__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ../src/sketcher/TemplateBank */ "./src/sketcher/TemplateBank.ts");
/* harmony import */ var _src_sketcher_TemplateFusion__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ../src/sketcher/TemplateFusion */ "./src/sketcher/TemplateFusion.ts");
/* harmony import */ var _src_sketcher_ToolBank__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ../src/sketcher/ToolBank */ "./src/sketcher/ToolBank.ts");
/* harmony import */ var _src_ui_ButtonBank__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ../src/ui/ButtonBank */ "./src/ui/ButtonBank.ts");
/* harmony import */ var _src_ui_ButtonView__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ../src/ui/ButtonView */ "./src/ui/ButtonView.ts");
/* harmony import */ var _src_ui_ClipboardProxy__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ../src/ui/ClipboardProxy */ "./src/ui/ClipboardProxy.ts");
/* harmony import */ var _src_ui_EmbedChemistry__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ../src/ui/EmbedChemistry */ "./src/ui/EmbedChemistry.ts");
/* harmony import */ var _src_ui_EmbedCollection__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ../src/ui/EmbedCollection */ "./src/ui/EmbedCollection.ts");
/* harmony import */ var _src_ui_EmbedMolecule__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ../src/ui/EmbedMolecule */ "./src/ui/EmbedMolecule.ts");
/* harmony import */ var _src_ui_EmbedReaction__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ../src/ui/EmbedReaction */ "./src/ui/EmbedReaction.ts");
/* harmony import */ var _src_ui_MenuProxy__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ../src/ui/MenuProxy */ "./src/ui/MenuProxy.ts");
/* harmony import */ var _src_ui_OptionList__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ../src/ui/OptionList */ "./src/ui/OptionList.ts");
/* harmony import */ var _src_ui_Popup__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ../src/ui/Popup */ "./src/ui/Popup.ts");
/* harmony import */ var _src_ui_TabBar__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ../src/ui/TabBar */ "./src/ui/TabBar.ts");
/* harmony import */ var _src_ui_Tooltip__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ../src/ui/Tooltip */ "./src/ui/Tooltip.ts");
/* harmony import */ var _src_ui_Widget__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ../src/ui/Widget */ "./src/ui/Widget.ts");
/* harmony import */ var _src_util_Geom__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ../src/util/Geom */ "./src/util/Geom.ts");
/* harmony import */ var _src_util_Matrix__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ../src/util/Matrix */ "./src/util/Matrix.ts");
/* harmony import */ var _src_util_Random__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ../src/util/Random */ "./src/util/Random.ts");
/* harmony import */ var _src_util_Theme__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ../src/util/Theme */ "./src/util/Theme.ts");
/* harmony import */ var _src_util_Triangulation2D__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ../src/util/Triangulation2D */ "./src/util/Triangulation2D.ts");
/* harmony import */ var _src_util_Vec__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ../src/util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _src_util_XML__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ../src/util/XML */ "./src/util/XML.ts");
/* harmony import */ var _src_util_dom__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ../src/util/dom */ "./src/util/dom.ts");
/* harmony import */ var _src_util_util__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ../src/util/util */ "./src/util/util.ts");
























































































/***/ }),

/***/ "./src/aspect/Aspect.ts":
/*!******************************!*\
  !*** ./src/aspect/Aspect.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Aspect: () => (/* binding */ Aspect)
/* harmony export */ });
/* harmony import */ var _ds_DataSheet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ds/DataSheet */ "./src/ds/DataSheet.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");


class Aspect {
    constructor(code, ds, allowModify) {
        this.code = code;
        this.allowModify = true;
        this.subordinateCodes = [];
        this.ds = ds ? ds : new _ds_DataSheet__WEBPACK_IMPORTED_MODULE_0__.DataSheet();
        if (allowModify != null)
            this.allowModify = allowModify;
    }
    isColumnReserved(colName) { return false; }
    areColumnsReserved(colNames) {
        let resMask = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.booleanArray(false, colNames.length);
        for (let n = 0; n < colNames.length; n++)
            resMask[n] = this.isColumnReserved(colNames[n]);
        return resMask;
    }
    rowFirstBlock(row) { return true; }
    rowBlockCount(row) { return 1; }
    aspectUnion(other) { }
    initiateNewRow(row) { }
    columnEffectivelyBlank(row) { return []; }
    numTextRenderings(row) { return 0; }
    produceTextRendering(row, idx) { return null; }
    numGraphicRenderings(row) { return 0; }
    produceGraphicRendering(row, idx, policy) { return null; }
    numHeaderRenderings() { return 0; }
    produceHeaderRendering(idx) { return null; }
}
Aspect.TEXT_PLAIN = 0;
Aspect.TEXT_LINK = 1;
Aspect.TEXT_HTML = 2;


/***/ }),

/***/ "./src/aspect/AspectList.ts":
/*!**********************************!*\
  !*** ./src/aspect/AspectList.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AspectList: () => (/* binding */ AspectList),
/* harmony export */   registerAspect: () => (/* binding */ registerAspect)
/* harmony export */ });
let supportedAspects = {};
function registerAspect(classdef) {
    let code = classdef.CODE, name = classdef.NAME;
    supportedAspects[code] = { code, name, classdef };
}
class AspectList {
    constructor(ds) {
        this.ds = ds;
    }
    list() {
        let present = [], absent = [];
        let codes = new Set();
        for (let n = 0; n < this.ds.numExtensions; n++)
            codes.add(this.ds.getExtType(n));
        for (let code in supportedAspects)
            if (codes.has(code))
                present.push(code);
            else
                absent.push(code);
        return [present, absent];
    }
    instantiate(code) {
        let supp = supportedAspects[code];
        if (supp)
            return new supp.classdef(this.ds);
        return null;
    }
    enumerate() {
        let aspects = [];
        for (let n = 0; n < this.ds.numExtensions; n++) {
            let code = this.ds.getExtType(n);
            if (supportedAspects[code])
                aspects.push(this.instantiate(code));
        }
        return aspects;
    }
    aspectName(code) {
        let supp = supportedAspects[code];
        return supp ? supp.name : null;
    }
}


/***/ }),

/***/ "./src/aspect/AssayProvenance.ts":
/*!***************************************!*\
  !*** ./src/aspect/AssayProvenance.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AssayProvenance: () => (/* binding */ AssayProvenance),
/* harmony export */   AssayProvenanceHeader: () => (/* binding */ AssayProvenanceHeader)
/* harmony export */ });
/* harmony import */ var _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../io/MoleculeStream */ "./src/io/MoleculeStream.ts");
/* harmony import */ var _Aspect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Aspect */ "./src/aspect/Aspect.ts");
/* harmony import */ var _AspectList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AspectList */ "./src/aspect/AspectList.ts");



class AssayProvenanceHeader {
    constructor() {
        this.prefixes = {};
        this.targetName = '';
        this.targetURI = '';
        this.organismName = '';
        this.organismURI = '';
        this.targetTypeName = '';
        this.targetTypeURI = '';
        this.cellName = '';
        this.cellURI = '';
        this.assayTypeName = '';
        this.assayTypeURI = '';
        this.assayDescription = '';
        this.sourceName = '';
        this.sourceURI = '';
        this.sourceVersion = '';
        this.documentName = '';
        this.documentURI = '';
        this.measureTypeName = '';
        this.measureTypeURI = '';
        this.unitNames = [];
        this.unitURIs = [];
    }
}
class AssayProvenance extends _Aspect__WEBPACK_IMPORTED_MODULE_1__.Aspect {
    static isAssayProvenance(ds) {
        for (let n = 0; n < ds.numExtensions; n++)
            if (ds.getExtType(n) == AssayProvenance.CODE)
                return true;
        return false;
    }
    constructor(ds, allowModify) {
        super(AssayProvenance.CODE, ds, allowModify);
        this.setup();
    }
    getHeader() {
        for (let n = 0; n < this.ds.numExtensions; n++)
            if (this.ds.getExtType(n) == AssayProvenance.CODE)
                return this.parseMetaData(this.ds.getExtData(n));
        return null;
    }
    setHeader(header) {
        let content = this.formatMetaData(header);
        for (let n = 0; n < this.ds.numExtensions; n++)
            if (this.ds.getExtType(n) == AssayProvenance.CODE) {
                this.ds.setExtData(n, content);
                return;
            }
        this.ds.appendExtension(AssayProvenance.NAME, AssayProvenance.CODE, content);
    }
    getMolecule(row) {
        let col = this.ds.findColByName(AssayProvenance.COLNAME_MOLECULE);
        return col < 0 ? null : this.ds.getMolecule(row, col);
    }
    getName(row) {
        let col = this.ds.findColByName(AssayProvenance.COLNAME_NAME);
        return col < 0 ? null : this.ds.getString(row, col);
    }
    getValue(row) {
        let col = this.ds.findColByName(AssayProvenance.COLNAME_VALUE);
        return col < 0 ? null : this.ds.isNull(row, col) ? Number.NaN : this.ds.getReal(row, col);
    }
    getError(row) {
        let col = this.ds.findColByName(AssayProvenance.COLNAME_ERROR);
        if (col < 0)
            return null;
        if (this.ds.isNull(row, col))
            return Number.NaN;
        let err = this.ds.getReal(row, col);
        if (err <= 0)
            return Number.NaN;
        return err;
    }
    getUnits(row) {
        let col = this.ds.findColByName(AssayProvenance.COLNAME_UNITS);
        return col < 0 ? null : this.ds.getString(row, col);
    }
    getRelation(row) {
        let col = this.ds.findColByName(AssayProvenance.COLNAME_RELATION);
        return col < 0 ? null : this.ds.getString(row, col);
    }
    getSourceURI(row) {
        let col = this.ds.findColByName(AssayProvenance.COLNAME_SOURCEURI);
        return col < 0 ? null : this.ds.getString(row, col);
    }
    setMolecule(row, v) {
        let col = this.ds.findColByName(AssayProvenance.COLNAME_MOLECULE);
        if (col >= 0)
            this.ds.setMolecule(row, col, v);
    }
    setName(row, v) {
        let col = this.ds.findColByName(AssayProvenance.COLNAME_NAME);
        if (col >= 0)
            this.ds.setString(row, col, v);
    }
    setValue(row, v) {
        let col = this.ds.findColByName(AssayProvenance.COLNAME_VALUE);
        if (col < 0) { }
        else if (Number.isNaN(v))
            this.ds.setToNull(row, col);
        else
            this.ds.setReal(row, col, v);
    }
    setError(row, v) {
        let col = this.ds.findColByName(AssayProvenance.COLNAME_ERROR);
        if (col < 0) { }
        else if (Number.isNaN(v))
            this.ds.setToNull(row, col);
        else
            this.ds.setReal(row, col, v);
    }
    setUnits(row, v) {
        let col = this.ds.findColByName(AssayProvenance.COLNAME_UNITS);
        if (col >= 0)
            this.ds.setString(row, col, v);
    }
    setRelation(row, v) {
        let col = this.ds.findColByName(AssayProvenance.COLNAME_RELATION);
        if (col >= 0)
            this.ds.setString(row, col, v);
    }
    setSourceURI(row, v) {
        let col = this.ds.findColByName(AssayProvenance.COLNAME_SOURCEURI);
        if (col >= 0)
            this.ds.setString(row, col, v);
    }
    setup() {
        this.parseAndCorrect();
    }
    parseAndCorrect() {
        let header = new AssayProvenanceHeader();
        let got = false;
        for (let n = 0; n < this.ds.numExtensions; n++)
            if (this.ds.getExtType(n) == AssayProvenance.CODE) {
                header = this.parseMetaData(this.ds.getExtData(n));
                got = true;
                break;
            }
        if (this.allowModify) {
            this.ds.ensureColumn(AssayProvenance.COLNAME_MOLECULE, "molecule", 'Molecular structure of compound being measured');
            this.ds.ensureColumn(AssayProvenance.COLNAME_NAME, "string", 'Name of compound');
            this.ds.ensureColumn(AssayProvenance.COLNAME_VALUE, "real", 'Measured value');
            this.ds.ensureColumn(AssayProvenance.COLNAME_ERROR, "real", 'Experimental error of measurement');
            this.ds.ensureColumn(AssayProvenance.COLNAME_UNITS, "string", 'Units of measurement');
            this.ds.ensureColumn(AssayProvenance.COLNAME_RELATION, "string", 'Relation: exact, greater or less');
            this.ds.ensureColumn(AssayProvenance.COLNAME_SOURCEURI, "string", 'Source identifier for activity measurement');
        }
        if (!got && this.allowModify) {
            let content = this.formatMetaData(header);
            this.ds.appendExtension(AssayProvenance.NAME, AssayProvenance.CODE, content);
        }
    }
    parseMetaData(content) {
        let header = new AssayProvenanceHeader();
        for (let line of content.split(/\r?\n/)) {
            let eq = line.indexOf('=');
            if (eq < 0)
                continue;
            if (line.startsWith('pfx:'))
                header.prefixes[_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(4, eq))] = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('targetName='))
                header.targetName = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('targetURI='))
                header.targetURI = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('organismName='))
                header.organismName = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('organismURI='))
                header.organismURI = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('targetTypeName='))
                header.targetTypeName = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('targetTypeURI='))
                header.targetTypeURI = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('cellName='))
                header.cellName = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('cellURI='))
                header.cellURI = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('assayTypeName='))
                header.assayTypeName = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('assayTypeURI='))
                header.assayTypeURI = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('assayDescription='))
                header.assayDescription = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('sourceName='))
                header.sourceName = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('sourceURI='))
                header.sourceURI = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('sourceVersion='))
                header.sourceVersion = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('documentName='))
                header.documentName = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('documentURI='))
                header.documentURI = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('measureTypeName='))
                header.measureTypeName = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('measureTypeURI='))
                header.measureTypeURI = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('unit:')) {
                header.unitNames.push(_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(5, eq)));
                header.unitURIs.push(_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1)));
            }
        }
        return header;
    }
    formatMetaData(header) {
        let content = '';
        for (let pfx in header.prefixes)
            content += 'pfx:' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(pfx) + '=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.prefixes[pfx]) + '\n';
        content += 'targetName=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.targetName) + '\n';
        content += 'targetURI=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.targetURI) + '\n';
        content += 'organismName=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.organismName) + '\n';
        content += 'organismURI=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.organismURI) + '\n';
        content += 'targetTypeName=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.targetTypeName) + '\n';
        content += 'targetTypeURI=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.targetTypeURI) + '\n';
        content += 'cellName=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.cellName) + '\n';
        content += 'cellURI=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.cellURI) + '\n';
        content += 'assayTypeName=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.assayTypeName) + '\n';
        content += 'assayTypeURI=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.assayTypeURI) + '\n';
        content += 'assayDescription=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.assayDescription) + '\n';
        content += 'sourceName=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.sourceName) + '\n';
        content += 'sourceURI=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.sourceURI) + '\n';
        content += 'sourceVersion=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.sourceVersion) + '\n';
        content += 'documentName=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.documentName) + '\n';
        content += 'documentURI=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.documentURI) + '\n';
        content += 'measureTypeName=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.measureTypeName) + '\n';
        content += 'measureTypeURI=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.measureTypeURI) + '\n';
        for (let n = 0, num = Math.min(header.unitNames.length, header.unitURIs.length); n < num; n++)
            content += 'unit:' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.unitNames[n]) + '=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(header.unitURIs[n]) + '\n';
        return content;
    }
    plainHeading() { return AssayProvenance.NAME; }
    isColumnReserved(colName) {
        return colName == AssayProvenance.COLNAME_VALUE || colName == AssayProvenance.COLNAME_ERROR ||
            colName == AssayProvenance.COLNAME_UNITS || colName == AssayProvenance.COLNAME_RELATION ||
            colName == AssayProvenance.COLNAME_SOURCEURI;
    }
    numTextRenderings(row) { return 2; }
    produceTextRendering(row, idx) {
        let header = this.getHeader();
        if (idx == 0) {
            let tr = {
                name: 'Activity',
                descr: 'Activity measurement details for this record',
                text: '',
                type: _Aspect__WEBPACK_IMPORTED_MODULE_1__.Aspect.TEXT_PLAIN
            };
            let val = this.getValue(row), error = this.getError(row);
            let units = this.getUnits(row), rel = this.getRelation(row);
            tr.text = '';
            if (!Number.isNaN(val)) {
                if (rel)
                    tr.text += rel + ' ';
                tr.text += val;
                if (!Number.isNaN(error))
                    tr.text += ' \u{00B1} ' + error;
                if (units)
                    tr.text += ' ' + units;
            }
            return tr;
        }
        else if (idx == 1) {
            let tr = {
                name: 'Source',
                descr: 'Origin of the structure and activity measurement',
                text: '',
                type: _Aspect__WEBPACK_IMPORTED_MODULE_1__.Aspect.TEXT_LINK
            };
            let url = this.getSourceURI(row);
            for (let pfx in header.prefixes)
                if (url.startsWith(pfx + ':')) {
                    url = header.prefixes[pfx] + url.substring(pfx.length + 1);
                    break;
                }
            tr.text = url;
            return tr;
        }
        return null;
    }
}
AssayProvenance.CODE = 'org.mmi.aspect.AssayProvenance';
AssayProvenance.NAME = 'Assay Provenance';
AssayProvenance.COLNAME_MOLECULE = 'Molecule';
AssayProvenance.COLNAME_NAME = 'Name';
AssayProvenance.COLNAME_VALUE = 'Value';
AssayProvenance.COLNAME_ERROR = 'Error';
AssayProvenance.COLNAME_UNITS = 'Units';
AssayProvenance.COLNAME_RELATION = 'Relation';
AssayProvenance.COLNAME_SOURCEURI = 'SourceURI';
AssayProvenance.URI_UNIT_M = 'http://purl.obolibrary.org/obo/UO_0000062';
AssayProvenance.URI_UNIT_mM = 'http://purl.obolibrary.org/obo/UO_0000063';
AssayProvenance.URI_UNIT_uM = 'http://purl.obolibrary.org/obo/UO_0000064';
AssayProvenance.URI_UNIT_nM = 'http://purl.obolibrary.org/obo/UO_0000065';
AssayProvenance.URI_UNIT_pM = 'http://purl.obolibrary.org/obo/UO_0000066';
AssayProvenance.URI_UNIT_logM = 'http://www.bioassayontology.org/bao#BAO_0000101';
AssayProvenance.URI_UNIT_perM = 'http://www.bioassayontology.org/bao#BAO_0000102';
AssayProvenance.URI_UNIT_gL = 'http://purl.obolibrary.org/obo/UO_0000175';
AssayProvenance.URI_UNIT_mgL = 'http://purl.obolibrary.org/obo/UO_0000273';
AssayProvenance.URI_UNIT_ugL = 'http://purl.obolibrary.org/obo/UO_0000275';
AssayProvenance.URI_UNIT_binary = 'http://www.bioassayontology.org/bao#BAO_0080023';
(0,_AspectList__WEBPACK_IMPORTED_MODULE_2__.registerAspect)(AssayProvenance);


/***/ }),

/***/ "./src/aspect/BayesianPrediction.ts":
/*!******************************************!*\
  !*** ./src/aspect/BayesianPrediction.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BayesianPrediction: () => (/* binding */ BayesianPrediction),
/* harmony export */   BayesianPredictionModel: () => (/* binding */ BayesianPredictionModel),
/* harmony export */   BayesianPredictionOutcome: () => (/* binding */ BayesianPredictionOutcome)
/* harmony export */ });
/* harmony import */ var _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../io/MoleculeStream */ "./src/io/MoleculeStream.ts");
/* harmony import */ var _Aspect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Aspect */ "./src/aspect/Aspect.ts");
/* harmony import */ var _AspectList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AspectList */ "./src/aspect/AspectList.ts");
/* harmony import */ var _BayesianSource__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BayesianSource */ "./src/aspect/BayesianSource.ts");




class BayesianPredictionModel {
}
class BayesianPredictionOutcome {
}
class BayesianPrediction extends _Aspect__WEBPACK_IMPORTED_MODULE_1__.Aspect {
    static isBayesianPrediction(ds) {
        for (let n = 0; n < ds.numExtensions; n++)
            if (ds.getExtType(n) == BayesianPrediction.CODE)
                return true;
        return false;
    }
    constructor(ds, allowModify) {
        super(BayesianPrediction.CODE, ds, allowModify);
        this.setup();
    }
    getModels() {
        let content = '';
        for (let n = 0; n < this.ds.numExtensions; n++)
            if (this.ds.getExtType(n) == BayesianPrediction.CODE) {
                content = this.ds.getExtData(n);
                break;
            }
        let models = [];
        let m = null;
        for (let line of content.split('\n')) {
            if (line == 'model:') {
                if (m != null)
                    models.push(m);
                m = {};
                continue;
            }
            if (m == null)
                continue;
            let eq = line.indexOf('=');
            if (eq < 0)
                continue;
            if (line.startsWith('colMolecule='))
                m.colMolecule = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('colRaw='))
                m.colRaw = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('colScaled='))
                m.colScaled = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('colArcTan='))
                m.colArcTan = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('colDomain='))
                m.colDomain = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('colAtoms='))
                m.colAtoms = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('name='))
                m.name = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('description='))
                m.description = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('targetName='))
                m.targetName = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('isOffTarget='))
                m.isOffTarget = line.substring(eq + 1) == 'true';
        }
        if (m != null)
            models.push(m);
        return models;
    }
    setModels(models) {
        let lines = [];
        for (let m of models) {
            lines.push('model:');
            lines.push('colMolecule=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(m.colMolecule));
            lines.push('colRaw=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(m.colRaw));
            lines.push('colScaled=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(m.colScaled));
            lines.push('colArcTan=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(m.colArcTan));
            lines.push('colDomain=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(m.colDomain));
            lines.push('colAtoms=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(m.colAtoms));
            lines.push('name=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(m.name));
            lines.push('description=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(m.description));
            lines.push('targetName=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(m.targetName));
            lines.push('isOffTarget=' + m.isOffTarget);
        }
        let content = lines.join('\n');
        for (let n = 0; n < this.ds.numExtensions; n++)
            if (this.ds.getExtType(n) == _BayesianSource__WEBPACK_IMPORTED_MODULE_3__.BayesianSource.CODE) {
                this.ds.setExtData(n, content.toString());
                return;
            }
        this.ds.appendExtension('BayesianPrediction', BayesianPrediction.CODE, content.toString());
    }
    getOutcome(row, model) {
        let outcome = new BayesianPredictionOutcome();
        outcome.raw = this.ds.getReal(row, model.colRaw);
        outcome.scaled = this.ds.getReal(row, model.colScaled);
        outcome.arctan = this.ds.getReal(row, model.colArcTan);
        outcome.domain = this.ds.getReal(row, model.colDomain);
        let strAtoms = this.ds.getString(row, model.colAtoms);
        if (strAtoms) {
            outcome.atoms = [];
            for (let b of strAtoms.split(','))
                outcome.atoms.push(parseFloat(b));
        }
        return outcome;
    }
    setOutcome(row, model, outcome) {
        let col = this.ds.findColByName(model.colRaw, "real");
        if (col >= 0)
            this.ds.setReal(row, col, outcome.raw);
        col = this.ds.findColByName(model.colScaled, "real");
        if (col >= 0)
            this.ds.setReal(row, col, outcome.scaled);
        col = this.ds.findColByName(model.colArcTan, "real");
        if (col >= 0)
            this.ds.setReal(row, col, outcome.arctan);
        col = this.ds.findColByName(model.colDomain, "real");
        if (col >= 0)
            this.ds.setReal(row, col, outcome.domain);
        col = this.ds.findColByName(model.colAtoms, "string");
        if (col >= 0)
            this.ds.setString(row, col, outcome.atoms ? outcome.atoms.toString() : null);
    }
    setup() {
        if (this.allowModify) {
            let models = this.getModels();
            this.setModels(models);
        }
    }
    plainHeading() { return _BayesianSource__WEBPACK_IMPORTED_MODULE_3__.BayesianSource.NAME; }
}
BayesianPrediction.CODE = 'org.mmi.aspect.BayesianPrediction';
BayesianPrediction.NAME = 'Bayesian Prediction';
(0,_AspectList__WEBPACK_IMPORTED_MODULE_2__.registerAspect)(BayesianPrediction);


/***/ }),

/***/ "./src/aspect/BayesianSource.ts":
/*!**************************************!*\
  !*** ./src/aspect/BayesianSource.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BayesianSource: () => (/* binding */ BayesianSource),
/* harmony export */   BayesianSourceModel: () => (/* binding */ BayesianSourceModel)
/* harmony export */ });
/* harmony import */ var _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../io/MoleculeStream */ "./src/io/MoleculeStream.ts");
/* harmony import */ var _Aspect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Aspect */ "./src/aspect/Aspect.ts");
/* harmony import */ var _AspectList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AspectList */ "./src/aspect/AspectList.ts");



class BayesianSourceModel {
    constructor() {
        this.colNameMolecule = '';
        this.colNameValue = '';
        this.thresholdValue = 0.5;
        this.thresholdRelation = '>=';
        this.folding = 0;
        this.noteField = '';
        this.noteTitle = '';
        this.noteOrigin = '';
        this.noteComment = '';
    }
}
class BayesianSource extends _Aspect__WEBPACK_IMPORTED_MODULE_1__.Aspect {
    static isBayesianSource(ds) {
        for (let n = 0; n < ds.numExtensions; n++)
            if (ds.getExtType(n) == BayesianSource.CODE)
                return true;
        return false;
    }
    constructor(ds, allowModify) {
        super(BayesianSource.CODE, ds, allowModify);
        this.setup();
    }
    getModels() {
        let content = '';
        for (let n = 0; n < this.ds.numExtensions; n++)
            if (this.ds.getExtType(n) == BayesianSource.CODE) {
                content = this.ds.getExtData(n);
                break;
            }
        let models = [];
        let m = null;
        for (let line of content.split('\n')) {
            if (line == 'model:') {
                if (m != null)
                    models.push(m);
                m = {};
                continue;
            }
            if (m == null)
                continue;
            let eq = line.indexOf('=');
            if (eq < 0)
                continue;
            if (line.startsWith('colNameMolecule='))
                m.colNameMolecule = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('colNameValue='))
                m.colNameValue = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('thresholdValue='))
                m.thresholdValue = parseFloat(line.substring(eq + 1));
            else if (line.startsWith('thresholdRelation='))
                m.thresholdRelation = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('folding='))
                m.folding = parseInt(line.substring(eq + 1));
            else if (line.startsWith('noteField='))
                m.noteField = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('noteTitle='))
                m.noteTitle = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('noteOrigin='))
                m.noteOrigin = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('noteComment='))
                m.noteComment = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
        }
        if (m != null)
            models.push(m);
        return models;
    }
    setModels(models) {
        let lines = [];
        for (let m of models) {
            lines.push('model:');
            lines.push('colNameMolecule=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(m.colNameMolecule));
            lines.push('colNameValue=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(m.colNameValue));
            lines.push('thresholdValue=' + m.thresholdValue);
            lines.push('thresholdRelation=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(m.thresholdRelation));
            lines.push('folding=%d' + m.folding);
            lines.push('noteField=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(m.noteField));
            lines.push('noteTitle=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(m.noteTitle));
            lines.push('noteOrigin=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(m.noteOrigin));
            lines.push('noteComment=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(m.noteComment));
        }
        let content = lines.join('\n');
        for (let n = 0; n < this.ds.numExtensions; n++)
            if (this.ds.getExtType(n) == BayesianSource.CODE) {
                this.ds.setExtData(n, content.toString());
                return;
            }
        this.ds.appendExtension('BayesianSource', BayesianSource.CODE, content.toString());
    }
    setup() {
        if (this.allowModify) {
            let models = this.getModels();
            this.setModels(models);
        }
    }
    plainHeading() { return BayesianSource.NAME; }
}
BayesianSource.CODE = 'org.mmi.aspect.BayesianSource';
BayesianSource.NAME = 'Bayesian Source';
(0,_AspectList__WEBPACK_IMPORTED_MODULE_2__.registerAspect)(BayesianSource);


/***/ }),

/***/ "./src/aspect/BinaryData.ts":
/*!**********************************!*\
  !*** ./src/aspect/BinaryData.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BinaryData: () => (/* binding */ BinaryData),
/* harmony export */   BinaryDataField: () => (/* binding */ BinaryDataField)
/* harmony export */ });
/* harmony import */ var _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../io/MoleculeStream */ "./src/io/MoleculeStream.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _Aspect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Aspect */ "./src/aspect/Aspect.ts");
/* harmony import */ var _AspectList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AspectList */ "./src/aspect/AspectList.ts");
/* harmony import */ var _MeasurementData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MeasurementData */ "./src/aspect/MeasurementData.ts");





class BinaryDataField {
}
class BinaryData extends _Aspect__WEBPACK_IMPORTED_MODULE_2__.Aspect {
    static isBinaryData(ds) {
        for (let n = 0; n < ds.numExtensions; n++)
            if (ds.getExtType(n) == BinaryData.CODE)
                return true;
        return false;
    }
    constructor(ds, allowModify) {
        super(BinaryData.CODE, ds, allowModify);
        this.fields = [];
        this.setup();
    }
    getFields() {
        return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.deepClone)(this.fields);
    }
    setFields(fields) {
        this.fields = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.deepClone)(fields);
        let content = this.formatMetaData(fields);
        for (let n = 0; n < this.ds.numExtensions; n++)
            if (this.ds.getExtType(n) == _MeasurementData__WEBPACK_IMPORTED_MODULE_4__.MeasurementData.CODE) {
                this.ds.setExtData(n, content);
                return;
            }
        this.ds.appendExtension(_MeasurementData__WEBPACK_IMPORTED_MODULE_4__.MeasurementData.NAME, _MeasurementData__WEBPACK_IMPORTED_MODULE_4__.MeasurementData.CODE, content);
    }
    getValue(row, field) {
        let value = this.getDestValue(row, field);
        if (value != null)
            return value;
        return this.getSourceValue(row, field);
    }
    getSourceValue(row, field) {
        let col = this.ds.findColByName(field.colNameSource);
        if (col < 0 || this.ds.isNull(row, col))
            return null;
        let ct = this.ds.colType(col);
        let value = 0;
        if (ct == "boolean")
            return this.ds.getBoolean(row, col);
        else if (ct == "integer")
            value = this.ds.getInteger(row, col);
        else if (ct == "real")
            value = this.ds.getReal(row, col);
        else
            return null;
        if (field.thresholdRelation == '>')
            return value > field.thresholdValue;
        if (field.thresholdRelation == '<')
            return value < field.thresholdValue;
        if (field.thresholdRelation == '>=')
            return value >= field.thresholdValue;
        if (field.thresholdRelation == '<=')
            return value <= field.thresholdValue;
        return null;
    }
    getDestValue(row, field) {
        return this.ds.getBoolean(row, field.colNameDest);
    }
    setup() {
        this.parseAndCorrect();
    }
    parseAndCorrect() {
        let got = false;
        for (let n = 0; n < this.ds.numExtensions; n++)
            if (this.ds.getExtType(n) == _MeasurementData__WEBPACK_IMPORTED_MODULE_4__.MeasurementData.CODE) {
                this.fields = this.parseMetaData(this.ds.getExtData(n));
                got = true;
                break;
            }
        if (!got && this.allowModify) {
            let content = this.formatMetaData(this.fields);
            this.ds.appendExtension(_MeasurementData__WEBPACK_IMPORTED_MODULE_4__.MeasurementData.NAME, _MeasurementData__WEBPACK_IMPORTED_MODULE_4__.MeasurementData.CODE, content);
        }
    }
    parseMetaData(content) {
        let fields = [];
        let f = null;
        for (let line of content.split(/\r?\n/)) {
            if (line == 'field:') {
                if (f != null)
                    fields.push(f);
                f = { colNameSource: '', colNameDest: '', thresholdValue: 0.5, thresholdRelation: '>=' };
                continue;
            }
            if (f == null)
                continue;
            let eq = line.indexOf('=');
            if (eq < 0)
                continue;
            if (line.startsWith('colNameSource='))
                f.colNameSource = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('colNameDest='))
                f.colNameDest = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
            else if (line.startsWith('thresholdValue='))
                f.thresholdValue = parseFloat(line.substring(eq + 1));
            else if (line.startsWith('thresholdRelation='))
                f.thresholdRelation = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
        }
        if (f != null)
            fields.push(f);
        return fields;
    }
    formatMetaData(fields) {
        let lines = [];
        for (let f of fields) {
            lines.push('field:');
            lines.push('colNameSource=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(f.colNameSource));
            lines.push('colNameDest=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(f.colNameDest));
            lines.push('thresholdValue=' + f.thresholdValue);
            lines.push('thresholdRelation=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(f.thresholdRelation));
        }
        return lines.join('\n');
    }
    plainHeading() { return BinaryData.NAME; }
    isColumnReserved(colName) { return false; }
}
BinaryData.CODE = 'org.mmi.aspect.BinaryData';
BinaryData.NAME = 'Binary Data';
(0,_AspectList__WEBPACK_IMPORTED_MODULE_3__.registerAspect)(BinaryData);


/***/ }),

/***/ "./src/aspect/Experiment.ts":
/*!**********************************!*\
  !*** ./src/aspect/Experiment.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Experiment: () => (/* binding */ Experiment),
/* harmony export */   ExperimentComponent: () => (/* binding */ ExperimentComponent),
/* harmony export */   ExperimentComponentType: () => (/* binding */ ExperimentComponentType),
/* harmony export */   ExperimentEntry: () => (/* binding */ ExperimentEntry),
/* harmony export */   ExperimentStep: () => (/* binding */ ExperimentStep)
/* harmony export */ });
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _gfx_ArrangeExperiment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../gfx/ArrangeExperiment */ "./src/gfx/ArrangeExperiment.ts");
/* harmony import */ var _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../gfx/ArrangeMeasurement */ "./src/gfx/ArrangeMeasurement.ts");
/* harmony import */ var _gfx_DrawExperiment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../gfx/DrawExperiment */ "./src/gfx/DrawExperiment.ts");
/* harmony import */ var _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../gfx/MetaVector */ "./src/gfx/MetaVector.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _Aspect__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Aspect */ "./src/aspect/Aspect.ts");
/* harmony import */ var _AspectList__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./AspectList */ "./src/aspect/AspectList.ts");








var ExperimentComponentType;
(function (ExperimentComponentType) {
    ExperimentComponentType[ExperimentComponentType["Reactant"] = 0] = "Reactant";
    ExperimentComponentType[ExperimentComponentType["Reagent"] = 1] = "Reagent";
    ExperimentComponentType[ExperimentComponentType["Product"] = 2] = "Product";
})(ExperimentComponentType || (ExperimentComponentType = {}));
class ExperimentComponent {
    constructor(mol, name) {
        this.mol = null;
        this.name = '';
        this.stoich = '';
        this.mass = null;
        this.volume = null;
        this.moles = null;
        this.density = null;
        this.conc = null;
        this.yield = null;
        this.primary = false;
        this.waste = false;
        this.equiv = null;
        this.meta = '';
        this.mol = mol;
        if (name)
            this.name = name;
    }
    clone() {
        let dup = new ExperimentComponent(this.mol, this.name);
        dup.stoich = this.stoich;
        dup.mass = this.mass;
        dup.volume = this.volume;
        dup.moles = this.moles;
        dup.density = this.density;
        dup.conc = this.conc;
        dup.yield = this.yield;
        dup.primary = this.primary;
        dup.waste = this.waste;
        dup.equiv = this.equiv;
        dup.meta = this.meta;
        return dup;
    }
    equals(other) {
        if (this.name != other.name)
            return false;
        if (this.stoich != other.stoich || this.mass != other.mass || this.volume != other.volume || this.moles != other.moles ||
            this.density != other.density || this.conc != other.conc || this.yield != other.yield || this.primary != other.primary ||
            this.waste != other.waste || this.equiv != other.equiv || this.meta != other.meta)
            return false;
        if (this.mol === other.mol)
            return true;
        if (this.mol == null || other.mol == null)
            return false;
        return this.mol.compareTo(other.mol) == 0;
    }
    isBlank() {
        return _mol_MolUtil__WEBPACK_IMPORTED_MODULE_0__.MolUtil.isBlank(this.mol) && !this.name;
    }
}
class ExperimentStep {
    constructor() {
        this.reactants = [];
        this.reagents = [];
        this.products = [];
        this.meta = '';
    }
    clone() {
        let dup = new ExperimentStep();
        for (let c of this.reactants)
            dup.reactants.push(c.clone());
        for (let c of this.reagents)
            dup.reagents.push(c.clone());
        for (let c of this.products)
            dup.products.push(c.clone());
        dup.meta = this.meta;
        return dup;
    }
    equals(other) {
        if (this.reactants.length != other.reactants.length)
            return false;
        if (this.reagents.length != other.reagents.length)
            return false;
        if (this.products.length != other.products.length)
            return false;
        if (this.meta != other.meta)
            return false;
        for (let n = 0; n < this.reactants.length; n++)
            if (!this.reactants[n].equals(other.reactants[n]))
                return false;
        for (let n = 0; n < this.reagents.length; n++)
            if (!this.reagents[n].equals(other.reagents[n]))
                return false;
        for (let n = 0; n < this.products.length; n++)
            if (!this.products[n].equals(other.products[n]))
                return false;
        return true;
    }
}
class ExperimentEntry {
    constructor() {
        this.title = '';
        this.createDate = null;
        this.modifyDate = null;
        this.doi = '';
        this.meta = '';
        this.steps = [];
    }
    clone() {
        let dup = new ExperimentEntry();
        dup.title = this.title;
        dup.createDate = this.createDate;
        dup.modifyDate = this.modifyDate;
        dup.doi = this.doi;
        dup.meta = this.meta;
        for (let s of this.steps)
            dup.steps.push(s.clone());
        return dup;
    }
    deepClone() {
        let dup = this.clone();
        for (let step of dup.steps) {
            for (let comp of step.reactants)
                if (comp.mol != null)
                    comp.mol = comp.mol.clone();
            for (let comp of step.reagents)
                if (comp.mol != null)
                    comp.mol = comp.mol.clone();
            for (let comp of step.products)
                if (comp.mol != null)
                    comp.mol = comp.mol.clone();
        }
        return dup;
    }
    equals(other) {
        if (this.title != other.title)
            return false;
        let d1 = this.createDate == null ? 0 : this.createDate.getTime(), d2 = other.createDate == null ? 0 : other.createDate.getTime();
        if (d1 != d2)
            return false;
        let d3 = this.modifyDate == null ? 0 : this.modifyDate.getTime(), d4 = other.modifyDate == null ? 0 : other.modifyDate.getTime();
        if (d3 != d4)
            return false;
        if (this.doi != other.doi || this.meta != other.meta)
            return false;
        if (this.steps.length != other.steps.length)
            return false;
        for (let n = 0; n < this.steps.length; n++)
            if (!this.steps[n].equals(other.steps[n]))
                return false;
        return true;
    }
    getComponent(step, type, idx) {
        if (type == ExperimentComponentType.Reactant)
            return this.steps[step].reactants[idx];
        if (type == ExperimentComponentType.Reagent)
            return this.steps[step].reagents[idx];
        if (type == ExperimentComponentType.Product)
            return this.steps[step].products[idx];
        return new ExperimentComponent();
    }
}
class Experiment extends _Aspect__WEBPACK_IMPORTED_MODULE_6__.Aspect {
    static isExperiment(ds) {
        for (let n = 0; n < ds.numExtensions; n++)
            if (ds.getExtType(n) == Experiment.CODE)
                return true;
        return false;
    }
    constructor(ds, allowModify) {
        super(Experiment.CODE, ds, allowModify);
        this.subordinateCodes = [Experiment.CODE_RXN, Experiment.CODE_YLD];
        if (Object.keys(Experiment.COLUMN_DESCRIPTIONS).length == 0) {
            let v = Experiment.COLUMN_DESCRIPTIONS;
            v[Experiment.COLNAME_EXPERIMENT_TITLE] = 'Title description for the experiment';
            v[Experiment.COLNAME_EXPERIMENT_CREATEDATE] = 'Date the experiment was created (seconds since 1970)';
            v[Experiment.COLNAME_EXPERIMENT_MODIFYDATE] = 'Date the experiment was last modified (seconds since 1970)';
            v[Experiment.COLNAME_EXPERIMENT_DOI] = 'Digital object identifiers (DOI) for the experiment (whitespace separated)';
            v[Experiment.COLNAME_EXPERIMENT_META] = 'Additional experiment metadata';
            v[Experiment.COLNAME_STEP_META] = 'Additional step metadata';
            v[Experiment.COLNAME_REACTANT_MOL] = 'Molecular structure of reactant';
            v[Experiment.COLNAME_REACTANT_NAME] = 'Name of reactant';
            v[Experiment.COLNAME_REACTANT_STOICH] = 'Stoichiometry of reactant';
            v[Experiment.COLNAME_REACTANT_MASS] = 'Mass quantity of reactant (g)';
            v[Experiment.COLNAME_REACTANT_VOLUME] = 'Volume quantity of reactant (mL)';
            v[Experiment.COLNAME_REACTANT_MOLES] = 'Molar quantity of reactant (mol)';
            v[Experiment.COLNAME_REACTANT_DENSITY] = 'Density of reactant (g/mL)';
            v[Experiment.COLNAME_REACTANT_CONC] = 'Concentration of reactant (mol/L)';
            v[Experiment.COLNAME_REACTANT_PRIMARY] = 'Whether the reactant is used for yield calculation';
            v[Experiment.COLNAME_REACTANT_META] = 'Additional reactant metadata';
            v[Experiment.COLNAME_REAGENT_MOL] = 'Molecular structure of reagent';
            v[Experiment.COLNAME_REAGENT_NAME] = 'Name of reagent';
            v[Experiment.COLNAME_REAGENT_EQUIV] = 'Molar equivalents of reagent';
            v[Experiment.COLNAME_REAGENT_MASS] = 'Mass quantity of reagent (g)';
            v[Experiment.COLNAME_REAGENT_VOLUME] = 'Volume quantity of reagent (mL)';
            v[Experiment.COLNAME_REAGENT_MOLES] = 'Molar quantity of reagent (mol)';
            v[Experiment.COLNAME_REAGENT_DENSITY] = 'Density of reagent (g/mL)';
            v[Experiment.COLNAME_REAGENT_CONC] = 'Concentration of reagent (mol/L)';
            v[Experiment.COLNAME_REAGENT_META] = 'Additional reagent metadata';
            v[Experiment.COLNAME_PRODUCT_MOL] = 'Molecular structure of product';
            v[Experiment.COLNAME_PRODUCT_NAME] = 'Name of product';
            v[Experiment.COLNAME_PRODUCT_STOICH] = 'Stoichiometry of product';
            v[Experiment.COLNAME_PRODUCT_MASS] = 'Mass quantity of reactant (g)';
            v[Experiment.COLNAME_PRODUCT_VOLUME] = 'Volume quantity of reactant (mL)';
            v[Experiment.COLNAME_PRODUCT_MOLES] = 'Molar quantity of reactant (mol)';
            v[Experiment.COLNAME_PRODUCT_DENSITY] = 'Density of reactant (g/mL)';
            v[Experiment.COLNAME_PRODUCT_CONC] = 'Concentration of reactant (mol/L)';
            v[Experiment.COLNAME_PRODUCT_YIELD] = 'Yield of product (%)';
            v[Experiment.COLNAME_PRODUCT_WASTE] = 'Whether the product is an unwanted byproduct';
            v[Experiment.COLNAME_PRODUCT_META] = 'Additional product metadata';
        }
        this.setup();
    }
    isFirstStep(row) {
        if (this.ds.notNull(row, Experiment.COLNAME_EXPERIMENT_CREATEDATE))
            return true;
        let mol = this.ds.getMolecule(row, Experiment.COLNAME_REACTANT_MOL + '1');
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_0__.MolUtil.notBlank(mol))
            return true;
        let name = this.ds.getString(row, Experiment.COLNAME_REACTANT_NAME + '1');
        if (name)
            return true;
        return false;
    }
    numberOfSteps(row) {
        if (row >= this.ds.numRows)
            return 0;
        let steps = 1;
        while (row + steps < this.ds.numRows) {
            if (this.isFirstStep(row + steps))
                break;
            steps++;
        }
        return steps;
    }
    getEntry(row) {
        let entry = new ExperimentEntry();
        let title = this.ds.getString(row, Experiment.COLNAME_EXPERIMENT_TITLE);
        if (title)
            entry.title = title;
        let createDate = this.ds.getReal(row, Experiment.COLNAME_EXPERIMENT_CREATEDATE);
        if (createDate)
            entry.createDate = new Date(createDate * 1000);
        let modifyDate = this.ds.getReal(row, Experiment.COLNAME_EXPERIMENT_MODIFYDATE);
        if (modifyDate)
            entry.modifyDate = new Date(modifyDate * 1000);
        let doi = this.ds.getString(row, Experiment.COLNAME_EXPERIMENT_DOI);
        if (doi)
            entry.doi = doi;
        let meta = this.ds.getString(row, Experiment.COLNAME_EXPERIMENT_META);
        if (meta)
            entry.meta = meta;
        let [nreactants, nproducts, nreagents] = this.countComponents();
        for (let pos = row; pos < this.ds.numRows; pos++) {
            if (pos > row && this.isFirstStep(pos))
                break;
            let step = new ExperimentStep();
            if (pos == row)
                for (let n = 1; n <= nreactants; n++) {
                    let comp = this.fetchReactant(pos, n);
                    if (comp != null)
                        step.reactants.push(comp);
                    else
                        break;
                }
            for (let n = 1; n <= nproducts; n++) {
                let comp = this.fetchProduct(pos, n);
                if (comp != null)
                    step.products.push(comp);
                else
                    break;
            }
            for (let n = 1; n <= nreagents; n++) {
                let comp = this.fetchReagent(pos, n);
                if (comp != null)
                    step.reagents.push(comp);
                else
                    break;
            }
            step.meta = this.ds.getString(pos, Experiment.COLNAME_STEP_META);
            entry.steps.push(step);
        }
        return entry;
    }
    setEntry(row, entry) {
        this.putEntry(row, entry, true);
    }
    addEntry(entry) {
        this.putEntry(this.ds.numRows, entry, false);
    }
    insertEntry(row, entry) {
        this.putEntry(row, entry, false);
    }
    deleteEntry(row) {
        let nsteps = this.numberOfSteps(row);
        for (let n = row + nsteps - 1; n >= row; n--)
            this.ds.deleteRow(n);
    }
    setup() {
        this.parseAndCorrect();
    }
    parseAndCorrect() {
        let ds = this.ds;
        let idxRxn = -1, idxYld = -1, idxExp = -1;
        let extRxn = '', extYld = '', extExp = '';
        for (let n = 0; n < ds.numExtensions; n++) {
            if (ds.getExtType(n) == Experiment.CODE_RXN) {
                idxRxn = n;
                extRxn = ds.getExtData(n);
            }
            else if (ds.getExtType(n) == Experiment.CODE_YLD) {
                idxYld = n;
                extYld = ds.getExtData(n);
            }
            else if (ds.getExtType(n) == Experiment.CODE) {
                idxExp = n;
                extExp = ds.getExtData(n);
            }
        }
        let [nreactants, nproducts, nreagents] = this.parseReactionMetaData(extRxn);
        let meta = `nreactants=${nreactants}\nnproducts=${nproducts}\nnreagents=${nreagents}\n`;
        if (idxRxn >= 0)
            ds.setExtData(idxRxn, meta);
        else
            ds.appendExtension(Experiment.NAME_RXN, Experiment.CODE_RXN, meta);
        if (idxYld >= 0)
            ds.setExtData(idxYld, '');
        else
            ds.appendExtension(Experiment.NAME_YLD, Experiment.CODE_YLD, '');
        if (idxExp >= 0)
            ds.setExtData(idxExp, '');
        else
            ds.appendExtension(Experiment.NAME, Experiment.CODE, '');
        this.forceColumn(Experiment.COLNAME_EXPERIMENT_TITLE, "string");
        this.forceColumn(Experiment.COLNAME_EXPERIMENT_CREATEDATE, "real");
        this.forceColumn(Experiment.COLNAME_EXPERIMENT_MODIFYDATE, "real");
        this.forceColumn(Experiment.COLNAME_EXPERIMENT_DOI, "string");
        this.forceColumn(Experiment.COLNAME_EXPERIMENT_META, "string");
        this.forceColumn(Experiment.COLNAME_STEP_META, "string");
        for (let n = 1; n <= nreactants; n++)
            this.forceReactantColumns(n);
        for (let n = 1; n <= nreagents; n++)
            this.forceReagentColumns(n);
        for (let n = 1; n <= nproducts; n++)
            this.forceProductColumns(n);
    }
    forceColumn(colName, type, suffix) {
        let useName = colName + (suffix == null ? '' : suffix);
        this.ds.ensureColumn(useName, type, Experiment.COLUMN_DESCRIPTIONS[colName]);
    }
    forceReactantColumns(suffix) {
        this.forceColumn(Experiment.COLNAME_REACTANT_MOL, "molecule", suffix);
        this.forceColumn(Experiment.COLNAME_REACTANT_NAME, "string", suffix);
        this.forceColumn(Experiment.COLNAME_REACTANT_STOICH, "string", suffix);
        this.forceColumn(Experiment.COLNAME_REACTANT_MASS, "real", suffix);
        this.forceColumn(Experiment.COLNAME_REACTANT_VOLUME, "real", suffix);
        this.forceColumn(Experiment.COLNAME_REACTANT_MOLES, "real", suffix);
        this.forceColumn(Experiment.COLNAME_REACTANT_DENSITY, "real", suffix);
        this.forceColumn(Experiment.COLNAME_REACTANT_CONC, "real", suffix);
        this.forceColumn(Experiment.COLNAME_REACTANT_PRIMARY, "boolean", suffix);
        this.forceColumn(Experiment.COLNAME_REACTANT_META, "string", suffix);
    }
    forceReagentColumns(suffix) {
        this.forceColumn(Experiment.COLNAME_REAGENT_MOL, "molecule", suffix);
        this.forceColumn(Experiment.COLNAME_REAGENT_NAME, "string", suffix);
        this.forceColumn(Experiment.COLNAME_REAGENT_EQUIV, "real", suffix);
        this.forceColumn(Experiment.COLNAME_REAGENT_MASS, "real", suffix);
        this.forceColumn(Experiment.COLNAME_REAGENT_VOLUME, "real", suffix);
        this.forceColumn(Experiment.COLNAME_REAGENT_MOLES, "real", suffix);
        this.forceColumn(Experiment.COLNAME_REAGENT_DENSITY, "real", suffix);
        this.forceColumn(Experiment.COLNAME_REAGENT_CONC, "real", suffix);
        this.forceColumn(Experiment.COLNAME_REAGENT_META, "string", suffix);
    }
    forceProductColumns(suffix) {
        this.forceColumn(Experiment.COLNAME_PRODUCT_MOL, "molecule", suffix);
        this.forceColumn(Experiment.COLNAME_PRODUCT_NAME, "string", suffix);
        this.forceColumn(Experiment.COLNAME_PRODUCT_STOICH, "string", suffix);
        this.forceColumn(Experiment.COLNAME_PRODUCT_MASS, "real", suffix);
        this.forceColumn(Experiment.COLNAME_PRODUCT_VOLUME, "real", suffix);
        this.forceColumn(Experiment.COLNAME_PRODUCT_MOLES, "real", suffix);
        this.forceColumn(Experiment.COLNAME_PRODUCT_DENSITY, "real", suffix);
        this.forceColumn(Experiment.COLNAME_PRODUCT_CONC, "real", suffix);
        this.forceColumn(Experiment.COLNAME_PRODUCT_YIELD, "real", suffix);
        this.forceColumn(Experiment.COLNAME_PRODUCT_WASTE, "boolean", suffix);
        this.forceColumn(Experiment.COLNAME_PRODUCT_META, "string", suffix);
    }
    parseReactionMetaData(content) {
        let nreactants = 1, nproducts = 1, nreagents = 0;
        for (let line of content.split(/\r?\n/)) {
            if (line.startsWith('nreactants='))
                nreactants = Math.max(nreactants, Math.min(100, parseInt(line.substring(11))));
            else if (line.startsWith('nproducts='))
                nproducts = Math.max(nproducts, Math.min(100, parseInt(line.substring(10))));
            else if (line.startsWith('nreagents='))
                nreagents = Math.max(nreagents, Math.min(100, parseInt(line.substring(10))));
        }
        return [nreactants, nproducts, nreagents];
    }
    countComponents() {
        let nreactants = 0, nproducts = 0, nreagents = 0;
        for (let n = 0; n < this.ds.numExtensions; n++)
            if (this.ds.getExtType(n) == Experiment.CODE_RXN) {
                [nreactants, nproducts, nreagents] = this.parseReactionMetaData(this.ds.getExtData(n));
                break;
            }
        return [nreactants, nproducts, nreagents];
    }
    fetchReactant(row, idx) {
        let mol = this.ds.getMoleculeClone(row, `${Experiment.COLNAME_REACTANT_MOL}${idx}`);
        let name = this.ds.getString(row, `${Experiment.COLNAME_REACTANT_NAME}${idx}`);
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_0__.MolUtil.isBlank(mol) && !name)
            return null;
        let comp = new ExperimentComponent(mol, name);
        let stoich = this.ds.getString(row, `${Experiment.COLNAME_REACTANT_STOICH}${idx}`);
        if (stoich)
            comp.stoich = stoich;
        comp.mass = this.ds.getReal(row, `${Experiment.COLNAME_REACTANT_MASS}${idx}`);
        comp.volume = this.ds.getReal(row, `${Experiment.COLNAME_REACTANT_VOLUME}${idx}`);
        comp.moles = this.ds.getReal(row, `${Experiment.COLNAME_REACTANT_MOLES}${idx}`);
        comp.density = this.ds.getReal(row, `${Experiment.COLNAME_REACTANT_DENSITY}${idx}`);
        comp.conc = this.ds.getReal(row, `${Experiment.COLNAME_REACTANT_CONC}${idx}`);
        let primary = this.ds.getBoolean(row, `${Experiment.COLNAME_REACTANT_PRIMARY}${idx}`);
        if (primary != null)
            comp.primary = primary;
        comp.meta = this.ds.getString(row, `${Experiment.COLNAME_REACTANT_META}${idx}`);
        return comp;
    }
    fetchProduct(row, idx) {
        let mol = this.ds.getMoleculeClone(row, `${Experiment.COLNAME_PRODUCT_MOL}${idx}`);
        let name = this.ds.getString(row, `${Experiment.COLNAME_PRODUCT_NAME}${idx}`);
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_0__.MolUtil.isBlank(mol) && !name)
            return null;
        let comp = new ExperimentComponent(mol, name);
        let stoich = this.ds.getString(row, `${Experiment.COLNAME_PRODUCT_STOICH}${idx}`);
        if (stoich)
            comp.stoich = stoich;
        comp.mass = this.ds.getReal(row, `${Experiment.COLNAME_PRODUCT_MASS}${idx}`);
        comp.volume = this.ds.getReal(row, `${Experiment.COLNAME_PRODUCT_VOLUME}${idx}`);
        comp.moles = this.ds.getReal(row, `${Experiment.COLNAME_PRODUCT_MOLES}${idx}`);
        comp.density = this.ds.getReal(row, `${Experiment.COLNAME_PRODUCT_DENSITY}${idx}`);
        comp.conc = this.ds.getReal(row, `${Experiment.COLNAME_PRODUCT_CONC}${idx}`);
        comp.yield = this.ds.getReal(row, `${Experiment.COLNAME_PRODUCT_YIELD}${idx}`);
        let waste = this.ds.getBoolean(row, `${Experiment.COLNAME_PRODUCT_WASTE}${idx}`);
        if (waste != null)
            comp.waste = waste;
        comp.meta = this.ds.getString(row, `${Experiment.COLNAME_PRODUCT_META}${idx}`);
        return comp;
    }
    fetchReagent(row, idx) {
        let mol = this.ds.getMoleculeClone(row, `${Experiment.COLNAME_REAGENT_MOL}${idx}`);
        let name = this.ds.getString(row, `${Experiment.COLNAME_REAGENT_NAME}${idx}`);
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_0__.MolUtil.isBlank(mol) && !name)
            return null;
        let comp = new ExperimentComponent(mol, name);
        comp.mass = this.ds.getReal(row, `${Experiment.COLNAME_REAGENT_MASS}${idx}`);
        comp.volume = this.ds.getReal(row, `${Experiment.COLNAME_REAGENT_VOLUME}${idx}`);
        comp.moles = this.ds.getReal(row, `${Experiment.COLNAME_REAGENT_MOLES}${idx}`);
        comp.density = this.ds.getReal(row, `${Experiment.COLNAME_REAGENT_DENSITY}${idx}`);
        comp.conc = this.ds.getReal(row, `${Experiment.COLNAME_REAGENT_CONC}${idx}`);
        comp.equiv = this.ds.getReal(row, `${Experiment.COLNAME_REAGENT_EQUIV}${idx}`);
        comp.meta = this.ds.getString(row, `${Experiment.COLNAME_REAGENT_META}${idx}`);
        return comp;
    }
    putEntry(row, entry, replace) {
        let [preactants, pproducts, preagents] = this.countComponents();
        let [nreactants, nproducts, nreagents] = [preactants, pproducts, preagents];
        for (let step of entry.steps) {
            nreactants = Math.max(nreactants, step.reactants.length);
            nproducts = Math.max(nproducts, step.products.length);
            nreagents = Math.max(nreagents, step.reagents.length);
        }
        if (nreactants != preactants || nproducts != pproducts || nreagents != preagents) {
            let meta = `nreactants=${nreactants}\nnproducts=${nproducts}\nnreagents=${nreagents}`;
            let got = false;
            for (let n = 0; n < this.ds.numExtensions; n++)
                if (this.ds.getExtType(n) == Experiment.CODE_RXN) {
                    this.ds.setExtData(n, meta);
                    got = true;
                    break;
                }
            if (!got)
                this.ds.appendExtension(Experiment.NAME_RXN, Experiment.CODE_RXN, meta);
        }
        for (let n = 1; n <= nreactants; n++)
            this.forceReactantColumns(n);
        for (let n = 1; n <= nreagents; n++)
            this.forceReagentColumns(n);
        for (let n = 1; n <= nproducts; n++)
            this.forceProductColumns(n);
        let oldSteps = replace ? this.numberOfSteps(row) : 0, newSteps = entry.steps.length;
        if (oldSteps > newSteps) {
            for (let n = newSteps; n < oldSteps; n++)
                this.ds.deleteRow(row + newSteps - 1);
        }
        else if (newSteps > oldSteps) {
            for (let n = oldSteps; n < newSteps; n++)
                this.ds.insertRow(row + oldSteps);
        }
        this.ds.setString(row, Experiment.COLNAME_EXPERIMENT_TITLE, entry.title);
        this.ds.setReal(row, Experiment.COLNAME_EXPERIMENT_CREATEDATE, entry.createDate == null ? null : entry.createDate.getTime() * 1E-3);
        this.ds.setReal(row, Experiment.COLNAME_EXPERIMENT_MODIFYDATE, entry.modifyDate == null ? null : entry.modifyDate.getTime() * 1E-3);
        this.ds.setString(row, Experiment.COLNAME_EXPERIMENT_DOI, entry.doi);
        this.ds.setString(row, Experiment.COLNAME_EXPERIMENT_META, entry.meta);
        for (let s = 0; s < entry.steps.length; s++) {
            let r = row + s, step = entry.steps[s];
            if (s == 0)
                for (let n = 0; n < step.reactants.length; n++) {
                    let comp = step.reactants[n], i = n + 1;
                    this.ds.setMolecule(r, `${Experiment.COLNAME_REACTANT_MOL}${i}`, comp.mol);
                    this.ds.setString(r, `${Experiment.COLNAME_REACTANT_NAME}${i}`, comp.name);
                    this.ds.setString(r, `${Experiment.COLNAME_REACTANT_STOICH}${i}`, comp.stoich);
                    this.ds.setReal(r, `${Experiment.COLNAME_REACTANT_MASS}${i}`, comp.mass);
                    this.ds.setReal(r, `${Experiment.COLNAME_REACTANT_VOLUME}${i}`, comp.volume);
                    this.ds.setReal(r, `${Experiment.COLNAME_REACTANT_MOLES}${i}`, comp.moles);
                    this.ds.setReal(r, `${Experiment.COLNAME_REACTANT_DENSITY}${i}`, comp.density);
                    this.ds.setReal(r, `${Experiment.COLNAME_REACTANT_CONC}${i}`, comp.conc);
                    this.ds.setBoolean(r, `${Experiment.COLNAME_REACTANT_PRIMARY}${i}`, comp.primary);
                    this.ds.setString(r, `${Experiment.COLNAME_REACTANT_META}${i}`, comp.meta);
                }
            for (let n = 0; n < step.reagents.length; n++) {
                let comp = step.reagents[n], i = n + 1;
                this.ds.setMolecule(r, `${Experiment.COLNAME_REAGENT_MOL}${i}`, comp.mol);
                this.ds.setString(r, `${Experiment.COLNAME_REAGENT_NAME}${i}`, comp.name);
                this.ds.setReal(r, `${Experiment.COLNAME_REAGENT_EQUIV}${i}`, comp.equiv);
                this.ds.setReal(r, `${Experiment.COLNAME_REAGENT_MASS}${i}`, comp.mass);
                this.ds.setReal(r, `${Experiment.COLNAME_REAGENT_VOLUME}${i}`, comp.volume);
                this.ds.setReal(r, `${Experiment.COLNAME_REAGENT_MOLES}${i}`, comp.moles);
                this.ds.setReal(r, `${Experiment.COLNAME_REAGENT_DENSITY}${i}`, comp.density);
                this.ds.setReal(r, `${Experiment.COLNAME_REAGENT_CONC}${i}`, comp.conc);
                this.ds.setString(r, `${Experiment.COLNAME_REAGENT_META}${i}`, comp.meta);
            }
            for (let n = 0; n < step.products.length; n++) {
                let comp = step.products[n], i = n + 1;
                this.ds.setMolecule(r, `${Experiment.COLNAME_PRODUCT_MOL}${i}`, comp.mol);
                this.ds.setString(r, `${Experiment.COLNAME_PRODUCT_NAME}${i}`, comp.name);
                this.ds.setString(r, `${Experiment.COLNAME_PRODUCT_STOICH}${i}`, comp.stoich);
                this.ds.setReal(r, `${Experiment.COLNAME_PRODUCT_MASS}${i}`, comp.mass);
                this.ds.setReal(r, `${Experiment.COLNAME_PRODUCT_VOLUME}${i}`, comp.volume);
                this.ds.setReal(r, `${Experiment.COLNAME_PRODUCT_MOLES}${i}`, comp.moles);
                this.ds.setReal(r, `${Experiment.COLNAME_PRODUCT_DENSITY}${i}`, comp.density);
                this.ds.setReal(r, `${Experiment.COLNAME_PRODUCT_CONC}${i}`, comp.conc);
                this.ds.setReal(r, `${Experiment.COLNAME_PRODUCT_YIELD}${i}`, comp.yield);
                this.ds.setBoolean(r, `${Experiment.COLNAME_PRODUCT_WASTE}${i}`, comp.waste);
                this.ds.setString(r, `${Experiment.COLNAME_PRODUCT_META}${i}`, comp.meta);
            }
            this.ds.setString(r, Experiment.COLNAME_STEP_META, step.meta);
        }
        for (let s = 0; s < entry.steps.length; s++) {
            let r = row + s;
            let start = s > 0 ? 0 : entry.steps[s].reactants.length;
            for (let n = start; n < nreactants; n++) {
                let i = n + 1;
                this.ds.setToNull(r, `${Experiment.COLNAME_REACTANT_MOL}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_REACTANT_NAME}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_REACTANT_STOICH}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_REACTANT_MASS}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_REACTANT_VOLUME}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_REACTANT_MOLES}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_REACTANT_DENSITY}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_REACTANT_CONC}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_REACTANT_PRIMARY}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_REACTANT_META}${i}`);
            }
            for (let n = entry.steps[s].reagents.length; n < nreagents; n++) {
                let i = n + 1;
                this.ds.setToNull(r, `${Experiment.COLNAME_REAGENT_MOL}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_REAGENT_NAME}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_REAGENT_EQUIV}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_REAGENT_MASS}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_REAGENT_VOLUME}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_REAGENT_MOLES}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_REAGENT_DENSITY}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_REAGENT_CONC}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_REAGENT_META}${i}`);
            }
            for (let n = entry.steps[s].products.length; n < nproducts; n++) {
                let i = n + 1;
                this.ds.setToNull(r, `${Experiment.COLNAME_PRODUCT_MOL}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_PRODUCT_NAME}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_PRODUCT_STOICH}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_PRODUCT_MASS}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_PRODUCT_VOLUME}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_PRODUCT_MOLES}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_PRODUCT_DENSITY}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_PRODUCT_CONC}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_PRODUCT_WASTE}${i}`);
                this.ds.setToNull(r, `${Experiment.COLNAME_PRODUCT_META}${i}`);
            }
        }
    }
    plainHeading() { return Experiment.NAME; }
    rowFirstBlock(row) { return this.isFirstStep(row); }
    rowBlockCount(row) { return this.numberOfSteps(row); }
    initiateNewRow(row) {
        let curTime = new Date().getTime() * 1E-3;
        this.ds.setReal(row, Experiment.COLNAME_EXPERIMENT_CREATEDATE, curTime);
    }
    columnEffectivelyBlank(row) {
        return [Experiment.COLNAME_EXPERIMENT_CREATEDATE];
    }
    isColumnReserved(colName) {
        return this.areColumnsReserved([colName])[0];
    }
    areColumnsReserved(colNames) {
        let resv = _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.booleanArray(false, colNames.length);
        for (let n = 0; n < colNames.length; n++) {
            let name = colNames[n];
            if (Experiment.ALL_COLUMN_LITERALS.indexOf(name) >= 0) {
                resv[n] = true;
                continue;
            }
            for (let pfx of Experiment.ALL_COLUMN_PREFIXES)
                if (name.startsWith(pfx)) {
                    resv[n] = true;
                    break;
                }
        }
        return resv;
    }
    numGraphicRenderings(row) { return 1; }
    produceGraphicRendering(row, idx, policy) {
        let measure = new _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_2__.OutlineMeasurement(0, 0, policy.data.pointScale);
        let layout = new _gfx_ArrangeExperiment__WEBPACK_IMPORTED_MODULE_1__.ArrangeExperiment(this.getEntry(row), measure, policy);
        layout.limitTotalW = 50 * policy.data.pointScale;
        layout.limitTotalH = 50 * policy.data.pointScale;
        layout.includeStoich = true;
        layout.includeAnnot = false;
        layout.arrange();
        let metavec = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_4__.MetaVector();
        new _gfx_DrawExperiment__WEBPACK_IMPORTED_MODULE_3__.DrawExperiment(layout, metavec).draw();
        metavec.normalise();
        return { name: 'Scheme', metavec: metavec };
    }
}
Experiment.CODE = 'org.mmi.aspect.Experiment';
Experiment.CODE_RXN = 'org.mmi.aspect.Reaction';
Experiment.CODE_YLD = 'org.mmi.aspect.Yield';
Experiment.NAME = 'Experiment';
Experiment.NAME_RXN = 'Reaction';
Experiment.NAME_YLD = 'Yield';
Experiment.COLNAME_EXPERIMENT_TITLE = 'ExperimentTitle';
Experiment.COLNAME_EXPERIMENT_CREATEDATE = 'ExperimentCreateDate';
Experiment.COLNAME_EXPERIMENT_MODIFYDATE = 'ExperimentModifyDate';
Experiment.COLNAME_EXPERIMENT_DOI = 'ExperimentDOI';
Experiment.COLNAME_EXPERIMENT_META = 'ExperimentMeta';
Experiment.COLNAME_STEP_META = 'ExperimentStepMeta';
Experiment.COLNAME_REACTANT_MOL = 'ReactantMol';
Experiment.COLNAME_REACTANT_NAME = 'ReactantName';
Experiment.COLNAME_REACTANT_STOICH = 'ReactantStoich';
Experiment.COLNAME_REACTANT_MASS = 'ReactantMass';
Experiment.COLNAME_REACTANT_VOLUME = 'ReactantVolume';
Experiment.COLNAME_REACTANT_MOLES = 'ReactantMoles';
Experiment.COLNAME_REACTANT_DENSITY = 'ReactantDensity';
Experiment.COLNAME_REACTANT_CONC = 'ReactantConc';
Experiment.COLNAME_REACTANT_PRIMARY = 'ReactantPrimary';
Experiment.COLNAME_REACTANT_META = 'ReactantMeta';
Experiment.COLNAME_REAGENT_MOL = 'ReagentMol';
Experiment.COLNAME_REAGENT_NAME = 'ReagentName';
Experiment.COLNAME_REAGENT_EQUIV = 'ReagentEquiv';
Experiment.COLNAME_REAGENT_MASS = 'ReagentMass';
Experiment.COLNAME_REAGENT_VOLUME = 'ReagentVolume';
Experiment.COLNAME_REAGENT_MOLES = 'ReagentMoles';
Experiment.COLNAME_REAGENT_DENSITY = 'ReagentDensity';
Experiment.COLNAME_REAGENT_CONC = 'ReagentConc';
Experiment.COLNAME_REAGENT_META = 'ReagentMeta';
Experiment.COLNAME_PRODUCT_MOL = 'ProductMol';
Experiment.COLNAME_PRODUCT_NAME = 'ProductName';
Experiment.COLNAME_PRODUCT_STOICH = 'ProductStoich';
Experiment.COLNAME_PRODUCT_MASS = 'ProductMass';
Experiment.COLNAME_PRODUCT_VOLUME = 'ProductVolume';
Experiment.COLNAME_PRODUCT_MOLES = 'ProductMoles';
Experiment.COLNAME_PRODUCT_DENSITY = 'ProductDensity';
Experiment.COLNAME_PRODUCT_CONC = 'ProductConc';
Experiment.COLNAME_PRODUCT_YIELD = 'ProductYield';
Experiment.COLNAME_PRODUCT_WASTE = 'ProductWaste';
Experiment.COLNAME_PRODUCT_META = 'ProductMeta';
Experiment.COLUMN_DESCRIPTIONS = {};
Experiment.ALL_COLUMN_LITERALS = [
    Experiment.COLNAME_EXPERIMENT_TITLE,
    Experiment.COLNAME_EXPERIMENT_CREATEDATE,
    Experiment.COLNAME_EXPERIMENT_MODIFYDATE,
    Experiment.COLNAME_EXPERIMENT_DOI,
    Experiment.COLNAME_EXPERIMENT_META,
    Experiment.COLNAME_STEP_META,
];
Experiment.ALL_COLUMN_PREFIXES = [
    Experiment.COLNAME_REACTANT_MOL,
    Experiment.COLNAME_REACTANT_NAME,
    Experiment.COLNAME_REACTANT_STOICH,
    Experiment.COLNAME_REACTANT_MASS,
    Experiment.COLNAME_REACTANT_VOLUME,
    Experiment.COLNAME_REACTANT_MOLES,
    Experiment.COLNAME_REACTANT_DENSITY,
    Experiment.COLNAME_REACTANT_CONC,
    Experiment.COLNAME_REACTANT_PRIMARY,
    Experiment.COLNAME_REACTANT_META,
    Experiment.COLNAME_REAGENT_MOL,
    Experiment.COLNAME_REAGENT_NAME,
    Experiment.COLNAME_REAGENT_EQUIV,
    Experiment.COLNAME_REAGENT_MASS,
    Experiment.COLNAME_REAGENT_VOLUME,
    Experiment.COLNAME_REAGENT_MOLES,
    Experiment.COLNAME_REAGENT_DENSITY,
    Experiment.COLNAME_REAGENT_CONC,
    Experiment.COLNAME_REAGENT_META,
    Experiment.COLNAME_PRODUCT_MOL,
    Experiment.COLNAME_PRODUCT_NAME,
    Experiment.COLNAME_PRODUCT_STOICH,
    Experiment.COLNAME_PRODUCT_MASS,
    Experiment.COLNAME_PRODUCT_VOLUME,
    Experiment.COLNAME_PRODUCT_MOLES,
    Experiment.COLNAME_PRODUCT_DENSITY,
    Experiment.COLNAME_PRODUCT_CONC,
    Experiment.COLNAME_PRODUCT_YIELD,
    Experiment.COLNAME_PRODUCT_WASTE,
    Experiment.COLNAME_PRODUCT_META,
];
(0,_AspectList__WEBPACK_IMPORTED_MODULE_7__.registerAspect)(Experiment);


/***/ }),

/***/ "./src/aspect/MeasurementData.ts":
/*!***************************************!*\
  !*** ./src/aspect/MeasurementData.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MeasurementData: () => (/* binding */ MeasurementData)
/* harmony export */ });
/* harmony import */ var _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../io/MoleculeStream */ "./src/io/MoleculeStream.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _Aspect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Aspect */ "./src/aspect/Aspect.ts");
/* harmony import */ var _AspectList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AspectList */ "./src/aspect/AspectList.ts");




class MeasurementData extends _Aspect__WEBPACK_IMPORTED_MODULE_2__.Aspect {
    static isMeasurementData(ds) {
        for (let n = 0; n < ds.numExtensions; n++)
            if (ds.getExtType(n) == MeasurementData.CODE)
                return true;
        return false;
    }
    constructor(ds, allowModify) {
        super(MeasurementData.CODE, ds, allowModify);
        this.header = { units: [], fields: [] };
        this.setup();
    }
    getHeader() {
        return this.header;
    }
    setHeader(header) {
        this.header = header;
        let content = this.formatMetaData(header);
        for (let n = 0; n < this.ds.numExtensions; n++)
            if (this.ds.getExtType(n) == MeasurementData.CODE) {
                this.ds.setExtData(n, content);
                return;
            }
        this.ds.appendExtension(MeasurementData.NAME, MeasurementData.CODE, content);
    }
    effectHeader(header) {
        this.setHeader(header);
        this.ensureFields();
    }
    rename(fldidx, newName) {
        let oldName = this.header.fields[fldidx].name;
        if (oldName == newName)
            return;
        this.header.fields[fldidx].name = newName;
        this.setHeader(this.header);
        for (let sfx of [MeasurementData.SUFFIX_VALUE, MeasurementData.SUFFIX_ERROR, MeasurementData.SUFFIX_UNITS, MeasurementData.SUFFIX_MOD]) {
            let col = this.ds.findColByName(oldName + sfx);
            if (col >= 0)
                this.ds.changeColumnName(col, newName + sfx, this.ds.colDescr(col));
        }
    }
    reservedColumns(fldidx) {
        let fieldName = this.header.fields[fldidx].name;
        return [fieldName + MeasurementData.SUFFIX_VALUE, fieldName + MeasurementData.SUFFIX_ERROR,
            fieldName + MeasurementData.SUFFIX_UNITS, fieldName + MeasurementData.SUFFIX_MOD];
    }
    getValue(row, fldidx) {
        return this.getValueField(row, this.header.fields[fldidx]);
    }
    getValueField(row, field) {
        let value = { value: Number.NaN, error: Number.NaN, units: '', mod: '' };
        let colValue = this.ds.findColByName(field.name + MeasurementData.SUFFIX_VALUE, "real");
        let colError = this.ds.findColByName(field.name + MeasurementData.SUFFIX_ERROR, "real");
        let colUnits = this.ds.findColByName(field.name + MeasurementData.SUFFIX_UNITS, "string");
        let colMod = this.ds.findColByName(field.name + MeasurementData.SUFFIX_MOD, "string");
        if (colValue >= 0 && this.ds.notNull(row, colValue))
            value.value = this.ds.getReal(row, colValue);
        if (colError >= 0 && this.ds.notNull(row, colError))
            value.error = this.ds.getReal(row, colError);
        if (colUnits >= 0)
            value.units = this.ds.getString(row, colUnits);
        if (colMod >= 0)
            value.mod = this.ds.getString(row, colMod);
        return value;
    }
    setValue(row, fldidx, value) {
        let fieldName = this.header.fields[fldidx].name;
        let colValue = this.ds.findColByName(fieldName + MeasurementData.SUFFIX_VALUE, "real");
        let colError = this.ds.findColByName(fieldName + MeasurementData.SUFFIX_ERROR, "real");
        let colUnits = this.ds.findColByName(fieldName + MeasurementData.SUFFIX_UNITS, "string");
        let colMod = this.ds.findColByName(fieldName + MeasurementData.SUFFIX_MOD, "string");
        if (colValue >= 0)
            if (isNaN(value.value))
                this.ds.setToNull(row, colValue);
            else
                this.ds.setReal(row, colValue, value.value);
        if (colError >= 0)
            if (isNaN(value.error))
                this.ds.setToNull(row, colError);
            else
                this.ds.setReal(row, colError, value.error);
        if (colUnits >= 0)
            this.ds.setString(row, colUnits, value.units);
        if (colMod >= 0)
            this.ds.setString(row, colMod, value.mod);
    }
    clearValue(row, fldidx) {
        let fieldName = this.header.fields[fldidx].name;
        let colValue = this.ds.findColByName(fieldName + MeasurementData.SUFFIX_VALUE, "real");
        let colError = this.ds.findColByName(fieldName + MeasurementData.SUFFIX_ERROR, "real");
        let colUnits = this.ds.findColByName(fieldName + MeasurementData.SUFFIX_UNITS, "string");
        let colMod = this.ds.findColByName(fieldName + MeasurementData.SUFFIX_MOD, "string");
        if (colValue >= 0)
            this.ds.setToNull(row, colValue);
        if (colError >= 0)
            this.ds.setToNull(row, colError);
        if (colUnits >= 0)
            this.ds.setToNull(row, colUnits);
        if (colMod >= 0)
            this.ds.setToNull(row, colMod);
    }
    getDescr(row, fldidx) {
        let col = this.ds.findColByName(this.header.fields[fldidx].name);
        return col < 0 ? '' : this.ds.colDescr(col);
    }
    setDescr(row, fldidx, descr) {
        let col = this.ds.findColByName(this.header.fields[fldidx].name);
        if (col >= 0)
            this.ds.changeColumnName(col, this.ds.colName(col), descr);
    }
    setup() {
        this.parseAndCorrect();
    }
    parseAndCorrect() {
        this.header = { units: [], fields: [] };
        let got = false;
        for (let n = 0; n < this.ds.numExtensions; n++)
            if (this.ds.getExtType(n) == MeasurementData.CODE) {
                this.header = this.parseMetaData(this.ds.getExtData(n));
                got = true;
                break;
            }
        this.ensureFields();
        if (!got && this.allowModify) {
            let content = this.formatMetaData(this.header);
            this.ds.appendExtension(MeasurementData.NAME, MeasurementData.CODE, content);
        }
    }
    ensureFields() {
        for (let f of this.header.fields) {
            let descr = 'Measurement';
            let colidx = this.ds.findColByName(f.name);
            if (colidx >= 0)
                descr = this.ds.colDescr(colidx);
            if (this.allowModify) {
                this.ds.ensureColumn(f.name + MeasurementData.SUFFIX_VALUE, "real", descr);
                this.ds.ensureColumn(f.name + MeasurementData.SUFFIX_ERROR, "real", 'Error');
                this.ds.ensureColumn(f.name + MeasurementData.SUFFIX_UNITS, "string", 'Units');
                this.ds.ensureColumn(f.name + MeasurementData.SUFFIX_MOD, "string", 'Modifier');
            }
        }
    }
    parseMetaData(content) {
        let header = { units: [], fields: [] };
        for (let line of content.split(/\r?\n/)) {
            let eq = line.indexOf('=');
            if (eq < 0)
                continue;
            if (line.startsWith('unit=')) {
                let bits = line.substring(eq + 1).split(',');
                if (bits.length >= 2)
                    header.units.push({ name: _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(bits[0]), uri: _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(bits[1]) });
            }
            else if (line.startsWith('field=')) {
                let bits = line.substring(eq + 1).split(',');
                let f = { name: _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(bits[0]), units: [], defnURI: [] };
                for (let n = 1; n < bits.length; n++)
                    f.units.push(_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(bits[n]));
                header.fields.push(f);
            }
            else if (line.startsWith('definition=')) {
                let bits = line.substring(eq + 1).split(',');
                if (bits.length >= 2) {
                    let f = header.fields.find((f) => f.name == bits[0]);
                    if (!f)
                        continue;
                    for (let n = 1; n < bits.length; n++)
                        f.defnURI.push(_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(bits[n]));
                }
            }
        }
        return header;
    }
    formatMetaData(header) {
        let lines = [];
        for (let u of header.units) {
            lines.push('unit=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(u.name) + ',' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(u.uri));
        }
        for (let f of header.fields) {
            let line = 'field=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(f.name);
            for (let u of f.units)
                line += ',' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(u);
            lines.push(line);
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.notBlank(f.defnURI)) {
                line = 'definition=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(f.name);
                for (let d of f.defnURI)
                    line += ',' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(d);
                lines.push(line);
            }
        }
        return lines.join('\n');
    }
    plainHeading() { return MeasurementData.NAME; }
    isColumnReserved(colName) {
        return this.areColumnsReserved([colName])[0];
    }
    areColumnsReserved(colNames) {
        let names = new Set();
        for (let f of this.header.fields) {
            names.add(f.name + MeasurementData.SUFFIX_VALUE);
            names.add(f.name + MeasurementData.SUFFIX_ERROR);
            names.add(f.name + MeasurementData.SUFFIX_UNITS);
            names.add(f.name + MeasurementData.SUFFIX_MOD);
        }
        let resv = [];
        for (let col of colNames)
            resv.push(names.has(col));
        return resv;
    }
    numTextRenderings(row) { return this.header.fields.length; }
    produceTextRendering(row, idx) {
        let field = this.header.fields[idx];
        let colField = this.ds.findColByName(field.name);
        let tr = {
            name: field.name,
            descr: colField < 0 ? '' : this.ds.colDescr(colField),
            text: '',
            type: _Aspect__WEBPACK_IMPORTED_MODULE_2__.Aspect.TEXT_PLAIN
        };
        let datum = this.getValue(row, idx);
        if (!Number.isNaN(datum.value)) {
            if (datum.mod)
                tr.text += datum.mod + ' ';
            tr.text += datum.value;
            if (!Number.isNaN(datum.error))
                tr.text += ' \u{00B1} ' + datum.error;
            if (datum.units)
                tr.text += ' ' + datum.units;
        }
        return tr;
    }
}
MeasurementData.CODE = 'org.mmi.aspect.MeasurementData';
MeasurementData.NAME = 'Measurement Data';
MeasurementData.SUFFIX_VALUE = '';
MeasurementData.SUFFIX_ERROR = '_error';
MeasurementData.SUFFIX_UNITS = '_units';
MeasurementData.SUFFIX_MOD = '_mod';
(0,_AspectList__WEBPACK_IMPORTED_MODULE_3__.registerAspect)(MeasurementData);


/***/ }),

/***/ "./src/aspect/Mixture.ts":
/*!*******************************!*\
  !*** ./src/aspect/Mixture.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Mixture: () => (/* binding */ Mixture),
/* harmony export */   MixtureAttributeType: () => (/* binding */ MixtureAttributeType)
/* harmony export */ });
/* harmony import */ var _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../io/MoleculeStream */ "./src/io/MoleculeStream.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _Aspect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Aspect */ "./src/aspect/Aspect.ts");
/* harmony import */ var _AspectList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AspectList */ "./src/aspect/AspectList.ts");
/* harmony import */ var _MeasurementData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MeasurementData */ "./src/aspect/MeasurementData.ts");





var MixtureAttributeType;
(function (MixtureAttributeType) {
    MixtureAttributeType["Structure"] = "structure";
    MixtureAttributeType["Name"] = "name";
    MixtureAttributeType["Quantity"] = "quantity";
    MixtureAttributeType["Bound"] = "bound";
    MixtureAttributeType["Error"] = "error";
    MixtureAttributeType["Ratio"] = "ratio";
    MixtureAttributeType["Units"] = "units";
    MixtureAttributeType["Relation"] = "relation";
    MixtureAttributeType["Identifier"] = "identifier";
    MixtureAttributeType["Link"] = "link";
    MixtureAttributeType["Property"] = "property";
})(MixtureAttributeType || (MixtureAttributeType = {}));
class Mixture extends _Aspect__WEBPACK_IMPORTED_MODULE_2__.Aspect {
    static isMixture(ds) {
        for (let n = 0; n < ds.numExtensions; n++)
            if (ds.getExtType(n) == Mixture.CODE)
                return true;
        return false;
    }
    constructor(ds, allowModify) {
        super(Mixture.CODE, ds, allowModify);
        this.header = { attributes: [] };
        this.setup();
    }
    getHeader() {
        return this.header;
    }
    setHeader(header) {
        this.header = header;
        let content = this.formatMetaData(header);
        for (let n = 0; n < this.ds.numExtensions; n++)
            if (this.ds.getExtType(n) == Mixture.CODE) {
                this.ds.setExtData(n, content);
                return;
            }
        this.ds.appendExtension(Mixture.NAME, Mixture.CODE, content);
    }
    setup() {
        this.parseAndCorrect();
    }
    parseAndCorrect() {
        this.header = { attributes: [] };
        let got = false;
        for (let n = 0; n < this.ds.numExtensions; n++)
            if (this.ds.getExtType(n) == Mixture.CODE) {
                this.header = this.parseMetaData(this.ds.getExtData(n));
                got = true;
                break;
            }
        if (!got && this.allowModify) {
            let content = this.formatMetaData(this.header);
            this.ds.appendExtension(Mixture.NAME, Mixture.CODE, content);
        }
    }
    parseMetaData(content) {
        let header = { attributes: [] };
        for (let line of content.split(/\r?\n/)) {
            let eq = line.indexOf('=');
            if (eq < 0)
                continue;
            if (line.startsWith('attr=')) {
                let bits = line.substring(eq + 1).split(',');
                if (bits.length < 3)
                    continue;
                let column = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(bits[0]);
                let position = [];
                if (bits[1] != '0')
                    position = bits[1].split('.').map((str) => parseInt(str));
                let type = bits[2];
                let info = [];
                for (let n = 3; n < bits.length; n++)
                    info.push(_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(bits[n]));
                header.attributes.push({ column, position, type, info });
            }
        }
        return header;
    }
    formatMetaData(header) {
        let lines = [];
        for (let a of header.attributes) {
            let bits = [_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(a.column)];
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.isBlank(a.position))
                bits.push('0');
            else
                bits.push(a.position.join('.'));
            bits.push(a.type);
            if (a.info)
                for (let str of a.info)
                    bits.push(_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(str));
            lines.push('attr=' + bits.join(','));
        }
        return lines.join('\n');
    }
    plainHeading() { return _MeasurementData__WEBPACK_IMPORTED_MODULE_4__.MeasurementData.NAME; }
    isColumnReserved(colName) {
        return this.areColumnsReserved([colName])[0];
    }
    areColumnsReserved(colNames) {
        let names = new Set();
        for (let a of this.header.attributes)
            names.add(a.column);
        let resv = [];
        for (let col of colNames)
            resv.push(names.has(col));
        return resv;
    }
}
Mixture.CODE = 'org.mmi.aspect.Mixture';
Mixture.NAME = 'Mixture';
Mixture.SUFFIX_VALUE = '';
(0,_AspectList__WEBPACK_IMPORTED_MODULE_3__.registerAspect)(Mixture);


/***/ }),

/***/ "./src/aspect/SARTable.ts":
/*!********************************!*\
  !*** ./src/aspect/SARTable.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SARTable: () => (/* binding */ SARTable)
/* harmony export */ });
/* harmony import */ var _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../io/MoleculeStream */ "./src/io/MoleculeStream.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../gfx/ArrangeMeasurement */ "./src/gfx/ArrangeMeasurement.ts");
/* harmony import */ var _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../gfx/ArrangeMolecule */ "./src/gfx/ArrangeMolecule.ts");
/* harmony import */ var _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../gfx/DrawMolecule */ "./src/gfx/DrawMolecule.ts");
/* harmony import */ var _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../gfx/MetaVector */ "./src/gfx/MetaVector.ts");
/* harmony import */ var _gfx_Rendering__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../gfx/Rendering */ "./src/gfx/Rendering.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _Aspect__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Aspect */ "./src/aspect/Aspect.ts");
/* harmony import */ var _AspectList__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./AspectList */ "./src/aspect/AspectList.ts");










class SARTable extends _Aspect__WEBPACK_IMPORTED_MODULE_8__.Aspect {
    static isSARTable(ds) {
        for (let n = 0; n < ds.numExtensions; n++)
            if (ds.getExtType(n) == SARTable.CODE)
                return true;
        return false;
    }
    constructor(ds, allowModify) {
        super(SARTable.CODE, ds, allowModify);
        this.setup();
    }
    getFields() {
        for (let n = 0; n < this.ds.numExtensions; n++)
            if (this.ds.getExtType(n) == SARTable.CODE)
                return this.parseMetaData(this.ds.getExtData(n));
        return null;
    }
    setFields(fields) {
        let content = this.formatMetaData(fields);
        for (let n = 0; n < this.ds.numExtensions; n++)
            if (this.ds.getExtType(n) == SARTable.CODE) {
                this.ds.setExtData(n, content);
                return;
            }
        this.ds.appendExtension(SARTable.NAME, SARTable.CODE, content);
    }
    getEntry(row) {
        let fields = this.getFields();
        let entry = {
            construct: this.ds.getMolecule(row, fields.construct),
            locked: !!this.ds.getBoolean(row, fields.locked),
            scaffold: this.ds.getMolecule(row, fields.scaffold),
            substNames: [],
            substituents: []
        };
        for (let subst of fields.substituents) {
            entry.substNames.push(subst);
            entry.substituents.push(this.ds.getMolecule(row, subst));
        }
        return entry;
    }
    setEntry(row, entry) {
        let fields = this.getFields();
        let colConstruct = this.ds.findColByName(fields.construct, "molecule");
        if (colConstruct >= 0)
            this.ds.setMolecule(row, colConstruct, entry.construct);
        let colLocked = this.ds.findColByName(fields.locked, "boolean");
        if (colLocked >= 0)
            this.ds.setBoolean(row, colLocked, entry.locked);
        let colScaffold = this.ds.findColByName(fields.scaffold, "molecule");
        if (colScaffold >= 0)
            this.ds.setMolecule(row, colScaffold, entry.scaffold);
        for (let n = 0; n < fields.substituents.length; n++) {
            let colSubst = this.ds.findColByName(fields.substituents[n], "molecule");
            if (colSubst >= 0)
                this.ds.setMolecule(row, colSubst, entry.substituents[n]);
        }
    }
    createSubstituents(tobeAdded) {
        if (tobeAdded.length == 0)
            return;
        let fields = this.getFields();
        let modified = false;
        for (let name of tobeAdded)
            if (fields.substituents.indexOf(name) < 0) {
                fields.substituents.push(name);
                this.ds.ensureColumn(name, "molecule", SARTable.DESCR_SUBSTITUENT);
                modified = true;
            }
        if (modified)
            this.setFields(fields);
    }
    static isAttachment(mol, atom) {
        return mol.atomicNumber(atom) == 0 && !_mol_MolUtil__WEBPACK_IMPORTED_MODULE_1__.MolUtil.hasAbbrev(mol, atom) && mol.atomAdjCount(atom) == 1;
    }
    setup() {
        this.parseAndCorrect();
    }
    parseAndCorrect() {
        let fields = {
            construct: 'Molecule',
            locked: 'Molecule_locked',
            scaffold: 'Scaffold',
            substituents: [],
            metadata: []
        };
        let got = false;
        for (let n = 0; n < this.ds.numExtensions; n++)
            if (this.ds.getExtType(n) == SARTable.CODE) {
                fields = this.parseMetaData(this.ds.getExtData(n));
                got = true;
                break;
            }
        this.ds.ensureColumn(fields.construct, "molecule", SARTable.DESCR_CONSTRUCT);
        this.ds.ensureColumn(fields.locked, "boolean", SARTable.DESCR_LOCKED);
        this.ds.ensureColumn(fields.scaffold, "molecule", SARTable.DESCR_SCAFFOLD);
        for (let subst of fields.substituents)
            this.ds.ensureColumn(subst, "molecule", SARTable.DESCR_SUBSTITUENT);
        if (!got) {
            let content = this.formatMetaData(fields);
            this.ds.appendExtension(SARTable.NAME, SARTable.CODE, content);
        }
    }
    parseMetaData(content) {
        let fields = { construct: null, locked: null, scaffold: null, substituents: [], metadata: [] };
        for (let line of content.split(/\r?\n/)) {
            let pos = line.indexOf('=');
            if (pos < 0)
                continue;
            let key = line.substring(0, pos), val = line.substring(pos + 1);
            if (key == 'field') {
                let bits = val.split(',');
                if (bits.length >= 3) {
                    let type = bits[0], name = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(bits[1]);
                    if (type == 'construct') {
                        fields.construct = name;
                        fields.locked = name + '_locked';
                        continue;
                    }
                    else if (type == 'scaffold') {
                        fields.scaffold = name;
                        continue;
                    }
                    else if (type == 'substituent') {
                        fields.substituents.push(name);
                        continue;
                    }
                }
            }
            fields.metadata.push(line);
        }
        return fields;
    }
    formatMetaData(fields) {
        let content = '';
        content += 'field=construct,' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(fields.construct) + ',\n';
        content += 'field=scaffold,' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(fields.scaffold) + ',\n';
        for (let subst of fields.substituents)
            content += 'field=substituent,' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(subst) + ',\n';
        for (let meta of fields.metadata)
            content += meta + '\n';
        return content;
    }
    plainHeading() { return SARTable.NAME; }
    isColumnReserved(colName) {
        return this.areColumnsReserved([colName])[0];
    }
    areColumnsReserved(colNames) {
        let fields = this.getFields();
        let used = new Set();
        used.add(fields.construct);
        used.add(fields.locked);
        used.add(fields.scaffold);
        for (let subst of fields.substituents)
            used.add(subst);
        let reserved = _util_Vec__WEBPACK_IMPORTED_MODULE_7__.Vec.booleanArray(false, colNames.length);
        for (let n = 0; n < colNames.length; n++)
            reserved[n] = used.has(colNames[n]);
        return reserved;
    }
    numGraphicRenderings(row) {
        let fields = this.getFields();
        return 2 + fields.substituents.length;
    }
    produceGraphicRendering(row, idx, policy) {
        let fields = this.getFields(), ds = this.ds;
        if (idx == SARTable.RENDER_CONSTRUCT) {
            let mol = ds.getMolecule(row, fields.construct);
            let metavec = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector();
            if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_1__.MolUtil.notBlank(mol)) {
                let effects = new _gfx_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderEffects();
                for (let n = 1; n <= mol.numAtoms; n++)
                    if (mol.atomMapNum(n) > 0)
                        effects.colAtom[n] = 0x096E6F;
                for (let n = 1; n <= mol.numBonds; n++) {
                    let m1 = mol.atomMapNum(mol.bondFrom(n)), m2 = mol.atomMapNum(mol.bondTo(n));
                    if (m1 > 0 && m2 > 0)
                        effects.colBond[n] = 0x096E6F;
                    else if (m1 > 0 || m2 > 0)
                        effects.dottedBondCross[n] = 0x606060;
                }
                let measure = new _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_2__.OutlineMeasurement(0, 0, policy.data.pointScale);
                let layout = new _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_3__.ArrangeMolecule(mol, measure, policy, effects);
                layout.arrange();
                new _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_4__.DrawMolecule(layout, metavec).draw();
            }
            else
                metavec.drawText(0, 0, '?', 15, 0x000000);
            metavec.normalise();
            return { name: fields.construct, metavec: metavec };
        }
        else if (idx == SARTable.RENDER_SCAFFOLD) {
            let mol = ds.getMolecule(row, fields.scaffold);
            let metavec = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector();
            if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_1__.MolUtil.notBlank(mol)) {
                let effects = new _gfx_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderEffects();
                for (let n = 1; n <= mol.numAtoms; n++)
                    if (SARTable.isAttachment(mol, n)) {
                        let isDefined = false;
                        let el = mol.atomElement(n);
                        outer: for (let colName of fields.substituents) {
                            let subst = ds.getMolecule(row, colName);
                            if (subst != null)
                                for (let i = 1; i <= subst.numAtoms; i++)
                                    if (subst.atomElement(i) == el || (subst.atomElement(i) == 'R' && el == colName)) {
                                        isDefined = true;
                                        break outer;
                                    }
                        }
                        effects.colAtom[n] = isDefined ? 0x096E6F : 0xFF0000;
                        effects.dottedRectOutline[n] = isDefined ? 0x808080 : 0xFF0000;
                    }
                let measure = new _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_2__.OutlineMeasurement(0, 0, policy.data.pointScale);
                let layout = new _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_3__.ArrangeMolecule(mol, measure, policy, effects);
                layout.arrange();
                new _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_4__.DrawMolecule(layout, metavec).draw();
            }
            else
                metavec.drawText(0, 0, '?', 15, 0x000000);
            metavec.normalise();
            return { name: fields.scaffold, metavec: metavec };
        }
        else if (idx >= SARTable.RENDER_SUBSTITUENT && idx < SARTable.RENDER_SUBSTITUENT + fields.substituents.length) {
            let sidx = idx - SARTable.RENDER_SUBSTITUENT, sname = fields.substituents[sidx];
            let mol = ds.getMolecule(row, sname);
            let metavec = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector();
            if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_1__.MolUtil.notBlank(mol)) {
                let effects = new _gfx_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderEffects();
                for (let n = 1; n <= mol.numAtoms; n++)
                    if (SARTable.isAttachment(mol, n)) {
                        effects.colAtom[n] = 0x096E6F;
                        effects.dottedRectOutline[n] = 0x808080;
                    }
                let measure = new _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_2__.OutlineMeasurement(0, 0, policy.data.pointScale);
                let layout = new _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_3__.ArrangeMolecule(mol, measure, policy, effects);
                layout.arrange();
                new _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_4__.DrawMolecule(layout, metavec).draw();
            }
            else {
                let txt = '?';
                let scaff = ds.getMolecule(row, fields.scaffold);
                if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_1__.MolUtil.notBlank(scaff)) {
                    txt = 'n/a';
                    for (let n = 1; n <= scaff.numAtoms; n++)
                        if (scaff.atomElement(n) == sname) {
                            txt = '?';
                            break;
                        }
                    if (txt == '?')
                        for (let n = 0; n < fields.substituents.length; n++)
                            if (n != sidx) {
                                let subst = ds.getMolecule(row, fields.substituents[n]);
                                if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_1__.MolUtil.notBlank(subst)) {
                                    for (let i = 1; i <= subst.numAtoms; i++)
                                        if (subst.atomElement(i) == sname) {
                                            txt = 'n/a';
                                            break;
                                        }
                                }
                            }
                }
                metavec.drawText(0, 0, txt, 15, 0x000000);
            }
            metavec.normalise();
            return { name: sname, metavec: metavec };
        }
        return null;
    }
}
SARTable.CODE = 'org.mmi.aspect.SARTable';
SARTable.NAME = 'SAR Table';
SARTable.DESCR_CONSTRUCT = 'Structure of constructed molecule';
SARTable.DESCR_LOCKED = 'Whether constructed molecule should be rebuilt';
SARTable.DESCR_SCAFFOLD = 'Decorated core scaffold of molecule';
SARTable.DESCR_SUBSTITUENT = 'Substituent fragment to be attached to scaffold';
SARTable.RENDER_CONSTRUCT = 0;
SARTable.RENDER_SCAFFOLD = 1;
SARTable.RENDER_SUBSTITUENT = 2;
(0,_AspectList__WEBPACK_IMPORTED_MODULE_9__.registerAspect)(SARTable);


/***/ }),

/***/ "./src/calc/BayesianModel.ts":
/*!***********************************!*\
  !*** ./src/calc/BayesianModel.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BayesianModel: () => (/* binding */ BayesianModel)
/* harmony export */ });
/* harmony import */ var _mol_MetaMolecule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/MetaMolecule */ "./src/mol/MetaMolecule.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _CircularFingerprints__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CircularFingerprints */ "./src/calc/CircularFingerprints.ts");





class BayesianModel {
    constructor(classType, folding) {
        this.classType = classType;
        this.folding = folding;
        this.numActive = 0;
        this.inHash = {};
        this.training = [];
        this.activity = [];
        this.contribs = {};
        this.lowThresh = 0;
        this.highThresh = 0;
        this.range = 0;
        this.invRange = 0;
        this.estimates = null;
        this.rocX = null;
        this.rocY = null;
        this.rocType = null;
        this.rocAUC = Number.NaN;
        this.trainingSize = 0;
        this.trainingActives = 0;
        this.atomicSlopeA = Number.NaN;
        this.atomicInterceptB = Number.NaN;
        this.truthTP = 0;
        this.truthFP = 0;
        this.truthTN = 0;
        this.truthFN = 0;
        this.precision = Number.NaN;
        this.recall = Number.NaN;
        this.specificity = Number.NaN;
        this.statF1 = Number.NaN;
        this.statKappa = Number.NaN;
        this.statMCC = Number.NaN;
        this.noteTitle = null;
        this.noteOrigin = null;
        this.noteField = null;
        this.noteComments = null;
        if (this.folding == null)
            this.folding = 0;
    }
    addMolecule(mol, active, hashes) {
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_1__.MolUtil.isBlank(mol) && hashes == null)
            throw 'Molecule cannot be blank or null.';
        if (hashes == null) {
            let meta = _mol_MetaMolecule__WEBPACK_IMPORTED_MODULE_0__.MetaMolecule.createStrictRubric(mol);
            let circ = new _CircularFingerprints__WEBPACK_IMPORTED_MODULE_4__.CircularFingerprints(meta, this.classType);
            circ.calculate();
            hashes = this.folding == 0 ? circ.getUniqueHashes() : circ.getFoldedHashes(this.folding);
        }
        if (active)
            this.numActive++;
        this.training.push(hashes);
        this.activity.push(active);
        for (let h of hashes) {
            let stash = this.inHash[h];
            if (stash == null)
                stash = [0, 0];
            if (active)
                stash[0]++;
            stash[1]++;
            this.inHash[h] = stash;
        }
    }
    build() {
        this.trainingSize = this.training.length;
        this.trainingActives = this.numActive;
        this.contribs = [];
        const sz = this.training.length;
        const invSz = 1.0 / sz;
        const P_AT = this.numActive * invSz;
        for (let hashStr in this.inHash) {
            let hash = parseInt(hashStr);
            const AT = this.inHash[hash];
            const A = AT[0], T = AT[1];
            const Pcorr = (A + 1) / (T * P_AT + 1);
            const P = Math.log(Pcorr);
            this.contribs[hash] = P;
        }
        this.lowThresh = Number.POSITIVE_INFINITY;
        this.highThresh = Number.NEGATIVE_INFINITY;
        for (let fp of this.training) {
            let val = 0;
            for (let hash of fp)
                val += this.contribs[hash];
            this.lowThresh = Math.min(this.lowThresh, val);
            this.highThresh = Math.max(this.highThresh, val);
        }
        this.range = this.highThresh - this.lowThresh;
        this.invRange = this.range > 0 ? 1 / this.range : 0;
    }
    predictMolecule(mol) {
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_1__.MolUtil.isBlank(mol))
            throw 'Molecule cannot be blank or null.';
        let meta = _mol_MetaMolecule__WEBPACK_IMPORTED_MODULE_0__.MetaMolecule.createStrictRubric(mol);
        let circ = new _CircularFingerprints__WEBPACK_IMPORTED_MODULE_4__.CircularFingerprints(meta, this.classType);
        circ.calculate();
        let hashes = this.folding == 0 ? circ.getUniqueHashes() : circ.getFoldedHashes(this.folding);
        return this.predictFP(hashes);
    }
    predictFP(hashes) {
        let val = 0;
        for (let h of hashes) {
            let c = this.contribs[h];
            if (c != null)
                val += c;
        }
        return val;
    }
    scalePredictor(pred) {
        if (this.range == 0)
            return pred >= this.highThresh ? 1 : 0;
        return (pred - this.lowThresh) * this.invRange;
    }
    scaleArcTan(scaled) {
        const INVPI = 1.0 / Math.PI;
        return Math.atan(2 * scaled - 1) * INVPI + 0.5;
    }
    calculateOverlap(mol) {
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_1__.MolUtil.isBlank(mol))
            throw 'Molecule cannot be blank or null.';
        let meta = _mol_MetaMolecule__WEBPACK_IMPORTED_MODULE_0__.MetaMolecule.createStrictRubric(mol);
        let circ = new _CircularFingerprints__WEBPACK_IMPORTED_MODULE_4__.CircularFingerprints(meta, this.classType);
        circ.calculate();
        let hashes = this.folding == 0 ? circ.getUniqueHashes() : circ.getFoldedHashes(this.folding);
        return this.calculateOverlapFP(hashes);
    }
    calculateOverlapFP(hashes) {
        if (hashes.length == 0)
            return 0;
        let count = 0.0;
        for (let h of hashes)
            if (this.contribs[h] != null)
                count++;
        return hashes.length == 1 ? count : count / hashes.length;
    }
    calculateAtomPredictors(mol) {
        const na = mol.numAtoms;
        let atomic = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.numberArray(0, na);
        let predHashes = new Set();
        let cover = this.determineCoverage(mol, predHashes);
        for (let h in cover) {
            let c = this.contribs[h];
            if (c == null)
                continue;
            let mask = cover[h];
            let msz = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.maskCount(mask);
            let invSz = 1.0 / msz;
            for (let n = 0; n < na; n++)
                if (mask[n])
                    atomic[n] += c * invSz;
        }
        if (!isNaN(this.atomicSlopeA)) {
            for (let n = 0; n < na; n++)
                atomic[n] = (this.atomicSlopeA * atomic[n]) + this.atomicInterceptB;
            return atomic;
        }
        let pred = 0;
        for (let h of predHashes) {
            let c = this.contribs[h];
            if (c != null)
                pred += c;
        }
        const SCALE_STDDEV_TO = 0.25;
        const invN = 1.0 / na;
        _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.addTo(atomic, -_util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.sum(atomic) * invN);
        let stdDev = 0;
        for (let a of atomic)
            stdDev += a * a;
        stdDev = Math.sqrt(stdDev * invN);
        if (stdDev > 1E-3)
            _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.mulBy(atomic, SCALE_STDDEV_TO / stdDev);
        let scaled = (this.scalePredictor(pred) - 0.5) * 2;
        if (scaled < -1)
            scaled = -1;
        else if (scaled > 1)
            scaled = 1;
        _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.addTo(atomic, scaled);
        return atomic;
    }
    validateLeaveOneOut() {
        const sz = this.training.length;
        this.estimates = [];
        for (let n = 0; n < sz; n++)
            this.estimates.push(this.singleLeaveOneOut(n));
        this.calculateROC();
        this.calculateTruth();
        this.rocType = 'leave-one-out';
    }
    validateFiveFold() {
        this.rocType = 'five-fold';
        this.validateNfold(5);
    }
    validateThreeFold() {
        this.rocType = 'three-fold';
        this.validateNfold(3);
    }
    clearTraining() {
        this.training = [];
        this.activity = [];
    }
    serialise() {
        let lines = [];
        let fpname = this.classType == _CircularFingerprints__WEBPACK_IMPORTED_MODULE_4__.CircularFingerprints.CLASS_ECFP0 ? 'ECFP0' : this.classType == _CircularFingerprints__WEBPACK_IMPORTED_MODULE_4__.CircularFingerprints.CLASS_ECFP2 ? 'ECFP2'
            : this.classType == _CircularFingerprints__WEBPACK_IMPORTED_MODULE_4__.CircularFingerprints.CLASS_ECFP4 ? 'ECFP4' : this.classType == _CircularFingerprints__WEBPACK_IMPORTED_MODULE_4__.CircularFingerprints.CLASS_ECFP6 ? 'ECFP6'
                : '?';
        lines.push('Bayesian!(' + fpname + ',' + this.folding + ',' + this.lowThresh + ',' + this.highThresh + ')');
        let sorted = [];
        for (let hash in this.contribs)
            sorted.push(parseInt(hash));
        _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.sort(sorted);
        for (let hash of sorted) {
            const c = this.contribs[hash];
            lines.push(hash + '=' + c);
        }
        lines.push('training:size=' + this.trainingSize);
        lines.push('training:actives=' + this.trainingActives);
        if (!Number.isNaN(this.rocAUC))
            lines.push('roc:auc=' + this.rocAUC);
        if (this.rocType != null)
            lines.push('roc:type=' + this.rocType);
        if (this.rocX != null && this.rocY != null) {
            let x = 'roc:x=';
            for (let n = 0; n < this.rocX.length; n++)
                x += (n == 0 ? '' : ',') + this.rocX[n];
            lines.push(x);
            let y = 'roc:y=';
            for (let n = 0; n < this.rocY.length; n++)
                y += (n == 0 ? '' : ',') + this.rocY[n];
            lines.push(y);
        }
        if (this.truthTP > 0 || this.truthFP > 0 || this.truthTN > 0 || this.truthFP > 0) {
            lines.push('truth:TP=' + this.truthTP);
            lines.push('truth:FP=' + this.truthFP);
            lines.push('truth:TN=' + this.truthTN);
            lines.push('truth:FN=' + this.truthFN);
            lines.push('truth:precision=' + this.precision);
            lines.push('truth:recall=' + this.recall);
            lines.push('truth:specificity=' + this.specificity);
            lines.push('truth:F1=' + this.statF1);
            lines.push('truth:kappa=' + this.statKappa);
            lines.push('truth:MCC=' + this.statMCC);
        }
        if (!isNaN(this.atomicSlopeA) && !isNaN(this.atomicInterceptB)) {
            lines.push('atomic:slope=' + this.atomicSlopeA);
            lines.push('atomic:intercept=' + this.atomicInterceptB);
        }
        if (this.noteTitle)
            lines.push('note:title=' + this.noteTitle);
        if (this.noteOrigin)
            lines.push('note:origin=' + this.noteOrigin);
        if (this.noteField)
            lines.push('note:field=' + this.noteField);
        if (this.noteComments)
            for (let comment of this.noteComments)
                lines.push('note:comment=' + comment);
        lines.push('!End');
        return lines.join('\n');
    }
    static deserialise(str) {
        let lines = str.split('\n'), lnum = 0;
        function readLine() { return lnum >= lines.length ? null : lines[lnum++].trim(); }
        let line = readLine();
        if (line == null || !line.startsWith('Bayesian!(') || !line.endsWith(')'))
            throw 'Not a serialised Bayesian model.';
        let bits = line.substring(10, line.length - 1).split(',');
        if (bits.length < 4)
            throw 'Invalid header content';
        let classType = bits[0] == 'ECFP0' ? _CircularFingerprints__WEBPACK_IMPORTED_MODULE_4__.CircularFingerprints.CLASS_ECFP0 : bits[0] == 'ECFP2' ? _CircularFingerprints__WEBPACK_IMPORTED_MODULE_4__.CircularFingerprints.CLASS_ECFP2
            : bits[0] == 'ECFP4' ? _CircularFingerprints__WEBPACK_IMPORTED_MODULE_4__.CircularFingerprints.CLASS_ECFP4 : bits[0] == 'ECFP6' ? _CircularFingerprints__WEBPACK_IMPORTED_MODULE_4__.CircularFingerprints.CLASS_ECFP6
                : 0;
        if (classType == 0)
            throw 'Unknown fingerprint type: ' + bits[0];
        let folding = parseInt(bits[1]);
        if (folding > 0)
            for (let f = folding; f > 0; f = f >> 1) {
                if ((f & 1) == 1 && f != 1) {
                    folding = -1;
                    break;
                }
            }
        if (folding < 0)
            throw 'Fingerprint folding ' + bits[1] + ' invalid: must be 0 or power of 2.';
        let model = new BayesianModel(classType, folding);
        model.lowThresh = parseFloat(bits[2]);
        model.highThresh = parseFloat(bits[3]);
        model.range = model.highThresh - model.lowThresh;
        model.invRange = model.range > 0 ? 1 / model.range : 0;
        const PTN_HASHLINE = new RegExp('^(-?\\d+)=([\\d\\.Ee-]+)');
        while (true) {
            line = readLine();
            if (line == null)
                throw 'Missing correct terminator line.';
            if (line == '!End')
                break;
            let match = PTN_HASHLINE.exec(line);
            if (match != null) {
                let hash = parseInt(match[1]);
                let c = parseFloat(match[2]);
                model.contribs[hash] = c;
            }
            else if (line.startsWith('training:size='))
                model.trainingSize = parseInt(line.substring(14));
            else if (line.startsWith('training:actives='))
                model.trainingActives = parseInt(line.substring(17));
            else if (line.startsWith('roc:auc='))
                model.rocAUC = parseFloat(line.substring(8));
            else if (line.startsWith('roc:type='))
                model.rocType = line.substring(9);
            else if (line.startsWith('roc:x=')) {
                model.rocX = [];
                for (let s of line.substring(6).split(','))
                    model.rocX.push(parseFloat(s));
            }
            else if (line.startsWith('roc:y=')) {
                model.rocY = [];
                for (let s of line.substring(6).split(','))
                    model.rocY.push(parseFloat(s));
            }
            else if (line.startsWith('truth:TP='))
                model.truthTP = parseInt(line.substring(9), 0);
            else if (line.startsWith('truth:FP='))
                model.truthFP = parseInt(line.substring(9), 0);
            else if (line.startsWith('truth:TN='))
                model.truthTN = parseInt(line.substring(9), 0);
            else if (line.startsWith('truth:FN='))
                model.truthFN = parseInt(line.substring(9), 0);
            else if (line.startsWith('truth:precision='))
                model.precision = parseFloat(line.substring(16));
            else if (line.startsWith('truth:recall='))
                model.recall = parseFloat(line.substring(13));
            else if (line.startsWith('truth:specificity='))
                model.specificity = parseFloat(line.substring(18));
            else if (line.startsWith('truth:F1='))
                model.statF1 = parseFloat(line.substring(9));
            else if (line.startsWith('truth:kappa='))
                model.statKappa = parseFloat(line.substring(12));
            else if (line.startsWith('truth:MCC='))
                model.statMCC = parseFloat(line.substring(10));
            else if (line.startsWith('atomic:slope='))
                model.atomicSlopeA = parseFloat(line.substring(13));
            else if (line.startsWith('atomic:intercept='))
                model.atomicInterceptB = parseFloat(line.substring(17));
            else if (line.startsWith('note:title='))
                model.noteTitle = line.substring(11);
            else if (line.startsWith('note:origin='))
                model.noteOrigin = line.substring(12);
            else if (line.startsWith('note:field='))
                model.noteField = line.substring(11);
            else if (line.startsWith('note:comment=')) {
                if (model.noteComments == null)
                    model.noteComments = [];
                model.noteComments.push(line.substring(13));
            }
        }
        return model;
    }
    singleLeaveOneOut(idx) {
        let exclActive = this.activity[idx];
        let exclSet = new Set();
        for (let fp of this.training[idx])
            exclSet.add(fp);
        const sz = this.training.length, szN = sz - 1;
        const invSzN = 1.0 / szN;
        const activeN = exclActive ? this.numActive - 1 : this.numActive;
        const P_AT = activeN * invSzN;
        let val = 0;
        for (let hashStr in this.inHash) {
            const hash = parseInt(hashStr);
            if (!exclSet.has(hash))
                continue;
            const AT = this.inHash[hash];
            const A = AT[0] - (exclActive ? 1 : 0), T = AT[1] - 1;
            const Pcorr = (A + 1) / (T * P_AT + 1);
            const P = Math.log(Pcorr);
            val += P;
        }
        return val;
    }
    validateNfold(nsegs) {
        const sz = this.training.length;
        let order = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.numberArray(0, sz);
        let p = 0;
        for (let n = 0; n < sz; n++)
            if (this.activity[n])
                order[p++] = n;
        for (let n = 0; n < sz; n++)
            if (!this.activity[n])
                order[p++] = n;
        let segContribs = [];
        for (let n = 0; n < nsegs; n++)
            segContribs.push(this.buildPartial(order, n, nsegs));
        this.estimates = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.numberArray(0, sz);
        for (let n = 0; n < sz; n++)
            this.estimates[order[n]] = this.estimatePartial(order, n, segContribs[n % nsegs]);
        this.calculateROC();
        this.calculateTruth();
    }
    buildPartial(order, seg, div) {
        const sz = this.training.length;
        let na = 0, nt = 0;
        let ih = {};
        for (let n = 0; n < sz; n++) {
            if (n % div != seg) {
                const active = this.activity[order[n]];
                if (active)
                    na++;
                nt++;
                for (let h of this.training[order[n]]) {
                    let stash = ih[h];
                    if (stash == null)
                        stash = [0, 0];
                    if (active)
                        stash[0]++;
                    stash[1]++;
                    ih[h] = stash;
                }
            }
        }
        let segContribs = {};
        const invSz = 1.0 / nt;
        const P_AT = na * invSz;
        for (let hashStr in ih) {
            let hash = parseInt(hashStr);
            const AT = ih[hash];
            const A = AT[0], T = AT[1];
            const Pcorr = (A + 1) / (T * P_AT + 1);
            const P = Math.log(Pcorr);
            segContribs[hash] = P;
        }
        return segContribs;
    }
    estimatePartial(order, idx, segContrib) {
        let val = 0;
        for (let h of this.training[order[idx]]) {
            let c = segContrib[h];
            if (c != null)
                val += c;
        }
        return val;
    }
    calculateROC() {
        const sz = this.training.length;
        let idx = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.idxSort(this.estimates);
        let thresholds = [];
        thresholds.push(this.lowThresh - 0.01 * this.range);
        for (let n = 0; n < sz - 1; n++) {
            const th1 = this.estimates[idx[n]], th2 = this.estimates[idx[n + 1]];
            if (th1 == th2)
                continue;
            thresholds.push(0.5 * (th1 + th2));
        }
        thresholds.push(this.highThresh + 0.01 * this.range);
        this.rocX = [];
        this.rocY = [];
        let rocT = [];
        let posTrue = 0, posFalse = 0, ipos = 0;
        let invPos = 1.0 / this.numActive, invNeg = 1.0 / (sz - this.numActive);
        for (let n = 0; n < thresholds.length; n++) {
            const th = thresholds[n];
            for (; ipos < sz; ipos++) {
                if (th < this.estimates[idx[ipos]])
                    break;
                if (this.activity[idx[ipos]])
                    posTrue++;
                else
                    posFalse++;
            }
            const x = posFalse * invNeg;
            const y = posTrue * invPos;
            const rsz = rocT.length;
            if (rsz > 0 && x == this.rocX[rsz - 1] && y == this.rocY[rsz - 1])
                continue;
            this.rocX[rsz] = 1 - x;
            this.rocY[rsz] = 1 - y;
            rocT[rsz] = th;
        }
        this.rocX = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.reverse(this.rocX);
        this.rocY = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.reverse(this.rocY);
        rocT = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.reverse(rocT);
        this.calibrateThresholds(this.rocX, this.rocY, rocT);
        this.rocAUC = 0;
        for (let n = 0; n < rocT.length - 1; n++) {
            const w = this.rocX[n + 1] - this.rocX[n], h = 0.5 * (this.rocY[n] + this.rocY[n + 1]);
            this.rocAUC += w * h;
        }
        const DIST = 0.002, DSQ = DIST * DIST;
        let gx = [], gy = [];
        gx.push(this.rocX[0]);
        gy.push(this.rocY[0]);
        for (let i = 1; i < rocT.length - 1; i++) {
            const dx = this.rocX[i] - gx[gx.length - 1], dy = this.rocY[i] - gy[gy.length - 1];
            if ((0,_util_util__WEBPACK_IMPORTED_MODULE_2__.norm2_xy)(dx, dy) < DSQ)
                continue;
            gx.push(this.rocX[i]);
            gy.push(this.rocY[i]);
        }
        gx.push(this.rocX[rocT.length - 1]);
        gy.push(this.rocY[rocT.length - 1]);
    }
    calculateTruth() {
        let thresh = 0.5 * (this.lowThresh + this.highThresh);
        this.truthTP = this.truthFP = this.truthTN = this.truthFN = 0;
        for (let n = 0; n < this.activity.length; n++) {
            let actual = this.activity[n], predicted = this.estimates[n] >= thresh;
            if (actual && predicted)
                this.truthTP++;
            else if (!actual && predicted)
                this.truthFP++;
            else if (actual && !predicted)
                this.truthFN++;
            else if (!actual && !predicted)
                this.truthTN++;
        }
        const TP = this.truthTP, FP = this.truthFP, TN = this.truthTN, FN = this.truthFN;
        let invSize = 1.0 / this.activity.length;
        this.precision = TP / (TP + FP);
        this.recall = TP / (TP + FN);
        this.specificity = TN / (TN + FP);
        this.statF1 = 2 * (this.precision * this.recall) / (this.precision + this.recall);
        let Pyes = (TP + FP) * invSize * (TP + FN) * invSize;
        let Pno = (FP + TN) * invSize * (FN + TN) * invSize;
        let P0 = (TP + TN) * invSize, Pe = Pyes + Pno;
        this.statKappa = (P0 - Pe) / (1 - Pe);
        let mccOver = TP * TN - FP * FN;
        let mccUnder = (TP + FP) * (TP + FN) * (TN + FP) * (TN + FN);
        this.statMCC = mccOver / Math.sqrt(mccUnder);
    }
    calibrateThresholds(x, y, t) {
        const sz = t.length;
        let idx = 0;
        for (let n = 1; n < sz; n++)
            if (y[n] - x[n] > y[idx] - x[idx])
                idx = n;
        const midThresh = t[idx];
        let idxX = 0, idxY = sz - 1;
        for (; idxX < idx - 1; idxX++)
            if (x[idxX] > 0)
                break;
        for (; idxY > idx + 1; idxY--)
            if (y[idxY] < 1)
                break;
        let delta = Math.min(t[idxX] - midThresh, midThresh - t[idxY]);
        this.lowThresh = midThresh - delta;
        this.highThresh = midThresh + delta;
        this.range = 2 * delta;
        this.invRange = this.range > 0 ? 1 / this.range : 0;
    }
    determineCoverage(mol, approvedHashes) {
        const na = mol.numAtoms;
        let cover = {};
        const andBits = this.folding == 0 ? 0xFFFFFFFF : this.folding - 1;
        let meta = _mol_MetaMolecule__WEBPACK_IMPORTED_MODULE_0__.MetaMolecule.createStrictRubric(mol);
        let circ = new _CircularFingerprints__WEBPACK_IMPORTED_MODULE_4__.CircularFingerprints(meta, this.classType);
        let collectFP = (fp) => {
            let idx = fp.hashCode & andBits;
            if (this.contribs[idx] == null)
                return;
            let mask = cover[idx];
            if (mask == null) {
                mask = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.booleanArray(false, na);
                cover[idx] = mask;
            }
            for (let a of fp.atoms)
                mask[a - 1] = true;
        };
        circ.hookApplyNewFP = collectFP;
        circ.hookConsiderNewFP = collectFP;
        circ.calculate();
        if (approvedHashes != null) {
            let hashes = this.folding == 0 ? circ.getUniqueHashes() : circ.getFoldedHashes(this.folding);
            for (let h of hashes)
                approvedHashes.add(h);
        }
        return cover;
    }
}


/***/ }),

/***/ "./src/calc/BuildSMILES.ts":
/*!*********************************!*\
  !*** ./src/calc/BuildSMILES.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BuildSMILES: () => (/* binding */ BuildSMILES)
/* harmony export */ });
/* harmony import */ var _mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/Chemistry */ "./src/mol/Chemistry.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");


class BuildSMILES {
    constructor(mol, pri = null) {
        this.mol = mol;
        this.pri = pri;
    }
    generate() {
        if (this.mol.numAtoms == 0)
            return '';
        this.walkSequence();
        this.findLinks();
        return this.assemble();
    }
    walkSequence() {
        const mol = this.mol, na = mol.numAtoms, pri = this.pri;
        this.seq = [];
        let visited = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.booleanArray(false, na);
        let pos = 1;
        if (pri != null)
            pos = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.idxMin(pri) + 1;
        for (let count = 0; count < na; count++) {
            this.seq.push(pos);
            visited[pos - 1] = true;
            if (count == na - 1)
                break;
            let adj = mol.atomAdjList(pos);
            let cc = mol.atomConnComp(pos);
            pos = 0;
            for (let n = 0; n < adj.length; n++)
                if (!visited[adj[n] - 1]) {
                    if (pri == null) {
                        pos = adj[n];
                        break;
                    }
                    if (pos == 0 || pri[adj[n] - 1] < pri[pos - 1])
                        pos = adj[n];
                }
            if (pos > 0)
                continue;
            for (let n = 1; n <= na; n++)
                if (!visited[n - 1] && mol.atomConnComp(n) == cc) {
                    if (pri == null) {
                        pos = n;
                        break;
                    }
                    if (pos == 0 || pri[n - 1] < pri[pos - 1])
                        pos = n;
                }
            if (pos > 0)
                continue;
            for (let n = 1; n <= na; n++)
                if (!visited[n - 1]) {
                    if (pri == null) {
                        pos = n;
                        break;
                    }
                    if (pos == 0 || pri[n - 1] < pri[pos - 1])
                        pos = n;
                }
            if (pos == 0)
                throw 'Walk sequence failed.';
        }
    }
    findLinks() {
        const mol = this.mol, na = mol.numAtoms, pri = this.pri, seq = this.seq;
        this.link = [];
        this.conn = [];
        for (let n = 0; n < na; n++) {
            this.link.push([]);
            this.conn.push([]);
        }
        let invseq = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.numberArray(0, na);
        for (let n = 0; n < na; n++)
            invseq[seq[n] - 1] = n;
        let inPlay = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.numberArray(-1, na + 1);
        for (let n = 0; n < na; n++) {
            let prev = n > 0 ? seq[n - 1] : 0;
            let cur = seq[n];
            let next = n < na - 1 ? seq[n + 1] : 0;
            for (let i = 1; i <= na; i++)
                if (inPlay[i] >= 0 && n > inPlay[i])
                    inPlay[i] = -1;
            let adj = mol.atomAdjList(cur);
            if (pri != null)
                for (let p = 0; p < adj.length - 1;) {
                    if (invseq[adj[p] - 1] > invseq[adj[p + 1] - 1]) {
                        _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.swap(adj, p, p + 1);
                        if (p > 0)
                            p--;
                    }
                    else
                        p++;
                }
            for (let i = 0; i < adj.length; i++) {
                if (adj[i] == prev || adj[i] == next)
                    continue;
                let nbr = adj[i];
                if (invseq[cur - 1] > invseq[nbr - 1])
                    continue;
                let num = -1;
                for (let j = 1; j <= na; j++)
                    if (inPlay[j] < 0) {
                        num = j;
                        inPlay[j] = Math.max(invseq[cur - 1], invseq[nbr - 1]);
                        break;
                    }
                this.link[cur - 1].push(num);
                this.conn[cur - 1].push(nbr);
                this.link[nbr - 1].push(num);
                this.conn[nbr - 1].push(cur);
            }
        }
    }
    assemble() {
        const mol = this.mol, na = mol.numAtoms, seq = this.seq, link = this.link, conn = this.conn;
        let smiles = '';
        const NON_ESCAPED = ['C', 'N', 'O', 'P', 'S'];
        for (let n = 0; n < na; n++) {
            let prev = n > 0 ? seq[n - 1] : 0, cur = seq[n];
            let bidx = prev > 0 ? mol.findBond(prev, cur) : 0;
            if (prev > 0 && bidx == 0)
                smiles += '.';
            if (bidx > 0) {
                let bo = mol.bondOrder(bidx);
                if (bo == 2)
                    smiles += '=';
                else if (bo == 3)
                    smiles += '#';
            }
            let el = mol.atomElement(cur);
            if (_mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__.Chemistry.ELEMENTS.indexOf(el) < 0)
                el = '*';
            let chg = mol.atomCharge(cur);
            if (NON_ESCAPED.indexOf(el) >= 0 && chg == 0) {
                smiles += el;
            }
            else {
                smiles += '[' + el;
                if (chg > 0)
                    smiles += '+' + chg;
                if (chg < 0)
                    smiles += chg;
                smiles += ']';
            }
            let num = link[cur - 1];
            if (num != null)
                for (let i = 0; i < num.length; i++) {
                    bidx = mol.findBond(cur, conn[cur - 1][i]);
                    let bo = mol.bondOrder(bidx);
                    if (bo == 2)
                        smiles += '=';
                    else if (bo == 3)
                        smiles += '#';
                    if (num[i] < 10)
                        smiles += num[i];
                    else
                        smiles += '%' + num[i];
                }
        }
        return smiles;
    }
}


/***/ }),

/***/ "./src/calc/CircularFingerprints.ts":
/*!******************************************!*\
  !*** ./src/calc/CircularFingerprints.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CircularFingerprints: () => (/* binding */ CircularFingerprints)
/* harmony export */ });
/* harmony import */ var _mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/Chemistry */ "./src/mol/Chemistry.ts");
/* harmony import */ var _mol_MetaMolecule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mol/MetaMolecule */ "./src/mol/MetaMolecule.ts");
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");





let crc_table = [];
function make_crc_table() {
    if (crc_table.length > 0)
        return;
    for (let n = 0; n < 256; n++) {
        let c = n;
        for (let i = 0; i < 8; i++)
            if ((c & 1) != 0)
                c = 0xEDB88320 ^ (c >>> 1);
            else
                c = (c >>> 1);
        crc_table.push(c);
    }
}
const BOOT_CRC = 0xFFFFFFFF;
function start_crc() { return BOOT_CRC; }
function feed_crc(crc, byte) {
    let idx = (crc ^ byte) & 0xFF;
    return crc_table[idx] ^ (crc >>> 8);
}
function end_crc(crc) { return crc ^ BOOT_CRC; }
class CircularFingerprints {
    constructor(meta, kind) {
        this.meta = meta;
        this.kind = kind;
        this.hookApplyNewFP = null;
        this.hookConsiderNewFP = null;
        this.identity = [];
        this.resolvedChiral = [];
        this.atomGroup = [];
        this.fplist = [];
        this.amask = [];
        this.atomAdj = [];
        this.bondAdj = [];
        make_crc_table();
    }
    calculate() {
        let mol = this.meta.mol, na = mol.numAtoms;
        this.identity = _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.numberArray(0, na);
        this.resolvedChiral = _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.booleanArray(false, na);
        for (let n = 0; n < na; n++)
            this.atomGroup.push([]);
        this.amask = _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.booleanArray(false, na);
        for (let n = 0; n < na; n++) {
            this.amask[n] = mol.atomicNumber(n + 1) >= 2 && !_mol_MolUtil__WEBPACK_IMPORTED_MODULE_3__.MolUtil.hasAbbrev(mol, n + 1);
            this.atomAdj.push([]);
            this.bondAdj.push([]);
        }
        for (let n = 0; n < na; n++) {
            if (!this.amask[n])
                continue;
            this.atomAdj[n] = mol.atomAdjList(n + 1);
            this.bondAdj[n] = mol.atomAdjBonds(n + 1);
            for (let i = this.atomAdj[n].length - 1; i >= 0; i--)
                if (!this.amask[this.atomAdj[n][i] - 1]) {
                    this.atomAdj[n].splice(i, 1);
                    this.bondAdj[n].splice(i, 1);
                }
        }
        for (let n = 0; n < na; n++)
            if (this.amask[n]) {
                this.identity[n] = this.initialIdentityECFP(n + 1);
                this.atomGroup[n] = [n + 1];
                this.applyNewFP({ hashCode: this.identity[n], iteration: 0, atoms: this.atomGroup[n], centralAtom: n + 1 });
            }
        let niter = this.kind;
        for (let iter = 1; iter <= niter; iter++) {
            let newident = _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.numberArray(0, na);
            for (let n = 0; n < na; n++)
                if (this.amask[n])
                    newident[n] = this.circularIterate(iter, n + 1);
            this.identity = newident;
            for (let n = 0; n < na; n++)
                if (this.amask[n]) {
                    this.atomGroup[n] = this.growAtoms(this.atomGroup[n]);
                    this.considerNewFP({ hashCode: this.identity[n], iteration: iter, atoms: this.atomGroup[n], centralAtom: n + 1 });
                }
        }
    }
    static create(meta, kind) {
        if (meta instanceof _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule)
            meta = _mol_MetaMolecule__WEBPACK_IMPORTED_MODULE_1__.MetaMolecule.createStrictRubric(meta);
        let circ = new CircularFingerprints(meta, kind);
        circ.calculate();
        return circ;
    }
    getMolecule() { return this.meta.mol; }
    get numFP() { return this.fplist.length; }
    getFP(idx) { return this.fplist[idx]; }
    getFingerprints() { return this.fplist.slice(0); }
    getUniqueHashes() {
        let hashes = new Set();
        for (let fp of this.fplist)
            hashes.add(fp.hashCode);
        return _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.sorted(Array.from(hashes));
    }
    getFoldedHashes(maxBits) {
        let andBits = maxBits - 1;
        let hashes = new Set();
        for (let fp of this.fplist)
            hashes.add(fp.hashCode & andBits);
        return _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.sorted(Array.from(hashes));
    }
    static tanimoto(hash1, hash2) {
        let shared = 0, total = 0;
        let sz1 = hash1.length, sz2 = hash2.length;
        if (sz1 == 0 && sz2 == 0)
            return 0;
        let i1 = 0, i2 = 0;
        while (i1 < sz1 || i2 < sz2) {
            if (i1 == sz1) {
                total += sz2 - i2;
                break;
            }
            if (i2 == sz2) {
                total += sz1 - i1;
                break;
            }
            let v1 = hash1[i1], v2 = hash2[i2];
            if (v1 == v2) {
                shared += 1;
                i1 += 1;
                i2 += 1;
            }
            else if (v1 < v2)
                i1 += 1;
            else
                i2 += 1;
            total += 1;
        }
        return shared / total;
    }
    initialIdentityECFP(atom) {
        const mol = this.meta.mol;
        let adj = mol.atomAdjList(atom);
        let nheavy = 0, nhydr = mol.atomHydrogens(atom);
        for (let a of adj)
            if (mol.atomElement(a) == 'H')
                nhydr++;
            else
                nheavy++;
        let atno = mol.atomicNumber(atom);
        let degree = Math.max(0, _mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__.Chemistry.ELEMENT_BONDING[atno] - nhydr);
        let chg = mol.atomCharge(atom);
        let inring = mol.atomRingBlock(atom) > 0 ? 1 : 0;
        let crc = start_crc();
        crc = feed_crc(crc, (nheavy << 4) | degree);
        crc = feed_crc(crc, atno);
        crc = feed_crc(crc, chg + 0x80);
        crc = feed_crc(crc, (nhydr << 4) | inring);
        return end_crc(crc);
    }
    circularIterate(iter, atom) {
        let adj = this.atomAdj[atom - 1], adjb = this.bondAdj[atom - 1];
        let seq = _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.numberArray(0, 2 + 2 * adj.length);
        seq[0] = iter;
        seq[1] = this.identity[atom - 1];
        for (let n = 0; n < adj.length; n++) {
            seq[2 * n + 2] = this.meta.isBondAromatic(adjb[n]) ? 0xF : this.meta.mol.bondOrder(adjb[n]);
            seq[2 * n + 3] = this.identity[adj[n] - 1];
        }
        let p = 0;
        while (p < adj.length - 1) {
            let i = 2 + 2 * p;
            if (seq[i] > seq[i + 2] || (seq[i] == seq[i + 2] && seq[i + 1] > seq[i + 3])) {
                _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.swap(seq, i, i + 2);
                _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.swap(seq, i + 1, i + 3);
                if (p > 0)
                    p--;
            }
            else
                p++;
        }
        let crc = start_crc();
        for (let n = 0; n < seq.length; n += 2) {
            crc = feed_crc(crc, seq[n]);
            let v = seq[n + 1];
            crc = feed_crc(crc, v >> 24);
            crc = feed_crc(crc, (v >> 16) & 0xFF);
            crc = feed_crc(crc, (v >> 8) & 0xFF);
            crc = feed_crc(crc, v & 0xFF);
        }
        if (!this.resolvedChiral[atom - 1] && _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.len(this.meta.rubricTetra) > 0 && this.meta.rubricTetra[atom - 1] != null) {
            let ru = this.meta.rubricTetra[atom - 1];
            let par = [
                ru[0] == 0 ? 0 : this.identity[ru[0] - 1],
                ru[1] == 0 ? 0 : this.identity[ru[1] - 1],
                ru[2] == 0 ? 0 : this.identity[ru[2] - 1],
                ru[3] == 0 ? 0 : this.identity[ru[3] - 1]
            ];
            if (par[0] != par[1] && par[0] != par[2] && par[0] != par[3] && par[1] != par[2] && par[1] != par[3] && par[2] != par[3]) {
                crc = feed_crc(crc, _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Permutation.parityOrder(par) + 1);
                this.resolvedChiral[atom - 1] = true;
            }
        }
        return end_crc(crc);
    }
    growAtoms(atoms) {
        let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.booleanArray(false, this.meta.mol.numAtoms);
        for (let n = 0; n < atoms.length; n++) {
            mask[atoms[n] - 1] = true;
            for (let a of this.atomAdj[atoms[n] - 1])
                mask[a - 1] = true;
        }
        return _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.add(_util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.maskIdx(mask), 1);
    }
    applyNewFP(newFP) {
        if (this.hookConsiderNewFP)
            this.hookConsiderNewFP(newFP);
        if (this.hookApplyNewFP)
            this.hookApplyNewFP(newFP);
        this.fplist.push(newFP);
    }
    considerNewFP(newFP) {
        if (this.hookConsiderNewFP)
            this.hookConsiderNewFP(newFP);
        let hit = -1;
        let fp = null;
        for (let n = 0; n < this.fplist.length; n++) {
            let lookFP = this.fplist[n];
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.equals(lookFP.atoms, newFP.atoms)) {
                fp = lookFP;
                hit = n;
                break;
            }
        }
        if (hit < 0) {
            this.fplist.push(newFP);
            return;
        }
        if (fp.iteration < newFP.iteration || fp.hashCode < newFP.hashCode)
            return;
        this.fplist[hit] = newFP;
        if (this.hookApplyNewFP)
            this.hookApplyNewFP(newFP);
    }
}
CircularFingerprints.CLASS_ECFP0 = 0;
CircularFingerprints.CLASS_ECFP2 = 1;
CircularFingerprints.CLASS_ECFP4 = 2;
CircularFingerprints.CLASS_ECFP6 = 3;


/***/ }),

/***/ "./src/calc/ResonanceRemover.ts":
/*!**************************************!*\
  !*** ./src/calc/ResonanceRemover.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ResonanceRemover: () => (/* binding */ ResonanceRemover)
/* harmony export */ });
/* harmony import */ var _mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/Chemistry */ "./src/mol/Chemistry.ts");
/* harmony import */ var _mol_Graph__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mol/Graph */ "./src/mol/Graph.ts");
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");




class ResonanceRemover {
    constructor(mol, resBonds, atomHyd = []) {
        this.mol = mol;
        this.resBonds = resBonds;
        this.atomHyd = atomHyd;
        this.maxIter = 1000;
        this.bondOrders = [];
        this.tolerant = false;
        this.mol = mol;
        this.resBonds = resBonds;
        this.atomHyd = atomHyd;
        for (let n = 1; n <= mol.numBonds; n++)
            this.bondOrders.push(mol.bondOrder(n));
    }
    perform() {
        const { mol } = this;
        if (this.atomHyd == null) {
            this.atomHyd = [];
            for (let n = 1; n <= mol.numAtoms; n++)
                this.atomHyd.push(mol.atomHExplicit(n));
        }
        this.correctInputMask();
        let g = new _mol_Graph__WEBPACK_IMPORTED_MODULE_1__.Graph(mol.numAtoms);
        for (let n = 1; n <= mol.numBonds; n++)
            if (this.resBonds[n - 1])
                g.addEdge(mol.bondFrom(n) - 1, mol.bondTo(n) - 1);
        let cc = g.calculateComponentGroups();
        for (let n = 0; n < cc.length; n++)
            if (cc[n].length >= 2)
                this.processComponent(cc[n]);
    }
    correctInputMask() {
        const { mol, atomHyd } = this;
        const na = mol.numAtoms, nb = mol.numBonds;
        let exclude = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.booleanArray(false, na);
        for (let n = 1; n <= na; n++) {
            let atno = mol.atomicNumber(n);
            let val = atno == _mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__.Chemistry.ELEMENT_C ? 4 :
                atno == _mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__.Chemistry.ELEMENT_N || atno == _mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__.Chemistry.ELEMENT_P || atno == _mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__.Chemistry.ELEMENT_B ? 3 :
                    atno == _mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__.Chemistry.ELEMENT_O || atno == _mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__.Chemistry.ELEMENT_S ? 2 : -1;
            if (val < 0) {
                exclude[n - 1] = true;
                continue;
            }
            val += mol.atomCharge(n);
            if (atomHyd[n - 1] > 0)
                val -= atomHyd[n - 1];
            if (mol.atomAdjCount(n) >= val)
                exclude[n - 1] = true;
        }
        for (let n = 1; n <= nb; n++)
            if (!this.resBonds[n - 1] && mol.bondOrder(n) != 1) {
                exclude[mol.bondFrom(n) - 1] = true;
                exclude[mol.bondTo(n) - 1] = true;
            }
        this.resBonds = this.resBonds.slice(0);
        for (let n = 0; n < nb; n++)
            if (this.resBonds[n] && (exclude[mol.bondFrom(n + 1) - 1] || exclude[mol.bondTo(n + 1) - 1])) {
                this.bondOrders[n] = 1;
                this.resBonds[n] = false;
            }
    }
    processComponent(nodes) {
        const { mol, resBonds, bondOrders, atomHyd } = this;
        let sz = nodes.length;
        if (sz == 2) {
            let b = mol.findBond(nodes[0] + 1, nodes[1] + 1);
            bondOrders[b - 1] = 2;
            return;
        }
        let optionalH = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.booleanArray(false, sz);
        for (let n = 0; n < sz; n++) {
            let i = nodes[n], a = i + 1;
            optionalH[n] = atomHyd[i] == _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.HEXPLICIT_UNKNOWN && mol.atomElement(a) == 'N' && mol.atomAdjCount(a) - mol.atomCharge(a) <= 2;
        }
        let g = new _mol_Graph__WEBPACK_IMPORTED_MODULE_1__.Graph(sz);
        let gravity = g.calculateGravity();
        let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.idxMask(nodes, mol.numAtoms);
        let bsz = 0;
        for (let n = 1; n <= mol.numBonds; n++)
            if (resBonds[n - 1] && mask[mol.bondFrom(n) - 1] && mask[mol.bondTo(n) - 1])
                bsz++;
        let bfr = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.numberArray(0, bsz), bto = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.numberArray(0, bsz), bgrav = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.numberArray(0, bsz), bidx = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.numberArray(0, bsz);
        bsz = 0;
        for (let n = 1; n <= mol.numBonds; n++)
            if (resBonds[n - 1] && mask[mol.bondFrom(n) - 1] && mask[mol.bondTo(n) - 1]) {
                let f = nodes.indexOf(mol.bondFrom(n) - 1), t = nodes.indexOf(mol.bondTo(n) - 1);
                bfr[bsz] = f;
                bto[bsz] = t;
                bgrav[bsz] = gravity[f] + gravity[t];
                bidx[bsz] = n;
                g.addEdge(f, t);
                bsz++;
            }
        let seq = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.numberArray(0, bsz);
        seq[0] = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.idxMax(bgrav);
        let visited = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.booleanArray(false, bsz);
        visited[seq[0]] = true;
        for (let i = 1; i < bsz; i++) {
            let b = -1;
            for (let j = i - 1; j >= 0; j--) {
                for (let n = 0; n < bsz; n++) {
                    if (!visited[n])
                        if (bfr[n] == bfr[seq[j]] || bfr[n] == bto[seq[j]] || bto[n] == bfr[seq[j]] || bto[n] == bto[seq[j]]) {
                            if (b < 0 || bgrav[n] > bgrav[b])
                                b = n;
                        }
                }
                if (b >= 0)
                    break;
            }
            if (b < 0)
                throw 'Graph walk failed';
            seq[i] = b;
            visited[b] = true;
        }
        let paths = [];
        paths.push([true]);
        paths.push([false]);
        let result = null;
        let resultCount = 0;
        let definiteMatch = Math.ceil(0.5 * bsz);
        let iter = 0;
        while (paths.length > 0) {
            let p = paths[0];
            let p1 = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.append(p, false), p2 = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.append(p, true);
            if (!this.validPath(p1, seq, bfr, bto, g, optionalH))
                p1 = null;
            if (!this.validPath(p2, seq, bfr, bto, g, optionalH))
                p2 = null;
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.len(p1) == bsz) {
                let c = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.maskCount(p1);
                if (c > resultCount) {
                    result = p1;
                    resultCount = c;
                }
                p1 = null;
            }
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.len(p2) == bsz) {
                let c = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.maskCount(p2);
                if (c > resultCount) {
                    result = p2;
                    resultCount = c;
                }
                p2 = null;
            }
            if (resultCount >= definiteMatch)
                break;
            if (p1 == null && p2 == null)
                paths.shift();
            else if (p1 != null && p2 != null) {
                paths[0] = p1;
                paths.splice(1, 0, p2);
            }
            else if (p1 != null)
                paths[0] = p1;
            else
                paths[0] = p2;
            iter++;
            if (iter > this.maxIter) {
                if (result != null)
                    break;
                if (this.tolerant)
                    return;
                throw 'Resonance localisation exceeded maximum iteration count';
            }
        }
        if (result == null) {
            if (this.tolerant)
                return;
            throw 'Unable to find a solution to the resonance block.';
        }
        for (let n = 0; n < bsz; n++)
            bondOrders[bidx[seq[n]] - 1] = result[n] ? 2 : 1;
    }
    validPath(path, seq, bfr, bto, g, optionalH) {
        let sz = g.numNodes;
        let count1 = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.numberArray(0, sz), count2 = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.numberArray(0, sz);
        for (let n = 0; n < path.length; n++) {
            let a1 = bfr[seq[n]], a2 = bto[seq[n]];
            if (path[n]) {
                count2[a1]++;
                count2[a2]++;
            }
            else {
                count1[a1]++;
                count1[a2]++;
            }
        }
        for (let n = 0; n < sz; n++) {
            if (count2[n] > 1)
                return false;
            if (!optionalH[n] && g.numEdges(n) > 1 && count1[n] == g.numEdges(n))
                return false;
        }
        return true;
    }
}


/***/ }),

/***/ "./src/data/AbbrevContainer.ts":
/*!*************************************!*\
  !*** ./src/data/AbbrevContainer.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbbrevContainer: () => (/* binding */ AbbrevContainer)
/* harmony export */ });
/* harmony import */ var _calc_CircularFingerprints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../calc/CircularFingerprints */ "./src/calc/CircularFingerprints.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mol/CoordUtil */ "./src/mol/CoordUtil.ts");
/* harmony import */ var _io_DataSheetStream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../io/DataSheetStream */ "./src/io/DataSheetStream.ts");
/* harmony import */ var _mol_MetaMolecule__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mol/MetaMolecule */ "./src/mol/MetaMolecule.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _reswmk_data_templates_rings_ds__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @reswmk/data/templates/rings.ds */ "./res/data/templates/rings.ds");
/* harmony import */ var _reswmk_data_templates_termgrp_ds__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @reswmk/data/templates/termgrp.ds */ "./res/data/templates/termgrp.ds");
/* harmony import */ var _reswmk_data_templates_funcgrp_ds__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @reswmk/data/templates/funcgrp.ds */ "./res/data/templates/funcgrp.ds");
/* harmony import */ var _reswmk_data_templates_protgrp_ds__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @reswmk/data/templates/protgrp.ds */ "./res/data/templates/protgrp.ds");
/* harmony import */ var _reswmk_data_templates_nonplrings_ds__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @reswmk/data/templates/nonplrings.ds */ "./res/data/templates/nonplrings.ds");
/* harmony import */ var _reswmk_data_templates_largerings_ds__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @reswmk/data/templates/largerings.ds */ "./res/data/templates/largerings.ds");
/* harmony import */ var _reswmk_data_templates_crownethers_ds__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @reswmk/data/templates/crownethers.ds */ "./res/data/templates/crownethers.ds");
/* harmony import */ var _reswmk_data_templates_ligmonodent_ds__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @reswmk/data/templates/ligmonodent.ds */ "./res/data/templates/ligmonodent.ds");
/* harmony import */ var _reswmk_data_templates_ligbident_ds__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @reswmk/data/templates/ligbident.ds */ "./res/data/templates/ligbident.ds");
/* harmony import */ var _reswmk_data_templates_ligtrident_ds__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @reswmk/data/templates/ligtrident.ds */ "./res/data/templates/ligtrident.ds");
/* harmony import */ var _reswmk_data_templates_ligmultident_ds__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @reswmk/data/templates/ligmultident.ds */ "./res/data/templates/ligmultident.ds");
/* harmony import */ var _reswmk_data_templates_cagecmplx_ds__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @reswmk/data/templates/cagecmplx.ds */ "./res/data/templates/cagecmplx.ds");
/* harmony import */ var _reswmk_data_templates_aminoacids_ds__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @reswmk/data/templates/aminoacids.ds */ "./res/data/templates/aminoacids.ds");
/* harmony import */ var _reswmk_data_templates_biomolecules_ds__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @reswmk/data/templates/biomolecules.ds */ "./res/data/templates/biomolecules.ds");
/* harmony import */ var _reswmk_data_templates_saccharides_ds__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @reswmk/data/templates/saccharides.ds */ "./res/data/templates/saccharides.ds");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






















const TEMPLATE_SOURCE = {
    'rings': _reswmk_data_templates_rings_ds__WEBPACK_IMPORTED_MODULE_7__["default"],
    'termgrp': _reswmk_data_templates_termgrp_ds__WEBPACK_IMPORTED_MODULE_8__["default"],
    'funcgrp': _reswmk_data_templates_funcgrp_ds__WEBPACK_IMPORTED_MODULE_9__["default"],
    'protgrp': _reswmk_data_templates_protgrp_ds__WEBPACK_IMPORTED_MODULE_10__["default"],
    'nonplrings': _reswmk_data_templates_nonplrings_ds__WEBPACK_IMPORTED_MODULE_11__["default"],
    'largerings': _reswmk_data_templates_largerings_ds__WEBPACK_IMPORTED_MODULE_12__["default"],
    'crownethers': _reswmk_data_templates_crownethers_ds__WEBPACK_IMPORTED_MODULE_13__["default"],
    'ligmonodent': _reswmk_data_templates_ligmonodent_ds__WEBPACK_IMPORTED_MODULE_14__["default"],
    'ligbident': _reswmk_data_templates_ligbident_ds__WEBPACK_IMPORTED_MODULE_15__["default"],
    'ligtrident': _reswmk_data_templates_ligtrident_ds__WEBPACK_IMPORTED_MODULE_16__["default"],
    'ligmultident': _reswmk_data_templates_ligmultident_ds__WEBPACK_IMPORTED_MODULE_17__["default"],
    'cagecmplx': _reswmk_data_templates_cagecmplx_ds__WEBPACK_IMPORTED_MODULE_18__["default"],
    'aminoacids': _reswmk_data_templates_aminoacids_ds__WEBPACK_IMPORTED_MODULE_19__["default"],
    'biomolecules': _reswmk_data_templates_biomolecules_ds__WEBPACK_IMPORTED_MODULE_20__["default"],
    'saccharides': _reswmk_data_templates_saccharides_ds__WEBPACK_IMPORTED_MODULE_21__["default"],
};
class AbbrevContainer {
    constructor() {
        this.abbrevs = [];
    }
    static getTemplateKeys() { return Object.keys(TEMPLATE_SOURCE); }
    static getTemplateData(key) { return TEMPLATE_SOURCE[key]; }
    static needsSetup() { return !this.main; }
    static setupData() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.main)
                return;
            this.main = new AbbrevContainer();
            for (let key of this.getTemplateKeys()) {
                let dsstr = this.getTemplateData(key);
                let ds = _io_DataSheetStream__WEBPACK_IMPORTED_MODULE_4__.DataSheetStream.readXML(dsstr);
                let colMol = ds.firstColOfType("molecule"), colAbbrev = ds.findColByName('Abbrev', "string");
                if (colMol < 0 || colAbbrev < 0)
                    continue;
                for (let n = 0; n < ds.numRows; n++) {
                    let frag = ds.getMoleculeClone(n, colMol), name = ds.getString(n, colAbbrev);
                    if (!frag || !name)
                        continue;
                    let attcount = 0, firstConn = 0;
                    for (let i = 1; i <= frag.numAtoms; i++)
                        if (frag.atomElement(i) == _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.TEMPLATE_ATTACHMENT) {
                            if (firstConn == 0)
                                firstConn = i;
                            frag.setAtomElement(i, _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.ABBREV_ATTACHMENT);
                            attcount++;
                        }
                    if (attcount != 1)
                        continue;
                    if (firstConn > 1)
                        frag.swapAtoms(1, firstConn);
                    this.main.submitAbbreviation(name, frag);
                }
            }
        });
    }
    getAbbrevs() {
        return this.abbrevs.slice(0);
    }
    submitAbbreviation(name, infrag, promote = false) {
        let frag = infrag.clone();
        this.submitFragment(name, frag, promote);
    }
    submitMolecule(inmol, promote = false) {
        let mol = inmol.clone();
        for (let n = 1; n <= mol.numAtoms; n++) {
            let frag = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.getAbbrev(mol, n);
            if (!frag)
                continue;
            this.submitFragment(mol.atomElement(n), frag, promote);
        }
    }
    substituteAbbrevName(mol, atom) {
        let frag = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.getAbbrev(mol, atom);
        if (!frag)
            return false;
        let fragExp = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.expandedAbbrevs(frag);
        let fragMF = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.molecularFormula(fragExp);
        let fragFP = _calc_CircularFingerprints__WEBPACK_IMPORTED_MODULE_0__.CircularFingerprints.create(_mol_MetaMolecule__WEBPACK_IMPORTED_MODULE_5__.MetaMolecule.createStrictRubric(fragExp), _calc_CircularFingerprints__WEBPACK_IMPORTED_MODULE_0__.CircularFingerprints.CLASS_ECFP6).getUniqueHashes();
        for (let abbrev of this.abbrevs)
            if (abbrev.frag.numAtoms == frag.numAtoms) {
                let match = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.sketchEquivalent(frag, abbrev.frag);
                if (!match) {
                    let afragExp = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.expandedAbbrevs(abbrev.frag);
                    if (fragMF == _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.molecularFormula(afragExp)) {
                        let afragFP = _calc_CircularFingerprints__WEBPACK_IMPORTED_MODULE_0__.CircularFingerprints.create(_mol_MetaMolecule__WEBPACK_IMPORTED_MODULE_5__.MetaMolecule.createStrictRubric(afragExp), _calc_CircularFingerprints__WEBPACK_IMPORTED_MODULE_0__.CircularFingerprints.CLASS_ECFP6).getUniqueHashes();
                        if (_util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.equals(fragFP, afragFP))
                            match = true;
                    }
                }
                if (match) {
                    mol.setAtomElement(atom, abbrev.name);
                    return true;
                }
            }
        return false;
    }
    submitFragment(name, frag, promote) {
        if (name == '?')
            return;
        let vx = 0, vy = 0;
        let adj = frag.atomAdjList(1);
        for (let a of adj) {
            vx += frag.atomX(a) - frag.atomX(1);
            vy += frag.atomY(a) - frag.atomY(1);
        }
        if (adj.length > 1) {
            let inv = 1.0 / adj.length;
            vx *= inv;
            vy *= inv;
        }
        if ((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.norm_xy)(vx, vy) > 0.1 * 0.1) {
            let theta = Math.atan2(vy, vx);
            if (Math.abs(theta) > 2 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD)
                _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.rotateMolecule(frag, -theta);
        }
        let hit = -1;
        for (let n = 0; n < this.abbrevs.length; n++) {
            let a = this.abbrevs[n];
            if (a.name != name)
                continue;
            hit = n;
            break;
        }
        let [html, search] = this.formatAbbrevLabel(name);
        let abv = { name, frag, nameHTML: html, nameSearch: search };
        if (hit < 0) {
            if (promote)
                this.abbrevs.unshift(abv);
            else
                this.abbrevs.push(abv);
        }
        else {
            if (promote && hit > 0) {
                this.abbrevs.splice(hit, 1);
                this.abbrevs.unshift(abv);
            }
            else
                this.abbrevs[hit] = abv;
        }
    }
    formatAbbrevLabel(name) {
        let html = '', search = '';
        let append = (bit, tag) => {
            if (tag)
                html += '<' + tag + '>';
            html += (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.escapeHTML)(bit);
            search += bit;
            if (tag)
                html += '</' + tag + '>';
        };
        for (let bit of name.split('|')) {
            while (true) {
                let match = bit.match(/^(.*?)\{(.*?)\}(.*)$/);
                if (!match)
                    break;
                let pre = match[1], mid = match[2], post = match[3];
                append(pre, null);
                if (mid.startsWith('^'))
                    append(mid.substring(1), 'sup');
                else
                    append(mid, 'sub');
                bit = post;
            }
            append(bit, null);
        }
        return [html, search.toLowerCase()];
    }
}
AbbrevContainer.main = null;


/***/ }),

/***/ "./src/data/FormatList.ts":
/*!********************************!*\
  !*** ./src/data/FormatList.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FormatList: () => (/* binding */ FormatList)
/* harmony export */ });
class FormatList {
}
FormatList.FMT_NATIVE = 'native';
FormatList.FMT_XMLDS = 'xmlds';
FormatList.FMT_MDLMOL = 'mdlmol';
FormatList.FMT_MDLSDF = 'mdlsdf';
FormatList.FMT_MDLRDF = 'mdlrdf';
FormatList.FMT_MDLRXN = 'mdlrxn';
FormatList.GFX_PNG = 'png';
FormatList.GFX_PNGZIP = 'pngzip';
FormatList.GFX_SVG = 'svg';
FormatList.GFX_SVGZIP = 'svgzip';
FormatList.GFX_PDF = 'pdf';
FormatList.GFX_PDFZIP = 'pdfzip';
FormatList.GFX_EPS = 'eps';
FormatList.GFX_HTML = 'html';
FormatList.GFX_OPENDOC_ODG = 'odg';
FormatList.GFX_OPENDOC_ODT = 'odt';
FormatList.GFX_OPENDOC_ODS = 'ods';
FormatList.GFX_OOXML_DOCX = 'docx';
FormatList.GFX_OOXML_XLSX = 'xlsx';
FormatList.FORMAT_DESCR = {
    'native': 'SketchEl Molecule',
    'xmlds': 'DataSheet XML',
    'mdlmol': 'MDL MOL (single molecule)',
    'mdlsdf': 'MDL SDF (molecules + data)',
    'mdlrdf': 'MDL RDF (reactions + data)',
    'mdlrxn': 'MDL RXN (single reaction)',
    'png': 'PNG image (raster)',
    'pngzip': 'ZIP (multiple PNG files)',
    'svg': 'SVG picture (vector)',
    'svgzip': 'ZIP (multiple SVG files)',
    'pdf': 'PDF diagram (vector)',
    'pdfzip': 'ZIP (multiple PDF files)',
    'eps': 'Encapsulated PostScript (vector)',
    'html': 'HTML with embedded SVG',
    'odg': 'OpenDocument Graphic',
    'odt': 'OpenDocument Text',
    'ods': 'OpenDocument SpreadSheet',
    'docx': 'Microsoft Word',
    'xlsx': 'Microsoft Excel'
};
FormatList.FORMAT_EXTN = {
    'native': '.el',
    'xmlds': '.ds',
    'mdlmol': '.mol',
    'mdlsdf': '.sdf',
    'mdlrdf': '.rdf',
    'mdlrxn': '.rxn',
    'png': '.png',
    'pngzip': '_png.zip',
    'svg': '.svg',
    'svgzip': '_svg.zip',
    'pdf': '.pdf',
    'pdfzip': '_pdf.zip',
    'eps': '.eps',
    'html': '.html',
    'odg': '.odg',
    'odt': '.odt',
    'ods': '.ods',
    'docx': '.docx',
    'xlsx': '.xlsx'
};
FormatList.FORMAT_MIMETYPE = {
    'native': 'chemical/x-sketchel',
    'xmlds': 'chemical/x-datasheet',
    'mdlmol': 'chemical/x-mdl-molfile',
    'mdlsdf': 'chemical/x-mdl-sdfile',
    'mdlrdf': 'chemical/x-mdl-rdfile',
    'mdlrxn': 'chemical/x-mdl-rxnfile',
    'png': 'image/png',
    'pngzip': 'application/zip',
    'svg': 'image/png',
    'svgzip': 'application/zip',
    'pdf': 'application/pdf',
    'pdfzip': 'application/zip',
    'eps': 'image/eps',
    'html': 'text/html',
    'odg': 'application/vnd.oasis.opendocument.graphics',
    'odt': 'application/vnd.oasis.opendocument.text',
    'ods': 'application/vnd.oasis.opendocument.spreadsheet',
    'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
};


/***/ }),

/***/ "./src/data/OntologyTree.ts":
/*!**********************************!*\
  !*** ./src/data/OntologyTree.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OntologyTree: () => (/* binding */ OntologyTree)
/* harmony export */ });
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _reswmk_data_ontology_units_onto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @reswmk/data/ontology/units.onto */ "./res/data/ontology/units.onto");

let globalInstance = null;

const ONTOLOGY_SOURCE = {
    'units': _reswmk_data_ontology_units_onto__WEBPACK_IMPORTED_MODULE_1__["default"],
};
class OntologyTree {
    static get main() { return globalInstance; }
    static getOntologyKeys() { return Object.keys(ONTOLOGY_SOURCE); }
    static getOntologyData(key) { return ONTOLOGY_SOURCE[key]; }
    constructor() {
        this.roots = [];
        this.mapTerms = new Map();
        this.alreadyLoaded = new Set();
    }
    static init() {
        if (globalInstance)
            return;
        globalInstance = new OntologyTree();
        for (let key of this.getOntologyKeys()) {
            globalInstance.loadFromString(key, this.getOntologyData(key));
        }
    }
    getRoots() {
        return this.roots;
    }
    hasTerm(uri) { return this.mapTerms.has(uri); }
    getBranch(uri) {
        return this.mapTerms.get(uri);
    }
    getBranchList(root) {
        if (typeof root == 'string') {
            let look = this.mapTerms.get(root);
            if (!look)
                throw `Unknown branch URI: ${root}`;
            if (look.length > 1)
                throw `Ambiguous branch URI occurs more than once: ${root}`;
            root = look[0];
        }
        let list = [];
        let accumulate = (branch) => {
            list.push(branch);
            for (let child of _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.safeArray(branch.children))
                accumulate(child);
        };
        accumulate(root);
        return list;
    }
    loadFromString(key, text) {
        if (this.alreadyLoaded.has(key))
            return;
        this.alreadyLoaded.add(key);
        this.loadContent(text);
    }
    loadContent(text) {
        let termList = [];
        let pos = 0;
        for (let line of text.split(/\n/)) {
            pos++;
            line = line.trim();
            if (!line || line.startsWith('#'))
                continue;
            let idx = line.indexOf('http');
            if (idx < 0)
                throw `Line ${pos} invalid, no URI term: ${line}`;
            let depth = 0;
            for (let n = 0; n < idx; n++)
                if (line.charAt(n) == '-')
                    depth++;
            let uri = line.substring(idx);
            idx = uri.indexOf(' ');
            if (idx < 0)
                throw `Line ${pos} invalid, no label: ${line}`;
            let label = uri.substring(idx + 1);
            uri = uri.substring(0, idx);
            let term = null;
            if (depth == 0)
                term = this.roots.find((look) => look.uri == uri);
            if (!term) {
                term = { uri, label, 'parent': null, 'children': [], depth };
                if (depth == 0)
                    this.roots.push(term);
                else {
                    for (let n = termList.length - 1; n >= 0; n--)
                        if (termList[n].depth == depth - 1) {
                            term.parent = termList[n];
                            termList[n].children.push(term);
                            break;
                        }
                    if (!term.parent)
                        throw `Line ${pos} invalid hierarchy, no parent found`;
                }
                let list = this.mapTerms.get(uri);
                if (list)
                    list.push(term);
                else
                    this.mapTerms.set(uri, [term]);
            }
            termList.push(term);
        }
    }
    debugString(term) {
        let lines = [];
        let emit = (term) => {
            lines.push('* '.repeat(term.depth) + `<${term.uri}> "${term.label}"`);
            for (let child of term.children)
                emit(child);
        };
        emit(term);
        return lines.join('\n');
    }
}


/***/ }),

/***/ "./src/dialog/Dialog.ts":
/*!******************************!*\
  !*** ./src/dialog/Dialog.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Dialog: () => (/* binding */ Dialog)
/* harmony export */ });
/* harmony import */ var _ui_Tooltip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ui/Tooltip */ "./src/ui/Tooltip.ts");
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _util_Theme__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Theme */ "./src/util/Theme.ts");



const CSS_DIALOG = `
    *.wmk-dialog
    {
        font-family: 'Open Sans', sans-serif;
		font-size: 16px;
		color: black;
		user-select: none;
    }
	*.wmk-noscroll
	{
		overflow: hidden;
	}
`;
class Dialog {
    constructor(parent = null) {
        this.minPortionWidth = 80;
        this.maxPortionWidth = 80;
        this.maximumWidth = 0;
        this.maximumHeight = 0;
        this.minPortionHeight = 20;
        this.maxPortionHeight = 0;
        this.topMargin = 50;
        this.title = 'Dialog';
        this.allowScroller = true;
        this.zindex = null;
        this.callbackClose = null;
        this.callbackShown = null;
        this.parent = (0,_util_dom__WEBPACK_IMPORTED_MODULE_1__.domLegacy)(parent);
        (0,_util_Theme__WEBPACK_IMPORTED_MODULE_2__.installInlineCSS)('dialog', CSS_DIALOG);
    }
    onClose(callback) {
        this.callbackClose = callback;
    }
    onShown(callback) {
        this.callbackShown = callback;
    }
    open() {
        (0,_ui_Tooltip__WEBPACK_IMPORTED_MODULE_0__.clearTooltip)();
        let body = this.parent || (0,_util_dom__WEBPACK_IMPORTED_MODULE_1__.dom)(document.body);
        body.addClass('wmk-noscroll');
        let bg = this.domObscureBackground = (0,_util_dom__WEBPACK_IMPORTED_MODULE_1__.dom)('<div/>').appendTo(body);
        bg.css({ 'position': 'fixed' });
        bg.css({ 'left': '0', 'right': '0', 'top': '0', 'bottom': '0' });
        bg.css({ 'background-color': 'black', 'opacity': 0.8 });
        bg.onClick(() => this.close());
        let fg = this.domObscureForeground = (0,_util_dom__WEBPACK_IMPORTED_MODULE_1__.dom)('<div/>').appendTo(body);
        fg.css({ 'position': 'fixed' });
        fg.css({ 'left': '0', 'right': '0', 'top': '0', 'bottom': '0' });
        if (this.zindex > 0) {
            bg.setCSS('z-index', this.zindex);
            fg.setCSS('z-index', this.zindex + 1);
        }
        let pb = this.domPanelBoundary = (0,_util_dom__WEBPACK_IMPORTED_MODULE_1__.dom)('<div class="wmk-dialog"/>').appendTo(fg);
        pb.css({ 'min-width': this.minPortionWidth + '%' });
        if (this.maximumWidth > 0)
            pb.css({ 'max-width': this.maximumWidth + 'px' });
        else if (this.maxPortionWidth != null)
            pb.css({ 'max-width': this.maxPortionWidth + '%' });
        if (this.maximumHeight > 0)
            pb.css({ 'max-height': this.maximumHeight + 'px' });
        else if (this.maxPortionHeight > 0)
            pb.css({ 'max-height': this.maxPortionHeight + 'vh' });
        pb.css({ 'background-color': 'white', 'border-radius': '6px', 'border': '1px solid black' });
        pb.css({ 'position': 'absolute' });
        pb.css({ 'left': (50 - 0.5 * this.minPortionWidth) + '%' });
        pb.css({ 'top': this.topMargin + 'px' });
        pb.css({ 'min-height': this.minPortionHeight + '%' });
        let divOuter = (0,_util_dom__WEBPACK_IMPORTED_MODULE_1__.dom)('<div/>').appendTo(pb).css({ 'display': 'flex' });
        divOuter.css({ 'flex-direction': 'column', 'align-items': 'stretch' });
        if (this.maximumHeight > 0)
            divOuter.css({ 'max-height': this.maximumHeight + 'px' });
        else if (this.maxPortionHeight > 0)
            divOuter.css({ 'max-height': this.maxPortionHeight + 'vh' });
        let tdiv = this.domTitle = (0,_util_dom__WEBPACK_IMPORTED_MODULE_1__.dom)('<div/>').appendTo(divOuter);
        tdiv.css({ 'flex-shrink': '0', 'flex-grow': '0' });
        tdiv.css({ 'margin': '0', 'padding': '0' });
        tdiv.css({ 'background-color': '#F0F0F0' });
        tdiv.css({ 'background-image': 'linear-gradient(to right bottom, #FFFFFF, #E0E0E0)' });
        tdiv.css({ 'border-bottom': '1px solid #C0C0C0' });
        tdiv.css({ 'border-radius': '6px 6px 0 0' });
        let bdiv = (0,_util_dom__WEBPACK_IMPORTED_MODULE_1__.dom)('<div/>').appendTo(divOuter).css({ 'width': '100%' });
        bdiv.css({ 'flex-shrink': '1', 'flex-grow': '0' });
        if (this.allowScroller)
            bdiv.css({ 'overflow-y': 'auto' });
        this.domBody = (0,_util_dom__WEBPACK_IMPORTED_MODULE_1__.dom)('<div/>').appendTo(bdiv).css({ 'padding': '0.5em' });
        let ttlTable = (0,_util_dom__WEBPACK_IMPORTED_MODULE_1__.dom)('<table/>').appendTo(tdiv), tr = (0,_util_dom__WEBPACK_IMPORTED_MODULE_1__.dom)('<tr/>').appendTo(ttlTable);
        ttlTable.attr({ 'width': '100%' });
        let tdTitle = (0,_util_dom__WEBPACK_IMPORTED_MODULE_1__.dom)('<td valign="center"/>').appendTo(tr).css({ 'padding': '0.5em' });
        let ttl = (0,_util_dom__WEBPACK_IMPORTED_MODULE_1__.dom)('<font/>').appendTo(tdTitle).css({ 'font-size': '1.5em', 'font-weight': '600' });
        ttl.setText(this.title);
        let tdButtons = this.domTitleButtons = (0,_util_dom__WEBPACK_IMPORTED_MODULE_1__.dom)('<td align="right" valign="center"/>').appendTo(tr).css({ 'padding': '0.5em' });
        this.domClose = (0,_util_dom__WEBPACK_IMPORTED_MODULE_1__.dom)('<button class="wmk-button wmk-button-default">Close</button>').appendTo(tdButtons);
        this.domClose.onClick(() => this.close());
        this.populate();
        this.repositionSize();
        if (this.callbackShown)
            this.callbackShown(this);
    }
    close() {
        (0,_ui_Tooltip__WEBPACK_IMPORTED_MODULE_0__.clearTooltip)();
        this.domObscureBackground.remove();
        this.domObscureForeground.remove();
        let body = this.parent || (0,_util_dom__WEBPACK_IMPORTED_MODULE_1__.dom)(document.body);
        body.removeClass('wmk-noscroll');
        if (this.callbackClose)
            this.callbackClose(this);
    }
    bump() {
        this.repositionSize();
    }
    bodyDOM() { return this.domBody; }
    buttonsDOM() { return this.domTitleButtons; }
    populate() {
        this.bodyDOM().setText('Empty dialog box.');
    }
    repositionSize() {
        let docW = window.innerWidth, dlgW = this.domPanelBoundary.width();
        this.domPanelBoundary.css({ 'left': (0.5 * (docW - dlgW)) + 'px' });
    }
}


/***/ }),

/***/ "./src/dialog/EditCompound.ts":
/*!************************************!*\
  !*** ./src/dialog/EditCompound.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EditCompound: () => (/* binding */ EditCompound)
/* harmony export */ });
/* harmony import */ var _sketcher_Sketcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sketcher/Sketcher */ "./src/sketcher/Sketcher.ts");
/* harmony import */ var _ui_ClipboardProxy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ui/ClipboardProxy */ "./src/ui/ClipboardProxy.ts");
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _Dialog__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Dialog */ "./src/dialog/Dialog.ts");




class EditCompound extends _Dialog__WEBPACK_IMPORTED_MODULE_3__.Dialog {
    constructor(mol, parent = null) {
        super(parent);
        this.mol = mol;
        this.sketcher = new _sketcher_Sketcher__WEBPACK_IMPORTED_MODULE_0__.Sketcher();
        this.proxyClip = null;
        this.proxyMenu = null;
        this.callbackSave = null;
        this.title = 'Edit Compound';
        this.minPortionWidth = 20;
        this.maxPortionWidth = 95;
    }
    onSave(callback) {
        this.callbackSave = callback;
    }
    getMolecule() { return this.sketcher.getMolecule(); }
    getSketcher() { return this.sketcher; }
    defineClipboard(proxy) {
        this.proxyClip = proxy;
        let handler = new _ui_ClipboardProxy__WEBPACK_IMPORTED_MODULE_1__.ClipboardProxyHandler();
        handler.copyEvent = (andCut, proxy) => {
            this.sketcher.performCopySelection(andCut);
            return true;
        };
        handler.pasteEvent = (proxy) => {
            this.sketcher.pasteText(proxy.getString());
            return true;
        };
        proxy.pushHandler(handler);
        this.sketcher.defineClipboard(proxy);
    }
    defineContext(proxy) {
        this.proxyMenu = proxy;
        this.sketcher.defineContext(this.proxyMenu);
    }
    close() {
        if (this.proxyClip)
            this.proxyClip.popHandler();
        super.close();
    }
    populate() {
        let buttons = this.buttonsDOM(), body = this.bodyDOM();
        this.btnClear = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<button class="wmk-button wmk-button-default">Clear</button>').appendTo(buttons).css({ 'margin-left': '0.5em' });
        this.btnClear.onClick(() => this.sketcher.clearMolecule());
        this.btnCopy = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<button class="wmk-button wmk-button-default">Copy</button>').appendTo(buttons).css({ 'margin-left': '0.5em' });
        this.btnCopy.onClick(() => this.actionCopy());
        buttons.append(this.domClose);
        this.domClose.css({ 'margin-left': '0.5em' });
        this.btnSave = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<button class="wmk-button wmk-button-primary">Save</button>').appendTo(buttons).css({ 'margin-left': '0.5em' });
        this.btnSave.onClick(() => { if (this.callbackSave)
            this.callbackSave(this); });
        let skw = 800, skh = 650;
        let skdiv = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<div/>').appendTo(body).css({ 'width': `${skw}px`, 'height': `${skh}px` });
        this.sketcher.setSize(skw, skh);
        this.sketcher.defineMolecule(this.mol);
        this.sketcher.setup(() => this.sketcher.render(skdiv));
    }
    actionCopy() {
        this.sketcher.performCopySelection(false);
    }
    actionCut() {
        this.sketcher.performCopySelection(true);
    }
    actionPaste() {
        this.sketcher.performPaste();
    }
    actionUndo() {
        this.sketcher.performUndo();
    }
    actionRedo() {
        this.sketcher.performRedo();
    }
}


/***/ }),

/***/ "./src/ds/DataSheet.ts":
/*!*****************************!*\
  !*** ./src/ds/DataSheet.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataSheet: () => (/* binding */ DataSheet),
/* harmony export */   DataSheetColumn: () => (/* binding */ DataSheetColumn)
/* harmony export */ });
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");



var DataSheetColumn;
(function (DataSheetColumn) {
    DataSheetColumn["Molecule"] = "molecule";
    DataSheetColumn["String"] = "string";
    DataSheetColumn["Real"] = "real";
    DataSheetColumn["Integer"] = "integer";
    DataSheetColumn["Boolean"] = "boolean";
    DataSheetColumn["Extend"] = "extend";
})(DataSheetColumn || (DataSheetColumn = {}));
class DataSheet {
    constructor(data) {
        if (!data)
            data = {};
        if (!data.title)
            data.title = '';
        if (!data.description)
            data.description = '';
        if (data.numCols == null)
            data.numCols = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.len(data.colData);
        if (data.numRows == null)
            data.numRows = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.len(data.rowData);
        if (data.numExtens == null)
            data.numExtens = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.len(data.extData);
        if (data.colData == null)
            data.colData = [];
        if (data.rowData == null)
            data.rowData = [];
        if (data.extData == null)
            data.extData = [];
        this.data = data;
    }
    clone(withRows = true) {
        let { numCols, numRows, colData, rowData } = this.data;
        let data = {
            title: this.data.title,
            description: this.data.description,
            numCols: numCols,
            numRows: withRows ? numRows : 0,
            numExtens: this.data.numExtens,
            colData: (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.deepClone)(colData),
            rowData: withRows ? new Array(numRows) : [],
            extData: (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.deepClone)(this.data.extData),
        };
        if (withRows)
            for (let r = 0; r < numRows; r++) {
                let inRow = rowData[r], outRow = new Array(numCols);
                for (let c = 0; c < numCols; c++) {
                    if (inRow[c] != null && colData[c].type == "molecule" && inRow[c] instanceof _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule)
                        outRow[c] = inRow[c].clone();
                    else
                        outRow[c] = inRow[c];
                }
                data.rowData[r] = outRow;
            }
        return new DataSheet(data);
    }
    cloneMask(colMask, rowMask = null, inclExtn = true) {
        let { numCols, numRows, colData, rowData } = this.data;
        let data = {
            title: this.data.title,
            description: this.data.description,
            numCols: _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.maskCount(colMask),
            numRows: rowMask ? _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.maskCount(rowMask) : 0,
            numExtens: inclExtn ? this.data.numExtens : 0,
            colData: (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.deepClone)(_util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.maskGet(colData, colMask)),
            rowData: [],
            extData: inclExtn ? (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.deepClone)(this.data.extData) : [],
        };
        if (rowMask)
            for (let r = 0; r < numRows; r++)
                if (rowMask[r]) {
                    let inRow = rowData[r], outRow = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.maskGet(inRow, colMask);
                    data.rowData.push(outRow);
                }
        const { colData: outCols, rowData: outRows } = data;
        for (let c = outCols.length - 1; c >= 0; c--)
            if (outCols[c].type == "molecule") {
                for (let r = outRows.length - 1; r >= 0; r--)
                    if (outRows[r][c] != null && outRows[r][c] instanceof _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule)
                        outRows[r][c] = outRows[r][c].clone();
            }
        return new DataSheet(data);
    }
    getData() {
        return this.data;
    }
    get numCols() {
        return this.data.numCols;
    }
    get numRows() {
        return this.data.numRows;
    }
    get title() { return this.data.title; }
    set title(title) { this.data.title = title; }
    get description() { return this.data.description; }
    set description(description) { this.data.description = description; }
    get numExtensions() {
        return this.data.numExtens;
    }
    getExtName(idx) {
        return this.data.extData[idx].name;
    }
    getExtType(idx) {
        return this.data.extData[idx].type;
    }
    getExtData(idx) {
        return this.data.extData[idx].data;
    }
    setExtName(idx, val) {
        this.data.extData[idx].name = val;
    }
    setExtType(idx, val) {
        this.data.extData[idx].type = val;
    }
    setExtData(idx, val) {
        this.data.extData[idx].data = val;
    }
    appendExtension(name, type, data) {
        this.data.numExtens++;
        this.data.extData.push({ name, type, data });
        return this.data.numExtens - 1;
    }
    insertExtension(idx, name, type, data) {
        this.data.numExtens++;
        this.data.extData.splice(idx, 0, { name, type, data });
    }
    deleteExtension(idx) {
        this.data.extData.splice(idx, 1);
        this.data.numExtens--;
    }
    colName(col) {
        return this.data.colData[col].name;
    }
    colType(col) {
        return this.data.colData[col].type;
    }
    colDescr(col) {
        return this.data.colData[col].descr;
    }
    isNull(row, col) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (col < 0)
            return null;
        return this.data.rowData[row][col] == null;
    }
    notNull(row, col) {
        return !this.isNull(row, col);
    }
    isBlank(row, col) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (this.isNull(row, col))
            return true;
        let ct = this.colType(col);
        if (ct == "molecule")
            return this.getMolecule(row, col).numAtoms == 0;
        if (ct == "string")
            return this.getString(row, col).length == 0;
        if (ct == "extend")
            return this.getExtend(row, col).length == 0;
        return false;
    }
    notBlank(row, col) {
        return !this.isBlank(row, col);
    }
    getObject(row, col) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        return this.data.rowData[row][col];
    }
    getMolecule(row, col) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (col < 0)
            return null;
        let datum = this.data.rowData[row][col];
        if (datum == null)
            return null;
        if (typeof datum === 'string') {
            datum = _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.fromString(datum);
            this.data.rowData[row][col] = datum;
        }
        return datum;
    }
    getMoleculeClone(row, col) {
        let mol = this.getMolecule(row, col);
        return mol == null ? null : mol.clone();
    }
    getMoleculeBlank(row, col) {
        let mol = this.getMolecule(row, col);
        return mol ? mol : new _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule();
    }
    getString(row, col) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (col < 0)
            return null;
        let str = this.data.rowData[row][col];
        return str == null ? '' : str;
    }
    getInteger(row, col) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (col < 0)
            return null;
        return this.data.rowData[row][col];
    }
    getReal(row, col) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (col < 0)
            return null;
        return this.data.rowData[row][col];
    }
    getBoolean(row, col) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (col < 0)
            return null;
        return this.data.rowData[row][col];
    }
    getExtend(row, col) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (col < 0)
            return null;
        return this.data.rowData[row][col];
    }
    setToNull(row, col) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (col < 0)
            return;
        this.data.rowData[row][col] = null;
    }
    setObject(row, col, val) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (col < 0)
            return;
        this.data.rowData[row][col] = val;
    }
    setMolecule(row, col, mol) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (col < 0)
            return;
        this.data.rowData[row][col] = mol ? mol.clone() : null;
    }
    setString(row, col, val) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (col < 0)
            return;
        this.data.rowData[row][col] = val;
    }
    setInteger(row, col, val) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (col < 0)
            return;
        this.data.rowData[row][col] = val;
    }
    setReal(row, col, val) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (col < 0)
            return;
        this.data.rowData[row][col] = val;
    }
    setBoolean(row, col, val) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (col < 0)
            return;
        this.data.rowData[row][col] = val;
    }
    setExtend(row, col, val) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (col < 0)
            return;
        this.data.rowData[row][col] = val;
    }
    isEqualMolecule(row, col, mol) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (this.isNull(row, col) != (mol == null))
            return false;
        if (mol == null)
            return true;
        return this.getMolecule(row, col).compareTo(mol) == 0;
    }
    isEqualString(row, col, val) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (this.isNull(row, col) != (val == null || val == ''))
            return false;
        if (val == null || val == '')
            return true;
        return this.getString(row, col) == val;
    }
    isEqualInteger(row, col, val) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (this.isNull(row, col) != (val == null))
            return false;
        if (val == null)
            return true;
        return this.getInteger(row, col) == val;
    }
    isEqualReal(row, col, val) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (this.isNull(row, col) != (val == null))
            return false;
        if (val == null)
            return true;
        return this.getReal(row, col) == val;
    }
    isEqualBoolean(row, col, val) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        if (this.isNull(row, col) != (val == null))
            return false;
        if (val == null)
            return true;
        return this.getBoolean(row, col) == val;
    }
    appendColumn(name, type, descr) {
        this.data.numCols++;
        this.data.colData.push({ name, type, descr });
        for (let n = 0; n < this.data.numRows; n++)
            this.data.rowData[n].push(null);
        return this.data.numCols - 1;
    }
    insertColumn(col, name, type, descr) {
        this.data.numCols++;
        this.data.colData.splice(col, 0, { name, type, descr });
        for (let n = 0; n < this.data.numRows; n++)
            this.data.rowData[n].splice(col, 0, null);
    }
    deleteColumn(col) {
        this.data.numCols--;
        this.data.colData.splice(col, 1);
        for (let n = 0; n < this.data.numRows; n++)
            this.data.rowData[n].splice(col, 1);
    }
    changeColumnName(col, name, descr) {
        this.data.colData[col].name = name;
        this.data.colData[col].descr = descr;
    }
    changeColumnType(col, newType) {
        let oldType = this.colType(col);
        if (oldType == newType)
            return;
        let incompatible = oldType == "molecule" || newType == "molecule" ||
            oldType == "extend" || newType == "extend";
        for (let n = this.data.rowData.length - 1; n >= 0; n--) {
            let row = this.data.rowData[n];
            if (row[col] == null)
                continue;
            if (incompatible) {
                row[col] = null;
                continue;
            }
            let val = '';
            if (oldType == "string")
                val = row[col];
            else if (oldType == "integer")
                val = row[col].toString();
            else if (oldType == "real")
                val = row[col].toString();
            else if (oldType == "boolean")
                val = row[col] ? 'true' : 'false';
            row[col] = null;
            if (newType == "string")
                row[col] = val;
            else if (newType == "integer") {
                let num = parseInt(val);
                row[col] = isFinite(num) ? num : null;
            }
            else if (newType == "real") {
                let num = parseFloat(val);
                row[col] = isFinite(num) ? num : null;
            }
            else if (newType == "boolean")
                row[col] = val.toLowerCase() == 'true' ? true : false;
        }
        this.data.colData[col].type = newType;
    }
    ensureColumn(name, type, descr) {
        for (let n = 0; n < this.data.numCols; n++)
            if (this.data.colData[n].name == name) {
                if (this.data.colData[n].type != type)
                    this.changeColumnType(n, type);
                this.data.colData[n].descr = descr;
                return n;
            }
        return this.appendColumn(name, type, descr);
    }
    reorderColumns(order) {
        let identity = true;
        for (let n = 0; n < order.length - 1; n++)
            if (order[n] != order[n + 1] - 1) {
                identity = false;
                break;
            }
        if (identity)
            return;
        this.data.colData = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.idxGet(this.data.colData, order);
        for (let n = 0; n < this.data.numRows; n++)
            this.data.rowData[n] = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.idxGet(this.data.rowData[n], order);
    }
    appendRow() {
        this.data.numRows++;
        let row = new Array();
        for (let n = 0; n < this.data.numCols; n++)
            row.push(null);
        this.data.rowData.push(row);
        return this.data.numRows - 1;
    }
    appendRowFrom(srcDS, row) {
        this.data.numRows++;
        this.data.rowData.push(srcDS.data.rowData[row].slice(0));
        return this.data.numRows - 1;
    }
    insertRow(row) {
        this.data.numRows++;
        let data = new Array();
        for (let n = 0; n < this.data.numCols; n++)
            data.push(null);
        this.data.rowData.splice(row, 0, data);
    }
    deleteRow(row) {
        this.data.numRows--;
        this.data.rowData.splice(row, 1);
    }
    deleteAllRows() {
        this.data.numRows = 0;
        this.data.rowData = new Array();
    }
    moveRowUp(row) {
        let data = this.data.rowData[row];
        this.data.rowData[row] = this.data.rowData[row - 1];
        this.data.rowData[row - 1] = data;
    }
    moveRowDown(row) {
        let data = this.data.rowData[row];
        this.data.rowData[row] = this.data.rowData[row + 1];
        this.data.rowData[row + 1] = data;
    }
    swapRows(row1, row2) {
        _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.swap(this.data.rowData, row1, row2);
    }
    exciseSingleRow(row) {
        let newData = {
            title: this.data.title,
            description: this.data.description,
            numCols: this.data.numCols,
            numRows: 1,
            numExtens: this.data.numExtens,
            colData: this.data.colData.slice(0),
            rowData: [this.data.rowData[row].slice(0)],
            extData: this.data.extData.slice(0)
        };
        return new DataSheet(newData);
    }
    colIsPrimitive(col) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        let ct = this.data.colData[col].type;
        return ct == 'string' || ct == 'real' || ct == 'integer' || ct == 'boolean';
    }
    findColByName(name, type) {
        for (let n = 0; n < this.data.numCols; n++)
            if (this.data.colData[n].name == name) {
                if (type == null || this.data.colData[n].type == type)
                    return n;
            }
        return -1;
    }
    firstColOfType(type) {
        for (let n = 0; n < this.data.numCols; n++)
            if (this.data.colData[n].type == type)
                return n;
        return -1;
    }
    copyCell(toRow, toCol, fromDS, fromRow, fromCol) {
        this.setToNull(toRow, toCol);
        if (fromDS.isNull(fromRow, fromCol))
            return;
        let obj = fromDS.getObject(fromRow, fromCol);
        this.setObject(toRow, toCol, DataSheet.convertType(obj, fromDS.colType(fromCol), this.colType(toCol)));
    }
    static convertType(obj, fromType, toType) {
        const ft = fromType, tt = toType;
        if (obj == null || ft == tt || (typeof obj == 'string' && obj == ''))
            return obj;
        if (tt == "string") {
            if (ft == "integer")
                return obj.toString();
            else if (ft == "real")
                return obj.toString();
            else if (ft == "boolean")
                return obj ? 'true' : 'false';
        }
        else if (tt == "real") {
            if (ft == "string")
                return (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.safeFloat)(obj, null);
            else if (ft == "integer")
                return obj;
            else if (ft == "boolean")
                return obj ? 1 : 0;
        }
        else if (tt == "integer") {
            if (ft == "string")
                return (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.safeInt)(obj, null);
            else if (ft == "real")
                return Math.round(obj);
            else if (ft == "boolean")
                return obj ? 1 : 0;
        }
        else if (tt == "boolean") {
            if (ft == "string")
                return obj.toLowerCase() == 'true';
            else if (ft == "integer")
                return obj > 0;
            else if (ft == "real")
                return obj >= 0.5;
        }
        return null;
    }
    toString(row, col) {
        if (typeof col === 'string')
            col = this.findColByName(col);
        let obj = this.data.rowData[row][col];
        return obj == null ? null : obj.toString();
    }
    toInt(row, col) {
        if (!this.colIsPrimitive(col))
            return null;
        let obj = this.data.rowData[row][col];
        return obj == null ? null : parseInt(obj);
    }
    toReal(row, col) {
        if (!this.colIsPrimitive(col))
            return null;
        let obj = this.data.rowData[row][col];
        return obj == null ? null : parseFloat(obj);
    }
}


/***/ }),

/***/ "./src/gfx/ArrangeExperiment.ts":
/*!**************************************!*\
  !*** ./src/gfx/ArrangeExperiment.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ArrangeComponent: () => (/* binding */ ArrangeComponent),
/* harmony export */   ArrangeComponentAnnot: () => (/* binding */ ArrangeComponentAnnot),
/* harmony export */   ArrangeComponentType: () => (/* binding */ ArrangeComponentType),
/* harmony export */   ArrangeExperiment: () => (/* binding */ ArrangeExperiment)
/* harmony export */ });
/* harmony import */ var _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../aspect/Experiment */ "./src/aspect/Experiment.ts");
/* harmony import */ var _rxn_ExperimentMeta__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../rxn/ExperimentMeta */ "./src/rxn/ExperimentMeta.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../rxn/QuantityCalc */ "./src/rxn/QuantityCalc.ts");
/* harmony import */ var _util_Geom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/Geom */ "./src/util/Geom.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _ArrangeMolecule__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ArrangeMolecule */ "./src/gfx/ArrangeMolecule.ts");
/* harmony import */ var _FontData__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./FontData */ "./src/gfx/FontData.ts");









var ArrangeComponentType;
(function (ArrangeComponentType) {
    ArrangeComponentType[ArrangeComponentType["Arrow"] = 1] = "Arrow";
    ArrangeComponentType[ArrangeComponentType["Plus"] = 2] = "Plus";
    ArrangeComponentType[ArrangeComponentType["Reactant"] = 3] = "Reactant";
    ArrangeComponentType[ArrangeComponentType["Reagent"] = 4] = "Reagent";
    ArrangeComponentType[ArrangeComponentType["Product"] = 5] = "Product";
    ArrangeComponentType[ArrangeComponentType["StepNote"] = 6] = "StepNote";
})(ArrangeComponentType || (ArrangeComponentType = {}));
var ArrangeComponentAnnot;
(function (ArrangeComponentAnnot) {
    ArrangeComponentAnnot[ArrangeComponentAnnot["None"] = 0] = "None";
    ArrangeComponentAnnot[ArrangeComponentAnnot["Primary"] = 1] = "Primary";
    ArrangeComponentAnnot[ArrangeComponentAnnot["Waste"] = 2] = "Waste";
    ArrangeComponentAnnot[ArrangeComponentAnnot["Implied"] = 3] = "Implied";
})(ArrangeComponentAnnot || (ArrangeComponentAnnot = {}));
class ArrangeComponent {
    constructor() {
        this.text = [];
        this.annot = ArrangeComponentAnnot.None;
        this.monochromeColour = null;
        this.metaInfo = null;
        this.box = new _util_Geom__WEBPACK_IMPORTED_MODULE_4__.Box();
    }
    clone() {
        let dup = new ArrangeComponent();
        dup.type = this.type;
        dup.srcIdx = this.srcIdx;
        dup.step = this.step;
        dup.side = this.side;
        dup.mol = this.mol;
        dup.text = this.text;
        dup.leftNumer = this.leftNumer;
        dup.leftDenom = this.leftDenom;
        dup.fszText = this.fszText;
        dup.fszLeft = this.fszLeft;
        dup.annot = this.annot;
        dup.monochromeColour = this.monochromeColour;
        dup.metaInfo = this.metaInfo;
        dup.box = this.box.clone();
        dup.padding = this.padding;
        return dup;
    }
}
const PADDING = 0.25;
const PLUSSZ = 0.5;
const ARROW_W = 2;
const ARROW_H = 0.5;
const REAGENT_SCALE = 0.7;
const PLACEHOLDER_W = 2;
const PLACEHOLDER_H = 2;
class ArrangeExperiment {
    constructor(entry, measure, policy) {
        this.entry = entry;
        this.measure = measure;
        this.policy = policy;
        this.width = 0;
        this.height = 0;
        this.components = [];
        this.limitTotalW = 1000;
        this.limitTotalH = 1000;
        this.limitStructW = 0;
        this.limitStructH = 0;
        this.includeReagents = true;
        this.includeNames = false;
        this.includeStoich = true;
        this.includeAnnot = false;
        this.includeBlank = false;
        this.includeDetails = false;
        this.includeAtomMap = false;
        this.colourAtomMap = 0x9D1A76;
        this.allowVertical = true;
        this.padding = 0;
        this.fauxComponents = [];
        this.extraText = {};
        this.scale = policy.data.pointScale;
        this.limitStructW = this.limitStructH = this.scale * 10;
        this.padding = PADDING * this.scale;
    }
    includeExtraText(step, type, idx, txt) {
        if (!txt)
            return;
        let key = `${step}:${type}:${idx}`;
        this.extraText[key] = _util_Vec__WEBPACK_IMPORTED_MODULE_6__.Vec.append(this.extraText[key], txt);
    }
    arrange() {
        this.createComponents();
        let fszText = this.scale * this.policy.data.fontSize, fszLeft = this.scale * this.policy.data.fontSize * 1.5;
        for (let xc of this.components) {
            if (xc.type == ArrangeComponentType.Plus)
                xc.box = new _util_Geom__WEBPACK_IMPORTED_MODULE_4__.Box(0, 0, this.scale * PLUSSZ, this.scale * PLUSSZ);
            else if (xc.type == ArrangeComponentType.Arrow) { }
            else {
                let w = 0, h = 0;
                if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.notBlank(xc.mol)) {
                    let sz = _util_Geom__WEBPACK_IMPORTED_MODULE_4__.Size.fromArray(_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_7__.ArrangeMolecule.guestimateSize(xc.mol, this.policy));
                    if (xc.type == ArrangeComponentType.Reagent)
                        sz.scaleBy(REAGENT_SCALE);
                    if (xc.leftNumer) {
                        xc.fszLeft = fszLeft;
                        let wad = this.measure.measureText(xc.leftNumer, fszLeft);
                        let lw = wad[0], lh = wad[1] + wad[2];
                        if (xc.leftDenom)
                            lw = Math.max(lw, this.measure.measureText(xc.leftDenom, fszLeft)[0]);
                        sz.w += lw + ArrangeExperiment.COMP_GAP_LEFT * lh;
                        sz.h = Math.max(sz.h, lh * (xc.leftDenom ? 2 : 1));
                    }
                    sz.fitInto(this.limitStructW, this.limitStructH);
                    w = sz.w;
                    h = sz.h;
                }
                if (_util_Vec__WEBPACK_IMPORTED_MODULE_6__.Vec.notBlank(xc.text)) {
                    if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.notBlank(xc.mol))
                        h += 0.5 * fszText;
                    for (let line of xc.text) {
                        xc.fszText = fszText;
                        let wad = this.measure.measureText(line, fszText);
                        w = Math.max(w, wad[0]);
                        h += wad[1] + wad[2];
                    }
                }
                if (xc.annot != 0)
                    w += ArrangeExperiment.COMP_ANNOT_SIZE * this.scale;
                if ((_mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.isBlank(xc.mol) && !xc.text && this.includeBlank) || w == 0 || h == 0) {
                    w = Math.max(w, PLACEHOLDER_W * this.scale);
                    h = Math.max(h, PLACEHOLDER_H * this.scale);
                }
                xc.box = new _util_Geom__WEBPACK_IMPORTED_MODULE_4__.Box(0, 0, w, h);
            }
            xc.padding = this.padding;
            xc.box = new _util_Geom__WEBPACK_IMPORTED_MODULE_4__.Box(0, 0, xc.box.w + 2 * this.padding, xc.box.h + 2 * this.padding);
        }
        if (this.allowVertical) {
            let best = null;
            let bestScore = 0;
            for (let bend = this.entry.steps.length + 1; bend >= 1; bend--)
                for (let vert = 0; vert <= 1; vert++) {
                    let trial = [];
                    for (let xc of this.components)
                        trial.push(xc.clone());
                    this.arrangeComponents(trial, bend, vert > 0);
                    let score = this.scoreArrangement(trial);
                    if (best == null || score > bestScore) {
                        best = trial;
                        bestScore = score;
                    }
                }
            this.components = best;
        }
        else {
            this.arrangeComponents(this.components, this.entry.steps.length + 1, false);
        }
        this.width = this.height = 0;
        for (let xc of this.components) {
            this.width = Math.max(this.width, xc.box.maxX());
            this.height = Math.max(this.height, xc.box.maxY());
        }
    }
    get numComponents() { return this.components.length; }
    getComponent(idx) { return this.components[idx]; }
    getComponents() { return this.components; }
    scaleComponents(modScale) {
        if (modScale == 1)
            return;
        this.scale *= modScale;
        this.width *= modScale;
        this.height *= modScale;
        for (let xc of this.components) {
            xc.box.scaleBy(modScale);
            xc.fszText *= modScale;
            xc.fszLeft *= modScale;
            xc.padding *= modScale;
        }
    }
    static toExpType(compType) {
        if (compType == ArrangeComponentType.Reactant)
            return _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Reactant;
        if (compType == ArrangeComponentType.Reagent)
            return _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Reagent;
        if (compType == ArrangeComponentType.Product)
            return _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Product;
        return null;
    }
    createComponents() {
        for (let n = 0; n < this.entry.steps[0].reactants.length; n++) {
            if (n > 0)
                this.createSegregator(ArrangeComponentType.Plus, 0, -1);
            this.createReactant(n, 0);
        }
        if (this.components.length == 0 && this.includeBlank)
            this.createBlank(ArrangeComponentType.Reactant, 0);
        for (let s = 0; s < this.entry.steps.length; s++) {
            this.createSegregator(ArrangeComponentType.Arrow, s, 0);
            if (this.includeReagents) {
                let any = false;
                for (let n = 0; n < this.entry.steps[s].reagents.length; n++) {
                    this.createReagent(n, s);
                    any = true;
                }
                if (!any && this.includeBlank)
                    this.createBlank(ArrangeComponentType.Reagent, s);
            }
            if (this.includeDetails)
                this.createStepMeta(s);
            let any = false;
            for (let n = 0; n < this.entry.steps[s].products.length; n++) {
                if (n > 0)
                    this.createSegregator(ArrangeComponentType.Plus, s, 1);
                this.createProduct(n, s);
                any = true;
            }
            if (!any && this.includeBlank)
                this.createBlank(ArrangeComponentType.Product, s);
        }
        for (let fc of this.fauxComponents) {
            if (fc.type == ArrangeComponentType.Reactant)
                this.createSegregator(ArrangeComponentType.Plus, fc.step, -1);
            else if (fc.type == ArrangeComponentType.Product)
                this.createSegregator(ArrangeComponentType.Plus, fc.step, 1);
            this.createFauxComponent(fc);
        }
    }
    createReactant(idx, step) {
        var _a;
        let comp = this.entry.steps[step].reactants[idx];
        let xc = new ArrangeComponent();
        xc.type = ArrangeComponentType.Reactant;
        xc.srcIdx = idx;
        xc.step = step;
        xc.side = -1;
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.notBlank(comp.mol))
            xc.mol = comp.mol;
        if (comp.name && (this.includeNames || _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.isBlank(comp.mol)))
            xc.text = this.wordWrapName(comp.name, xc.mol);
        if (this.includeDetails)
            this.supplementText(xc, comp);
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.notBlank(comp.mol) && this.includeStoich && !_rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.isStoichZero(comp.stoich) && !_rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.isStoichUnity(comp.stoich)) {
            let slash = comp.stoich.indexOf('/');
            if (slash >= 0) {
                xc.leftNumer = comp.stoich.substring(0, slash);
                xc.leftDenom = comp.stoich.substring(slash + 1);
            }
            else
                xc.leftNumer = comp.stoich;
        }
        if (this.includeAnnot && _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.notBlank(comp.mol) && comp.primary)
            xc.annot = ArrangeComponentAnnot.Primary;
        let key = `${step}:${_aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Reactant}:${idx}`;
        xc.text.push(...((_a = this.extraText[key]) !== null && _a !== void 0 ? _a : []));
        this.components.push(xc);
    }
    createReagent(idx, step) {
        var _a;
        let comp = this.entry.steps[step].reagents[idx];
        let xc = new ArrangeComponent();
        xc.type = ArrangeComponentType.Reagent;
        xc.srcIdx = idx;
        xc.step = step;
        xc.side = 0;
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.notBlank(comp.mol))
            xc.mol = comp.mol;
        if (comp.name && (this.includeNames || _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.isBlank(comp.mol)))
            xc.text = this.wordWrapName(comp.name, xc.mol);
        if (this.includeDetails)
            this.supplementText(xc, comp);
        if (this.includeAnnot) {
            let stoich = _rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.impliedReagentStoich(comp, this.entry.steps[step].products);
            if (stoich > 0)
                xc.annot = ArrangeComponentAnnot.Implied;
            if (stoich > 0 && stoich != 1) {
                if ((0,_util_util__WEBPACK_IMPORTED_MODULE_5__.realEqual)(stoich, Math.round(stoich)))
                    xc.leftNumer = Math.round(stoich).toString();
                else
                    xc.leftNumer = stoich.toString();
            }
        }
        let key = `${step}:${_aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Reagent}:${idx}`;
        xc.text.push(...((_a = this.extraText[key]) !== null && _a !== void 0 ? _a : []));
        this.components.push(xc);
    }
    createProduct(idx, step) {
        var _a;
        let comp = this.entry.steps[step].products[idx];
        let xc = new ArrangeComponent();
        xc.type = ArrangeComponentType.Product;
        xc.srcIdx = idx;
        xc.step = step;
        xc.side = 1;
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.notBlank(comp.mol))
            xc.mol = comp.mol;
        if (comp.name && (this.includeNames || _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.isBlank(comp.mol)))
            xc.text = this.wordWrapName(comp.name, xc.mol);
        if (this.includeDetails)
            this.supplementText(xc, comp);
        if (this.includeStoich && !_rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.isStoichZero(comp.stoich) && !_rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.isStoichUnity(comp.stoich)) {
            let slash = comp.stoich.indexOf('/');
            if (slash >= 0) {
                xc.leftNumer = comp.stoich.substring(0, slash);
                xc.leftDenom = comp.stoich.substring(slash + 1);
            }
            else
                xc.leftNumer = comp.stoich;
        }
        if (this.includeAnnot && _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.notBlank(comp.mol) && comp.waste)
            xc.annot = ArrangeComponentAnnot.Waste;
        let key = `${step}:${_aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Product}:${idx}`;
        xc.text.push(...((_a = this.extraText[key]) !== null && _a !== void 0 ? _a : []));
        this.components.push(xc);
    }
    createSegregator(type, step, side) {
        let xc = new ArrangeComponent();
        xc.type = type;
        xc.step = step;
        xc.side = side;
        this.components.push(xc);
    }
    createStepMeta(step) {
        let lines = [];
        for (let [type, value] of _rxn_ExperimentMeta__WEBPACK_IMPORTED_MODULE_1__.ExperimentMeta.unpackMeta(this.entry.steps[step].meta)) {
            if (!_util_Vec__WEBPACK_IMPORTED_MODULE_6__.Vec.safeArray(_rxn_ExperimentMeta__WEBPACK_IMPORTED_MODULE_1__.ExperimentMeta.APPLICABILITY[type]).includes(_rxn_ExperimentMeta__WEBPACK_IMPORTED_MODULE_1__.ExperimentMetaApplic.Step))
                continue;
            let descr = _rxn_ExperimentMeta__WEBPACK_IMPORTED_MODULE_1__.ExperimentMeta.describeMeta(type, value);
            if (descr != null)
                lines.push(descr);
        }
        if (lines.length == 0)
            return;
        let xc = new ArrangeComponent();
        xc.type = ArrangeComponentType.StepNote;
        xc.step = step;
        xc.side = 0;
        xc.text = lines;
        this.components.push(xc);
    }
    createBlank(type, step) {
        let xc = new ArrangeComponent();
        xc.type = type;
        xc.step = step;
        xc.side = type == ArrangeComponentType.Reactant ? -1 : type == ArrangeComponentType.Product ? 1 : 0;
        xc.srcIdx = -1;
        this.components.push(xc);
    }
    createFauxComponent(fc) {
        let xc = new ArrangeComponent();
        xc.type = fc.type;
        xc.srcIdx = -1;
        xc.step = fc.step;
        xc.side = fc.type == ArrangeComponentType.Reactant ? -1 : fc.type == ArrangeComponentType.Product ? 1 : 0;
        xc.mol = fc.mol;
        if (fc.name)
            xc.text = [fc.name];
        if (fc.annot)
            xc.annot = fc.annot;
        xc.monochromeColour = fc.colour;
        xc.metaInfo = fc.metaInfo;
        this.components.push(xc);
    }
    arrangeComponents(comps, bendStep, vertComp) {
        let blkMain = [];
        let blkArrow = [];
        let szMain = [], szArrow = [];
        let midMain = [], midArrow = [];
        blkMain.push(this.gatherBlock(comps, 0, -1));
        szMain.push(this.arrangeMainBlock(blkMain[0], vertComp));
        midMain.push(this.findMidBlock(blkMain[0], szMain[0]));
        for (let n = 0; n < this.entry.steps.length; n++) {
            let bent = n + 1 >= bendStep;
            blkMain.push(this.gatherBlock(comps, n, 1));
            szMain.push(this.arrangeMainBlock(blkMain[n + 1], vertComp && !bent));
            midMain.push(this.findMidBlock(blkMain[n + 1], szMain[n + 1]));
            blkArrow.push(this.gatherBlock(comps, n, 0));
            if (!bent)
                szArrow.push(this.arrangeHorizontalArrowBlock(blkArrow[n]));
            else
                szArrow.push(this.arrangeVerticalArrowBlock(blkArrow[n]));
            midArrow.push(this.findMidBlock(blkArrow[n], szArrow[n]));
        }
        let midH = 0;
        for (let n = 0; n < bendStep; n++) {
            midH = Math.max(midH, midMain[n].y);
            if (n > 0)
                midH = Math.max(midH, midArrow[n - 1].y);
        }
        let sz = _util_Geom__WEBPACK_IMPORTED_MODULE_4__.Size.zero();
        for (let n = 0; n < bendStep; n++) {
            sz.w += szMain[n].w;
            sz.h = Math.max(sz.h, midH + (szMain[n].h - midMain[n].y));
            if (n > 0) {
                sz.w += szArrow[n - 1].w;
                sz.h = Math.max(sz.h, midH + (szArrow[n - 1].h - midArrow[n - 1].y));
            }
        }
        let x = 0, arrowX = 0;
        for (let n = 0; n < bendStep; n++) {
            if (n > 0) {
                this.originateBlock(blkArrow[n - 1], x, midH - midArrow[n - 1].y);
                x += szArrow[n - 1].w;
            }
            this.originateBlock(blkMain[n], x, midH - midMain[n].y);
            arrowX = x + midMain[n].x;
            x += szMain[n].w;
        }
        let y = sz.h, lowX = 0;
        for (let n = bendStep; n <= this.entry.steps.length; n++) {
            x = arrowX - midArrow[n - 1].x;
            lowX = Math.min(lowX, x);
            this.originateBlock(blkArrow[n - 1], x, y);
            y += szArrow[n - 1].h;
            sz.w = Math.max(sz.w, x + szArrow[n - 1].w);
            x = arrowX - midMain[n].x;
            lowX = Math.min(lowX, x);
            this.originateBlock(blkMain[n], x, y);
            y += szMain[n].h;
            sz.w = Math.max(sz.w, x + szMain[n].w);
        }
        if (lowX < 0) {
            for (let xc of comps)
                xc.box.x -= lowX;
        }
    }
    gatherBlock(comps, step, side) {
        let block = [];
        for (let xc of comps)
            if (xc.side == side && xc.step == step)
                block.push(xc);
        return block;
    }
    arrangeMainBlock(block, vertComp) {
        let sz = _util_Geom__WEBPACK_IMPORTED_MODULE_4__.Size.zero();
        if (!vertComp) {
            for (let xc of block) {
                sz.w += xc.box.w;
                sz.h = Math.max(sz.h, xc.box.h);
            }
        }
        else {
            for (let xc of block) {
                sz.w = Math.max(sz.w, xc.box.w);
                sz.h += xc.box.h;
            }
        }
        sz.w = Math.max(sz.w, this.scale * 2.0);
        sz.h = Math.max(sz.h, this.scale * 2.0);
        if (!vertComp) {
            let x = 0;
            for (let xc of block) {
                xc.box.x = x;
                xc.box.y = 0.5 * (sz.h - xc.box.h);
                x += xc.box.w;
            }
        }
        else {
            let y = 0;
            for (let xc of block) {
                xc.box.x = 0.5 * (sz.w - xc.box.w);
                xc.box.y = y;
                y += xc.box.h;
            }
        }
        return sz;
    }
    arrangeHorizontalArrowBlock(block) {
        let arrow = null;
        for (let xc of block)
            if (xc.type == ArrangeComponentType.Arrow) {
                arrow = xc;
                xc.box.w = ARROW_W * this.scale + 2 * xc.padding;
                xc.box.h = ARROW_H * this.scale + 2 * xc.padding;
            }
        let mid = block.length >> 1;
        for (let xc of block)
            arrow.box.w = Math.max(xc.box.w, arrow.box.w);
        let sz = _util_Geom__WEBPACK_IMPORTED_MODULE_4__.Size.zero();
        let n = 0;
        let y = 0;
        let arrowPlaced = false;
        for (let xc of block)
            if (xc.type != ArrangeComponentType.Arrow) {
                xc.box.x = 0.5 * (arrow.box.w - xc.box.w);
                xc.box.y = y;
                y += xc.box.h;
                n++;
                if (n == mid) {
                    arrow.box.x = 0;
                    arrow.box.y = y;
                    y += arrow.box.h;
                    arrowPlaced = true;
                }
            }
        if (!arrowPlaced) {
            arrow.box.x = 0;
            arrow.box.y = y;
            y += arrow.box.h;
        }
        sz.w = arrow.box.w;
        sz.h = y;
        return sz;
    }
    arrangeVerticalArrowBlock(block) {
        let arrow = null;
        for (let xc of block)
            if (xc.type == ArrangeComponentType.Arrow) {
                arrow = xc;
                xc.box.w = ARROW_H * this.scale + 2 * xc.padding;
                xc.box.h = ARROW_W * this.scale + 2 * xc.padding;
            }
        let mid = block.length >> 1;
        let sz1 = _util_Geom__WEBPACK_IMPORTED_MODULE_4__.Size.zero(), sz2 = _util_Geom__WEBPACK_IMPORTED_MODULE_4__.Size.zero();
        let n = 0;
        for (let xc of block)
            if (xc.type != ArrangeComponentType.Arrow) {
                if (n < mid) {
                    sz1.w = Math.max(sz1.w, xc.box.w);
                    sz1.h += xc.box.h;
                }
                else {
                    sz2.w = Math.max(sz2.w, xc.box.w);
                    sz2.h += xc.box.h;
                }
                n++;
            }
        let sz = new _util_Geom__WEBPACK_IMPORTED_MODULE_4__.Size(sz1.w + sz2.w + arrow.box.w, Math.max(arrow.box.h, Math.max(sz1.h, sz2.h)));
        arrow.box = new _util_Geom__WEBPACK_IMPORTED_MODULE_4__.Box(sz1.w, 0, arrow.box.w, sz.h);
        let y1 = 0.5 * (sz.h - sz1.h), y2 = 0.5 * (sz.h - sz2.h);
        n = 0;
        for (let xc of block)
            if (xc.type != ArrangeComponentType.Arrow) {
                if (n < mid) {
                    xc.box.x = sz1.w - xc.box.w;
                    xc.box.y = y1;
                    y1 += xc.box.h;
                }
                else {
                    xc.box.x = sz.w - sz2.w;
                    xc.box.y = y2;
                    y2 += xc.box.h;
                }
                n++;
            }
        return sz;
    }
    findMidBlock(block, sz) {
        let count = 0;
        let mid = _util_Geom__WEBPACK_IMPORTED_MODULE_4__.Pos.zero();
        for (let xc of block)
            if (xc.type == ArrangeComponentType.Plus || xc.type == ArrangeComponentType.Arrow) {
                mid.x += xc.box.midX();
                mid.y += xc.box.midY();
                count++;
            }
        if (count == 0) {
            mid.x = 0.5 * sz.w;
            mid.y = 0.5 * sz.h;
        }
        else if (count > 1) {
            let inv = 1.0 / count;
            mid.x *= inv;
            mid.y *= inv;
        }
        return mid;
    }
    scoreArrangement(comps) {
        let w = 0, h = 0;
        for (let xc of comps) {
            w = Math.max(w, xc.box.maxX());
            h = Math.max(h, xc.box.maxY());
        }
        let score = 0;
        score -= Math.max(0, Math.abs(w - this.limitTotalW));
        return score;
    }
    originateBlock(block, x, y) {
        for (let xc of block) {
            xc.box.x += x;
            xc.box.y += y;
        }
    }
    supplementText(xc, comp) {
        if (comp.mass > 0)
            xc.text.push(_rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.formatMass(comp.mass));
        if (comp.volume > 0)
            xc.text.push(_rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.formatVolume(comp.volume));
        if (comp.moles > 0)
            xc.text.push(_rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.formatMoles(comp.moles));
        if (comp.conc > 0)
            xc.text.push(_rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.formatConc(comp.conc));
        if (comp.yield != null && comp.yield >= 0)
            xc.text.push(_rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.formatPercent(comp.yield));
        if (comp.equiv > 0)
            xc.text.push(_rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.formatEquiv(comp.equiv));
        for (let [type, value] of _rxn_ExperimentMeta__WEBPACK_IMPORTED_MODULE_1__.ExperimentMeta.unpackMeta(comp.meta)) {
            let descr = _rxn_ExperimentMeta__WEBPACK_IMPORTED_MODULE_1__.ExperimentMeta.describeMeta(type, value);
            if (descr)
                xc.text.push(descr);
        }
    }
    wordWrapName(name, mol) {
        let minLimW = 0;
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.notBlank(mol))
            minLimW = (mol.boundary().w + 2) * this.scale;
        let limW = Math.max(minLimW, 10 * this.scale);
        let fsz = this.scale * this.policy.data.fontSize;
        let w = this.measure.measureText(name, fsz)[0];
        if (w < limW)
            return [name];
        let wrap = () => {
            let lines = [], residual = name, nclean = 0;
            while (residual.length > 0) {
                let wsz = _FontData__WEBPACK_IMPORTED_MODULE_8__.FontData.measureWidths(residual, fsz);
                let pos = 0;
                while (pos < wsz.length && wsz[pos] < limW)
                    pos++;
                for (let n = pos; n > 5; n--) {
                    if (residual[n] == ' ') {
                        pos = n;
                        nclean++;
                        break;
                    }
                    if (wsz[n] < limW * 0.8)
                        break;
                }
                lines.push(residual.substring(0, pos));
                residual = residual.substring(pos).trimLeft();
            }
            return [lines, nclean];
        };
        let [lines, nclean] = wrap();
        for (; limW > 50; limW -= fsz) {
            let [tryLines, tryClean] = wrap();
            if (tryLines.length > lines.length)
                break;
            if (tryClean >= nclean)
                [lines, nclean] = [tryLines, tryClean];
        }
        return lines;
    }
}
ArrangeExperiment.COMP_GAP_LEFT = 0.5;
ArrangeExperiment.COMP_ANNOT_SIZE = 1;


/***/ }),

/***/ "./src/gfx/ArrangeMeasurement.ts":
/*!***************************************!*\
  !*** ./src/gfx/ArrangeMeasurement.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OutlineMeasurement: () => (/* binding */ OutlineMeasurement)
/* harmony export */ });
/* harmony import */ var _FontData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FontData */ "./src/gfx/FontData.ts");

class OutlineMeasurement {
    constructor(offsetX, offsetY, pointScale) {
        this.offsetX = offsetX;
        this.offsetY = offsetY;
        this.pointScale = pointScale;
        this.invScale = 1 / pointScale;
    }
    scale() { return this.pointScale; }
    angToX(ax) { return ax * this.pointScale + this.offsetX; }
    angToY(ay) { return ay * -this.pointScale + this.offsetY; }
    xToAng(px) { return (px - this.offsetX) * this.invScale; }
    yToAng(py) { return (py - this.offsetY) * -this.invScale; }
    yIsUp() { return false; }
    measureText(str, fontSize) { return _FontData__WEBPACK_IMPORTED_MODULE_0__.FontData.main.measureText(str, fontSize); }
}


/***/ }),

/***/ "./src/gfx/ArrangeMolecule.ts":
/*!************************************!*\
  !*** ./src/gfx/ArrangeMolecule.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ArrangeMolecule: () => (/* binding */ ArrangeMolecule),
/* harmony export */   BLineType: () => (/* binding */ BLineType)
/* harmony export */ });
/* harmony import */ var _mol_PseudoEmbedding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/PseudoEmbedding */ "./src/mol/PseudoEmbedding.ts");
/* harmony import */ var _mol_BondArtifact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mol/BondArtifact */ "./src/mol/BondArtifact.ts");
/* harmony import */ var _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/CoordUtil */ "./src/mol/CoordUtil.ts");
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../mol/PolymerBlock */ "./src/mol/PolymerBlock.ts");
/* harmony import */ var _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mol/QueryUtil */ "./src/mol/QueryUtil.ts");
/* harmony import */ var _util_FitRotatedEllipse__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/FitRotatedEllipse */ "./src/util/FitRotatedEllipse.ts");
/* harmony import */ var _util_Geom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/Geom */ "./src/util/Geom.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _FontData__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./FontData */ "./src/gfx/FontData.ts");
/* harmony import */ var _Rendering__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Rendering */ "./src/gfx/Rendering.ts");












var BLineType;
(function (BLineType) {
    BLineType[BLineType["Normal"] = 1] = "Normal";
    BLineType[BLineType["Inclined"] = 2] = "Inclined";
    BLineType[BLineType["Declined"] = 3] = "Declined";
    BLineType[BLineType["Unknown"] = 4] = "Unknown";
    BLineType[BLineType["Dotted"] = 5] = "Dotted";
    BLineType[BLineType["DotDir"] = 6] = "DotDir";
    BLineType[BLineType["IncDouble"] = 7] = "IncDouble";
    BLineType[BLineType["IncTriple"] = 8] = "IncTriple";
    BLineType[BLineType["IncQuadruple"] = 9] = "IncQuadruple";
})(BLineType || (BLineType = {}));
const MINBOND_LINE = 0.25;
const MINBOND_EXOTIC = 0.5;
class ArrangeMolecule {
    static guestimateSize(mol, policy, maxW, maxH) {
        let box = mol.boundary();
        let minX = box.minX(), minY = box.minY(), maxX = box.maxX(), maxY = box.maxY();
        let fontSize = policy.data.fontSize * this.FONT_CORRECT;
        for (let n = 1; n <= mol.numAtoms; n++)
            if (mol.atomExplicit(n)) {
                let numsym = 0;
                for (let ch of mol.atomElement(n))
                    if (!'|{}^'.includes(ch))
                        numsym++;
                let plusH = mol.atomHydrogens(n) > 0 ? 1 : 0;
                const aw = 0.5 * 0.7 * fontSize * (numsym + plusH);
                const ah = 0.75 * fontSize * (1 + 0.2 * plusH);
                const ax = mol.atomX(n), ay = mol.atomY(n);
                minX = Math.min(minX, ax - aw);
                maxX = Math.max(maxX, ax + aw);
                minY = Math.min(minY, ay - ah);
                maxY = Math.max(maxY, ay + ah);
            }
        let w = Math.max(1, (maxX - minX)) * policy.data.pointScale;
        let h = Math.max(1, (maxY - minY)) * policy.data.pointScale;
        if (maxW > 0 && w > maxW) {
            h *= maxW / w;
            w = maxW;
        }
        if (maxH > 0 && h > maxH) {
            w *= maxH / h;
            h = maxH;
        }
        return [w, h];
    }
    constructor(mol, measure, policy, effects = new _Rendering__WEBPACK_IMPORTED_MODULE_11__.RenderEffects()) {
        this.mol = mol;
        this.measure = measure;
        this.policy = policy;
        this.effects = effects;
        this.points = [];
        this.lines = [];
        this.rings = [];
        this.paths = [];
        this.space = [];
        this.unsplitLines = null;
        this.wantArtifacts = true;
        this.wantCrossings = true;
        this.artifacts = null;
        this.bondOrder = [];
        this.atomCharge = [];
        this.atomUnpaired = [];
        this.artifactCharge = new Map();
        this.artifactUnpaired = new Map();
        this.artifactFract = new Map();
    }
    getMolecule() { return this.mol; }
    getMeasure() { return this.measure; }
    getPolicy() { return this.policy; }
    getEffects() { return this.effects; }
    getScale() { return this.scale; }
    setWantArtifacts(want) { this.wantArtifacts = want; }
    getArtifacts() { return this.artifacts; }
    setArtifacts(artifacts) { this.artifacts = artifacts; }
    setWantCrossings(want) { this.wantCrossings = want; }
    arrange() {
        const { mol, measure, policy, effects } = this;
        this.scale = measure.scale();
        this.bondSepPix = policy.data.bondSep * measure.scale();
        this.lineSizePix = policy.data.lineSize * measure.scale();
        this.fontSizePix = policy.data.fontSize * measure.scale() * ArrangeMolecule.FONT_CORRECT;
        this.ymul = measure.yIsUp() ? -1 : 1;
        let artmask = null;
        if (this.wantArtifacts && this.artifacts == null) {
            this.artifacts = new _mol_BondArtifact__WEBPACK_IMPORTED_MODULE_1__.BondArtifact(mol);
            artmask = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.booleanArray(false, mol.numAtoms);
            for (let path of this.artifacts.getResPaths())
                for (let a of path.atoms)
                    artmask[a - 1] = true;
            for (let ring of this.artifacts.getResRings())
                for (let a of ring.atoms)
                    artmask[a - 1] = true;
            for (let arene of this.artifacts.getArenes()) {
                artmask[arene.centre - 1] = true;
                for (let a of arene.atoms)
                    artmask[a - 1] = true;
            }
        }
        this.setupBondOrders();
        for (let n = 1; n <= mol.numAtoms; n++) {
            if (mol.atomElement(n).length > 2 && mol.atomHydrogens(n) == 0) {
                this.points.push(null);
                this.space.push(null);
                continue;
            }
            let a = {
                anum: n,
                text: mol.atomExplicit(n) || _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_2__.CoordUtil.atomIsWeirdLinear(mol, n) ? mol.atomElement(n) : null,
                fsz: this.fontSizePix,
                col: this.policy.data.atomCols[mol.atomicNumber(n)],
                oval: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Oval(this.measure.angToX(mol.atomX(n)), this.measure.angToY(mol.atomY(n)), 0, 0)
            };
            let overCol = this.effects.colAtom[n];
            if (overCol)
                a.col = overCol;
            if (artmask && artmask[n - 1] && mol.atomElement(n) == 'C')
                a.text = null;
            if (a.text != null) {
                let wad = this.measure.measureText(a.text, a.fsz);
                const PADDING = 1.1;
                a.oval.rw = 0.5 * wad[0] * PADDING;
                a.oval.rh = 0.5 * wad[1] * PADDING;
            }
            this.points.push(a);
            this.space.push(this.computeSpacePoint(a));
        }
        for (let n = 1; n <= mol.numAtoms; n++)
            if (this.points[n - 1] == null)
                this.processLabel(n);
        let bdbl = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.booleanArray(false, mol.numBonds);
        for (let n = 1; n <= mol.numBonds; n++) {
            let bfr = mol.bondFrom(n), bto = mol.bondTo(n);
            let bt = mol.bondType(n), bo = this.bondOrder[n - 1];
            if (bo < 0)
                continue;
            let col = this.effects.colBond[n];
            if (!col)
                col = this.policy.data.foreground;
            bdbl[n - 1] = bo == 2 && (bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_NORMAL || bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_UNKNOWN);
            let a1 = this.points[bfr - 1], a2 = this.points[bto - 1];
            let x1 = a1.oval.cx, y1 = a1.oval.cy, x2 = a2.oval.cx, y2 = a2.oval.cy;
            if (Math.abs(x2 - x1) <= 1 && Math.abs(y2 - y1) <= 1) {
                bdbl[n - 1] = false;
                continue;
            }
            if (bdbl[n - 1])
                continue;
            let minDist = (bo == 1 && bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_NORMAL ? MINBOND_LINE : MINBOND_EXOTIC) * measure.scale();
            let xy1 = this.shrinkBond(x1, y1, x2, y2, this.backOffAtom(bfr, x1, y1, x2, y2, minDist));
            let xy2 = this.shrinkBond(x2, y2, x1, y1, this.backOffAtom(bto, x2, y2, x1, y1, minDist));
            this.ensureMinimumBondLength(xy1, xy2, x1, y1, x2, y2, minDist);
            let sz = this.lineSizePix, head = 0;
            let qbonds = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_5__.QueryUtil.queryBondOrders(mol, n);
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.notBlank(qbonds)) {
                _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.sort(qbonds);
                if (qbonds[0] == -1) {
                    qbonds.splice(0, 1);
                    qbonds.push(-1);
                }
                let qtxt = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.equals(qbonds, [0, 1, 2, 3, -1]) ? '?' : qbonds.map((o) => o == -1 ? 'A' : o.toString()).join('');
                let oxy = this.orthogonalDelta(xy1[0], xy1[1], xy2[0], xy2[1], 1.3 * this.bondSepPix);
                let v = -0.5;
                for (let i = 0; i < 2; i++, v++) {
                    let lx1 = xy1[0] + v * oxy[0], ly1 = xy1[1] + v * oxy[1], lx2 = xy2[0] + v * oxy[0], ly2 = xy2[1] + v * oxy[1];
                    let b = {
                        bnum: n,
                        bfr,
                        bto,
                        type: BLineType.Dotted,
                        line: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Line(lx1, ly1, lx2, ly2),
                        size: 0.5 * sz,
                        head,
                        col: (col & 0xFFFFFF) | 0x80000000,
                    };
                    this.lines.push(b);
                    this.space.push(this.computeSpaceLine(b));
                }
                let rotation = Math.atan2(xy2[1] - xy1[1], xy2[0] - xy1[0]) * _util_util__WEBPACK_IMPORTED_MODULE_8__.RADDEG;
                if (rotation < -90 || rotation > 90)
                    rotation += 180;
                let a = {
                    anum: 0,
                    text: qtxt,
                    fsz: 0.35 * this.fontSizePix,
                    col,
                    oval: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Oval(0.5 * (xy1[0] + xy2[0]), 0.5 * (xy1[1] + xy2[1]), 0, 0),
                    rotation
                };
                this.points.push(a);
                this.space.push(this.computeSpacePoint(a));
                continue;
            }
            let ltype = BLineType.Normal;
            if (bo == 1 && bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_INCLINED) {
                ltype = BLineType.Inclined;
                head = 0.15 * measure.scale();
            }
            else if (bo == 1 && bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_DECLINED) {
                ltype = BLineType.Declined;
                head = 0.15 * measure.scale();
            }
            else if (bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_UNKNOWN) {
                ltype = BLineType.Unknown;
                head = 0.2 * measure.scale();
            }
            else if (bo == 0) {
                if (bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_INCLINED || bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_DECLINED)
                    ltype = BLineType.DotDir;
                else
                    ltype = BLineType.Dotted;
            }
            else if ((bo == 2 || bo == 3 || bo == 4) && (bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_INCLINED || bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_DECLINED)) {
                ltype = bo == 2 ? BLineType.IncDouble : bo == 3 ? BLineType.IncTriple : BLineType.IncQuadruple;
                head = (bo == 2 ? 0.20 : 0.25) * measure.scale();
            }
            if (bo == 0) {
                let dx = xy2[0] - xy1[0], dy = xy2[1] - xy1[1];
                let d = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(dx, dy), invD = 1 / d;
                let ox = 0.5 * dx * invD * this.bondSepPix, oy = 0.5 * dy * invD * this.bondSepPix;
                if (mol.atomAdjCount(bfr) > 1) {
                    xy1[0] += ox;
                    xy1[1] += oy;
                }
                if (mol.atomAdjCount(bto) > 1) {
                    xy2[0] -= ox;
                    xy2[1] -= oy;
                }
            }
            if (bo != 1 && bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_DECLINED)
                [xy1, xy2] = [xy2, xy1];
            if (bo > 1 && (bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_NORMAL || bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_UNKNOWN)) {
                let oxy = this.orthogonalDelta(xy1[0], xy1[1], xy2[0], xy2[1], this.bondSepPix);
                let ext1 = 1, ext2 = 1;
                for (let i = 0, v = -0.5 * (bo - 1); i < bo; i++, v++) {
                    let lx1 = xy1[0] + v * oxy[0], ly1 = xy1[1] + v * oxy[1], lx2 = xy2[0] + v * oxy[0], ly2 = xy2[1] + v * oxy[1];
                    ext1 = Math.min(ext1, this.backOffAtom(bfr, lx1, ly1, lx2, ly2, minDist));
                }
                xy1 = this.shrinkBond(xy1[0], xy1[1], xy2[0], xy2[1], ext1);
                for (let i = 0, v = -0.5 * (bo - 1); i < bo; i++, v++) {
                    let lx1 = xy1[0] + v * oxy[0], ly1 = xy1[1] + v * oxy[1], lx2 = xy2[0] + v * oxy[0], ly2 = xy2[1] + v * oxy[1];
                    ext2 = Math.min(ext2, this.backOffAtom(bto, lx2, ly2, lx1, ly1, minDist));
                }
                xy2 = this.shrinkBond(xy2[0], xy2[1], xy1[0], xy1[1], ext2);
                for (let i = 0, v = -0.5 * (bo - 1); i < bo; i++, v++) {
                    let lx1 = xy1[0] + v * oxy[0], ly1 = xy1[1] + v * oxy[1], lx2 = xy2[0] + v * oxy[0], ly2 = xy2[1] + v * oxy[1];
                    let b = {
                        bnum: n,
                        bfr,
                        bto,
                        type: ltype,
                        line: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Line(lx1, ly1, lx2, ly2),
                        size: sz,
                        head,
                        col
                    };
                    this.lines.push(b);
                    this.space.push(this.computeSpaceLine(b));
                }
            }
            else {
                let b = {
                    bnum: n,
                    bfr,
                    bto,
                    type: ltype,
                    line: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Line(xy1[0], xy1[1], xy2[0], xy2[1]),
                    size: sz,
                    head,
                    col
                };
                this.lines.push(b);
                this.space.push(this.computeSpaceLine(b));
            }
        }
        let rings = this.orderedRingList();
        for (let i = 0; i < rings.length; i++) {
            for (let j = 0; j < rings[i].length; j++) {
                let k = mol.findBond(rings[i][j], rings[i][j < rings[i].length - 1 ? j + 1 : 0]);
                if (bdbl[k - 1]) {
                    this.processDoubleBond(k, rings[i]);
                    bdbl[k - 1] = false;
                }
            }
        }
        for (let i = 1; i <= mol.numBonds; i++)
            if (bdbl[i - 1])
                this.processDoubleBond(i, this.priorityDoubleSubstit(i));
        let hcount = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.numberArray(0, mol.numAtoms);
        for (let n = 1; n <= mol.numAtoms; n++)
            hcount[n - 1] = this.points[n - 1].text == null ? 0 : mol.atomHydrogens(n);
        for (let n = 0; n < mol.numAtoms; n++)
            if (hcount[n] > 0 && this.placeHydrogen(n, hcount[n], true))
                hcount[n] = 0;
        for (let n = 0; n < mol.numAtoms; n++)
            if (hcount[n] > 0)
                this.placeHydrogen(n, hcount[n], false);
        for (let n = 1; n <= mol.numAtoms; n++)
            if (mol.atomIsotope(n) != _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.ISOTOPE_NATURAL) {
                let isostr = mol.atomIsotope(n).toString();
                let col = policy.data.atomCols[mol.atomicNumber(n)];
                this.placeAdjunct(n, isostr, this.fontSizePix * 0.6, col, 150 * _util_util__WEBPACK_IMPORTED_MODULE_8__.DEGRAD);
            }
        for (let n = 1; n <= mol.numAtoms; n++) {
            let str = '';
            let chg = this.atomCharge[n - 1];
            if (chg == -1)
                str = '-';
            else if (chg == 1)
                str = '+';
            else if (chg < -1)
                str = Math.abs(chg) + '-';
            else if (chg > 1)
                str = chg + '+';
            for (let i = this.atomUnpaired[n - 1]; i > 0; i--)
                str += '.';
            if (str.length == 0)
                continue;
            let col = policy.data.atomCols[mol.atomicNumber(n)];
            this.placeAdjunct(n, str, str.length == 1 ? 0.8 * this.fontSizePix : 0.6 * this.fontSizePix, col, 30 * _util_util__WEBPACK_IMPORTED_MODULE_8__.DEGRAD);
        }
        for (let n = 0; n < effects.atomDecoText.length; n++) {
            let txt = effects.atomDecoText[n];
            if (!txt)
                continue;
            this.annotateAtom(n + 1, txt, effects.atomDecoCol[n], effects.atomDecoSize[n] * this.scale * ArrangeMolecule.FONT_CORRECT);
        }
        for (let n = 0; n < effects.bondDecoText.length; n++) {
            let txt = effects.bondDecoText[n];
            if (!txt)
                continue;
            this.annotateBond(n + 1, txt, effects.bondDecoCol[n], effects.bondDecoSize[n] * this.scale * ArrangeMolecule.FONT_CORRECT);
        }
        for (let n = 0; n < Math.min(effects.atomCircleSz.length, mol.numAtoms); n++)
            if (effects.atomCircleSz[n] > 0) {
                let dw = effects.atomCircleSz[n] * this.scale;
                let a = this.points[n];
                let box = new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Box(a.oval.cx - dw, a.oval.cy - dw, 2 * dw, 2 * dw);
                let spc = {
                    anum: 0,
                    bnum: 0,
                    box,
                    px: [box.minX(), box.maxX(), box.maxX(), box.minX()],
                    py: [box.minY(), box.minY(), box.maxY(), box.maxY()]
                };
                this.space.push(spc);
            }
        if (this.artifacts != null) {
            for (let path of this.artifacts.getResPaths()) {
                this.createCurvedPath(path.atoms, this.artifactFract.get(path), 0);
                this.delocalisedAnnotation(path.atoms, this.artifactCharge.get(path), this.artifactUnpaired.get(path));
            }
            for (let ring of this.artifacts.getResRings()) {
                this.createCircularRing(ring.atoms);
                this.delocalisedAnnotation(ring.atoms, this.artifactCharge.get(ring), this.artifactUnpaired.get(ring));
            }
            for (let arene of this.artifacts.getArenes()) {
                let isRing = arene.atoms.length > 2;
                if (isRing)
                    for (let n = 0; n < arene.atoms.length; n++) {
                        let nn = n < arene.atoms.length - 1 ? n + 1 : 0;
                        if (mol.findBond(arene.atoms[n], arene.atoms[nn]) == 0) {
                            isRing = false;
                            break;
                        }
                    }
                let alkeneLike = arene.atoms.length == 2;
                this.createBondCentroid(arene.centre, arene.atoms);
                if (!alkeneLike) {
                    if (isRing)
                        this.createCircularRing(arene.atoms);
                    else
                        this.createCurvedPath(arene.atoms, false, arene.centre);
                }
                this.delocalisedAnnotation(arene.atoms, this.artifactCharge.get(arene), this.artifactUnpaired.get(arene));
            }
        }
        if (this.wantCrossings) {
            let emb = new _mol_PseudoEmbedding__WEBPACK_IMPORTED_MODULE_0__.PseudoEmbedding(mol);
            emb.calculateCrossings();
            for (let cross of emb.crossings) {
                if (cross.higher == 1)
                    this.resolveLineCrossings(cross.bond1, cross.bond2);
                else if (cross.higher == 2)
                    this.resolveLineCrossings(cross.bond2, cross.bond1);
            }
        }
        let polymers = new _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_4__.PolymerBlock(mol);
        for (let id of polymers.getIDList())
            this.processPolymerUnit(polymers.getUnit(id), polymers.getUnits());
    }
    numPoints() { return this.points.length; }
    getPoint(idx) { return this.points[idx]; }
    getPoints() { return this.points; }
    numLines() { return this.lines.length; }
    getLine(idx) { return this.lines[idx]; }
    getLines() { return this.lines; }
    getUnsplitLines() { return this.unsplitLines; }
    numRings() { return this.rings.length; }
    getRing(idx) { return this.rings[idx]; }
    getRings() { return this.rings; }
    numPaths() { return this.paths.length; }
    getPath(idx) { return this.paths[idx]; }
    getPaths() { return this.paths; }
    numSpace() { return this.space.length; }
    getSpace(idx) { return this.space[idx]; }
    getSpaces() { return this.space; }
    offsetEverything(dx, dy) {
        var _a;
        for (let a of this.points)
            a.oval.offsetBy(dx, dy);
        for (let b of [...this.lines, ...((_a = this.unsplitLines) !== null && _a !== void 0 ? _a : [])])
            b.line.offsetBy(dx, dy);
        for (let r of this.rings) {
            r.cx += dx;
            r.cy += dy;
        }
        for (let p of this.paths) {
            _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(p.px, dx);
            _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(p.py, dy);
        }
        for (let spc of this.space) {
            spc.box.offsetBy(dx, dy);
            _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(spc.px, dx);
            _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(spc.py, dy);
        }
    }
    offsetOrigin() {
        let bounds = this.determineBoundary();
        if (bounds[0] != 0 || bounds[1] != 0)
            this.offsetEverything(-bounds[0], -bounds[1]);
    }
    scaleEverything(scaleBy) {
        var _a;
        if (scaleBy == 1)
            return;
        this.scale *= scaleBy;
        for (let a of this.points) {
            a.oval.scaleBy(scaleBy);
            a.fsz *= scaleBy;
        }
        for (let b of [...this.lines, ...((_a = this.unsplitLines) !== null && _a !== void 0 ? _a : [])]) {
            b.line.scaleBy(scaleBy);
            b.size *= scaleBy;
            b.head *= scaleBy;
        }
        for (let r of this.rings) {
            r.cx *= scaleBy;
            r.cy *= scaleBy;
            r.rw *= scaleBy;
            r.rh *= scaleBy;
            r.size *= scaleBy;
        }
        for (let p of this.paths) {
            _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.mulBy(p.px, scaleBy);
            _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.mulBy(p.py, scaleBy);
            p.size *= scaleBy;
        }
        for (let spc of this.space) {
            spc.box.scaleBy(scaleBy);
            _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.mulBy(spc.px, scaleBy);
            _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.mulBy(spc.py, scaleBy);
        }
    }
    determineBoundary(padding) {
        if (padding == null)
            padding = 0;
        if (this.space.length == 0)
            return [0, 0, 2 * padding, 2 * padding];
        let bounds = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.numberArray(0, 4);
        let spc = this.space[0];
        bounds[0] = spc.box.x;
        bounds[1] = spc.box.y;
        bounds[2] = spc.box.x + spc.box.w;
        bounds[3] = spc.box.y + spc.box.h;
        for (let n = this.space.length - 1; n > 0; n--) {
            spc = this.space[n];
            bounds[0] = Math.min(bounds[0], spc.box.x);
            bounds[1] = Math.min(bounds[1], spc.box.y);
            bounds[2] = Math.max(bounds[2], spc.box.x + spc.box.w);
            bounds[3] = Math.max(bounds[3], spc.box.y + spc.box.h);
        }
        return bounds;
    }
    determineBoundaryBox() {
        let [x1, y1, x2, y2] = this.determineBoundary();
        return new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Box(x1, y1, x2 - x1, y2 - y1);
    }
    squeezeInto(x, y, w, h, padding) {
        if (padding != null && padding > 0) {
            x += padding;
            y += padding;
            w -= 2 * padding;
            h -= 2 * padding;
        }
        let bounds = this.determineBoundary(0);
        let bw = bounds[2] - bounds[0], bh = bounds[3] - bounds[1];
        if (bw > w || bh > h) {
            let downScale = 1;
            if (bw > w)
                downScale = w / bw;
            if (bh > h)
                downScale = Math.min(downScale, h / bh);
            this.scaleEverything(downScale);
            _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.mulBy(bounds, downScale);
        }
        this.offsetEverything(x - bounds[0] + 0.5 * (w - bounds[2] + bounds[0]), y - bounds[1] + 0.5 * (h - bounds[3] + bounds[1]));
    }
    limitBounds(w, h) {
        let bounds = this.determineBoundary(0);
        if (bounds[0] == bounds[2] && bounds[1] == bounds[3])
            return;
        let scale = Math.min(1, Math.min(w / (bounds[2] - bounds[0]), h / (bounds[3] - bounds[1])));
        this.offsetEverything(-bounds[0], -bounds[1]);
        this.scaleEverything(scale);
    }
    monochromate(col) {
        for (let a of this.points)
            a.col = col;
        for (let b of this.lines)
            b.col = col;
    }
    spatialCongestion(x, y, thresh) {
        if (thresh == null)
            thresh = 0.001;
        let congest = 0;
        for (let n = 0; n < this.points.length; n++) {
            let a = this.points[n];
            if (a == null)
                continue;
            let dx = a.oval.cx - x, dy = a.oval.cy - y;
            congest += 1 / (dx * dx + dy * dy + thresh);
        }
        return congest;
    }
    clone() {
        let dup = new ArrangeMolecule(this.mol, this.measure, this.policy, this.effects);
        dup.scale = this.scale;
        dup.bondSepPix = this.bondSepPix;
        dup.lineSizePix = this.lineSizePix;
        dup.fontSizePix = this.fontSizePix;
        dup.ymul = this.ymul;
        for (let a of this.points)
            dup.points.push((0,_util_util__WEBPACK_IMPORTED_MODULE_8__.clone)(a));
        for (let b of this.lines)
            dup.lines.push((0,_util_util__WEBPACK_IMPORTED_MODULE_8__.clone)(b));
        for (let s of this.space)
            dup.space.push((0,_util_util__WEBPACK_IMPORTED_MODULE_8__.clone)(s));
        return dup;
    }
    setupBondOrders() {
        const mol = this.mol;
        for (let n = 0; n < mol.numBonds; n++)
            this.bondOrder[n] = mol.bondOrder(n + 1);
        for (let n = 0; n < mol.numAtoms; n++) {
            this.atomCharge[n] = mol.atomCharge(n + 1);
            this.atomUnpaired[n] = mol.atomUnpaired(n + 1);
        }
        let delocalise = (obj, atoms) => {
            let charge = 0, unpaired = 0;
            for (let a of atoms) {
                charge += this.atomCharge[a - 1];
                unpaired += this.atomUnpaired[a - 1];
                this.atomCharge[a - 1] = this.atomUnpaired[a - 1] = 0;
            }
            this.artifactCharge.set(obj, charge);
            this.artifactUnpaired.set(obj, unpaired);
            for (let a1 of atoms)
                for (let a2 of mol.atomAdjList(a1))
                    if (!atoms.includes(a2)) {
                        let b = mol.findBond(a1, a2);
                        if (this.bondOrder[b - 1] >= 0)
                            this.bondOrder[b - 1] = 1;
                    }
        };
        if (this.artifacts == null)
            return;
        for (let path of this.artifacts.getResPaths()) {
            let charge = 0, unpaired = 0, orders = 0;
            for (let n = 0; n < path.atoms.length; n++) {
                charge += mol.atomCharge(path.atoms[n]);
                unpaired += mol.atomUnpaired(path.atoms[n]);
                let b = mol.findBond(path.atoms[n], path.atoms[n < path.atoms.length - 1 ? n + 1 : 0]);
                if (b > 0)
                    orders += mol.bondOrder(b);
            }
            let fractional = (2 * orders - charge + unpaired) / path.atoms.length < 1;
            this.artifactFract.set(path, fractional);
            for (let n = 0; n < path.atoms.length - 1; n++) {
                let b = mol.findBond(path.atoms[n], path.atoms[n + 1]);
                if (b > 0)
                    this.bondOrder[b - 1] = fractional ? -1 : 1;
            }
            delocalise(path, path.atoms);
        }
        for (let ring of this.artifacts.getResRings()) {
            for (let n = 0; n < ring.atoms.length; n++) {
                let b = mol.findBond(ring.atoms[n], ring.atoms[n < ring.atoms.length - 1 ? n + 1 : 0]);
                if (b > 0)
                    this.bondOrder[b - 1] = 1;
            }
            delocalise(ring, ring.atoms);
        }
        for (let arene of this.artifacts.getArenes()) {
            let alkeneLike = arene.atoms.length == 2;
            for (let n = 0; n < arene.atoms.length; n++) {
                if (!alkeneLike) {
                    let b = mol.findBond(arene.atoms[n], arene.atoms[n < arene.atoms.length - 1 ? n + 1 : 0]);
                    if (b > 0)
                        this.bondOrder[b - 1] = 1;
                }
                let b = mol.findBond(arene.centre, arene.atoms[n]);
                if (b > 0)
                    this.bondOrder[b - 1] = -1;
            }
            delocalise(arene, arene.atoms);
        }
    }
    placeAdjunct(atom, str, fsz, col, angdir) {
        let wad = this.measure.measureText(str, fsz);
        let a = this.points[atom - 1];
        let cx = a.oval.cx, cy = a.oval.cy, rw = 0.55 * wad[0], rh = 0.55 * wad[1];
        if (str == '..') {
            let zeroBonds = this.mol.atomAdjBonds(atom).filter((b) => this.mol.bondOrder(b) == 0);
            if (zeroBonds.length == 1) {
                let zpt = this.getPoint(this.mol.bondOther(zeroBonds[0], atom) - 1);
                let dx = zpt.oval.cx - cx, dy = zpt.oval.cy - cy, inv = 1 / (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(dx, dy);
                let r = fsz * 0.15;
                let ox = dy * inv * 2.5 * r, oy = -dx * inv * 2.5 * r;
                let ext = 1.2 * (rw + rh) * inv;
                [dx, dy] = [dx * ext, dy * ext];
                this.points.push({ anum: 0, text: '.', fsz, col, oval: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Oval(cx + dx + ox, cy + dy + oy, r, r) });
                this.points.push({ anum: 0, text: '.', fsz, col, oval: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Oval(cx + dx - ox, cy + dy - oy, r, r) });
                return;
            }
        }
        let bestScore = 0, bestDX = 0, bestDY = 0;
        let px = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.numberArray(0, 4), py = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.numberArray(0, 4);
        let angThresh = 10;
        let shorted = false;
        for (let ext = 0.5 * (a.oval.rw + a.oval.rh); !shorted && ext < 1.5 * this.measure.scale(); ext += 0.1 * this.measure.scale()) {
            const DELTA = 5 * _util_util__WEBPACK_IMPORTED_MODULE_8__.DEGRAD;
            for (let d = 0; !shorted && d < Math.PI - 0.0001; d += DELTA)
                for (let s = -1; s <= 1; s += 2) {
                    let dang = d * s + (s > 0 ? DELTA : 0), ang = angdir + dang;
                    let dx = ext * Math.cos(ang), dy = ext * Math.sin(ang) * -this.ymul;
                    let x1 = cx + dx - rw, x2 = cx + dx + rw, y1 = cy + dy - rh, y2 = cy + dy + rh;
                    px[0] = x1;
                    py[0] = y1;
                    px[1] = x2;
                    py[1] = y1;
                    px[2] = x2;
                    py[2] = y2;
                    px[3] = x1;
                    py[3] = y2;
                    let viol = this.countPolyViolations(px, py, null, false);
                    let score = 10 * viol + Math.abs(dang) + 10 * ext;
                    let shortCircuit = viol == 0 && Math.abs(dang) < (angThresh + 1) * _util_util__WEBPACK_IMPORTED_MODULE_8__.DEGRAD;
                    if (bestScore == 0 || shortCircuit || score < bestScore) {
                        bestScore = score;
                        bestDX = dx;
                        bestDY = dy;
                    }
                    if (shortCircuit) {
                        shorted = true;
                        break;
                    }
                }
            angThresh += 5;
        }
        a =
            {
                anum: 0,
                text: str,
                fsz,
                col,
                oval: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Oval(cx + bestDX, cy + bestDY, rw, rh)
            };
        this.points.push(a);
        let spc = {
            anum: 0,
            bnum: 0,
            box: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Box(a.oval.cx - rw, a.oval.cy - rh, 2 * rw, 2 * rh),
            px: [a.oval.cx - rw, a.oval.cx + rw, a.oval.cx + rw, a.oval.cx - rw],
            py: [a.oval.cy - rh, a.oval.cy - rh, a.oval.cy + rh, a.oval.cy + rh]
        };
        this.space.push(spc);
    }
    processLabel(anum) {
        let ax = this.mol.atomX(anum), ay = this.mol.atomY(anum);
        let left = 0, right = 0;
        let adj = this.mol.atomAdjList(anum);
        for (let n = 0; n < adj.length; n++) {
            let theta = Math.atan2(this.mol.atomY(adj[n]) - ay, this.mol.atomX(adj[n]) - ax) * _util_util__WEBPACK_IMPORTED_MODULE_8__.RADDEG;
            if (theta >= -15 && theta <= 15)
                right += 3;
            else if (theta >= -85 && theta <= 85)
                right++;
            else if (theta > 85 && theta < 95) { }
            else if (theta < -85 && theta > -95) { }
            else if (theta > 165 || theta < -165)
                left += 3;
            else
                left++;
        }
        let label = this.mol.atomElement(anum);
        let ibar = label.indexOf('|'), ibrace = label.indexOf('{');
        let side = 0;
        if (left == 0 && right == 0 && ibar < 0 && ibrace < 0) { }
        else if (left < right)
            side = -1;
        else if (right < left)
            side = 1;
        else {
            let score1 = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_2__.CoordUtil.congestionPoint(this.mol, ax - 1, ay);
            let score2 = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_2__.CoordUtil.congestionPoint(this.mol, ax + 1, ay);
            if (score1 < 0.5 * score2)
                side = -1;
            else
                side = 1;
        }
        let chunks = null;
        let position = null;
        let primary = null;
        let refchunk = 0;
        if (ibar < 0 && ibrace < 0) {
            if (side == 0)
                chunks = [label];
            else if (side < 0) {
                chunks = [label.substring(0, label.length - 1), label.substring(label.length - 1)];
                refchunk = 1;
            }
            else
                chunks = [label.substring(0, 1), label.substring(1)];
        }
        else {
            let bits = [];
            let bpos = [];
            let bpri = [];
            let blocks = label.split('|');
            if (side < 0)
                blocks = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.reverse(blocks);
            let buff = '';
            for (let i = 0; i < blocks.length; i++) {
                let isPrimary = (side >= 0 && i == 0) || (side < 0 && i == blocks.length - 1);
                if (side < 0 && refchunk == 0 && i == blocks.length - 1)
                    refchunk = bits.length;
                let pos = 0;
                buff = '';
                for (let j = 0; j < blocks[i].length; j++) {
                    let ch = blocks[i].charAt(j);
                    if (ch == '{' || ch == '}') {
                        if (buff.length > 0) {
                            bits.push(buff.toString());
                            bpos.push(pos);
                            bpri.push(isPrimary);
                        }
                        buff = '';
                        pos = ch == '{' ? -1 : 0;
                    }
                    else if (ch == '^' && pos == -1 && buff.length == 0)
                        pos = 1;
                    else
                        buff += ch;
                }
                if (buff.length > 0) {
                    bits.push(buff.toString());
                    bpos.push(pos);
                    bpri.push(isPrimary);
                }
            }
            chunks = bits;
            position = bpos;
            primary = bpri;
            while (refchunk < chunks.length - 1 && position[refchunk] != 0)
                refchunk++;
        }
        let PADDING = 1.1;
        let SSFRACT = 0.6;
        let chunkw = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.numberArray(0, chunks.length);
        let tw = 0;
        for (let n = 0; n < chunks.length; n++) {
            chunkw[n] = this.measure.measureText(chunks[n], this.fontSizePix)[0];
            if (position != null && position[n] != 0)
                chunkw[n] *= SSFRACT;
            tw += chunkw[n];
        }
        let x = this.measure.angToX(ax), y = this.measure.angToY(ay);
        for (let n = 0; n < refchunk; n++)
            x -= chunkw[n];
        x -= 0.5 * chunkw[refchunk];
        for (let n = 0; n < chunks.length; n++) {
            let a = {
                anum: (n == refchunk || (primary != null && primary[n])) ? anum : 0,
                text: chunks[n],
                fsz: this.fontSizePix,
                col: this.policy.data.atomCols[this.mol.atomicNumber(anum)],
                oval: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Oval(x + 0.5 * chunkw[n], y, 0.5 * chunkw[n] * PADDING, 0.5 * this.fontSizePix * PADDING)
            };
            if (position != null && position[n] != 0) {
                a.fsz *= SSFRACT;
                if (position[n] < 0)
                    a.oval.cy += a.fsz * 0.7 * (this.measure.yIsUp() ? -1 : 1);
                else
                    a.oval.cy -= a.fsz * 0.3 * (this.measure.yIsUp() ? -1 : 1);
            }
            if (n == refchunk) {
                this.points[anum - 1] = a;
                this.space[anum - 1] = this.computeSpacePoint(a);
            }
            else {
                this.points.push(a);
                this.space.push(this.computeSpacePoint(a));
            }
            x += chunkw[n];
        }
    }
    backOffAtom(atom, x, y, fx, fy, minDist) {
        if (x == fx && y == fy)
            return 1;
        let dx = x - fx, dy = y - fy, dist = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(dx, dy), inv = 1.0 / dist;
        const bump = 0.1 * this.measure.scale();
        let xbump = x + 2 * bump * dx * inv, ybump = y + 2 * bump * dy * inv;
        let ext = dist;
        let active = false;
        for (let spc of this.space)
            if (spc.anum == atom) {
                const sz = spc.px.length;
                if (sz == 0)
                    continue;
                for (let n = 0; n < sz; n++) {
                    let nn = n < sz - 1 ? n + 1 : 0;
                    let x1 = spc.px[n], y1 = spc.py[n], x2 = spc.px[nn], y2 = spc.py[nn];
                    if (!_util_Geom__WEBPACK_IMPORTED_MODULE_7__.GeomUtil.doLineSegsIntersect(xbump, ybump, fx, fy, x1, y1, x2, y2))
                        continue;
                    let xy = _util_Geom__WEBPACK_IMPORTED_MODULE_7__.GeomUtil.lineIntersect(x, y, fx, fy, x1, y1, x2, y2);
                    active = true;
                    ext = Math.min(ext, (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(xy[0] - fx, xy[1] - fy));
                }
            }
        if (active) {
            ext = Math.max(minDist, ext - bump);
            return ext / dist;
        }
        else
            return 1;
    }
    backOffAtomDelta(atom, x, y, fx, fy, minDist) {
        let ext = this.backOffAtom(atom, x, y, fx, fy, minDist);
        if (ext >= 1)
            return null;
        ext = 1 - ext;
        let dx = (fx - x) * ext, dy = (fy - y) * ext;
        return [(0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm2_xy)(dx, dy), dx, dy];
    }
    shrinkBond(x, y, fx, fy, ext) {
        if (ext == 1)
            return [x, y];
        let dx = x - fx, dy = y - fy;
        return [fx + ext * dx, fy + ext * dy];
    }
    ensureMinimumBondLength(xy1, xy2, x1, y1, x2, y2, minDist) {
        let dx = xy2[0] - xy1[0], dy = xy2[1] - xy1[1];
        let dsq = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm2_xy)(dx, dy);
        minDist = Math.min(minDist, (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(x2 - x1, y2 - y1));
        if (dsq >= (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.sqr)(minDist - 0.0001))
            return;
        let d12 = Math.sqrt(dsq), d1 = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(xy1[0] - x1, xy1[1] - y1), d2 = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(x2 - xy2[0], y2 - xy2[1]);
        let mag = 1 - minDist / d12, invD12 = 1.0 / (d1 + d2), mag1 = d1 * mag * invD12, mag2 = d2 * mag * invD12;
        xy1[0] -= dx * mag1;
        xy1[1] -= dy * mag1;
        xy2[0] += dx * mag2;
        xy2[1] += dy * mag2;
    }
    orderedRingList() {
        let rings = [];
        let SIZE_ORDER = [6, 5, 7, 4, 3];
        for (let i = 0; i < SIZE_ORDER.length; i++) {
            let nring = this.mol.findRingsOfSize(SIZE_ORDER[i]);
            for (let j = 0; j < nring.length; j++)
                rings.push(nring[j]);
        }
        let ringsz = rings.length;
        let ringbusy = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.numberArray(0, this.mol.numAtoms);
        for (let n = 0; n < ringsz; n++) {
            let r = rings[n];
            for (let i = 0; i < r.length; i++)
                ringbusy[r[i] - 1]++;
        }
        let ringscore = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.numberArray(0, ringsz);
        for (let n = 0; n < ringsz; n++) {
            let r = rings[n];
            for (let i = 0; i < r.length; i++)
                ringscore[n] += ringbusy[r[i] - 1];
        }
        let ringorder = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.idxSort(ringscore);
        let resbcount = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.numberArray(0, ringsz), maxbcount = 0;
        for (let n = 0; n < ringsz; n++) {
            let r = rings[ringorder[n]];
            for (let i = 0; i < r.length; i++) {
                let j = this.mol.findBond(r[i], r[i + 1 < r.length ? i + 1 : 0]);
                if (this.mol.bondOrder(j) == 2)
                    resbcount[n]++;
            }
            maxbcount = Math.max(maxbcount, resbcount[n]);
        }
        let pos = 0, ret = [];
        for (let sz = maxbcount; sz >= 0; sz--) {
            for (let n = 0; n < ringsz; n++)
                if (resbcount[n] == sz)
                    ret.push(rings[ringorder[n]]);
        }
        return ret;
    }
    orthogonalDelta(x1, y1, x2, y2, d) {
        let ox = y1 - y2, oy = x2 - x1, dsq = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm2_xy)(ox, oy);
        let sc = dsq > 0 ? d / Math.sqrt(dsq) : 1;
        return [ox * sc, oy * sc];
    }
    processDoubleBond(idx, priority) {
        let bfr = this.mol.bondFrom(idx), bto = this.mol.bondTo(idx);
        let nfr = this.mol.atomAdjList(bfr), nto = this.mol.atomAdjList(bto);
        let a1 = this.points[bfr - 1], a2 = this.points[bto - 1];
        let x1 = a1.oval.cx, y1 = a1.oval.cy, x2 = a2.oval.cx, y2 = a2.oval.cy;
        let oxy = this.orthogonalDelta(x1, y1, x2, y2, this.bondSepPix);
        const minDist = MINBOND_EXOTIC * this.measure.scale();
        let dx = x2 - x1, dy = y2 - y1, btheta = Math.atan2(dy, dx);
        let countFLeft = 0, countFRight = 0, countTLeft = 0, countTRight = 0;
        let idxFLeft = 0, idxFRight = 0, idxTLeft = 0, idxTRight = 0;
        let noshift = false;
        for (let n = 0; n < nfr.length; n++)
            if (nfr[n] != bto) {
                let bo = this.mol.bondOrder(this.mol.findBond(bfr, nfr[n]));
                if (bo == 0)
                    continue;
                if (bo > 1) {
                    noshift = true;
                    break;
                }
                let ispri = false;
                for (let i = 0; i < (priority == null ? 0 : priority.length); i++)
                    if (priority[i] == nfr[n])
                        ispri = true;
                let theta = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.angleDiff)(Math.atan2(this.points[nfr[n] - 1].oval.cy - y1, this.points[nfr[n] - 1].oval.cx - x1), btheta);
                if (Math.abs(theta) * _util_util__WEBPACK_IMPORTED_MODULE_8__.RADDEG > 175) {
                    noshift = true;
                    break;
                }
                if (theta > 0) {
                    if (ispri)
                        countFLeft++;
                    idxFLeft = nfr[n];
                }
                else {
                    if (ispri)
                        countFRight++;
                    idxFRight = nfr[n];
                }
            }
        for (let n = 0; n < nto.length; n++)
            if (nto[n] != bfr) {
                let bo = this.mol.bondOrder(this.mol.findBond(bto, nto[n]));
                if (bo == 0)
                    continue;
                if (bo > 1) {
                    noshift = true;
                    break;
                }
                let ispri = false;
                for (let i = 0; i < (priority == null ? 0 : priority.length); i++)
                    if (priority[i] == nto[n])
                        ispri = true;
                let theta = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.angleDiff)(Math.atan2(this.points[nto[n] - 1].oval.cy - y2, this.points[nto[n] - 1].oval.cx - x2), btheta);
                if (Math.abs(theta) * _util_util__WEBPACK_IMPORTED_MODULE_8__.RADDEG > 175) {
                    noshift = true;
                    break;
                }
                if (theta > 0) {
                    if (ispri)
                        countTLeft++;
                    idxTLeft = nto[n];
                }
                else {
                    if (ispri)
                        countTRight++;
                    idxTRight = nto[n];
                }
            }
        let side = 0;
        if (noshift || countFLeft > 1 || countFRight > 1 || countTLeft > 1 || countTRight > 1) { }
        else if (countFLeft > 0 && countFRight > 0) { }
        else if (countTLeft > 0 && countTRight > 0) { }
        else if (countFLeft > 0 || countTLeft > 0)
            side = 1;
        else if (countFRight > 0 || countTRight > 0)
            side = -1;
        let sz = this.lineSizePix;
        let ax1 = x1, ay1 = y1, ax2 = x2, ay2 = y2;
        let bx1 = 0, by1 = 0, bx2 = 0, by2 = 0;
        if (side == 0) {
            ax1 = x1 + 0.5 * oxy[0];
            ay1 = y1 + 0.5 * oxy[1];
            ax2 = x2 + 0.5 * oxy[0];
            ay2 = y2 + 0.5 * oxy[1];
            bx1 = x1 - 0.5 * oxy[0];
            by1 = y1 - 0.5 * oxy[1];
            bx2 = x2 - 0.5 * oxy[0];
            by2 = y2 - 0.5 * oxy[1];
        }
        else if (side > 0) {
            bx1 = x1 + oxy[0];
            by1 = y1 + oxy[1];
            bx2 = x2 + oxy[0];
            by2 = y2 + oxy[1];
            if (nfr.length > 1 && this.points[bfr - 1].text == null) {
                bx1 += oxy[1];
                by1 -= oxy[0];
            }
            if (nto.length > 1 && this.points[bto - 1].text == null) {
                bx2 -= oxy[1];
                by2 += oxy[0];
            }
        }
        else if (side < 0) {
            bx1 = x1 - oxy[0];
            by1 = y1 - oxy[1];
            bx2 = x2 - oxy[0];
            by2 = y2 - oxy[1];
            if (nfr.length > 1 && this.points[bfr - 1].text == null) {
                bx1 += oxy[1];
                by1 -= oxy[0];
            }
            if (nto.length > 1 && this.points[bto - 1].text == null) {
                bx2 -= oxy[1];
                by2 += oxy[0];
            }
        }
        if (side != 0) {
            if (this.mol.atomElement(bfr).length <= 2 && this.mol.atomAdjCount(bfr) == 1 && this.points[bfr - 1].text != null) {
                this.bumpAtomPosition(bfr, 0.5 * oxy[0] * side, 0.5 * oxy[1] * side);
            }
            if (this.mol.atomElement(bto).length <= 2 && this.mol.atomAdjCount(bto) == 1 && this.points[bto - 1].text != null) {
                this.bumpAtomPosition(bto, 0.5 * oxy[0] * side, 0.5 * oxy[1] * side);
            }
        }
        let delta1 = this.backOffAtomDelta(bfr, ax1, ay1, ax2, ay2, minDist), delta2 = this.backOffAtomDelta(bfr, bx1, by1, bx2, by2, minDist);
        if (delta1 != null || delta2 != null) {
            let delta = (delta1 == null ? 0 : delta1[0]) > (delta2 == null ? 0 : delta2[0]) ? delta1 : delta2;
            ax1 += delta[1];
            ay1 += delta[2];
            bx1 += delta[1];
            by1 += delta[2];
        }
        let delta3 = this.backOffAtomDelta(bto, ax2, ay2, ax1, ay1, minDist), delta4 = this.backOffAtomDelta(bto, bx2, by2, bx1, by1, minDist);
        if (delta3 != null || delta4 != null) {
            let delta = (delta3 == null ? 0 : delta3[0]) > (delta4 == null ? 0 : delta4[0]) ? delta3 : delta4;
            ax2 += delta[1];
            ay2 += delta[2];
            bx2 += delta[1];
            by2 += delta[2];
        }
        if (side == 0 && !noshift) {
            let xy = null;
            if (this.points[bfr - 1].text == null && !this.mol.bondInRing(idx)) {
                xy = this.adjustBondPosition(idxFLeft, bfr, ax1, ay1, ax2, ay2);
                if (xy != null) {
                    ax1 = xy[0];
                    ay1 = xy[1];
                }
                xy = this.adjustBondPosition(idxFRight, bfr, bx1, by1, bx2, by2);
                if (xy != null) {
                    bx1 = xy[0];
                    by1 = xy[1];
                }
            }
            if (this.points[bto - 1].text == null && !this.mol.bondInRing(idx)) {
                xy = this.adjustBondPosition(idxTLeft, bto, ax2, ay2, ax1, ay1);
                if (xy != null) {
                    ax2 = xy[0];
                    ay2 = xy[1];
                }
                xy = this.adjustBondPosition(idxTRight, bto, bx2, by2, bx1, by1);
                if (xy != null) {
                    bx2 = xy[0];
                    by2 = xy[1];
                }
            }
        }
        let lt = this.mol.bondType(idx) == _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_UNKNOWN ? BLineType.Unknown : BLineType.Normal;
        let head = lt == BLineType.Unknown ? 0.1 * this.scale : 0;
        let col = this.effects.colBond[idx];
        if (!col)
            col = this.policy.data.foreground;
        let b1 = {
            bnum: idx,
            bfr,
            bto,
            type: lt,
            line: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Line(ax1, ay1, ax2, ay2),
            size: sz,
            head,
            col
        };
        let b2 = {
            bnum: idx,
            bfr,
            bto,
            type: lt,
            line: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Line(bx1, by1, bx2, by2),
            size: sz,
            head,
            col
        };
        this.lines.push(b1);
        this.lines.push(b2);
        this.space.push(this.computeSpaceLine(b1));
        this.space.push(this.computeSpaceLine(b2));
    }
    placeHydrogen(idx, hcount, fussy) {
        let font = _FontData__WEBPACK_IMPORTED_MODULE_10__.FontData.main;
        const SSFRACT = 0.6;
        const GLYPH_H = font.getIndex('H');
        let a = this.points[idx];
        let emscale = a.fsz * font.INV_UNITS_PER_EM;
        let sub = hcount >= 2 ? hcount.toString() : '';
        let outlineX = font.getOutlineX(GLYPH_H), outlineY = font.getOutlineY(GLYPH_H);
        let firstEMW = font.HORIZ_ADV_X[GLYPH_H], emw = firstEMW;
        for (let n = 0; n < sub.length; n++) {
            let ch = sub.charAt(n), g = font.getIndex(ch);
            if (n == 0) {
                emw += font.getKerning('H', ch);
            }
            else {
                let chp = sub.charAt(n - 1);
                emw += font.getKerning(chp, ch) * SSFRACT;
            }
            let extraX = font.getOutlineX(g), extraY = font.getOutlineY(g);
            _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(extraX, emw / SSFRACT);
            _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(extraY, (SSFRACT - 1) * font.ASCENT * 1.30);
            _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.mulBy(extraX, SSFRACT);
            _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.mulBy(extraY, SSFRACT);
            outlineX = outlineX.concat(extraX);
            outlineY = outlineY.concat(extraY);
            emw += font.HORIZ_ADV_X[g] * SSFRACT;
        }
        if (sub.length > 0) {
            let qh = new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.QuickHull(outlineX, outlineY, 0);
            outlineX = qh.hullX;
            outlineY = qh.hullY;
        }
        let emdx = -0.5 * firstEMW, emdy = 0.5 * font.ASCENT * font.ASCENT_FUDGE;
        for (let n = 0; n < outlineX.length; n++) {
            outlineX[n] = a.oval.cx + (emdx + outlineX[n]) * emscale;
            outlineY[n] = a.oval.cy + (emdy - outlineY[n]) * emscale * this.ymul;
        }
        let dx = 0, dy = 0;
        let srcWAD = this.measure.measureText(a.text, a.fsz);
        if (fussy) {
            let RIGHTLEFT = [0, 1, 2, 3];
            let LEFTRIGHT = [1, 0, 2, 3];
            let UPDOWN = [2, 3, 0, 1];
            let DOWNUP = [3, 2, 0, 1];
            let quad = RIGHTLEFT, adj = this.mol.atomAdjList(a.anum);
            if (adj.length == 0) {
                let LEFTIES = ['O', 'S', 'F', 'Cl', 'Br', 'I'];
                if (this.mol.atomCharge(a.anum) == 0 && this.mol.atomUnpaired(a.anum) == 0 &&
                    LEFTIES.indexOf(this.mol.atomElement(a.anum)) >= 0)
                    quad = LEFTRIGHT;
                else
                    quad = RIGHTLEFT;
            }
            else {
                let allLeft = true, allRight = true, allUp = true, allDown = true;
                const ax = this.mol.atomX(a.anum), ay = this.mol.atomY(a.anum);
                for (let n = 0; n < adj.length; n++) {
                    const bx = this.mol.atomX(adj[n]), by = this.mol.atomY(adj[n]);
                    if (bx > ax + 0.01)
                        allLeft = false;
                    if (bx < ax - 0.01)
                        allRight = false;
                    if (by < ay - 0.01)
                        allUp = false;
                    if (by > ay + 0.01)
                        allDown = false;
                }
                if (allLeft) { }
                else if (allRight)
                    quad = LEFTRIGHT;
                else if (allUp)
                    quad = DOWNUP;
                else if (allDown)
                    quad = UPDOWN;
            }
            for (let n = 0; n < 4; n++) {
                let tx = 0, ty = 0;
                if (quad[n] == 0)
                    tx = 0.5 * srcWAD[0] + 0.5 * firstEMW * emscale;
                else if (quad[n] == 1)
                    tx = -0.5 * srcWAD[0] - (emw - 0.5 * firstEMW) * emscale;
                else if (quad[n] == 2)
                    ty = (1.1 * srcWAD[1] + 0.5 * srcWAD[2]) * -this.ymul;
                else if (quad[n] == 3)
                    ty = (1.1 * srcWAD[1] + 0.5 * srcWAD[2]) * this.ymul;
                _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(outlineX, tx);
                _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(outlineY, ty);
                let viol = this.countPolyViolations(outlineX, outlineY, null, true);
                _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(outlineX, -tx);
                _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(outlineY, -ty);
                if (viol == 0) {
                    dx = tx;
                    dy = ty;
                    break;
                }
            }
            if (dx == 0 && dy == 0)
                return false;
        }
        else {
            const mx1 = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.min(outlineY), mx2 = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.max(outlineX), my1 = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.min(outlineY), my2 = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.max(outlineY), cx = 0.5 * (mx1 + mx2), cy = 0.5 * (my1 + my2);
            const mag = 1 + this.measure.scale() * this.policy.data.fontSize * ArrangeMolecule.FONT_CORRECT * 0.1 / Math.max(mx2 - cx, my2 - cy);
            const psz = outlineX.length;
            let magPX = outlineX.slice(0), magPY = outlineY.slice(0);
            for (let n = 0; n < psz; n++) {
                magPX[n] = (magPX[n] - cx) * mag + cx;
                magPY[n] = (magPY[n] - cy) * mag + cy;
            }
            let bestScore = 0, bestExt = 0, bestAng = 0;
            for (let ext = 0.5 * (a.oval.rw + a.oval.rh); ext < 1.5 * this.measure.scale(); ext += 0.1 * this.measure.scale()) {
                let anyNoClash = false;
                for (let ang = 0; ang < 2 * Math.PI; ang += 5 * _util_util__WEBPACK_IMPORTED_MODULE_8__.DEGRAD) {
                    let tx = ext * Math.cos(ang), ty = ext * Math.sin(ang);
                    _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(magPX, tx);
                    _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(magPY, ty);
                    let viol = this.countPolyViolations(magPX, magPY, null, false);
                    _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(magPX, -tx);
                    _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(magPY, -ty);
                    if (viol == 0)
                        anyNoClash = true;
                    let score = 10 * viol + this.spatialCongestion(a.oval.cx + tx, a.oval.cy + ty, 0.5) + 2 * ext;
                    if (bestScore == 0 || score < bestScore) {
                        bestScore = score;
                        bestExt = ext;
                        bestAng = ang;
                        dx = tx;
                        dy = ty;
                    }
                }
                if (anyNoClash)
                    break;
            }
        }
        let wad = this.measure.measureText('H', a.fsz);
        const PADDING = 1.1;
        let ah = {
            anum: 0,
            text: 'H',
            fsz: a.fsz,
            col: a.col,
            oval: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Oval(a.oval.cx + dx, a.oval.cy + dy, 0.5 * wad[0] * PADDING, 0.5 * wad[1] * PADDING)
        };
        this.points.push(ah);
        if (sub.length > 0) {
            const subFsz = SSFRACT * a.fsz;
            wad = this.measure.measureText(sub, subFsz);
            let an = {
                anum: 0,
                text: sub,
                fsz: subFsz,
                col: a.col,
                oval: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Oval(ah.oval.cx + 0.5 * firstEMW * a.fsz * font.INV_UNITS_PER_EM + 0.5 * wad[0], ah.oval.cy + (1 - SSFRACT) * a.fsz, 0.5 * wad[0] * PADDING, 0.5 * wad[1] * PADDING)
            };
            this.points.push(an);
        }
        _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(outlineX, dx);
        _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(outlineY, dy);
        let minX = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.min(outlineX), minY = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.min(outlineY);
        let spc = {
            anum: 0,
            bnum: 0,
            box: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Box(minX, minY, _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.max(outlineX) - minX, _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.max(outlineY) - minY),
            px: outlineX,
            py: outlineY
        };
        this.space.push(spc);
        return true;
    }
    computeSpacePoint(a) {
        let s = {
            anum: a.anum,
            bnum: 0,
            box: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Box(),
            px: [],
            py: []
        };
        const font = _FontData__WEBPACK_IMPORTED_MODULE_10__.FontData.main;
        let outlineX = [], outlineY = [];
        let emw = 0, nglyphs = 0;
        if (a.text != null) {
            for (let n = 0; n < a.text.length; n++) {
                let ch1 = a.text.charAt(n);
                let i = font.getIndex(ch1);
                if (i >= 0) {
                    if (emw == 0) {
                        outlineX = font.getOutlineX(i);
                        outlineY = font.getOutlineY(i);
                        nglyphs = 1;
                    }
                    else {
                        let extraX = font.getOutlineX(i), extraY = font.getOutlineY(i);
                        if (extraX.length > 0) {
                            _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(extraX, emw);
                            outlineX = outlineX.concat(extraX);
                            outlineY = outlineY.concat(extraY);
                            nglyphs++;
                        }
                    }
                    emw += font.HORIZ_ADV_X[i];
                }
                else
                    emw += font.MISSING_HORZ;
                if (n < a.text.length - 1) {
                    let ch2 = a.text.charAt(n + 1);
                    emw += font.getKerning(ch1, ch2);
                }
            }
        }
        if (outlineX.length > 0) {
            if (nglyphs > 1) {
                let qh = new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.QuickHull(outlineX, outlineY, 0);
                outlineX = qh.hullX;
                outlineY = qh.hullY;
            }
            let emdx = -0.5 * emw, emdy = 0.5 * font.ASCENT * font.ASCENT_FUDGE;
            let emscale = a.fsz * font.INV_UNITS_PER_EM;
            for (let n = 0; n < outlineX.length; n++) {
                outlineX[n] = a.oval.cx + (emdx + outlineX[n]) * emscale;
                outlineY[n] = a.oval.cy + (emdy - outlineY[n]) * emscale * this.ymul;
            }
            s.px = outlineX;
            s.py = outlineY;
            let minX = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.min(outlineX), minY = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.min(outlineY);
            s.box = new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Box(minX, minY, _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.max(outlineX) - minX, _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.max(outlineY) - minY);
        }
        else {
            s.box = _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Box.fromOval(a.oval);
            if (s.box.w > 0 && s.box.h > 0) {
                s.px = [s.box.minX(), s.box.maxX(), s.box.maxX(), s.box.minX()];
                s.py = [s.box.minY(), s.box.minY(), s.box.maxY(), s.box.maxY()];
            }
        }
        return s;
    }
    computeSpaceLine(b) {
        let s = {
            anum: 0,
            bnum: b.bnum,
            box: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Box(),
            px: [],
            py: []
        };
        if (b.type == BLineType.Normal || b.type == BLineType.Dotted || b.type == BLineType.DotDir) {
            s.px = [b.line.x1, b.line.x2];
            s.py = [b.line.y1, b.line.y2];
        }
        else {
            const dx = b.line.x2 - b.line.x1, dy = b.line.y2 - b.line.y1;
            const norm = b.head / Math.sqrt(dx * dx + dy * dy);
            const ox = norm * dy, oy = -norm * dx;
            if (b.type == BLineType.Unknown) {
                s.px = [b.line.x1 + ox, b.line.x1 - ox, b.line.x2 - ox, b.line.x2 + ox];
                s.py = [b.line.y1 + oy, b.line.y1 - oy, b.line.y2 - oy, b.line.y2 + oy];
            }
            else {
                s.px = [b.line.x1, b.line.x2 - ox, b.line.x2 + ox];
                s.py = [b.line.y1, b.line.y2 - oy, b.line.y2 + oy];
            }
        }
        s.box.x = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.min(s.px) - b.size;
        s.box.y = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.min(s.py) - b.size;
        s.box.w = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.max(s.px) - s.box.x + b.size;
        s.box.h = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.max(s.py) - s.box.y + b.size;
        return s;
    }
    bumpAtomPosition(atom, dx, dy) {
        let p = this.points[atom - 1];
        p.oval.cx += dx;
        p.oval.cy += dy;
        for (let n = this.space.length - 1; n >= 0; n--) {
            let s = this.space[n - 1];
            if (s == null || s.anum != atom)
                continue;
            s.box.x += dx;
            s.box.y += dy;
            _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(s.px, dx);
            _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.addTo(s.py, dy);
        }
    }
    spaceSubset(x, y, w, h) {
        let subset = [];
        for (let s of this.space)
            if (_util_Geom__WEBPACK_IMPORTED_MODULE_7__.GeomUtil.rectsIntersect(x, y, w, h, s.box.x, s.box.y, s.box.w, s.box.h))
                subset.push(s);
        return subset;
    }
    countPolyViolations(px, py, space, shortCircuit) {
        if (space == null)
            space = this.space;
        let hits = 0;
        const psz = px.length, nspc = space.length;
        let pr = new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Box(), sr = new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Box();
        for (let i1 = 0; i1 < psz; i1++) {
            let i2 = i1 < psz - 1 ? i1 + 1 : 0;
            pr.x = Math.min(px[i1], px[i2]) - 1;
            pr.y = Math.min(py[i1], py[i2]) - 1;
            pr.w = Math.max(px[i1], px[i2]) - pr.x + 2;
            pr.h = Math.max(py[i1], py[i2]) - pr.y + 2;
            for (let j = 0; j < nspc; j++) {
                let spc = space[j];
                if (spc.px == null)
                    continue;
                sr.x = spc.box.x - 1;
                sr.y = spc.box.y - 1;
                sr.w = spc.box.w + 1;
                sr.h = spc.box.h + 1;
                if (!pr.intersects(sr))
                    continue;
                let ssz = spc.px.length;
                for (let j1 = 0; j1 < ssz; j1++) {
                    let j2 = j1 < ssz - 1 ? j1 + 1 : 0;
                    sr.x = Math.min(spc.px[j1], spc.px[j2]) - 1;
                    sr.y = Math.min(spc.py[j1], spc.py[j2]) - 1;
                    sr.w = Math.max(spc.px[j1], spc.px[j2]) - sr.x + 2;
                    sr.h = Math.max(spc.py[j1], spc.py[j2]) - sr.y + 2;
                    if (!pr.intersects(sr))
                        continue;
                    if (_util_Geom__WEBPACK_IMPORTED_MODULE_7__.GeomUtil.doLineSegsIntersect(px[i1], py[i1], px[i2], py[i2], spc.px[j1], spc.py[j1], spc.px[j2], spc.py[j2])) {
                        if (shortCircuit)
                            return 1;
                        hits++;
                        break;
                    }
                    if (ssz == 1)
                        break;
                }
            }
        }
        pr.x = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.min(px);
        pr.y = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.min(py);
        pr.w = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.max(px) - pr.x;
        pr.h = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.max(py) - pr.y;
        for (let n = nspc - 1; n >= 0; n--) {
            let spc = space[n];
            sr.x = spc.box.x;
            sr.y = spc.box.y;
            sr.w = spc.box.w;
            sr.h = spc.box.h;
            if (!pr.intersects(sr))
                continue;
            for (let i = spc.px.length - 1; i >= 0; i--)
                if (_util_Geom__WEBPACK_IMPORTED_MODULE_7__.GeomUtil.pointInPolygon(spc.px[i], spc.py[i], px, py)) {
                    if (shortCircuit)
                        return 1;
                    hits++;
                    break;
                }
            for (let i = 0; i < psz; i++)
                if (_util_Geom__WEBPACK_IMPORTED_MODULE_7__.GeomUtil.pointInPolygon(px[i], py[i], spc.px, spc.py)) {
                    if (shortCircuit)
                        return 1;
                    hits++;
                    break;
                }
        }
        return hits;
    }
    adjustBondPosition(bf, bt, x1, y1, x2, y2) {
        if (bf == 0 || bt == 0)
            return null;
        for (let n = 0; n < this.lines.length; n++) {
            let b = this.lines[n];
            if (this.mol.bondOrder(b.bnum) != 1 || this.mol.bondType(b.bnum) != _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_NORMAL)
                continue;
            let alt = false;
            if (this.mol.bondFrom(b.bnum) == bf && this.mol.bondTo(b.bnum) == bt) { }
            else if (this.mol.bondFrom(b.bnum) == bt && this.mol.bondTo(b.bnum) == bf)
                alt = true;
            else
                continue;
            let th = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.angleDiff)(Math.atan2(b.line.y2 - b.line.y1, b.line.x2 - b.line.x1), Math.atan2(y2 - y1, x2 - x1)) * _util_util__WEBPACK_IMPORTED_MODULE_8__.RADDEG;
            if ((th > -5 && th < 5) || th > 175 || th < -175)
                continue;
            let xy = _util_Geom__WEBPACK_IMPORTED_MODULE_7__.GeomUtil.lineIntersect(b.line.x1, b.line.y1, b.line.x2, b.line.y2, x1, y1, x2, y2);
            if (this.mol.atomRingBlock(bt) == 0) {
                if (alt) {
                    b.line.x1 = xy[0];
                    b.line.y1 = xy[1];
                }
                else {
                    b.line.x2 = xy[0];
                    b.line.y2 = xy[1];
                }
            }
            return xy;
        }
        return null;
    }
    priorityDoubleSubstit(idx) {
        let bf = this.mol.bondFrom(idx), bt = this.mol.bondTo(idx);
        let nf = this.mol.atomAdjList(bf), nt = this.mol.atomAdjList(bt);
        let a1 = this.points[bf - 1], a2 = this.points[bt - 1];
        let x1 = a1.oval.cx, y1 = a1.oval.cy, x2 = a2.oval.cx, y2 = a2.oval.cy;
        let dx = x2 - x1, dy = y2 - y1, btheta = Math.atan2(dy, dx);
        let idxFLeft = 0, idxFRight = 0, idxTLeft = 0, idxTRight = 0;
        for (let n = 0; n < nf.length; n++)
            if (nf[n] != bt) {
                let theta = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.angleDiff)(Math.atan2(this.points[nf[n] - 1].oval.cy - y1, this.points[nf[n] - 1].oval.cx - x1), btheta);
                if (theta > 0) {
                    if (idxFLeft != 0)
                        return null;
                    idxFLeft = nf[n];
                }
                else {
                    if (idxFRight != 0)
                        return null;
                    idxFRight = nf[n];
                }
            }
        for (let n = 0; n < nt.length; n++)
            if (nt[n] != bf) {
                let theta = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.angleDiff)(Math.atan2(this.points[nt[n] - 1].oval.cy - y2, this.points[nt[n] - 1].oval.cx - x2), btheta);
                if (theta > 0) {
                    if (idxTLeft != 0)
                        return null;
                    idxTLeft = nt[n];
                }
                else {
                    if (idxTRight != 0)
                        return null;
                    idxTRight = nt[n];
                }
            }
        let sumFrom = (idxFLeft > 0 ? 1 : 0) + (idxFRight > 0 ? 1 : 0), sumTo = (idxTLeft > 0 ? 1 : 0) + (idxTRight > 0 ? 1 : 0);
        if (sumFrom == 1 && sumTo == 0)
            return [idxFLeft > 0 ? idxFLeft : idxFRight];
        if (sumFrom == 0 && sumTo == 1)
            return [idxTLeft > 0 ? idxTLeft : idxTRight];
        if (sumFrom == 1 && sumTo == 1) {
            if (idxFLeft > 0 && idxTLeft > 0)
                return [idxFLeft, idxTLeft];
            if (idxFRight > 0 && idxTRight > 0)
                return [idxFRight, idxTRight];
            let oxy = this.orthogonalDelta(x1, y1, x2, y2, this.bondSepPix);
            let congestLeft = this.spatialCongestion(0.5 * (x1 + x2) + oxy[0], 0.5 * (y1 + y2) + oxy[1]);
            let congestRight = this.spatialCongestion(0.5 * (x1 + x2) - oxy[0], 0.5 * (y1 + y2) - oxy[1]);
            if (congestLeft < congestRight)
                return [idxFLeft > 0 ? idxFLeft : idxTLeft];
            else
                return [idxFRight > 0 ? idxFRight : idxTRight];
        }
        if (sumFrom == 2 && sumTo == 1) {
            if (idxTLeft == 0)
                return [idxFRight, idxTRight];
            else
                return [idxFLeft, idxTLeft];
        }
        if (sumFrom == 1 && sumTo == 2) {
            if (idxFLeft == 0)
                return [idxFRight, idxTRight];
            else
                return [idxFLeft, idxTLeft];
        }
        return null;
    }
    annotateAtom(atom, text, col, fsz) {
        let [tw, ta] = this.measure.measureText(text, fsz);
        let a = this.points[atom - 1];
        let cx = a.oval.cx, cy = a.oval.cy, rw = 0.6 * tw, rh = 0.6 * ta;
        let otherTheta = [];
        for (let a of this.mol.atomAdjList(atom)) {
            let dx = this.points[a - 1].oval.cx - cx, dy = this.points[a - 1].oval.cy - cy;
            otherTheta.push(Math.atan2(dy, dx));
        }
        let minExt = 0.5 * (a.oval.rw + a.oval.rh), stepsz = 0.1 * this.scale, nsteps = 8;
        let angsteps = 36, angsz = _util_util__WEBPACK_IMPORTED_MODULE_8__.TWOPI / angsteps;
        let bestScore = Number.POSITIVE_INFINITY, bestDX = 0, bestDY = 0;
        let px = [0, 0, 0, 0], py = [0, 0, 0, 0];
        let limX = rw + minExt + nsteps * stepsz, limY = rh + minExt + nsteps * stepsz;
        let subSpace = this.spaceSubset(cx - limX, cy - limY, 2 * limX, 2 * limY);
        for (let step = 0; step < nsteps; step++) {
            let ext = minExt + step * stepsz;
            for (let ang = 0; ang < angsteps; ang++) {
                let th = angsz * ang;
                let dx = ext * Math.cos(th), dy = ext * Math.sin(th);
                let x1 = cx + dx - rw, x2 = cx + dx + rw, y1 = cy + dy - rh, y2 = cy + dy + rh;
                px[0] = x1;
                py[0] = y1;
                px[1] = x2;
                py[1] = y1;
                px[2] = x2;
                py[2] = y2;
                px[3] = x1;
                py[3] = y2;
                let viol = this.countPolyViolations(px, py, subSpace, false);
                let score = viol * 1000;
                for (let oth of otherTheta)
                    score -= Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_8__.angleDiff)(th, oth));
                if (score < bestScore) {
                    bestScore = score;
                    bestDX = dx;
                    bestDY = dy;
                }
            }
            if (bestScore < 500)
                break;
        }
        let x = cx + bestDX, y = cy + bestDY;
        let an = {
            anum: 0,
            text,
            fsz,
            col,
            oval: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Oval(x, y, rw, rh),
        };
        this.points.push(an);
        let spc = {
            anum: 0,
            bnum: 0,
            box: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Box(x - rw, y - rh, 2 * rw, 2 * rh),
            px: [x - rw, x + rw, x + rw, x - rw],
            py: [y - rh, y - rh, y + rh, y + rh],
        };
        this.space.push(spc);
    }
    annotateBond(bond, text, col, fsz) {
        let [tw, ta] = this.measure.measureText(text, fsz);
        let bfr = this.mol.bondFrom(bond), bto = this.mol.bondTo(bond);
        let a1 = this.points[bfr - 1], a2 = this.points[bto - 1];
        let cx = 0.5 * (a1.oval.cx + a2.oval.cx), cy = 0.5 * (a1.oval.cy + a2.oval.cy), rw = 0.6 * tw, rh = 0.6 * ta;
        let bth = Math.atan2(a2.oval.cy - a1.oval.cy, a2.oval.cx - a1.oval.cx);
        let otherTheta = [bth, bth + Math.PI];
        for (let a of this.mol.atomAdjList(bfr))
            if (a != bto) {
                let dx = this.points[a - 1].oval.cx - this.points[bfr - 1].oval.cx, dy = this.points[a - 1].oval.cy - this.points[bfr - 1].oval.cy;
                otherTheta.push(Math.atan2(dy, dx));
            }
        for (let a of this.mol.atomAdjList(bto))
            if (a != bfr) {
                let dx = this.points[a - 1].oval.cx - this.points[bto - 1].oval.cx, dy = this.points[a - 1].oval.cy - this.points[bto - 1].oval.cy;
                otherTheta.push(Math.atan2(dy, dx));
            }
        let minExt = 0.2 * this.scale * this.bondOrder[bond - 1], stepsz = 0.1 * this.scale, nsteps = 8;
        let angsteps = 36, angsz = _util_util__WEBPACK_IMPORTED_MODULE_8__.TWOPI / angsteps;
        let bestScore = Number.POSITIVE_INFINITY, bestDX = 0, bestDY = 0;
        let px = [0, 0, 0, 0], py = [0, 0, 0, 0];
        let limX = rw + minExt + nsteps * stepsz, limY = rh + minExt + nsteps * stepsz;
        let subSpace = this.spaceSubset(cx - limX, cy - limY, 2 * limX, 2 * limY);
        for (let step = 0; step < nsteps; step++) {
            let ext = minExt + step * stepsz;
            for (let ang = 0; ang < angsteps; ang++) {
                let th = angsz * ang;
                let dx = ext * Math.cos(th), dy = ext * Math.sin(th);
                let x1 = cx + dx - rw, x2 = cx + dx + rw, y1 = cy + dy - rh, y2 = cy + dy + rh;
                px[0] = x1;
                py[0] = y1;
                px[1] = x2;
                py[1] = y1;
                px[2] = x2;
                py[2] = y2;
                px[3] = x1;
                py[3] = y2;
                let viol = this.countPolyViolations(px, py, subSpace, false);
                let score = viol * 1000;
                for (let oth of otherTheta)
                    score -= Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_8__.angleDiff)(th, oth));
                if (score < bestScore) {
                    bestScore = score;
                    bestDX = dx;
                    bestDY = dy;
                }
            }
            if (bestScore < 500)
                break;
        }
        let x = cx + bestDX, y = cy + bestDY;
        let an = {
            anum: 0,
            text,
            fsz,
            col,
            oval: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Oval(x, y, rw, rh),
        };
        this.points.push(an);
        let spc = {
            anum: 0,
            bnum: 0,
            box: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Box(x - rw, y - rh, 2 * rw, 2 * rh),
            px: [x - rw, x + rw, x + rw, x - rw],
            py: [y - rh, y - rh, y + rh, y + rh],
        };
        this.space.push(spc);
    }
    boxOverlaps(x, y, w, h, pointmask, linemask) {
        let vx1 = x, vy1 = y, vx2 = x + w, vy2 = y + h;
        for (let n = 0; n < this.points.length; n++) {
            if (pointmask != null && !pointmask[n])
                continue;
            let a = this.points[n];
            let wx1 = a.oval.cx - a.oval.rw, wy1 = a.oval.cy - a.oval.rh, wx2 = a.oval.cx + a.oval.rw, wy2 = a.oval.cy + a.oval.rh;
            if (vx2 < wx1 || vx1 > wx2 || vy2 < wy1 || vy1 > wy2)
                continue;
            return true;
        }
        for (let n = 0; n < this.lines.length; n++) {
            if (linemask != null && !linemask[n])
                continue;
            let b = this.lines[n];
            let wx1 = b.line.x1, wy1 = b.line.y1, wx2 = b.line.x2, wy2 = b.line.y2;
            if (vx2 < Math.min(wx1, wx2) || vx1 > Math.max(wx1, wx2) || vy2 < Math.min(wy1, wy2) || vy1 > Math.max(wy1, wy2))
                continue;
            if (wx1 >= vx1 && wx1 <= vx2 && wy1 >= vy1 && wy1 <= vy2)
                return true;
            if (wx2 >= vx1 && wx2 <= vx2 && wy2 >= vy1 && wy2 <= vy2)
                return true;
            if (_util_Geom__WEBPACK_IMPORTED_MODULE_7__.GeomUtil.doLineSegsIntersect(wx1, wy1, wx2, wy2, vx1, vy1, vx2, vy1))
                return true;
            if (_util_Geom__WEBPACK_IMPORTED_MODULE_7__.GeomUtil.doLineSegsIntersect(wx1, wy1, wx2, wy2, vx1, vy2, vx2, vy2))
                return true;
            if (_util_Geom__WEBPACK_IMPORTED_MODULE_7__.GeomUtil.doLineSegsIntersect(wx1, wy1, wx2, wy2, vx1, vy1, vx1, vy2))
                return true;
            if (_util_Geom__WEBPACK_IMPORTED_MODULE_7__.GeomUtil.doLineSegsIntersect(wx1, wy1, wx2, wy2, vx2, vy1, vx2, vy2))
                return true;
        }
        return false;
    }
    resolveLineCrossings(bondHigher, bondLower) {
        const TYPES = [BLineType.Normal, BLineType.Dotted, BLineType.DotDir];
        const stashOriginals = () => {
            if (!this.unsplitLines)
                this.unsplitLines = this.lines.map((b) => {
                    return Object.assign(Object.assign({}, b), { line: b.line.clone() });
                });
        };
        for (let sanity = 10; sanity > 0; sanity--) {
            let anything = false;
            let linesHigher = this.lines.filter((b) => b.bnum == bondHigher && TYPES.includes(b.type));
            let linesLower = this.lines.filter((b) => b.bnum == bondLower && TYPES.includes(b.type));
            for (let b1 of linesHigher) {
                for (let b2 of linesLower) {
                    if (b1.bfr == b2.bfr || b1.bfr == b2.bto || b1.bto == b2.bfr || b1.bto == b2.bto)
                        continue;
                    if (b2.type == BLineType.DotDir)
                        b2.type = BLineType.Dotted;
                    if (!_util_Geom__WEBPACK_IMPORTED_MODULE_7__.GeomUtil.doLineSegsIntersect(b1.line.x1, b1.line.y1, b1.line.x2, b1.line.y2, b2.line.x1, b2.line.y1, b2.line.x2, b2.line.y2))
                        continue;
                    let [ix, iy] = _util_Geom__WEBPACK_IMPORTED_MODULE_7__.GeomUtil.lineIntersect(b1.line.x1, b1.line.y1, b1.line.x2, b1.line.y2, b2.line.x1, b2.line.y1, b2.line.x2, b2.line.y2);
                    let dx = b2.line.x2 - b2.line.x1, dy = b2.line.y2 - b2.line.y1;
                    let ext = Math.abs(dx) > Math.abs(dy) ? (ix - b2.line.x1) / dx : (iy - b2.line.y1) / dy;
                    let dist = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(dx, dy);
                    let delta = b2.size / dist * (b2.type == BLineType.Normal ? 2 : 4);
                    if (ext > delta && ext < 1 - delta) {
                        stashOriginals();
                        let b3 = {
                            bnum: b2.bnum,
                            bfr: b2.bfr,
                            bto: b2.bto,
                            type: b2.type,
                            line: b2.line.clone(),
                            size: b2.size,
                            head: b2.head,
                            col: b2.col
                        };
                        this.lines.push(b3);
                        b2.line.x2 = b2.line.x1 + dx * (ext - delta);
                        b2.line.y2 = b2.line.y1 + dy * (ext - delta);
                        b3.line.x1 = b3.line.x1 + dx * (ext + delta);
                        b3.line.y1 = b3.line.y1 + dy * (ext + delta);
                        anything = true;
                    }
                    else if (ext > delta) {
                        stashOriginals();
                        b2.line.x2 = b2.line.x1 + dx * (ext - delta);
                        b2.line.y2 = b2.line.y1 + dy * (ext - delta);
                        anything = true;
                    }
                    else if (ext < 1 - delta) {
                        stashOriginals();
                        b2.line.x1 = b2.line.x1 + dx * (ext + delta);
                        b2.line.y1 = b2.line.y1 + dy * (ext + delta);
                        anything = true;
                    }
                }
            }
            if (!anything)
                break;
        }
    }
    createCircularRing(atoms) {
        let px = new Array(atoms.length), py = new Array(atoms.length);
        for (let n = 0; n < atoms.length; n++) {
            let pt = this.points[atoms[n] - 1];
            px[n] = pt.oval.cx;
            py[n] = pt.oval.cy;
        }
        let cx = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.sum(px) / atoms.length, cy = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.sum(py) / atoms.length;
        let bx = [], by = [];
        let isRegular = true;
        let regDist = Number.NaN;
        const FRACT = 0.7;
        for (let a of atoms) {
            let pt = this.points[a - 1];
            let x0 = pt.oval.cx - cx, y0 = pt.oval.cy - cy, x1 = x0 - pt.oval.rw, x2 = x0 + pt.oval.rw, y1 = y0 - pt.oval.rh, y2 = y0 + pt.oval.rh;
            bx.push(x1);
            by.push(y0);
            bx.push(x1);
            by.push(y1);
            bx.push(x1);
            by.push(y2);
            bx.push(x0);
            by.push(y1);
            bx.push(x0);
            by.push(y2);
            bx.push(x2);
            by.push(y0);
            bx.push(x2);
            by.push(y1);
            bx.push(x2);
            by.push(y2);
            let dist = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(x0, y0), theta = Math.atan2(y0, x0);
            bx.push(FRACT * dist * Math.cos(theta));
            by.push(FRACT * dist * Math.sin(theta));
            for (let b of this.mol.atomAdjList(a))
                if (atoms.indexOf(b) >= 0) {
                    let pb = this.points[b - 1];
                    let mx = 0.5 * (pt.oval.cx + pb.oval.cx) - cx, my = 0.5 * (pt.oval.cy + pb.oval.cy) - cy;
                    let mdist = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(mx, my), mtheta = Math.atan2(my, mx);
                    bx.push(FRACT * mdist * Math.cos(mtheta));
                    by.push(FRACT * mdist * Math.sin(mtheta));
                }
            if (!isRegular) { }
            else if (Number.isFinite(regDist)) {
                if (Math.abs(regDist - dist) > 1)
                    isRegular = false;
            }
            else
                regDist = dist;
        }
        let r = { atoms, cx, cy, rw: 0, rh: 0, theta: 0, size: 0 };
        if (isRegular) {
            r.rw = r.rh = _util_Geom__WEBPACK_IMPORTED_MODULE_7__.GeomUtil.fitCircle(bx, by);
        }
        else {
            let mdist = 0;
            for (let n = 0; n < atoms.length; n++)
                mdist += (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(px[n] - cx, py[n] - cy);
            let margin = mdist / atoms.length * (1 - FRACT);
            var fit = new _util_FitRotatedEllipse__WEBPACK_IMPORTED_MODULE_6__.FitRotatedEllipse(px, py, margin);
            fit.calculate();
            r.cx = fit.cx;
            r.cy = fit.cy;
            r.rw = fit.rw;
            r.rh = fit.rh;
            r.theta = fit.theta;
        }
        r.size = this.lineSizePix;
        this.rings.push(r);
    }
    createCurvedPath(atoms, fractional, extAtom) {
        const sz = atoms.length, szn = sz - 1;
        let x = [], y = [], symbol = [];
        for (let n = 0; n < sz; n++) {
            let pt = this.points[atoms[n] - 1];
            x.push(pt.oval.cx);
            y.push(pt.oval.cy);
            symbol.push(pt.text != null);
        }
        let ox = [], oy = [];
        const EXT = _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.IDEALBOND * 0.25 * this.scale;
        for (let n = 0; n < sz - 1; n++) {
            let dx = x[n + 1] - x[n], dy = y[n + 1] - y[n], invD = EXT * (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.invZ)((0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(dx, dy));
            ox.push(dy * invD);
            oy.push(-dx * invD);
        }
        const FAR = 1.2, CLOSE = 0.7;
        let sx1 = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.numberArray(0, sz), sy1 = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.numberArray(0, sz), sx2 = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.numberArray(0, sz), sy2 = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.numberArray(0, sz);
        const capA = symbol[0] ? FAR : CLOSE;
        if (!fractional) {
            sx1[0] = x[0] + ox[0] * capA;
            sy1[0] = y[0] + oy[0] * capA;
            sx2[0] = x[0] - ox[0] * capA;
            sy2[0] = y[0] - oy[0] * capA;
        }
        else {
            const dx = -oy[0], dy = ox[0];
            sx1[0] = x[0] + dx * capA;
            sy1[0] = y[0] + dy * capA;
            sx2[0] = x[0] + dx * capA;
            sy2[0] = y[0] + dy * capA;
        }
        let ncross1 = 0, ncross2 = 0;
        for (let n = 1; n < sz - 1; n++) {
            const fr1 = symbol[n] ? FAR : CLOSE, fr2 = fr1;
            sx1[n] = x[n] + fr1 * (ox[n - 1] + ox[n]);
            sy1[n] = y[n] + fr1 * (oy[n - 1] + oy[n]);
            sx2[n] = x[n] - fr2 * (ox[n - 1] + ox[n]);
            sy2[n] = y[n] - fr2 * (oy[n - 1] + oy[n]);
            for (let a of this.mol.atomAdjList(atoms[n]))
                if (atoms.indexOf(a) < 0 && a != extAtom) {
                    let pt = this.points[a - 1];
                    let dx = pt.oval.cx - x[n], dy = pt.oval.cy - y[n];
                    let dot1 = dx * (sx1[n] - x[n]) + dy * (sy1[n] - x[n]);
                    let dot2 = dy * (sx2[n] - x[n]) + dy * (sy2[n] - x[n]);
                    if (dot1 > dot2)
                        ncross1++;
                    else
                        ncross2++;
                }
        }
        let nn = sz - 1;
        let capB = symbol[nn] ? FAR : CLOSE;
        if (!fractional) {
            sx1[nn] = x[nn] + ox[nn - 1] * capB;
            sy1[nn] = y[nn] + oy[nn - 1] * capB;
            sx2[nn] = x[nn] - ox[nn - 1] * capB;
            sy2[nn] = y[nn] - oy[nn - 1] * capB;
        }
        else {
            let dx = -oy[nn - 1], dy = ox[nn - 1];
            sx1[nn] = x[nn] - dx * capB;
            sy1[nn] = y[nn] - dy * capB;
            sx2[nn] = x[nn] - dx * capB;
            sy2[nn] = y[nn] - dy * capB;
        }
        let score1 = 0, score2 = 0;
        for (let n = 0; n < sz - 1; n++) {
            score1 += (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(sx1[n + 1] - sx1[n], sy1[n + 1] - sy1[n]);
            score2 += (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(sx2[n + 1] - sx2[n], sy2[n + 1] - sy2[n]);
        }
        score1 *= ncross1 + 1;
        score2 *= ncross2 + 1;
        let sx = score1 < score2 ? sx1 : sx2;
        let sy = score1 < score2 ? sy1 : sy2;
        let p = { atoms, px: null, py: null, ctrl: null, size: this.lineSizePix };
        this.splineInterpolate(p, sx, sy);
        this.paths.push(p);
    }
    createBondCentroid(from, to) {
        let pt = this.points[from - 1];
        let x1 = pt.oval.cx, y1 = pt.oval.cy, x2 = 0, y2 = 0;
        for (let a of to) {
            pt = this.points[a - 1];
            x2 += pt.oval.cx;
            y2 += pt.oval.cy;
        }
        x2 /= to.length;
        y2 /= to.length;
        if (to.length <= 2) {
            x2 -= 0.1 * (x2 - x1);
            y2 -= 0.1 * (y2 - y1);
        }
        const minDist = MINBOND_LINE * this.measure.scale();
        let xy1 = this.shrinkBond(x1, y1, x2, y2, this.backOffAtom(from, x1, y1, x2, y2, minDist));
        this.ensureMinimumBondLength(xy1, [x2, y2], x1, y1, x2, y2, minDist);
        let b = {
            bnum: 0,
            bfr: from,
            bto: 0,
            type: BLineType.Normal,
            line: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Line(xy1[0], xy1[1], x2, y2),
            size: this.lineSizePix,
            head: 0,
            col: this.policy.data.foreground
        };
        this.lines.push(b);
        this.space.push(this.computeSpaceLine(b));
    }
    splineInterpolate(path, x, y) {
        const sz = x.length;
        const scale = 0.25;
        for (let n = 0; n < sz; n++) {
            if (n == 0) {
                let dx = x[n + 1] - x[n], dy = y[n + 1] - y[n];
                let qx = x[n] + scale * dx, qy = y[n] + scale * dy;
                path.px = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.px, x[n]);
                path.py = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.py, y[n]);
                path.ctrl = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.ctrl, false);
                path.px = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.px, qx);
                path.py = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.py, qy);
                path.ctrl = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.ctrl, true);
            }
            else if (n == sz - 1) {
                let dx = x[n] - x[n - 1], dy = y[n] - y[n - 1];
                let qx = x[n] - scale * dx, qy = y[n] - scale * dy;
                path.px = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.px, qx);
                path.py = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.py, qy);
                path.ctrl = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.ctrl, true);
                path.px = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.px, x[n]);
                path.py = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.py, y[n]);
                path.ctrl = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.ctrl, false);
            }
            else {
                let dx = x[n + 1] - x[n - 1], dy = y[n + 1] - y[n - 1];
                let invD = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.invZ)((0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(dx, dy));
                dx *= invD;
                dy *= invD;
                let d1 = scale * (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(x[n] - x[n - 1], y[n] - y[n - 1]), d2 = scale * (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(x[n + 1] - x[n], y[n + 1] - y[n]);
                let qx1 = x[n] - dx * d1, qy1 = y[n] - dy * d1;
                let qx2 = x[n] + dx * d2, qy2 = y[n] + dy * d2;
                path.px = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.px, qx1);
                path.py = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.py, qy1);
                path.ctrl = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.ctrl, true);
                path.px = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.px, x[n]);
                path.py = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.py, y[n]);
                path.ctrl = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.ctrl, false);
                path.px = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.px, qx2);
                path.py = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.py, qy2);
                path.ctrl = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.append(path.ctrl, true);
            }
        }
    }
    delocalisedAnnotation(atoms, charge, unpaired) {
        const mol = this.mol;
        let str = '';
        if (charge == -1)
            str = '-';
        else if (charge == 1)
            str = '+';
        else if (charge < -1)
            str = Math.abs(charge) + '-';
        else if (charge > 1)
            str = charge + '+';
        if (unpaired > 0)
            for (let n = 0; n < unpaired; n++)
                str += '.';
        if (str.length == 0)
            return;
        const sz = atoms.length;
        let bestX = 0, bestY = 0;
        for (let a of atoms) {
            bestX += mol.atomX(a);
            bestY += mol.atomY(a);
        }
        bestX /= sz;
        bestY /= sz;
        let bestScore = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_2__.CoordUtil.congestionPoint(mol, bestX, bestY);
        for (let n = 1; n < sz - 1; n++) {
            let x = 0.5 * (mol.atomX(atoms[n - 1]) + mol.atomX(atoms[n + 1])), y = 0.5 * (mol.atomY(atoms[n - 1]) + mol.atomY(atoms[n + 1]));
            let score = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_2__.CoordUtil.congestionPoint(mol, x, y);
            if (score < bestScore) {
                bestScore = score;
                bestX = x;
                bestY = y;
            }
        }
        let fsz = 0.8 * this.fontSizePix;
        let wad = this.measure.measureText(str, fsz);
        let rw = 0.55 * wad[0], rh = 0.55 * wad[1];
        let a = {
            anum: 0,
            text: str,
            fsz,
            col: this.policy.data.foreground,
            oval: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Oval(this.measure.angToX(bestX), this.measure.angToY(bestY), rw, rh)
        };
        this.points.push(a);
        let spc = {
            anum: 0,
            bnum: 0,
            box: new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Box(a.oval.cx - rw, a.oval.cy - rh, 2 * rw, 2 * rh),
            px: [a.oval.cx - rw, a.oval.cx + rw, a.oval.cx + rw, a.oval.cx - rw],
            py: [a.oval.cy - rh, a.oval.cy - rh, a.oval.cy + rh, a.oval.cy + rh]
        };
        this.space.push(spc);
    }
    processPolymerUnit(unit, allUnits) {
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.len(unit.bondConn) == 4) {
            this.processPolymerUnitPair(unit);
            return;
        }
        let brackets = [];
        const { mol, measure } = this;
        for (let n = 1; n <= mol.numBonds; n++) {
            let a1 = mol.bondFrom(n), a2 = mol.bondTo(n);
            let in1 = unit.atoms.indexOf(a1) >= 0, in2 = unit.atoms.indexOf(a2) >= 0;
            let bracket = null;
            if (in1 && !in2)
                bracket = { a1, a2 };
            else if (in2 && !in1)
                bracket = { a1: a2, a2: a1 };
            else
                continue;
            bracket.x1 = mol.atomX(bracket.a1);
            bracket.y1 = mol.atomY(bracket.a1);
            bracket.x2 = mol.atomX(bracket.a2);
            bracket.y2 = mol.atomY(bracket.a2);
            bracket.shared = false;
            for (let other of allUnits)
                if (unit !== other && other.atoms.includes(bracket.a2)) {
                    bracket.shared = true;
                    break;
                }
            let nestings = allUnits.filter((look) => look === unit || (look.atoms.includes(bracket.a1) && !look.atoms.includes(bracket.a2)));
            if (nestings.length > 1) {
                nestings.sort((u1, u2) => u1.atoms.length - u2.atoms.length);
                for (let i = 0; i < nestings.length; i++)
                    if (nestings[i] === unit)
                        bracket.nestOrder = i;
                bracket.nestCount = nestings.length;
            }
            brackets.push(bracket);
        }
        let tagidx = 0;
        let atomX = unit.atoms.map((a) => mol.atomX(a)), atomY = unit.atoms.map((a) => mol.atomY(a));
        let minX = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.min(atomX), minY = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.min(atomY);
        let maxX = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.max(atomX), maxY = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.max(atomY);
        for (let n = 1; n < brackets.length; n++) {
            let b1 = brackets[tagidx], b2 = brackets[n];
            let score1 = b1.x2 - minX - b1.y2 + minY;
            let score2 = b2.x2 - minX - b2.y2 + minY;
            if (score2 > score1)
                tagidx = n;
        }
        let isLinear = false, isOuter = false;
        if (brackets.length == 2) {
            let left = brackets[tagidx == 0 ? 1 : 0], right = brackets[tagidx];
            let theta1 = Math.atan2(left.y2 - left.y1, left.x2 - left.x1);
            let theta2 = Math.atan2(right.y2 - right.y1, right.x2 - right.x1);
            isLinear = (theta1 > 145 * _util_util__WEBPACK_IMPORTED_MODULE_8__.DEGRAD || theta1 < -145 * _util_util__WEBPACK_IMPORTED_MODULE_8__.DEGRAD) && theta2 < 35 * _util_util__WEBPACK_IMPORTED_MODULE_8__.DEGRAD && theta2 > -35 * _util_util__WEBPACK_IMPORTED_MODULE_8__.DEGRAD;
        }
        else if (brackets.length == 0) {
            let ym = 0.5 * (minY + maxY);
            brackets.push({ x1: minX, y1: ym, x2: minX - 1, y2: ym });
            brackets.push({ x1: maxX, y1: ym, x2: maxX + 1, y2: ym });
            tagidx = 1;
            isOuter = true;
        }
        let bsz1 = (isOuter ? 0.5 * (maxY - minY + 1) : isLinear ? 1.0 : 0.5) * this.scale, bsz2 = 0.2 * this.scale;
        const BASE_LINE = { bnum: 0, bfr: 0, bto: 0, type: BLineType.Normal, size: this.lineSizePix, head: 0, col: this.policy.data.foreground };
        const BASE_TEXT = { anum: 0, fsz: 0.7 * this.fontSizePix, bold: false, col: this.policy.data.foreground };
        for (let n = 0; n < brackets.length; n++) {
            let bracket = brackets[n];
            let x1 = measure.angToX(bracket.x1), y1 = measure.angToY(bracket.y1);
            let x2 = measure.angToX(bracket.x2), y2 = measure.angToY(bracket.y2);
            if (bracket.shared) {
                x2 -= (x2 - x1) * 0.1;
                y2 -= (y2 - y1) * 0.1;
            }
            if (bracket.nestCount > 1) {
                let dx = x2 - x1, dy = y2 - y1, fract = (bracket.nestOrder + 1) / bracket.nestCount;
                x2 = x1 + dx * fract;
                y2 = y1 + dy * fract;
            }
            let mx = 0.5 * (x1 + x2), my = 0.5 * (y1 + y2);
            if (isLinear) {
                x1 = x2 = mx;
                y1 = y2 = my;
                if (n == tagidx) {
                    x1--;
                    x2++;
                }
                else {
                    x1++;
                    x2--;
                }
            }
            let invDist = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.invZ)((0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(x2 - x1, y2 - y1));
            let dx = (x2 - x1) * invDist, dy = (y2 - y1) * invDist;
            let ox = dy, oy = -dx;
            let px2 = mx - bsz1 * ox, py2 = my - bsz1 * oy;
            let px3 = mx + bsz1 * ox, py3 = my + bsz1 * oy;
            let px1 = px2 - bsz2 * dx, py1 = py2 - bsz2 * dy;
            let px4 = px3 - bsz2 * dx, py4 = py3 - bsz2 * dy;
            let line1 = Object.assign(Object.assign({}, BASE_LINE), { 'line': new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Line(px1, py1, px2, py2) });
            let line2 = Object.assign(Object.assign({}, BASE_LINE), { 'line': new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Line(px2, py2, px3, py3) });
            let line3 = Object.assign(Object.assign({}, BASE_LINE), { 'line': new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Line(px3, py3, px4, py4) });
            this.lines.push(line1);
            this.lines.push(line2);
            this.lines.push(line3);
            this.space.push(this.computeSpaceLine(line1));
            this.space.push(this.computeSpaceLine(line2));
            this.space.push(this.computeSpaceLine(line3));
            if (n == tagidx) {
                let xx, yy;
                if (bracket.shared)
                    [xx, yy] = [px2 - 0.5 * this.scale * ox, py2 - 0.5 * this.scale * oy];
                else
                    [xx, yy] = [px2 + bsz2 * 2 * dx, py2 + bsz2 * 2 * dy];
                let pt1 = Object.assign(Object.assign({}, BASE_TEXT), { 'text': 'n', 'oval': new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Oval(xx, yy, 0, 0) });
                this.points.push(pt1);
                this.space.push(this.computeSpacePoint(pt1));
                if (unit.connect != null) {
                    let text = '?';
                    if (unit.connect == _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_4__.PolymerBlockConnectivity.HeadToTail)
                        text = 'ht';
                    else if (unit.connect == _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_4__.PolymerBlockConnectivity.HeadToHead)
                        text = 'hh';
                    else if (unit.connect == _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_4__.PolymerBlockConnectivity.Random)
                        text = 'eu';
                    if (bracket.shared)
                        [xx, yy] = [px3 + 0.5 * this.scale * ox, py3 + 0.5 * this.scale * oy];
                    else
                        [xx, yy] = [px3 + bsz2 * 2.5 * dx, py3 + bsz2 * 2.5 * dy];
                    let pt2 = Object.assign(Object.assign({}, BASE_TEXT), { 'text': text, 'oval': new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Oval(xx, yy, 0, 0) });
                    this.points.push(pt2);
                    this.space.push(this.computeSpacePoint(pt2));
                }
            }
        }
    }
    processPolymerUnitPair(unit) {
        const { mol, measure } = this;
        let xpos = [], ypos = [];
        for (let b of unit.bondConn) {
            let bfr = mol.bondFrom(b), bto = mol.bondTo(b);
            xpos.push(measure.angToX(0.5 * (mol.atomX(bfr) + mol.atomX(bto))));
            ypos.push(measure.angToY(0.5 * (mol.atomY(bfr) + mol.atomY(bto))));
        }
        let cx = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.sum(xpos) * 0.25, cy = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.sum(ypos) * 0.25;
        let bsz = 0.5 * this.scale;
        let rx = [], ry = [];
        for (let [i1, i2] of [[0, 1], [2, 3]]) {
            let dx = xpos[i2] - xpos[i1], dy = ypos[i2] - ypos[i1], inv = bsz * (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.invZ)((0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm_xy)(dx, dy) + 0.001);
            [dx, dy] = [dx * inv, dy * inv];
            xpos[i1] -= 2 * dx;
            ypos[i1] -= 2 * dy;
            xpos[i2] += 2 * dx;
            ypos[i2] += 2 * dy;
            let ox = dy, oy = -dx;
            let dsq1 = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm2_xy)(0.5 * (xpos[i1] + xpos[i2]) + ox - cx, 0.5 * (ypos[i1] + ypos[i2]) + oy - cy);
            let dsq2 = (0,_util_util__WEBPACK_IMPORTED_MODULE_8__.norm2_xy)(0.5 * (xpos[i1] + xpos[i2]) - ox - cx, 0.5 * (ypos[i1] + ypos[i2]) - oy - cy);
            if (dsq2 < dsq1)
                [ox, oy] = [-ox, -oy];
            rx.push(...[ox, ox]);
            ry.push(...[oy, oy]);
        }
        const BASE_LINE = { bnum: 0, bfr: 0, bto: 0, type: BLineType.Normal, size: this.lineSizePix, head: 0, col: this.policy.data.foreground };
        const BASE_TEXT = { anum: 0, fsz: 0.7 * this.fontSizePix, bold: false, col: this.policy.data.foreground };
        let drawLine = (x1, y1, x2, y2) => {
            let line = Object.assign(Object.assign({}, BASE_LINE), { 'line': new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Line(x1, y1, x2, y2) });
            this.lines.push(line);
            this.space.push(this.computeSpaceLine(line));
        };
        let drawText = (x, y, txt) => {
            let pt = Object.assign(Object.assign({}, BASE_TEXT), { 'text': txt, 'oval': new _util_Geom__WEBPACK_IMPORTED_MODULE_7__.Oval(x, y, 0, 0) });
            this.points.push(pt);
            this.space.push(this.computeSpacePoint(pt));
        };
        drawLine(xpos[0], ypos[0], xpos[1], ypos[1]);
        drawLine(xpos[0], ypos[0], xpos[0] + rx[0], ypos[0] + ry[0]);
        drawLine(xpos[1], ypos[1], xpos[1] + rx[1], ypos[1] + ry[1]);
        drawLine(xpos[2], ypos[2], xpos[3], ypos[3]);
        drawLine(xpos[2], ypos[2], xpos[2] + rx[2], ypos[2] + ry[2]);
        drawLine(xpos[3], ypos[3], xpos[3] + rx[3], ypos[3] + ry[3]);
        let xmin = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.min(xpos), ymin = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.min(ypos);
        let dist = [];
        for (let n = 0; n < 4; n++)
            dist.push(xpos[n] - xmin + ypos[n] - ymin);
        let idxN = _util_Vec__WEBPACK_IMPORTED_MODULE_9__.Vec.idxMax(dist);
        drawText(xpos[idxN] - rx[idxN], ypos[idxN] - ry[idxN], 'n');
        let idxD2 = idxN + (idxN % 2 == 1 ? -1 : 1), idxD1 = (idxD2 + 2) % 4;
        drawText(xpos[idxD1] - 0.5 * rx[idxD1], ypos[idxD1] - 0.5 * ry[idxD1], '*');
        drawText(xpos[idxD2] - 0.5 * rx[idxD2], ypos[idxD2] - 0.5 * ry[idxD2], '*');
    }
}
ArrangeMolecule.FONT_CORRECT = 1.5;


/***/ }),

/***/ "./src/gfx/AxisLabeller.ts":
/*!*********************************!*\
  !*** ./src/gfx/AxisLabeller.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AxisLabeller: () => (/* binding */ AxisLabeller)
/* harmony export */ });
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");

class AxisLabeller {
    constructor(width, minVal, maxVal, textWidth, inverse) {
        this.width = width;
        this.minVal = minVal;
        this.maxVal = maxVal;
        this.textWidth = textWidth;
        this.inverse = inverse;
        this.notches = [];
    }
    calculate() {
        if (this.minVal == this.maxVal) {
            this.notches.push({
                label: this.minVal.toString(),
                value: this.minVal,
                pos: 0.5 * this.width
            });
            return;
        }
        const width = this.width, minVal = this.minVal, maxVal = this.maxVal;
        const range = maxVal - minVal, invRange = 1.0 / range;
        let position = (val) => width * (val - minVal) * invRange;
        let loT = null, hiT = null;
        const bumpLess = 1 - 1E-5, bumpMore = 1 + 1E-5;
        got: for (let outer = 1E-10; outer <= 1E11; outer *= 10)
            for (let inner of [0.2, 0.5, 1]) {
                let mag = outer * inner, inv = 1.0 / mag;
                let t1 = Math.floor(minVal * mag * bumpLess) * inv, t2 = Math.round(minVal * mag) * inv, t3 = Math.ceil(minVal * mag * bumpMore) * inv;
                let t4 = Math.floor(maxVal * mag * bumpLess) * inv, t5 = Math.round(maxVal * mag) * inv, t6 = Math.ceil(maxVal * mag * bumpMore) * inv;
                let p1 = position(t1), p2 = position(t2), p3 = position(t3);
                let p4 = position(t4), p5 = position(t5), p6 = position(t6);
                if (((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.fltEqual)(p1, 0) || p1 >= 0) && p1 <= 0.1 * width)
                    loT = t1;
                else if (((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.fltEqual)(p2, 0) || p2 >= 0) && p2 <= 0.1 * width)
                    loT = t2;
                else if (((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.fltEqual)(p3, 0) || p3 >= 0) && p3 <= 0.1 * width)
                    loT = t3;
                else
                    continue;
                if (p6 >= 0.9 * width && ((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.fltEqual)(p6, width) || p6 <= width))
                    hiT = t6;
                else if (p5 >= 0.9 * width && ((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.fltEqual)(p5, width) || p5 <= width))
                    hiT = t5;
                else if (p4 >= 0.9 * width && ((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.fltEqual)(p4, width) || p4 <= width))
                    hiT = t4;
                else
                    continue;
                break got;
            }
        if (loT == null || hiT == null)
            return;
        let loVal = this.inverse(loT), hiVal = this.inverse(hiT);
        this.notches.push({
            label: this.formatNumber(loVal),
            value: loVal,
            pos: position(loT)
        });
        this.notches.push({
            label: this.formatNumber(hiVal),
            value: hiVal,
            pos: position(hiT)
        });
    }
    formatNumber(num) {
        let str = num.toPrecision(4);
        str = str.replace(/^(-?\d+)\.0+$/, '$1');
        str = str.replace(/^(-?\d+\.0*[1-9]+)0+$/, '$1');
        str = str.replace(/^(-?\d+)\.0+(e[\+\-]\d+)$/, '$1$2');
        str = str.replace(/^(-?\d+\.0*[1-9]+)0+(e[\+\-]\d+)$/, '$1$2');
        return str;
    }
}


/***/ }),

/***/ "./src/gfx/DrawExperiment.ts":
/*!***********************************!*\
  !*** ./src/gfx/DrawExperiment.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawExperiment: () => (/* binding */ DrawExperiment)
/* harmony export */ });
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _ArrangeExperiment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ArrangeExperiment */ "./src/gfx/ArrangeExperiment.ts");
/* harmony import */ var _ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ArrangeMolecule */ "./src/gfx/ArrangeMolecule.ts");
/* harmony import */ var _DrawMolecule__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DrawMolecule */ "./src/gfx/DrawMolecule.ts");
/* harmony import */ var _MetaVector__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./MetaVector */ "./src/gfx/MetaVector.ts");
/* harmony import */ var _Rendering__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Rendering */ "./src/gfx/Rendering.ts");








class DrawExperiment {
    constructor(layout, vg) {
        this.layout = layout;
        this.vg = vg;
        this.preDrawComponent = null;
        this.preDrawMolecule = null;
        this.postDrawMolecule = null;
        this.molDrawn = [];
        this.entry = layout.entry;
        this.measure = layout.measure;
        this.policy = layout.policy;
        this.scale = layout.scale;
        this.invScale = 1.0 / this.scale;
    }
    draw() {
        this.molDrawn = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.anyArray(null, this.layout.components.length);
        for (let n = 0; n < this.layout.components.length; n++) {
            let xc = this.layout.components[n];
            if (xc.type == _ArrangeExperiment__WEBPACK_IMPORTED_MODULE_3__.ArrangeComponentType.Arrow)
                this.drawSymbolArrow(xc);
            else if (xc.type == _ArrangeExperiment__WEBPACK_IMPORTED_MODULE_3__.ArrangeComponentType.Plus)
                this.drawSymbolPlus(xc);
            else
                this.drawComponent(n, xc);
        }
    }
    drawComponent(idx, xc) {
        var _a;
        let vg = this.vg, policy = this.policy;
        let bx = xc.box.x + xc.padding, by = xc.box.y + xc.padding;
        let bw = xc.box.w - 2 * xc.padding, bh = xc.box.h - 2 * xc.padding;
        if (this.preDrawComponent)
            this.preDrawComponent(vg, idx, xc);
        if (xc.srcIdx < 0 && _mol_MolUtil__WEBPACK_IMPORTED_MODULE_0__.MolUtil.isBlank(xc.mol) && _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.isBlank(xc.text)) {
            let fsz = 0.5 * bh;
            vg.drawText(bx + 0.5 * bw, by + 0.5 * bh, '?', fsz, policy.data.foreground, _MetaVector__WEBPACK_IMPORTED_MODULE_6__.TextAlign.Centre | _MetaVector__WEBPACK_IMPORTED_MODULE_6__.TextAlign.Middle);
            return;
        }
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.notBlank(xc.text)) {
            let wad = this.measure.measureText('!', xc.fszText), th = wad[1] + wad[2];
            let totalH = th * xc.text.length;
            let ty = by + bh - th * (xc.text.length - 1);
            for (let line of xc.text) {
                let wad = this.measure.measureText(line, xc.fszText);
                vg.drawText(bx + 0.5 * bw, ty, line, xc.fszText, policy.data.foreground, _MetaVector__WEBPACK_IMPORTED_MODULE_6__.TextAlign.Centre | _MetaVector__WEBPACK_IMPORTED_MODULE_6__.TextAlign.Baseline);
                ty += th;
            }
            bh -= totalH + 0.5 * xc.fszText;
        }
        let stoichPos = {};
        if (xc.leftNumer) {
            let wad1 = this.measure.measureText(xc.leftNumer, xc.fszLeft);
            if (!xc.leftDenom) {
                stoichPos.tx = bx;
                let useW = wad1[0] + _ArrangeExperiment__WEBPACK_IMPORTED_MODULE_3__.ArrangeExperiment.COMP_GAP_LEFT * (wad1[1] + wad1[2]);
                bx += useW;
                bw -= useW;
            }
            else {
                let wad2 = this.measure.measureText(xc.leftDenom, xc.fszLeft);
                let tw = Math.max(wad1[0], wad2[0]);
                let x = bx + 0.5 * tw, y = by + 0.5 * bh;
                stoichPos.tx = x;
                stoichPos.th = wad1[2];
                stoichPos.lx = bx;
                stoichPos.lw = tw;
                let useW = tw + _ArrangeExperiment__WEBPACK_IMPORTED_MODULE_3__.ArrangeExperiment.COMP_GAP_LEFT * (wad1[1] + wad1[2]);
                bx += useW;
                bw -= useW;
            }
        }
        if (xc.annot != 0) {
            let aw = _ArrangeExperiment__WEBPACK_IMPORTED_MODULE_3__.ArrangeExperiment.COMP_ANNOT_SIZE * this.scale;
            bw -= aw;
            this.drawAnnotation(xc.annot, bx + bw, by, aw, bh);
        }
        let baseY = by + 0.5 * bh;
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_0__.MolUtil.notBlank(xc.mol)) {
            let effects = new _Rendering__WEBPACK_IMPORTED_MODULE_7__.RenderEffects();
            if (this.layout.includeAtomMap) {
                effects.atomDecoText = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.stringArray('', xc.mol.numAtoms);
                effects.atomDecoCol = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(this.layout.colourAtomMap, xc.mol.numAtoms);
                effects.atomDecoSize = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0.3, xc.mol.numAtoms);
                for (let n = 1; n <= xc.mol.numAtoms; n++)
                    if (xc.mol.atomMapNum(n) > 0)
                        effects.atomDecoText[n - 1] = xc.mol.atomMapNum(n).toString();
            }
            let usePolicy = policy;
            if (xc.monochromeColour != null) {
                usePolicy = usePolicy.clone();
                usePolicy.data.foreground = xc.monochromeColour;
                usePolicy.data.atomCols = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(xc.monochromeColour, usePolicy.data.atomCols.length);
            }
            let arrmol = new _ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.ArrangeMolecule(xc.mol, this.layout.measure, usePolicy, effects);
            arrmol.arrange();
            arrmol.squeezeInto(bx, by, bw, bh, 0);
            baseY = (_a = this.calculateMoleculeBaseline(arrmol)) !== null && _a !== void 0 ? _a : baseY;
            if (this.preDrawMolecule)
                this.preDrawMolecule(vg, idx, xc, arrmol);
            let drawmol = new _DrawMolecule__WEBPACK_IMPORTED_MODULE_5__.DrawMolecule(arrmol, vg);
            drawmol.draw();
            if (this.postDrawMolecule)
                this.postDrawMolecule(vg, idx, xc, arrmol);
            this.molDrawn[idx] = arrmol;
        }
        if (xc.leftNumer && !xc.leftDenom) {
            vg.drawText(stoichPos.tx, baseY, xc.leftNumer, xc.fszLeft, policy.data.foreground, _MetaVector__WEBPACK_IMPORTED_MODULE_6__.TextAlign.Left | _MetaVector__WEBPACK_IMPORTED_MODULE_6__.TextAlign.Middle);
        }
        else if (xc.leftNumer && xc.leftDenom) {
            vg.drawText(stoichPos.tx, baseY, xc.leftNumer, xc.fszLeft, policy.data.foreground, _MetaVector__WEBPACK_IMPORTED_MODULE_6__.TextAlign.Centre | _MetaVector__WEBPACK_IMPORTED_MODULE_6__.TextAlign.Bottom);
            vg.drawText(stoichPos.tx, baseY + stoichPos.th, xc.leftDenom, xc.fszLeft, policy.data.foreground, _MetaVector__WEBPACK_IMPORTED_MODULE_6__.TextAlign.Centre | _MetaVector__WEBPACK_IMPORTED_MODULE_6__.TextAlign.Top);
            vg.drawLine(stoichPos.lx, baseY, stoichPos.lx + stoichPos.lw, baseY, policy.data.foreground, this.scale * 0.03);
        }
    }
    drawSymbolArrow(xc) {
        let bx = xc.box.x + xc.padding, by = xc.box.y + xc.padding;
        let bw = xc.box.w - 2 * xc.padding, bh = xc.box.h - 2 * xc.padding;
        if (bw > bh)
            this.drawArrow(bx, by + 0.5 * bh, bx + bw, by + 0.5 * bh, bh, this.policy.data.foreground, this.scale * 0.05);
        else
            this.drawArrow(bx + 0.5 * bw, by, bx + 0.5 * bw, by + bh, bw, this.policy.data.foreground, this.scale * 0.05);
    }
    drawSymbolPlus(xc) {
        let vg = this.vg, policy = this.policy;
        let x1 = xc.box.x + xc.padding, y1 = xc.box.y + xc.padding;
        let x3 = x1 + xc.box.w - 2 * xc.padding, y3 = y1 + xc.box.h - 2 * xc.padding;
        let x2 = 0.5 * (x1 + x3), y2 = 0.5 * (y1 + y3);
        let lw = 0.2 * 0.5 * (x3 - x1 + y3 - y1);
        vg.drawLine(x1, y2, x3, y2, policy.data.foreground, lw);
        vg.drawLine(x2, y1, x2, y3, policy.data.foreground, lw);
    }
    drawAnnotation(annot, bx, by, bw, bh) {
        let vg = this.vg, policy = this.policy;
        let sz = bw, x2 = bx + bw, y2 = by + bh, x1 = x2 - sz, y1 = by;
        if (annot == _ArrangeExperiment__WEBPACK_IMPORTED_MODULE_3__.ArrangeComponentAnnot.Primary)
            y2 = y1 + sz;
        else if (annot == _ArrangeExperiment__WEBPACK_IMPORTED_MODULE_3__.ArrangeComponentAnnot.Waste)
            y1 = y2 - sz;
        if (annot == _ArrangeExperiment__WEBPACK_IMPORTED_MODULE_3__.ArrangeComponentAnnot.Primary) {
            let cx = 0.5 * (x1 + x2), cy = 0.5 * (y1 + y2), ext = 0.25 * sz;
            let px = [cx, cx + 0.866 * ext, cx + 0.866 * ext, cx, cx - 0.866 * ext, cx - 0.866 * ext];
            let py = [cy - ext, cy - 0.5 * ext, cy + 0.5 * ext, cy + ext, cy + 0.5 * ext, cy - 0.5 * ext];
            let lw = 0.05 * this.scale;
            vg.drawLine(px[0], py[0], px[3], py[3], policy.data.foreground, lw);
            vg.drawLine(px[1], py[1], px[4], py[4], policy.data.foreground, lw);
            vg.drawLine(px[2], py[2], px[5], py[5], policy.data.foreground, lw);
            let inset = 0.1 * sz;
            vg.drawOval(x1 + 0.5 * sz, y1 + 0.5 * sz, 0.5 * sz - inset, 0.5 * sz - inset, policy.data.foreground, lw, _MetaVector__WEBPACK_IMPORTED_MODULE_6__.MetaVector.NOCOLOUR);
        }
        else if (annot == _ArrangeExperiment__WEBPACK_IMPORTED_MODULE_3__.ArrangeComponentAnnot.Waste) {
            let cx = x1 + 0.7 * sz, cy = 0.5 * (y1 + y2), quart = 0.25 * sz;
            let lw = 0.05 * this.scale;
            let px = [x1 + 0.1 * sz, cx - quart, cx, cx, cx];
            let py = [y1, y1, y1, cy - quart, cy];
            let ctrl = [false, false, true, false, false];
            vg.drawPath(px, py, ctrl, false, policy.data.foreground, lw, _MetaVector__WEBPACK_IMPORTED_MODULE_6__.MetaVector.NOCOLOUR, false);
            for (let n = 0; n < 4; n++) {
                let y = cy + n * 0.45 * sz * (1.0 / 3), dw = (3.1 - n) * 0.1 * sz;
                vg.drawLine(cx - dw, y, cx + dw, y, policy.data.foreground, lw);
            }
        }
        else if (annot == _ArrangeExperiment__WEBPACK_IMPORTED_MODULE_3__.ArrangeComponentAnnot.Implied) {
            let tw = 0.5 * sz, th = 0.75 * sz;
            let cx = x2 - 0.5 * tw, cy = y1 + 0.5 * th;
            let ty = y1 + 0.25 * th, dsz = sz * 0.1, hsz = 0.5 * dsz;
            let lw = 0.05 * this.scale, fg = policy.data.foreground;
            vg.drawLine(cx, y1, cx, y1 + th, fg, lw);
            vg.drawLine(x2 - tw, ty, x2, ty, fg, lw);
            vg.drawLine(x2 - tw, cy, x2, cy, fg, lw);
            vg.drawOval(x2 - tw + hsz, y1 + th - hsz, hsz, hsz, 0, 0, fg);
            vg.drawOval(x2 - hsz, y1 + th - hsz, hsz, hsz, 0, 0, fg);
        }
    }
    drawArrow(x1, y1, x2, y2, headsz, colour, linesz) {
        let dx = x2 - x1, dy = y2 - y1, invD = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.invZ)((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.norm_xy)(dx, dy));
        dx *= invD;
        dy *= invD;
        let ox = dy, oy = -dx;
        let hx = x2 - dx * headsz, hy = y2 - dy * headsz;
        let px = [
            x1 + ox * 0.5 * linesz,
            hx + ox * 0.5 * linesz,
            hx + ox * 0.5 * headsz,
            x2,
            hx - ox * 0.5 * headsz,
            hx - ox * 0.5 * linesz,
            x1 - ox * 0.5 * linesz
        ];
        let py = [
            y1 + oy * 0.5 * linesz,
            hy + oy * 0.5 * linesz,
            hy + oy * 0.5 * headsz,
            y2,
            hy - oy * 0.5 * headsz,
            hy - oy * 0.5 * linesz,
            y1 - oy * 0.5 * linesz
        ];
        this.vg.drawPoly(px, py, _MetaVector__WEBPACK_IMPORTED_MODULE_6__.MetaVector.NOCOLOUR, 0, colour, true);
    }
    calculateMoleculeBaseline(arrmol) {
        let mol = arrmol.getMolecule();
        let midY = mol.boundary().midY();
        let ax = Number.POSITIVE_INFINITY, ay = null, baseY = null;
        const TOLERANCE = 0.1;
        for (let n = 1; n <= mol.numAtoms; n++) {
            let x = mol.atomX(n), y = mol.atomY(n);
            if (Math.abs(y - midY) < TOLERANCE && x < ax) {
                [ax, ay] = [x, y];
                baseY = arrmol.getPoint(n - 1).oval.cy;
            }
        }
        return baseY;
    }
}


/***/ }),

/***/ "./src/gfx/DrawMolecule.ts":
/*!*********************************!*\
  !*** ./src/gfx/DrawMolecule.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DrawMolecule: () => (/* binding */ DrawMolecule)
/* harmony export */ });
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _util_Geom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Geom */ "./src/util/Geom.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ArrangeMolecule */ "./src/gfx/ArrangeMolecule.ts");
/* harmony import */ var _MetaVector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./MetaVector */ "./src/gfx/MetaVector.ts");
/* harmony import */ var _Rendering__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Rendering */ "./src/gfx/Rendering.ts");







class DrawMolecule {
    constructor(layout, vg) {
        this.layout = layout;
        this.vg = vg;
        this.mnemonics = null;
        this.mol = layout.getMolecule();
        this.policy = layout.getPolicy();
        this.effects = layout.getEffects();
        this.scale = layout.getScale();
        this.invScale = 1.0 / this.scale;
    }
    getMolecule() { return this.mol; }
    getMetaVector() { return this.vg; }
    getLayout() { return this.layout; }
    getPolicy() { return this.policy; }
    getEffects() { return this.effects; }
    draw() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        let DRAW_SPACE = false;
        if (DRAW_SPACE) {
            let bounds = this.layout.determineBoundary();
            this.vg.drawRect(bounds[0], bounds[1], bounds[2] - bounds[0], bounds[3] - bounds[1], 0xFF0000, 1, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR);
            for (let n = 0; n < this.layout.numSpace(); n++) {
                let spc = this.layout.getSpace(n);
                this.vg.drawRect(spc.box.x, spc.box.y, spc.box.w, spc.box.h, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, 0, 0xE0E0E0);
                if (spc.px != null && spc.py != null && spc.px.length > 2)
                    this.vg.drawPoly(spc.px, spc.py, 0x000000, 1, 0x808080FF, true);
            }
        }
        this.drawUnderEffects();
        let { mol, layout, effects, policy, vg } = this;
        let hideBonds = new Set(effects.hideBonds);
        for (let i = 1; i <= mol.numBonds; i++)
            if (mol.bondType(i) == _mol_Molecule__WEBPACK_IMPORTED_MODULE_0__.Molecule.BONDTYPE_INCLINED && !hideBonds.has(i)) {
                let atom = mol.bondTo(i);
                if (layout.getPoint(atom - 1).text)
                    continue;
                for (let j of mol.atomAdjBonds(atom))
                    if (j != i && mol.bondType(j) == _mol_Molecule__WEBPACK_IMPORTED_MODULE_0__.Molecule.BONDTYPE_INCLINED && mol.bondTo(j) == atom && !hideBonds.has(j)) {
                        let b1 = layout.getLines().find((b) => b.bnum == i);
                        let b2 = layout.getLines().find((b) => b.bnum == j);
                        let th1 = Math.atan2(b1.line.y1 - b1.line.y2, b1.line.x1 - b1.line.x2);
                        let th2 = Math.atan2(b2.line.y1 - b2.line.y2, b2.line.x1 - b2.line.x2);
                        if (Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_2__.angleDiff)(th1, th2)) < 170 * _util_util__WEBPACK_IMPORTED_MODULE_2__.DEGRAD) {
                            this.drawFusedWedge(b1, b2);
                            (_a = this.mnemonics) === null || _a === void 0 ? void 0 : _a.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Artifact, 'Fused', [b1.line.x1, b1.line.y1, b1.line.x2, b1.line.y2, b2.line.x1, b2.line.y1, b2.line.x2, b2.line.y2]);
                            hideBonds.add(i);
                            hideBonds.add(j);
                            break;
                        }
                    }
            }
        for (let n = 0; n < layout.numLines(); n++) {
            let b = layout.getLine(n);
            if (hideBonds.has(b.bnum))
                continue;
            if (b.type == _ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.BLineType.Normal) {
                vg.drawLine(b.line.x1, b.line.y1, b.line.x2, b.line.y2, b.col, b.size);
                (_b = this.mnemonics) === null || _b === void 0 ? void 0 : _b.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Bond, 'L', [b.line.x1, b.line.y1, b.line.x2, b.line.y2]);
            }
            else if (b.type == _ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.BLineType.Inclined) {
                this.drawBondInclined(b);
                (_c = this.mnemonics) === null || _c === void 0 ? void 0 : _c.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Bond, 'I', [b.line.x1, b.line.y1, b.line.x2, b.line.y2]);
            }
            else if (b.type == _ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.BLineType.Declined) {
                this.drawBondDeclined(b);
                (_d = this.mnemonics) === null || _d === void 0 ? void 0 : _d.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Bond, 'D', [b.line.x1, b.line.y1, b.line.x2, b.line.y2]);
            }
            else if (b.type == _ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.BLineType.Unknown) {
                this.drawBondUnknown(b);
                (_e = this.mnemonics) === null || _e === void 0 ? void 0 : _e.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Bond, 'U', [b.line.x1, b.line.y1, b.line.x2, b.line.y2]);
            }
            else if (b.type == _ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.BLineType.Dotted || b.type == _ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.BLineType.DotDir) {
                this.drawBondDotted(b);
                (_f = this.mnemonics) === null || _f === void 0 ? void 0 : _f.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Bond, 'O', [b.line.x1, b.line.y1, b.line.x2, b.line.y2]);
            }
            else if (b.type == _ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.BLineType.IncDouble || b.type == _ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.BLineType.IncTriple || b.type == _ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.BLineType.IncQuadruple) {
                this.drawBondIncMulti(b);
                (_g = this.mnemonics) === null || _g === void 0 ? void 0 : _g.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Bond, 'M', [b.line.x1, b.line.y1, b.line.x2, b.line.y2]);
            }
        }
        let fg = policy.data.foreground;
        for (let r of layout.getRings()) {
            if (r.theta != 0) {
                var bez = _util_Geom__WEBPACK_IMPORTED_MODULE_1__.GeomUtil.createBezierEllipse(r.cx, r.cy, r.rw, r.rh, r.theta);
                vg.drawPath(bez.px, bez.py, bez.ctrl, true, fg, r.size, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, false);
                (_h = this.mnemonics) === null || _h === void 0 ? void 0 : _h.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Artifact, 'Ring', [r.cx, r.cy, r.rw, r.rh, r.theta]);
            }
            else {
                vg.drawOval(r.cx, r.cy, r.rw, r.rh, fg, r.size, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR);
                (_j = this.mnemonics) === null || _j === void 0 ? void 0 : _j.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Artifact, 'Ring', [r.cx, r.cy, r.rw, r.rh]);
            }
        }
        for (let p of layout.getPaths()) {
            vg.drawPath(p.px, p.py, p.ctrl, false, fg, p.size, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, false);
            (_k = this.mnemonics) === null || _k === void 0 ? void 0 : _k.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Artifact, 'Path', [...p.px, ...p.py]);
        }
        for (let n = 0; n < layout.numPoints(); n++) {
            let p = layout.getPoint(n);
            if (effects.hideAtoms.has(p.anum))
                continue;
            let txt = p.text;
            let cx = p.oval.cx, cy = p.oval.cy, rw = p.oval.rw;
            if (txt == null) {
                (_l = this.mnemonics) === null || _l === void 0 ? void 0 : _l.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Atom, '.', [cx, cy]);
                continue;
            }
            let fsz = p.fsz;
            let col = p.col;
            while (txt.endsWith('.')) {
                let dw = rw / txt.length;
                let r = fsz * 0.15;
                vg.drawOval(cx + rw - dw, cy, r, r, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, 0, col);
                cx -= dw;
                rw -= dw;
                txt = txt.substring(0, txt.length - 1);
            }
            while (txt.startsWith('+')) {
                let dw = rw / txt.length;
                let x = cx - rw + dw, y = cy, r = fsz * 0.18, lsz = fsz * 0.1;
                vg.drawLine(x - r, y, x + r, y, col, lsz);
                vg.drawLine(x, y - r, x, y + r, col, lsz);
                cx += dw;
                rw -= dw;
                txt = txt.substring(1, txt.length);
            }
            while (txt.startsWith('-')) {
                let dw = rw / txt.length;
                let x = cx - rw + dw, y = cy, r = fsz * 0.18, lsz = fsz * 0.1;
                vg.drawLine(x - r, y, x + r, y, col, lsz);
                cx += dw;
                rw -= dw;
                txt = txt.substring(1, txt.length);
            }
            if (txt.length > 0) {
                vg.drawText(cx, cy, txt, fsz, col, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.TextAlign.Centre | _MetaVector__WEBPACK_IMPORTED_MODULE_5__.TextAlign.Middle, p.rotation || 0);
                (_m = this.mnemonics) === null || _m === void 0 ? void 0 : _m.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Atom, txt, [cx, cy]);
            }
            else
                (_o = this.mnemonics) === null || _o === void 0 ? void 0 : _o.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Atom, '.', [cx, cy]);
        }
        this.drawOverEffects();
    }
    drawUnderEffects() {
        var _a, _b, _c;
        let mol = this.mol, policy = this.policy, effects = this.effects, layout = this.layout, scale = this.scale, vg = this.vg;
        for (let n = 0, num = Math.min(effects.atomFrameDotSz.length, mol.numAtoms); n < num; n++) {
            if (effects.hideAtoms.has(n + 1))
                continue;
            let dw = effects.atomFrameDotSz[n] * scale, col = effects.atomFrameCol[n];
            let a = layout.getPoint(n);
            let rw = a.oval.rw + 0.1 * scale, rh = a.oval.rh + 0.1 * scale;
            let wdots = Math.ceil(2 * rw / (3 * dw));
            let hdots = Math.ceil(2 * rh / (3 * dw));
            let wspc = 2 * rw / wdots, hspc = 2 * rh / hdots;
            for (let i = 0; i <= wdots; i++) {
                let x = a.oval.cx - rw + i * wspc;
                vg.drawOval(x, a.oval.cy - rh, dw, dw, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, 0, col);
                vg.drawOval(x, a.oval.cy + rh, dw, dw, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, 0, col);
            }
            for (let i = 1; i < hdots; i++) {
                let y = a.oval.cy - rh + i * hspc;
                vg.drawOval(a.oval.cx - rw, y, dw, dw, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, 0, col);
                vg.drawOval(a.oval.cx + rw, y, dw, dw, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, 0, col);
            }
            (_a = this.mnemonics) === null || _a === void 0 ? void 0 : _a.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Effect, 'Dot', [a.oval.cx, a.oval.cy, a.oval.rw, a.oval.rh]);
        }
        for (let key in effects.dottedRectOutline) {
            let atom = parseInt(key), col = effects.dottedRectOutline[key];
            let a = layout.getPoint(atom - 1);
            let rw = Math.max(a.oval.rw, 0.2 * scale), rh = Math.max(a.oval.rh, 0.2 * scale);
            let sz = 0.05 * scale;
            let xdots = Math.max(1, Math.round(rw / (2 * sz)));
            let ydots = Math.max(1, Math.round(rh / (2 * sz)));
            let invX = (2 * rw) / xdots, invY = (2 * rh) / ydots;
            for (let n = 0; n <= xdots; n++) {
                let x = a.oval.cx - rw + n * invX;
                vg.drawOval(x, a.oval.cy - rh, sz, sz, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, 0, col);
                vg.drawOval(x, a.oval.cy + rh, sz, sz, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, 0, col);
            }
            for (let n = 1; n < ydots; n++) {
                let y = a.oval.cy - rh + n * invY;
                vg.drawOval(a.oval.cx - rw, y, sz, sz, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, 0, col);
                vg.drawOval(a.oval.cx + rw, y, sz, sz, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, 0, col);
            }
            (_b = this.mnemonics) === null || _b === void 0 ? void 0 : _b.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Effect, 'Rect', [a.oval.cx, a.oval.cy, a.oval.rw, a.oval.rh]);
        }
        for (let key in effects.dottedBondCross) {
            let bond = parseInt(key), col = effects.dottedBondCross[key];
            let x1 = 0, y1 = 0, x2 = 0, y2 = 0, bcount = 0;
            for (let n = 0; n < layout.numLines(); n++) {
                let b = layout.getLine(n);
                if (b.bnum == bond) {
                    x1 += b.line.x1;
                    y1 += b.line.y1;
                    x2 += b.line.x2;
                    y2 += b.line.y2;
                    bcount += 1;
                }
            }
            if (bcount > 1) {
                let inv = 1 / bcount;
                [x1, y1, x2, y2] = [x1 * inv, y1 * inv, x2 * inv, y2 * inv];
            }
            let dx = x2 - x1, dy = y2 - y1;
            let inv = 0.2 * scale * (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.invZ)((0,_util_util__WEBPACK_IMPORTED_MODULE_2__.norm_xy)(dx, dy)), ox = dy * inv, oy = -dx * inv;
            let cx = 0.5 * (x1 + x2), cy = 0.5 * (y1 + y2), sz = 0.05 * scale;
            for (let p of [-2, -1, 1, 2]) {
                let x = cx + p * ox, y = cy + p * oy;
                vg.drawOval(x, y, sz, sz, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, 0, col);
            }
            (_c = this.mnemonics) === null || _c === void 0 ? void 0 : _c.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Effect, 'Crossing', [x1, y1, x2, y2]);
        }
    }
    drawOverEffects() {
        var _a, _b;
        let mol = this.mol, policy = this.policy, effects = this.effects, layout = this.layout, scale = this.scale, vg = this.vg;
        for (let a of effects.overlapAtoms) {
            let p = layout.getPoint(a - 1);
            let rad = scale * 0.2;
            vg.drawLine(p.oval.cx - rad, p.oval.cy - rad, p.oval.cx + rad, p.oval.cy + rad, 0xFF0000, 1);
            vg.drawLine(p.oval.cx + rad, p.oval.cy - rad, p.oval.cx - rad, p.oval.cy + rad, 0xFF0000, 1);
            (_a = this.mnemonics) === null || _a === void 0 ? void 0 : _a.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Effect, 'Overlap', [p.oval.cx, p.oval.cy, p.oval.rw, p.oval.rh]);
        }
        for (let n = 0, num = Math.min(effects.atomCircleSz.length, mol.numAtoms); n < num; n++)
            if (effects.atomCircleSz[n] > 0) {
                let dw = effects.atomCircleSz[n] * scale, col = effects.atomCircleCol[n];
                let p = layout.getPoint(n);
                vg.drawOval(p.oval.cx, p.oval.cy, dw, dw, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, 0, col);
                (_b = this.mnemonics) === null || _b === void 0 ? void 0 : _b.append(_Rendering__WEBPACK_IMPORTED_MODULE_6__.RenderMnemonicType.Effect, 'Circle', [p.oval.cx, p.oval.cy, p.oval.rw, p.oval.rh]);
            }
    }
    drawBondInclined(b) {
        let x1 = b.line.x1, y1 = b.line.y1, x2 = b.line.x2, y2 = b.line.y2;
        let dx = x2 - x1, dy = y2 - y1;
        let col = b.col;
        let size = b.size, head = b.head;
        let norm = head / Math.sqrt(dx * dx + dy * dy);
        let ox = norm * dy, oy = -norm * dx;
        let px = [x1, x2 - ox, x2 + ox], py = [y1, y2 - oy, y2 + oy];
        if (this.layout.getPoint(b.bto - 1).text == null && this.mol.atomAdjCount(b.bto) == 2) {
            let other = null;
            for (let n = 0; n < this.layout.numLines(); n++) {
                let o = this.layout.getLine(n);
                if (o.type == _ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.BLineType.Normal && (o.bfr == b.bto || o.bto == b.bto)) {
                    if (other != null) {
                        other = null;
                        break;
                    }
                    other = o;
                }
            }
            if (other != null) {
                let th1 = Math.atan2(y1 - y2, x1 - x2);
                let th2 = Math.atan2(other.line.y1 - other.line.y2, other.line.x1 - other.line.x2);
                if (b.bto == other.bfr)
                    th2 += Math.PI;
                let diff = Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_2__.angleDiff)(th1, th2));
                if (diff > 105 * _util_util__WEBPACK_IMPORTED_MODULE_2__.DEGRAD && diff < 135 * _util_util__WEBPACK_IMPORTED_MODULE_2__.DEGRAD) {
                    let ixy1 = _util_Geom__WEBPACK_IMPORTED_MODULE_1__.GeomUtil.lineIntersect(px[0], py[0], px[1], py[1], other.line.x1, other.line.y1, other.line.x2, other.line.y2);
                    let ixy2 = _util_Geom__WEBPACK_IMPORTED_MODULE_1__.GeomUtil.lineIntersect(px[0], py[0], px[2], py[2], other.line.x1, other.line.y1, other.line.x2, other.line.y2);
                    px[1] = ixy1[0];
                    py[1] = ixy1[1];
                    px[2] = ixy2[0];
                    py[2] = ixy2[1];
                    let dx1 = px[1] - px[0], dy1 = py[1] - py[0], inv1 = 0.5 * other.size / (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.norm_xy)(dx1, dy1);
                    px[1] += dx1 * inv1;
                    py[1] += dy1 * inv1;
                    let dx2 = px[2] - px[0], dy2 = py[2] - py[0], inv2 = 0.5 * other.size / (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.norm_xy)(dx2, dy2);
                    px[2] += dx2 * inv1;
                    py[2] += dy2 * inv1;
                }
            }
        }
        if (this.layout.getPoint(b.bto - 1).text == null && this.mol.atomAdjCount(b.bto) == 3) {
            let other1 = null, other2 = null;
            for (let n = 0; n < this.layout.numLines(); n++) {
                let o = this.layout.getLine(n);
                if (o.type == _ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.BLineType.Normal && (o.bfr == b.bto || o.bto == b.bto)) {
                    if (other1 == null)
                        other1 = o;
                    else if (other2 == null)
                        other2 = o;
                    else {
                        other1 = other2 = null;
                        break;
                    }
                }
            }
            if (other1 != null && other2 != null) {
                let th1 = Math.atan2(y1 - y2, x1 - x2);
                let th2 = Math.atan2(other1.line.y1 - other1.line.y2, other1.line.x1 - other1.line.x2);
                let th3 = Math.atan2(other2.line.y1 - other2.line.y2, other2.line.x1 - other2.line.x2);
                if (b.bto == other1.bfr)
                    th2 += Math.PI;
                if (b.bto == other2.bfr)
                    th3 += Math.PI;
                let dth1 = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.angleDiff)(th1, th2), diff1 = Math.abs(dth1);
                let dth2 = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.angleDiff)(th1, th3), diff2 = Math.abs(dth2);
                let diff3 = Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_2__.angleDiff)(th2, th3));
                if (diff1 > 105 * _util_util__WEBPACK_IMPORTED_MODULE_2__.DEGRAD && diff1 < 135 * _util_util__WEBPACK_IMPORTED_MODULE_2__.DEGRAD ||
                    diff2 > 105 * _util_util__WEBPACK_IMPORTED_MODULE_2__.DEGRAD && diff2 < 135 * _util_util__WEBPACK_IMPORTED_MODULE_2__.DEGRAD ||
                    diff3 > 105 * _util_util__WEBPACK_IMPORTED_MODULE_2__.DEGRAD && diff3 < 135 * _util_util__WEBPACK_IMPORTED_MODULE_2__.DEGRAD) {
                    if (dth1 < 0)
                        [other1, other2] = [other2, other1];
                    let ixy1 = _util_Geom__WEBPACK_IMPORTED_MODULE_1__.GeomUtil.lineIntersect(px[0], py[0], px[1], py[1], other1.line.x1, other1.line.y1, other1.line.x2, other1.line.y2);
                    let ixy2 = _util_Geom__WEBPACK_IMPORTED_MODULE_1__.GeomUtil.lineIntersect(px[0], py[0], px[2], py[2], other2.line.x1, other2.line.y1, other2.line.x2, other2.line.y2);
                    px = [x1, ixy1[0], x2, ixy2[0]];
                    py = [y1, ixy1[1], y2, ixy2[1]];
                }
            }
        }
        this.vg.drawPoly(px, py, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, 0, col, true);
    }
    drawFusedWedge(b1, b2) {
        const terminalPoints = (b, other) => {
            let x1 = b.line.x1, y1 = b.line.y1, x2 = b.line.x2, y2 = b.line.y2;
            let dx = x2 - x1, dy = y2 - y1;
            let norm = b.head / Math.sqrt(dx * dx + dy * dy);
            let ox = norm * dy, oy = -norm * dx;
            let tx1 = x2 - ox, ty1 = y2 - oy, tx2 = x2 + ox, ty2 = y2 + oy;
            let dsq1 = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.norm2_xy)(tx1 - other.line.x1, ty1 - other.line.y1);
            let dsq2 = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.norm2_xy)(tx2 - other.line.x1, ty2 - other.line.y1);
            if (dsq1 > dsq2)
                return { outerX: tx1, outerY: ty1, innerX: tx2, innerY: ty2 };
            else
                return { outerX: tx2, outerY: ty2, innerX: tx1, innerY: ty1 };
        };
        let u = terminalPoints(b1, b2), v = terminalPoints(b2, b1);
        let [innerX, innerY] = _util_Geom__WEBPACK_IMPORTED_MODULE_1__.GeomUtil.lineIntersect(b1.line.x1, b1.line.y1, u.innerX, u.innerY, b2.line.x1, b2.line.y1, v.innerX, v.innerY);
        let px = [b1.line.x1, u.outerX, v.outerX, b2.line.x1, innerX];
        let py = [b1.line.y1, u.outerY, v.outerY, b2.line.y1, innerY];
        this.vg.drawPoly(px, py, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, 0, b1.col, true);
    }
    drawBondDeclined(b) {
        let x1 = b.line.x1, y1 = b.line.y1, x2 = b.line.x2, y2 = b.line.y2;
        let dx = x2 - x1, dy = y2 - y1;
        let col = b.col;
        let size = b.size, head = b.head;
        let ext = Math.sqrt(dx * dx + dy * dy);
        let nsteps = Math.ceil(ext * 2.5 * this.invScale);
        let norm = head / ext;
        let ox = norm * dy, oy = -norm * dx, invSteps = 1.0 / (nsteps + 1);
        let holdout = this.mol.atomAdjCount(b.bto) == 1 && this.layout.getPoint(b.bto - 1).text == null ? 1 : 1 - (0.15 * this.scale) / ext;
        for (let i = 0; i <= nsteps + 1; i++) {
            let cx = x1 + i * dx * invSteps * holdout, cy = y1 + i * dy * invSteps * holdout;
            let ix = ox * i * invSteps, iy = oy * i * invSteps;
            this.vg.drawLine(cx - ix, cy - iy, cx + ix, cy + iy, col, size);
        }
    }
    drawBondUnknown(b) {
        let x1 = b.line.x1, y1 = b.line.y1, x2 = b.line.x2, y2 = b.line.y2;
        let dx = x2 - x1, dy = y2 - y1;
        let col = b.col;
        let size = b.size, head = b.head;
        let ext = Math.sqrt(dx * dx + dy * dy);
        let nsteps = Math.ceil(ext * 3.5 * this.invScale);
        let norm = head / ext;
        let ox = norm * dy, oy = -norm * dx;
        let sz = 1 + 3 * (nsteps + 1);
        let x = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.numberArray(0, sz), y = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.numberArray(0, sz), ctrl = _util_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.booleanArray(false, sz);
        x[0] = x1;
        y[0] = y1;
        ctrl[0] = false;
        for (let i = 0, j = 1; i <= nsteps; i++, j += 3) {
            let ax = x1 + i * dx / (nsteps + 1), ay = y1 + i * dy / (nsteps + 1);
            let cx = x1 + (i + 1) * dx / (nsteps + 1), cy = y1 + (i + 1) * dy / (nsteps + 1);
            let bx = (ax + cx) / 2, by = (ay + cy) / 2;
            let sign = i % 2 == 0 ? 1 : -1;
            x[j] = ax;
            x[j + 1] = bx + sign * ox;
            x[j + 2] = cx;
            y[j] = ay;
            y[j + 1] = by + sign * oy;
            y[j + 2] = cy;
            ctrl[j] = true;
            ctrl[j + 1] = true;
            ctrl[j + 2] = false;
        }
        this.vg.drawPath(x, y, ctrl, false, col, size, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, false);
    }
    drawBondDotted(b) {
        let x1 = b.line.x1, y1 = b.line.y1, x2 = b.line.x2, y2 = b.line.y2;
        let dx = x2 - x1, dy = y2 - y1;
        let col = b.col;
        let size = b.size;
        let radius = size, dist = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.norm_xy)(dx, dy);
        if (dist < 0.01)
            return;
        let nudge = 0.5 * size / dist;
        x1 += nudge * dx;
        y1 += nudge * dy;
        x2 -= nudge * dx;
        y2 -= nudge * dy;
        dx = x2 - x1;
        dy = y2 - y1;
        let nsteps = Math.ceil(0.2 * dist / radius);
        let invSteps = 1.0 / (nsteps + 1);
        for (let i = 0; i <= nsteps + 1; i++) {
            let r = radius;
            if (b.type == _ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.BLineType.DotDir)
                r *= 1 + (i * (1.0 / (nsteps + 2)) - 0.5);
            let cx = x1 + i * dx * invSteps, cy = y1 + i * dy * invSteps;
            this.vg.drawOval(cx, cy, r, r, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, 0, col);
        }
    }
    drawBondIncMulti(b) {
        let x1 = b.line.x1, y1 = b.line.y1, x2 = b.line.x2, y2 = b.line.y2;
        let dx = x2 - x1, dy = y2 - y1;
        let col = b.col;
        let size = b.size, head = b.head;
        let norm = head / Math.sqrt(dx * dx + dy * dy);
        let ox = norm * dy, oy = -norm * dx;
        this.vg.drawPoly([x1, x2 - ox, x2 + ox], [y1, y2 - oy, y2 + oy], col, this.scale * 0.05, _MetaVector__WEBPACK_IMPORTED_MODULE_5__.MetaVector.NOCOLOUR, true);
        if (b.type == _ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.BLineType.IncDouble) {
            this.vg.drawLine(x1, y1, x2, y2, col, this.scale * 0.03);
        }
        else {
            this.vg.drawLine(x1, y1, x2 + 0.33 * ox, y2 + 0.33 * oy, col, this.scale * 0.03);
            this.vg.drawLine(x1, y1, x2 - 0.33 * ox, y2 - 0.33 * oy, col, this.scale * 0.03);
        }
    }
}


/***/ }),

/***/ "./src/gfx/FontData.ts":
/*!*****************************!*\
  !*** ./src/gfx/FontData.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FontData: () => (/* binding */ FontData)
/* harmony export */ });
class FontData {
    constructor() {
        this.UNITS_PER_EM = 2048;
        this.INV_UNITS_PER_EM = 1.0 / this.UNITS_PER_EM;
        this.PANOSE_1 = '2 11 6 4 3 5 4 4 2 4';
        this.ASCENT = 1638;
        this.DESCENT = -410;
        this.MISSING_HORZ = 2048;
        this.MISSING_DATA = 'M256 0v1536h1536v-1536h-1536zM384 128h1280v1280h-1280v-1280z';
        this.ASCENT_FUDGE = 0.9;
        this.UNICODE = [
            ' ', '!', '"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<',
            '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
            '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',
            'x', 'y', 'z', '{', '|', '}', '~', '\u00A0', '\u00A1', '\u00A2', '\u00A3', '\u00A4', '\u00A5', '\u00A6', '\u00A7', '\u00A8', '\u00A9', '\u00AA',
            '\u00AB', '\u00AC', '\u00AD', '\u00AE', '\u00AF', '\u00B0', '\u00B1', '\u00B2', '\u00B3', '\u00B4', '\u00B5', '\u00B6', '\u00B7', '\u00B8', '\u00B9',
            '\u00BA', '\u00BB', '\u00BC', '\u00BD', '\u00BE', '\u00BF', '\u00C0', '\u00C1', '\u00C2', '\u00C3', '\u00C4', '\u00C5', '\u00C6', '\u00C7', '\u00C8',
            '\u00C9', '\u00CA', '\u00CB', '\u00CC', '\u00CD', '\u00CE', '\u00CF', '\u00D0', '\u00D1', '\u00D2', '\u00D3', '\u00D4', '\u00D5', '\u00D6', '\u00D7',
            '\u00D8', '\u00D9', '\u00DA', '\u00DB', '\u00DC', '\u00DD', '\u00DE', '\u00DF', '\u00E0', '\u00E1', '\u00E2', '\u00E3', '\u00E4', '\u00E5', '\u00E6',
            '\u00E7', '\u00E8', '\u00E9', '\u00EA', '\u00EB', '\u00EC', '\u00ED', '\u00EE', '\u00EF', '\u00F0', '\u00F1', '\u00F2', '\u00F3', '\u00F4', '\u00F5',
            '\u00F6', '\u00F7', '\u00F8', '\u00F9', '\u00FA', '\u00FB', '\u00FC', '\u00FD', '\u00FE', '\u037E', '\u0384', '\u0385', '\u0386', '\u0387', '\u0388',
            '\u0389', '\u038A', '\u038C', '\u038E', '\u038F', '\u0390', '\u0391', '\u0392', '\u0393', '\u0394', '\u0395', '\u0396', '\u0397', '\u0398', '\u0399',
            '\u039A', '\u039B', '\u039C', '\u039D', '\u039E', '\u039F', '\u03A0', '\u03A1', '\u03A3', '\u03A4', '\u03A5', '\u03A6', '\u03A7', '\u03A8', '\u03A9',
            '\u03AA', '\u03AB', '\u03AC', '\u03AD', '\u03AE', '\u03AF', '\u03B0', '\u03B1', '\u03B2', '\u03B3', '\u03B4', '\u03B5', '\u03B6', '\u03B7', '\u03B8',
            '\u03B9', '\u03BA', '\u03BB', '\u03BC', '\u03BD', '\u03BE', '\u03BF', '\u03C0', '\u03C1', '\u03C2', '\u03C3', '\u03C4', '\u03C5', '\u03C6', '\u03C7',
            '\u03C8', '\u03C9', '\u03CA', '\u03CB', '\u03CC', '\u03CD', '\u03CE', '\u2202', '\u2206', '\u220F', '\u2211', '\u2212', '\u2215', '\u2219', '\u221A',
            '\u221E', '\u222B', '\u2248', '\u2260', '\u2264', '\u2265'
        ];
        this.HORIZ_ADV_X = [
            720, 806, 940, 1676, 1302, 2204, 1488, 550, 930, 930, 1302, 1676, 745, 930, 745, 930, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
            930, 930, 1676, 1676, 1676, 1117, 2048, 1400, 1404, 1430, 1578, 1295, 1177, 1588, 1539, 862, 931, 1419, 1140, 1726, 1532, 1612, 1235, 1612, 1424,
            1400, 1262, 1499, 1400, 2025, 1403, 1260, 1403, 930, 930, 930, 1676, 1302, 1302, 1230, 1276, 1067, 1276, 1220, 720, 1276, 1296, 562, 705, 1212, 562,
            1992, 1296, 1243, 1276, 1276, 874, 1067, 807, 1296, 1212, 1676, 1212, 1212, 1076, 1300, 930, 1300, 1676, 720, 806, 1302, 1302, 1302, 1302, 930, 1302,
            1302, 2048, 1117, 1320, 1676, 930, 2048, 1302, 1110, 1676, 1110, 1110, 1302, 1314, 1302, 745, 1302, 1110, 1117, 1320, 2048, 2048, 2048, 1117, 1400,
            1400, 1400, 1400, 1400, 1400, 2016, 1430, 1295, 1295, 1295, 1295, 862, 862, 862, 862, 1588, 1532, 1612, 1612, 1612, 1612, 1612, 1676, 1612, 1499,
            1499, 1499, 1499, 1260, 1240, 1270, 1230, 1230, 1230, 1230, 1230, 1230, 1956, 1067, 1220, 1220, 1220, 1220, 562, 562, 562, 562, 1253, 1296, 1243,
            1243, 1243, 1243, 1243, 1676, 1243, 1296, 1296, 1296, 1296, 1212, 1276, 930, 1302, 1302, 1400, 930, 1538, 1782, 1105, 1804, 1543, 1859, 562, 1400,
            1404, 1160, 1440, 1295, 1403, 1539, 1612, 862, 1419, 1404, 1726, 1532, 1329, 1612, 1539, 1235, 1377, 1262, 1260, 1677, 1403, 1783, 1676, 862, 1260,
            1276, 1050, 1296, 562, 1293, 1276, 1270, 1212, 1245, 1050, 937, 1296, 1278, 562, 1212, 1212, 1310, 1212, 1030, 1243, 1305, 1280, 1040, 1291, 1016,
            1293, 1618, 1208, 1683, 1666, 562, 1293, 1243, 1293, 1666, 1302, 1489, 1676, 1489, 1676, 740, 745, 1676, 2048, 1302, 1676, 1676, 1676, 1676
        ];
        this.GLYPH_DATA = [
            '',
            'M515 1489l-26 -1079h-170l-28 1079h224zM505 0h-204v211h204v-211z',
            'M772 1556l-43 -579h-132l-43 579h218zM386 1556l-43 -579h-132l-43 579h218z',
            'M1481 932h-333l-92 -376h308v-135h-343l-104 -421h-129l104 421h-270l-104 -421h-129l104 421h-298v135h333l92 376h-308v135h343l105 422h129l-105 -422h270l105 422h129l-105 -422h298v-135zM1022 934h-274l-94 -380h274z',
            'M1160 380q0 -155 -121 -257.5t-317 -121.5v-362h-118v357q-132 1 -248 25.5t-201 63.5v198h16q19 -14 68 -40.5t95 -43.5q52 -19 121.5 -35.5t148.5 -19.5v433q-40 8 -74 15.5t-63 15.5q-163 41 -234 123.5t-71 203.5q0 148 116.5 250t325.5 119v272h118v-270 q101 -2 207 -24t178 -51v-196h-14q-75 46 -156.5 81.5t-214.5 44.5v-431q30 -5 65 -13.5t61 -13.5q149 -32 230.5 -110t81.5 -213zM604 747v413q-107 -8 -180 -58.5t-73 -140.5q0 -91 54 -137t199 -77zM971 354q0 94 -58.5 137.5t-190.5 68.5v-414q120 12 184.5 61t64.5 147 z',
            'M884 1076q0 -224 -94.5 -333t-272.5 -109q-182 0 -275 109t-93 332q0 224 95 333t273 109q181 0 274 -110t93 -331zM1575 1489l-780 -1489h-165l780 1489h165zM2055 413q0 -224 -95 -333t-273 -109q-181 0 -274 110t-93 331q0 224 94.5 333t272.5 109q182 0 275 -109 t93 -332zM706 1076q0 172 -44.5 240t-144.5 68q-102 0 -146 -68t-44 -241t44 -240.5t146 -67.5q100 0 144.5 67.5t44.5 241.5zM1877 413q0 172 -44.5 240t-144.5 68q-102 0 -146 -68t-44 -241t44 -240.5t146 -67.5q100 0 144.5 67.5t44.5 241.5z',
            'M792 1191q0 95 -56.5 149.5t-144.5 54.5q-92 0 -150 -61.5t-58 -150.5q0 -75 39.5 -133t170.5 -137q98 35 148.5 102.5t50.5 175.5zM986 315l-478 466q-31 -15 -62 -39.5t-62 -66.5q-28 -39 -46 -94t-18 -124q0 -146 85.5 -235.5t242.5 -89.5q93 0 184.5 45.5 t153.5 137.5zM1287 909v-96q0 -96 -25 -216t-85 -229l378 -368h-246l-229 224q-115 -142 -235 -198.5t-247 -56.5q-208 0 -345.5 121.5t-137.5 318.5q0 92 26 159t61 116q35 47 87 88.5t105 72.5q-110 72 -158.5 145t-48.5 184q0 67 26.5 127.5t79.5 110.5q50 48 130.5 78 t177.5 30q173 0 280 -87.5t107 -221.5q0 -44 -12 -99.5t-41 -99.5q-32 -49 -91 -94t-153 -77l371 -362q14 40 21 88t8 100q2 56 1.5 125t-0.5 117h195z',
            'M386 1556l-43 -579h-136l-43 579h222z',
            'M783 -412h-229q-177 203 -275 443t-98 541t98 541t275 443h229v-10q-81 -73 -154.5 -168.5t-136.5 -222.5q-60 -123 -97.5 -271t-37.5 -312q0 -171 36.5 -313t98.5 -270q60 -123 137 -222.5t154 -168.5v-10z',
            'M749 572q0 -301 -98 -541t-275 -443h-229v10q77 69 154.5 168.5t136.5 222.5q62 128 98.5 270t36.5 313q0 164 -37 312t-98 271q-63 127 -136.5 222.5t-154.5 168.5v10h229q177 -203 275 -443t98 -541z',
            'M1137 887l-64 -110l-362 213l6 -360h-129l5 360l-361 -214l-65 110l381 207l-381 207l65 110l362 -213l-6 359h129l-7 -359l363 212l64 -110l-380 -205z',
            'M1466 572h-545v-545h-166v545h-545v160h545v545h166v-545h545v-160z',
            'M575 285l-282 -655h-146l174 655h254z',
            'M777 561h-624v181h624v-181z',
            'M492 0h-239v285h239v-285z',
            'M860 1556l-717 -1860h-173l714 1860h176z',
            'M1167 745q0 -401 -125.5 -588.5t-389.5 -187.5q-268 0 -391.5 190t-123.5 584q0 397 125 586.5t390 189.5q268 0 391.5 -192.5t123.5 -581.5zM904 291q35 81 47.5 190.5t12.5 263.5q0 152 -12.5 264t-48.5 190q-35 77 -95.5 116t-155.5 39q-94 0 -155.5 -39t-97.5 -118 q-34 -74 -46.5 -193t-12.5 -261q0 -156 11 -261t47 -188q33 -78 93.5 -119t160.5 -41q94 0 156 39t96 118z',
            'M1084 0h-806v152h310v998h-310v136q63 0 135 10.5t109 30.5q46 25 72.5 63.5t30.5 103.5h155v-1342h304v-152z',
            'M1169 0h-1008v209q105 90 210.5 180t196.5 179q192 186 263 295.5t71 236.5q0 116 -76.5 181.5t-213.5 65.5q-91 0 -197 -32t-207 -98h-10v210q71 35 189.5 64t229.5 29q229 0 359 -110.5t130 -299.5q0 -85 -21.5 -158.5t-63.5 -139.5q-39 -62 -91.5 -122t-127.5 -133 q-107 -105 -221 -203.5t-213 -182.5h801v-171z',
            'M1038 717q48 -43 79 -108t31 -168q0 -102 -37 -187t-104 -148q-75 -70 -176.5 -103.5t-222.5 -33.5q-124 0 -244 29.5t-197 64.5v209h15q85 -56 200 -93t222 -37q63 0 134 21t115 62q46 44 68.5 97t22.5 134q0 80 -25.5 132.5t-70.5 82.5q-45 31 -109 42.5t-138 11.5h-90 v166h70q152 0 242.5 63.5t90.5 185.5q0 54 -23 94.5t-64 66.5q-43 26 -92 36t-111 10q-95 0 -202 -34t-202 -96h-10v209q71 35 189.5 64.5t229.5 29.5q109 0 192 -20t150 -64q72 -48 109 -116t37 -159q0 -124 -87.5 -216.5t-206.5 -116.5v-14q48 -8 110 -33.5t105 -63.5z ',
            'M1203 419h-221v-419h-192v419h-713v230l721 840h184v-910h221v-160zM790 579v672l-577 -672h577z',
            'M1157 473q0 -104 -38 -199t-104 -160q-72 -70 -171.5 -107.5t-230.5 -37.5q-122 0 -235 25.5t-191 61.5v211h14q82 -52 192 -88.5t216 -36.5q71 0 137.5 20t118.5 70q44 43 66.5 103t22.5 139q0 77 -26.5 130t-73.5 85q-52 38 -126.5 53.5t-166.5 15.5q-88 0 -169.5 -12 t-140.5 -24v767h896v-175h-703v-396q43 4 88 6t78 2q121 0 212 -20.5t167 -72.5q80 -55 124 -142t44 -218z',
            'M1191 483q0 -227 -149.5 -370.5t-366.5 -143.5q-110 0 -200 34t-159 101q-86 83 -132.5 220t-46.5 330q0 198 42.5 351t135.5 272q88 113 227 176.5t324 63.5q59 0 99 -5t81 -18v-191h-10q-28 15 -84.5 28.5t-115.5 13.5q-215 0 -343 -134.5t-149 -363.5 q84 51 165.5 77.5t188.5 26.5q95 0 167.5 -17.5t148.5 -70.5q88 -61 132.5 -154t44.5 -226zM988 475q0 93 -27.5 154t-90.5 106q-46 32 -102 42t-117 10q-85 0 -158 -20t-150 -62q-2 -22 -3 -42.5t-1 -51.5q0 -158 32.5 -249.5t89.5 -144.5q46 -44 99.5 -64.5t116.5 -20.5 q145 0 228 88.5t83 254.5z',
            'M1173 1266l-674 -1266h-214l717 1314h-848v175h1019v-223z',
            'M1180 415q0 -193 -150.5 -321t-378.5 -128q-242 0 -385.5 125t-143.5 320q0 124 72 224.5t203 159.5v6q-120 64 -177.5 140t-57.5 190q0 168 138 280t351 112q223 0 356 -107t133 -272q0 -101 -63 -198.5t-185 -152.5v-6q140 -60 214 -148t74 -224zM943 1142 q0 107 -82.5 170.5t-210.5 63.5q-126 0 -206.5 -60t-80.5 -162q0 -72 40.5 -124.5t122.5 -93.5q37 -18 106.5 -47t135.5 -48q99 66 137 137t38 164zM974 396q0 92 -40.5 147.5t-158.5 111.5q-47 22 -103 41t-149 53q-90 -49 -144.5 -133t-54.5 -190q0 -135 93 -223t236 -88 q146 0 233.5 75t87.5 206z',
            'M1167 834q0 -195 -44.5 -354t-134.5 -271q-91 -114 -228 -176t-322 -62q-52 0 -98 5.5t-82 17.5v191h10q29 -15 82 -28.5t118 -13.5q221 0 346.5 132.5t145.5 365.5q-93 -56 -175 -80t-179 -24q-92 0 -166.5 18t-149.5 70q-88 61 -132.5 155t-44.5 225q0 228 150 371 t366 143q108 0 200 -33.5t161 -100.5q85 -83 131 -213.5t46 -337.5zM965 877q0 155 -32 249t-88 146q-47 45 -101 64.5t-117 19.5q-144 0 -227.5 -90t-83.5 -253q0 -95 27 -155t91 -105q45 -31 99 -41.5t120 -10.5q78 0 158 21t150 61q1 21 2.5 41.5t1.5 52.5z',
            'M585 832h-239v285h239v-285zM585 0h-239v285h239v-285z',
            'M585 832h-239v285h239v-285zM658 285l-282 -655h-146l174 655h254z',
            'M1408 77l-1154 513v124l1154 513v-180l-910 -395l910 -395v-180z',
            'M1431 782h-1186v160h1186v-160zM1431 362h-1186v160h1186v-160z',
            'M1422 590l-1154 -513v180l910 395l-910 395v180l1154 -513v-124z',
            'M1005 1139q0 -98 -35 -174.5t-92 -135.5q-56 -57 -129 -107t-155 -97v-225h-179v305q65 37 140.5 81t123.5 89q58 52 90 107.5t32 141.5q0 113 -76.5 168.5t-197.5 55.5q-108 0 -204.5 -34t-152.5 -69h-10v204q70 27 177.5 48.5t203.5 21.5q215 0 339.5 -104.5 t124.5 -275.5zM610 0h-204v211h204v-211z',
            'M1870 663q0 -139 -40.5 -269t-115.5 -237h-440l-27 116q-74 -60 -142 -92t-156 -32q-168 0 -268.5 127t-100.5 355q0 227 123 362t294 135q73 0 129 -16.5t121 -49.5v48h159v-842h243q42 75 63.5 187.5t21.5 201.5q0 164 -45.5 298t-133.5 230t-218 147.5t-295 51.5 q-160 0 -292.5 -58t-227.5 -156q-96 -98 -150.5 -234.5t-54.5 -290.5q0 -165 52 -301.5t147 -233.5q99 -101 232 -152.5t290 -51.5q86 0 177.5 11t175.5 35v-142q-97 -21 -181 -28.5t-173 -7.5q-186 0 -345 63.5t-273 177.5q-115 115 -179 276t-64 356q0 185 67 344.5 t183 276.5t275 184t340 67q196 0 350 -62t260 -174t162.5 -269.5t56.5 -350.5zM1245 408v518q-63 29 -113 41.5t-107 12.5q-129 0 -202 -90t-73 -256q0 -163 58 -246.5t181 -83.5q67 0 134 31t122 73z',
            'M1374 0h-211l-146 415h-644l-146 -415h-201l542 1489h264zM956 585l-261 731l-262 -731h523z',
            'M1323 458q0 -111 -42 -196t-113 -140q-84 -66 -184.5 -94t-255.5 -28h-528v1489h441q163 0 244 -12t155 -50q82 -43 119 -110.5t37 -161.5q0 -106 -54 -180.5t-144 -119.5v-8q151 -31 238 -132.5t87 -256.5zM990 1129q0 54 -18 91t-58 60q-47 27 -114 33.5t-166 6.5h-236 v-430h256q93 0 148 9.5t102 39.5t66.5 77.5t19.5 112.5zM1117 450q0 90 -27 143t-98 90q-48 25 -116.5 32.5t-166.5 7.5h-311v-554h262q130 0 213 13.5t136 49.5q56 39 82 89t26 129z',
            'M1350 108q-55 -24 -99.5 -45t-116.5 -44q-61 -19 -132.5 -32.5t-157.5 -13.5q-162 0 -294.5 45.5t-230.5 142.5q-96 95 -150 241.5t-54 340.5q0 184 52 329t150 245q95 97 229.5 148t298.5 51q120 0 239.5 -29t265.5 -102v-235h-15q-123 103 -244 150t-259 47 q-113 0 -203.5 -36.5t-161.5 -113.5q-69 -75 -107.5 -189.5t-38.5 -264.5q0 -157 42.5 -270t109.5 -184q70 -74 163.5 -109.5t197.5 -35.5q143 0 268 49t234 147h14v-232z',
            'M1458 743q0 -203 -88.5 -368t-235.5 -256q-102 -63 -227.5 -91t-330.5 -28h-376v1489h372q218 0 346.5 -31.5t217.5 -86.5q152 -95 237 -253t85 -375zM1251 746q0 175 -61 295t-182 189q-88 50 -187 69.5t-237 19.5h-186v-1149h186q143 0 249.5 21t195.5 78 q111 71 166.5 187t55.5 290z',
            'M1181 0h-981v1489h981v-176h-783v-408h783v-176h-783v-553h783v-176z',
            'M1151 1313h-753v-420h647v-176h-647v-717h-198v1489h951v-176z',
            'M1442 110q-122 -56 -266.5 -97.5t-279.5 -41.5q-174 0 -319 48t-247 144q-103 97 -159 242.5t-56 340.5q0 357 208.5 563.5t572.5 206.5q127 0 259.5 -30.5t285.5 -103.5v-235h-18q-31 24 -90 63t-116 65q-69 31 -156.5 51.5t-198.5 20.5q-250 0 -395.5 -160.5 t-145.5 -434.5q0 -289 152 -449.5t414 -160.5q96 0 191.5 19t167.5 49v365h-399v174h595v-639z',
            'M1339 0h-198v729h-743v-729h-198v1489h198v-584h743v584h198v-1489z',
            'M725 0h-588v152h195v1185h-195v152h588v-152h-195v-1185h195v-152z',
            'M746 387q0 -196 -119.5 -302t-320.5 -106q-48 0 -128 8.5t-134 20.5v185h11q41 -14 101 -29t123 -15q92 0 146.5 21t80.5 60q27 40 34.5 98t7.5 134v869h-315v158h513v-1102z',
            'M1397 0h-257l-589 663l-148 -158v-505h-198v1489h198v-777l723 777h240l-665 -700z',
            'M1142 0h-942v1489h198v-1313h744v-176z',
            'M1526 0h-198v1283l-414 -873h-118l-411 873v-1283h-185v1489h270l397 -829l384 829h275v-1489z',
            'M1336 0h-245l-706 1332v-1332h-185v1489h307l644 -1216v1216h185v-1489z',
            'M1310 1318q91 -100 139.5 -245t48.5 -329t-49.5 -329.5t-138.5 -242.5q-92 -101 -217.5 -152t-286.5 -51q-157 0 -285.5 52t-218.5 151t-138.5 243t-48.5 329q0 182 48 326.5t140 247.5q88 98 218.5 150t284.5 52q160 0 287.5 -52.5t216.5 -149.5zM1292 744 q0 290 -130 447.5t-355 157.5q-227 0 -356.5 -157.5t-129.5 -447.5q0 -293 132 -448.5t354 -155.5t353.5 155.5t131.5 448.5z',
            'M1174 1039q0 -99 -34.5 -183.5t-96.5 -146.5q-77 -77 -182 -115.5t-265 -38.5h-198v-555h-198v1489h404q134 0 227 -22.5t165 -70.5q85 -57 131.5 -142t46.5 -215zM968 1034q0 77 -27 134t-82 93q-48 31 -109.5 44.5t-155.5 13.5h-196v-595h167q120 0 195 21.5t122 68.5 q47 48 66.5 101t19.5 119z',
            'M1528 -365q-60 -15 -118.5 -21.5t-119.5 -6.5q-174 0 -279.5 95.5t-114.5 273.5q-24 -4 -46.5 -5.5t-43.5 -1.5q-157 0 -285.5 52t-218.5 151t-138.5 243t-48.5 329q0 182 48 326.5t140 247.5q88 98 218.5 150t284.5 52q160 0 287.5 -52.5t216.5 -149.5 q91 -100 139.5 -245t48.5 -329q0 -273 -111.5 -460t-299.5 -262q4 -114 54 -177t182 -63q41 0 97.5 12.5t80.5 22.5h27v-182zM1292 744q0 290 -130 447.5t-355 157.5q-227 0 -356.5 -157.5t-129.5 -447.5q0 -293 132 -448.5t354 -155.5t353.5 155.5t131.5 448.5z',
            'M1432 0h-257l-498 592h-279v-592h-198v1489h417q135 0 225 -17.5t162 -62.5q81 -51 126.5 -128.5t45.5 -196.5q0 -161 -81 -269.5t-223 -163.5zM969 1070q0 64 -22.5 113.5t-74.5 83.5q-43 29 -102 40.5t-139 11.5h-233v-562h200q94 0 164 16.5t119 61.5q45 42 66.5 96.5 t21.5 138.5z',
            'M1282 425q0 -87 -40.5 -172t-113.5 -144q-80 -64 -186.5 -100t-256.5 -36q-161 0 -289.5 30t-261.5 89v248h14q113 -94 261 -145t278 -51q184 0 286.5 69t102.5 184q0 99 -48.5 146t-147.5 73q-75 20 -162.5 33t-185.5 33q-198 42 -293.5 143.5t-95.5 264.5 q0 187 158 306.5t401 119.5q157 0 288 -30t232 -74v-234h-14q-85 72 -223.5 119.5t-283.5 47.5q-159 0 -255.5 -66t-96.5 -170q0 -93 48 -146t169 -81q64 -14 182 -34t200 -41q166 -44 250 -133t84 -249z',
            'M1262 1313h-532v-1313h-198v1313h-532v176h1262v-176z',
            'M1321 598q0 -162 -35.5 -282.5t-116.5 -200.5q-77 -76 -180 -111t-240 -35q-140 0 -244 37t-175 109q-81 82 -116.5 198t-35.5 285v891h198v-901q0 -121 16.5 -191t55.5 -127q44 -65 119.5 -98t181.5 -33q107 0 182 32.5t120 98.5q39 57 55.5 130.5t16.5 182.5v906h198 v-891z',
            'M1374 1489l-542 -1489h-264l-542 1489h212l467 -1310l467 1310h202z',
            'M1933 1489l-387 -1489h-223l-313 1236l-306 -1236h-218l-394 1489h203l313 -1238l308 1238h201l311 -1250l311 1250h194z',
            'M1336 1489l-514 -736l513 -753h-229l-406 613l-416 -613h-216l519 744l-507 745h228l401 -605l410 605h217z',
            'M1254 1489l-524 -836v-653h-198v632l-526 857h219l407 -666l411 666h211z',
            'M1288 0h-1162v184l913 1129h-879v176h1106v-179l-922 -1134h944v-176z',
            'M759 -392h-520v1948h520v-143h-346v-1662h346v-143z',
            'M960 -304h-173l-717 1860h176z',
            'M691 -392h-520v143h346v1662h-346v143h520v-1948z',
            'M1490 684h-198l-455 627l-454 -629h-197l589 807h126z',
            'M1306 -300h-1310v120h1310v-120z',
            'M762 1302h-149l-273 374h243z',
            'M1053 0h-187v119q-25 -17 -67.5 -47.5t-82.5 -48.5q-47 -23 -108 -38.5t-143 -15.5q-151 0 -256 100t-105 255q0 127 54.5 205.5t155.5 123.5q102 45 245 61t307 24v29q0 64 -22.5 106t-64.5 66q-40 23 -96 31t-117 8q-74 0 -165 -19.5t-188 -56.5h-10v191q55 15 159 33 t205 18q118 0 205.5 -19.5t151.5 -66.5q63 -46 96 -119t33 -181v-758zM866 275v311q-86 -5 -202.5 -15t-184.5 -29q-81 -23 -131 -71.5t-50 -133.5q0 -96 58 -144.5t177 -48.5q99 0 181 38.5t152 92.5z',
            'M1168 567q0 -140 -39.5 -252t-106.5 -188q-71 -79 -156 -118.5t-187 -39.5q-95 0 -166 22.5t-140 60.5l-12 -52h-176v1556h188v-556q79 65 168 106.5t200 41.5q198 0 312.5 -152t114.5 -429zM974 562q0 200 -66 303.5t-213 103.5q-82 0 -166 -35.5t-156 -91.5v-640 q80 -36 137.5 -50t130.5 -14q156 0 244.5 102.5t88.5 321.5z',
            'M1011 70q-94 -45 -178.5 -70t-179.5 -25q-121 0 -222 35.5t-173 107.5q-73 72 -113 182t-40 257q0 274 150.5 430t397.5 156q96 0 188.5 -27t169.5 -66v-209h-10q-86 67 -177.5 103t-178.5 36q-160 0 -252.5 -107.5t-92.5 -315.5q0 -202 90.5 -310.5t254.5 -108.5 q57 0 116 15t106 39q41 21 77 44.5t57 40.5h10v-207z',
            'M1091 0h-188v117q-81 -70 -169 -109t-191 -39q-200 0 -317.5 154t-117.5 427q0 142 40.5 253t109.5 189q68 76 158.5 116t187.5 40q88 0 156 -18.5t143 -57.5v484h188v-1556zM903 275v641q-76 34 -136 47t-131 13q-158 0 -246 -110t-88 -312q0 -199 68 -302.5t218 -103.5 q80 0 162 35.5t153 91.5z',
            'M1120 539h-823q0 -103 31 -179.5t85 -125.5q52 -48 123.5 -72t157.5 -24q114 0 229.5 45.5t164.5 89.5h10v-205q-95 -40 -194 -67t-208 -27q-278 0 -434 150.5t-156 427.5q0 274 149.5 435t393.5 161q226 0 348.5 -132t122.5 -375v-102zM937 683q-1 148 -74.5 229 t-223.5 81q-151 0 -240.5 -89t-101.5 -221h640z',
            'M786 1374h-10q-31 9 -81 18.5t-88 9.5q-121 0 -175.5 -53.5t-54.5 -193.5v-38h339v-158h-333v-959h-188v959h-127v158h127v37q0 199 99 305.5t286 106.5q63 0 113.5 -6t92.5 -14v-172z',
            'M1091 127q0 -284 -129 -417t-397 -133q-89 0 -173.5 12.5t-166.5 35.5v192h10q46 -18 146 -44.5t200 -26.5q96 0 159 23t98 64q35 39 50 94t15 123v102q-85 -68 -162.5 -101.5t-197.5 -33.5q-200 0 -317.5 144.5t-117.5 407.5q0 144 40.5 248.5t110.5 180.5 q65 71 158 110.5t185 39.5q97 0 162.5 -19.5t138.5 -59.5l12 48h176v-990zM903 307v609q-75 34 -139.5 48.5t-128.5 14.5q-155 0 -244 -104t-89 -302q0 -188 66 -285t219 -97q82 0 164.5 31.5t151.5 84.5z',
            'M1119 0h-188v636q0 77 -9 144.5t-33 105.5q-25 42 -72 62.5t-122 20.5q-77 0 -161 -38t-161 -97v-834h-188v1556h188v-563q88 73 182 114t193 41q181 0 276 -109t95 -314v-725z',
            'M387 1304h-212v195h212v-195zM375 0h-188v1117h188v-1117z',
            'M533 1304h-212v195h212v-195zM521 -27q0 -196 -100 -296t-268 -100q-40 0 -105.5 8t-109.5 20v179h10q28 -11 75.5 -25t92.5 -14q72 0 116 20t66 60t28.5 96.5t6.5 137.5v900h-233v158h421v-1144z',
            'M1199 0h-248l-448 489l-122 -116v-373h-188v1556h188v-998l543 559h237l-519 -516z',
            'M375 0h-188v1556h188v-1556z',
            'M1815 0h-188v636q0 72 -6.5 139t-27.5 107q-23 43 -66 65t-124 22q-79 0 -158 -39.5t-158 -100.5q3 -23 5 -53.5t2 -60.5v-715h-188v636q0 74 -6.5 140.5t-27.5 106.5q-23 43 -66 64.5t-124 21.5q-77 0 -154.5 -38t-154.5 -97v-834h-188v1117h188v-124q88 73 175.5 114 t186.5 41q114 0 193.5 -48t118.5 -133q114 96 208 138.5t201 42.5q184 0 271.5 -111.5t87.5 -311.5v-725z',
            'M1119 0h-188v636q0 77 -9 144.5t-33 105.5q-25 42 -72 62.5t-122 20.5q-77 0 -161 -38t-161 -97v-834h-188v1117h188v-124q88 73 182 114t193 41q181 0 276 -109t95 -314v-725z',
            'M1137 558q0 -273 -140 -431t-375 -158q-237 0 -376.5 158t-139.5 431t139.5 431.5t376.5 158.5q235 0 375 -158.5t140 -431.5zM943 558q0 217 -85 322.5t-236 105.5q-153 0 -237.5 -105.5t-84.5 -322.5q0 -210 85 -318.5t237 -108.5q150 0 235.5 107.5t85.5 319.5z',
            'M1168 572q0 -136 -39 -248.5t-110 -190.5q-66 -74 -155.5 -114.5t-189.5 -40.5q-87 0 -157.5 19t-143.5 59v-468h-188v1529h188v-117q75 63 168.5 105.5t199.5 42.5q202 0 314.5 -152.5t112.5 -423.5zM974 567q0 202 -69 302t-212 100q-81 0 -163 -35t-157 -92v-633 q80 -36 137.5 -49t130.5 -13q157 0 245 106t88 314z',
            'M1091 -412h-188v538q-87 -75 -173 -111.5t-186 -36.5q-199 0 -317.5 153.5t-118.5 423.5q0 144 41.5 254.5t109.5 185.5q66 73 155 113t188 40q90 0 159.5 -20t141.5 -59l12 48h176v-1529zM903 284v632q-78 35 -138 49t-130 14q-163 0 -248 -110.5t-85 -304.5 q0 -196 68.5 -301.5t215.5 -105.5q82 0 164 35.5t153 91.5z',
            'M882 912h-10q-42 10 -81.5 14.5t-93.5 4.5q-87 0 -168 -38.5t-156 -99.5v-793h-188v1117h188v-165q112 90 197.5 127.5t174.5 37.5q49 0 71 -2.5t66 -9.5v-193z',
            'M983 322q0 -153 -126.5 -251t-345.5 -98q-124 0 -227.5 29.5t-173.5 64.5v211h10q89 -67 198 -106.5t209 -39.5q124 0 194 40t70 126q0 66 -38 100t-146 58q-40 9 -104.5 21t-117.5 26q-147 39 -208.5 114.5t-61.5 185.5q0 69 28.5 130t86.5 109q56 47 142.5 74.5 t193.5 27.5q100 0 202.5 -24.5t170.5 -59.5v-201h-10q-72 53 -175 89.5t-202 36.5q-103 0 -174 -39.5t-71 -117.5q0 -69 43 -104q42 -35 136 -57q52 -12 116.5 -24t107.5 -22q131 -30 202 -103q71 -74 71 -196z',
            'M765 10q-53 -14 -115.5 -23t-111.5 -9q-171 0 -260 92t-89 295v594h-127v158h127v321h188v-321h388v-158h-388v-509q0 -88 4 -137.5t28 -92.5q22 -40 60.5 -58.5t117.5 -18.5q46 0 96 13.5t72 22.5h10v-169z',
            'M1111 0h-188v124q-95 -75 -182 -115t-192 -40q-176 0 -274 107.5t-98 315.5v725h188v-636q0 -85 8 -145.5t34 -103.5q27 -44 70 -64t125 -20q73 0 159.5 38t161.5 97v834h188v-1117z',
            'M1151 1117l-452 -1117h-189l-449 1117h204l346 -889l343 889h197z',
            'M1590 1117l-291 -1117h-174l-287 861l-285 -861h-173l-294 1117h196l205 -865l279 865h155l286 -865l194 865h189z',
            'M1152 0h-237l-317 429l-319 -429h-219l436 557l-432 560h237l315 -422l316 422h220l-439 -550z',
            'M1151 1117l-652 -1529h-201l208 466l-445 1063h204l343 -828l346 828h197z',
            'M995 0h-902v139l651 821h-637v157h871v-134l-654 -824h671v-159z',
            'M1113 -392h-150q-179 0 -290.5 99.5t-111.5 287.5v149q0 169 -83 264.5t-254 95.5h-51v156h51q171 0 254 95.5t83 264.5v149q0 188 111.5 287.5t290.5 99.5h150v-138h-114q-136 0 -197.5 -63t-61.5 -203v-175q0 -139 -77 -233.5t-214 -149.5v-24q137 -55 214 -149.5 t77 -233.5v-175q0 -140 61.5 -203t197.5 -63h114v-138z',
            'M552 -392h-174v1948h174v-1948z',
            'M1127 504h-51q-171 0 -254 -95.5t-83 -264.5v-149q0 -188 -111.5 -287.5t-290.5 -99.5h-150v138h114q136 0 197.5 63t61.5 203v175q0 139 77 233.5t214 149.5v24q-137 55 -214 149.5t-77 233.5v175q0 140 -61.5 203t-197.5 63h-114v138h150q179 0 290.5 -99.5 t111.5 -287.5v-149q0 -169 83 -264.5t254 -95.5h51v-156z',
            'M1489 927q-2 -99 -22.5 -195t-65.5 -171q-46 -77 -111 -121t-165 -44q-94 0 -167 39.5t-157 141.5q-102 125 -148 157t-96 32q-94 0 -144 -87.5t-59 -283.5h-167q2 100 22.5 194.5t64.5 171.5q43 74 112 119.5t165 45.5q93 0 166.5 -38.5t158.5 -142.5q80 -98 131 -143.5 t112 -45.5q103 0 151.5 101t51.5 270h167z',
            '',
            'M505 1278h-204v211h204v-211zM515 0h-224l26 1079h170z',
            'M1120 74q-71 -30 -161 -53.5t-194 -26.5v-355h-118v359q-227 21 -357.5 165t-130.5 394q0 242 133.5 391.5t354.5 171.5v355h118v-351q104 -3 197 -25t158 -53v-203h-11q-55 44 -142 85t-202 50v-839q120 10 206.5 52.5t137.5 83.5h11v-201zM647 142v834 q-135 -20 -216 -125t-81 -294q0 -181 76 -286t221 -129z',
            'M1163 0h-1026v207q118 32 169.5 126.5t51.5 279.5h-176v138h176v310q0 200 126.5 328.5t331.5 128.5q105 0 181 -17t140 -34v-206h-10q-62 42 -138 66t-162 24q-140 0 -209.5 -82.5t-69.5 -226.5v-291h415v-138h-415v-61q0 -126 -62 -219.5t-160 -150.5v-11h837v-171z ',
            'M1168 257l-110 -110l-236 234q-44 -26 -81 -37t-89 -11q-46 0 -89.5 12.5t-79.5 35.5l-236 -236l-109 113l233 234q-23 37 -35 81.5t-12 87.5q0 52 11 88.5t37 79.5l-234 237l111 110l235 -235q36 23 79.5 35.5t88.5 12.5q44 0 88 -12t81 -35l234 234l113 -109l-235 -237 q24 -38 36 -79.5t12 -89.5q0 -45 -12.5 -89t-35.5 -80zM832 661q0 73 -52.5 129t-127.5 56q-73 0 -126.5 -55t-53.5 -130q0 -74 52.5 -129.5t127.5 -55.5q73 0 126.5 54.5t53.5 130.5z',
            'M1191 1489l-448 -831v-94h372v-138h-370v-426h-188v426h-370v138h372v73l-451 852h212l332 -659l336 659h203z',
            'M552 758h-174v798h174v-798zM552 -392h-174v798h174v-798z',
            'M1128 601q0 -106 -59 -187t-158 -136v-7q97 -46 141 -118.5t44 -162.5q0 -77 -33 -146t-98 -119q-72 -56 -169 -83t-221 -27q-87 0 -170.5 13.5t-175.5 44.5v194h10q79 -37 169 -62t198 -25q134 0 215 48.5t81 135.5q0 56 -19.5 88.5t-64.5 57.5q-41 23 -113 41.5 t-154 38.5q-214 52 -296 133q-83 81 -83 210q0 98 57 182.5t159 141.5v7q-101 48 -143 121t-42 162q0 81 32 146.5t99 117.5q64 50 163.5 79t227.5 29q87 0 171 -14t175 -43v-194h-10q-58 27 -152.5 57t-215.5 30q-127 0 -211.5 -46t-84.5 -133q0 -57 21.5 -92.5t64.5 -58.5 t109 -41.5t157 -39.5q200 -46 290 -125q89 -79 89 -218zM881 399q28 33 43 65.5t15 90.5q0 51 -16.5 86t-45.5 58q-28 24 -67 39.5t-83 27.5q-39 11 -85.5 21.5t-116.5 30.5q-18 -9 -49 -31.5t-53 -46.5q-24 -26 -43 -69t-19 -92q0 -50 15.5 -85t44.5 -59q27 -23 67.5 -39 t84.5 -27q38 -10 86 -22t115 -31q20 11 53 34.5t54 48.5z',
            'M958 1304h-199v195h199v-195zM545 1304h-199v195h199v-195z',
            'M1889 655q0 -358 -253.5 -611.5t-611.5 -253.5t-611.5 253.5t-253.5 611.5t253.5 611.5t611.5 253.5t611.5 -253.5t253.5 -611.5zM1773 655q0 310 -219.5 532t-529.5 222t-529.5 -222t-219.5 -532t219.5 -532t529.5 -222t529.5 222t219.5 532zM1375 258 q-86 -39 -165.5 -58.5t-157.5 -19.5q-227 0 -359 123t-132 357q0 225 134.5 354t356.5 129q89 0 175 -24t148 -52v-181h-16q-54 40 -138.5 75t-173.5 35q-142 0 -221.5 -85.5t-79.5 -250.5q0 -159 76.5 -246t224.5 -87q83 0 161.5 29t150.5 81h16v-179z',
            'M944 554h-170v94q-28 -20 -52.5 -38.5t-68.5 -37.5q-45 -20 -85.5 -30.5t-113.5 -10.5q-128 0 -215.5 85t-87.5 217q0 106 46.5 173.5t123.5 103.5q78 36 197.5 51.5t255.5 21.5v18q0 53 -18 85t-51 51q-34 18 -77.5 23t-91.5 5q-84 0 -168 -24t-123 -38h-14v172 q45 13 137 29t169 16q217 0 312 -84.5t95 -243.5v-638zM774 796v245q-69 -4 -160.5 -12t-145.5 -23q-64 -18 -103 -56.5t-39 -106.5q0 -76 45.5 -114t139.5 -38q82 0 147.5 33.5t115.5 71.5z',
            'M1146 191l-528 419v85l528 418v-188l-357 -273l357 -273v-188zM716 162l-550 446v89l550 445v-196l-371 -294l371 -294v-196z',
            'M1456 57h-171v545h-1075v160h1246v-705z',
            'M777 561h-624v181h624v-181z',
            'M1889 655q0 -358 -253.5 -611.5t-611.5 -253.5t-611.5 253.5t-253.5 611.5t253.5 611.5t611.5 253.5t611.5 -253.5t253.5 -611.5zM1773 655q0 310 -219.5 532t-529.5 222t-529.5 -222t-219.5 -532t219.5 -532t529.5 -222t529.5 222t219.5 532zM1581 215h-223l-331 355 h-162v-355h-165v915h312q94 0 155 -8t120 -39q63 -34 92.5 -82.5t29.5 -121.5q0 -97 -56.5 -161.5t-155.5 -102.5zM1229 868q0 36 -14 64t-47 46q-31 17 -66 22t-88 5h-149v-309h127q62 0 107 9.5t74 32.5q31 25 43.5 55t12.5 75z',
            'M1306 1668h-1305l-5 120h1310v-120z',
            'M956 1116q0 -168 -116 -284t-285 -116t-285 115.5t-116 284.5q0 168 116 284t285 116q170 0 285.5 -116t115.5 -284zM791 1116q0 102 -67 171.5t-169 69.5t-169 -69.5t-67 -171.5q0 -104 68.5 -172.5t167.5 -68.5q102 0 169 70t67 171z',
            'M1461 179h-1246v158h540v422h-540v158h540v545h166v-545h540v-158h-540v-422h540v-158z',
            'M967 566h-760v156q100 62 183.5 117t134.5 96q131 103 168 154.5t37 135.5q0 69 -53.5 107t-143.5 38q-89 0 -175 -30.5t-134 -61.5h-13v180q71 26 158.5 43.5t174.5 17.5q180 0 273.5 -78.5t93.5 -203.5q0 -99 -48.5 -174.5t-163.5 -165.5q-55 -43 -132.5 -94 t-143.5 -92h544v-145z',
            'M956 817q0 -75 -33 -131.5t-89 -90.5q-57 -35 -131 -51.5t-163 -16.5q-94 0 -176.5 15t-156.5 43v179h14q41 -36 138.5 -65.5t190.5 -29.5q100 0 166.5 35.5t66.5 110.5q0 85 -59 115t-171 30h-143v141h128q112 0 165.5 38.5t53.5 106.5q0 61 -49.5 96.5t-153.5 35.5 q-77 0 -174.5 -31t-141.5 -67h-14v178q74 27 160.5 44.5t176.5 17.5q175 0 271.5 -68t96.5 -174q0 -89 -55 -146t-144 -83v-8q95 -17 160.5 -72.5t65.5 -151.5z',
            'M963 1676l-273 -374h-149l179 374h243z',
            'M1124 0h-178l-10 118q-59 -65 -123.5 -102t-155.5 -37q-86 0 -149.5 35t-129.5 99v-525h-188v1529h188v-838q32 -39 109.5 -80t168.5 -41q93 0 159.5 33.5t120.5 93.5v832h188v-1117z',
            'M1106 -363h-148v1722h-214v-1722h-149v956q-206 5 -332 129t-126 328q0 207 130 323t373 116h466v-1852z',
            'M492 511h-239v283h239v-283z',
            'M880 -89q0 -162 -91.5 -248t-237.5 -86q-37 0 -95 7t-103 19v160h9q26 -10 70 -23t94 -13q104 0 153 39t49 127q0 29 -3 65.5t-6 61.5h153q2 -19 5 -45t3 -64z',
            'M914 566h-615v122h234v568h-242v112q45 0 99 6.5t84 18.5q37 16 59 38t25 62h135v-805h221v-122z',
            'M996 1025q0 -235 -122 -364.5t-315 -129.5q-201 0 -319.5 132.5t-118.5 361.5t118.5 362t319.5 133q193 0 315 -130t122 -365zM814 1025q0 172 -67.5 258t-187.5 86q-122 0 -189 -87t-67 -257t67 -256.5t189 -86.5q120 0 187.5 85.5t67.5 257.5z',
            'M1154 608l-550 -446v196l371 294l-371 294v196l550 -445v-89zM702 610l-528 -419v188l357 273l-357 273v188l528 -418v-85z',
            'M545 565h-165v681h-209v117q102 0 165 22t72 108h137v-928zM1410 1489l-780 -1489h-165l780 1489h165zM1857 220h-163v-220h-150v220h-465v185l466 539h149v-591h163v-133zM1548 353v400l-353 -400h353z',
            'M545 565h-165v681h-209v117q102 0 165 22t72 108h137v-928zM1410 1489l-780 -1489h-165l780 1489h165zM1955 0h-688v148q91 69 158 121t106 89q109 103 141 157.5t32 136.5q0 70 -44 107t-120 37q-70 0 -141.5 -30t-112.5 -62h-15v179q65 27 140.5 44t152.5 17 q157 0 241.5 -79t84.5 -201q0 -93 -41 -167t-147 -168q-49 -43 -119.5 -96t-125.5 -94h498v-139z',
            'M793 826q0 -71 -30 -127t-78 -90q-53 -37 -114.5 -53t-140.5 -16q-82 0 -153.5 15t-136.5 43v175h17q37 -35 114 -64.5t156 -29.5q84 0 139 36.5t55 108.5q0 83 -50 112.5t-141 29.5h-140v139h125q87 0 134.5 38t47.5 104q0 60 -41 95.5t-128 35.5q-66 0 -142.5 -31 t-113.5 -66h-17v175q64 27 139 44t154 17q152 0 237 -70t85 -168q0 -87 -48.5 -143.5t-125.5 -82.5v-8q80 -16 138.5 -70.5t58.5 -148.5zM1500 1489l-780 -1489h-165l780 1489h165zM1913 220h-163v-220h-150v220h-465v185l466 539h149v-591h163v-133zM1604 353v400 l-353 -400h353z',
            'M712 1278h-204v211h204v-211zM958 40q-83 -30 -176 -50t-205 -20q-215 0 -339.5 104.5t-124.5 275.5q0 98 34.5 173t93.5 137q58 62 136.5 112.5t146.5 91.5v225h179v-305q-60 -33 -139 -81.5t-125 -88.5q-54 -47 -88 -109t-34 -140q0 -113 76.5 -168.5t197.5 -55.5 q103 0 201.5 33t155.5 70h10v-204z',
            'M1374 0h-211l-146 415h-644l-146 -415h-201l542 1489h264zM956 585l-261 731l-262 -731h523zM862 1675h-149l-273 374h243z',
            'M1374 0h-211l-146 415h-644l-146 -415h-201l542 1489h264zM956 585l-261 731l-262 -731h523zM955 2049l-273 -374h-149l179 374h243z',
            'M1374 0h-211l-146 415h-644l-146 -415h-201l542 1489h264zM956 585l-261 731l-262 -731h523zM1033 1670h-159l-185 256l-184 -256h-155l228 379h227z',
            'M1374 0h-211l-146 415h-644l-146 -415h-201l542 1489h264zM956 585l-261 731l-262 -731h523zM1119 1992q-11 -152 -77 -229t-177 -77q-54 0 -100 19.5t-87 56.5q-47 43 -79.5 64.5t-71.5 21.5q-52 0 -78 -45t-30 -121h-131q8 151 79 228t174 77q50 0 96.5 -19.5 t88.5 -55.5q47 -41 83.5 -61.5t69.5 -20.5q51 0 79.5 46t31.5 116h129z',
            'M1374 0h-211l-146 415h-644l-146 -415h-201l542 1489h264zM956 585l-261 731l-262 -731h523zM1005 1677h-199v195h199v-195zM592 1677h-199v195h199v-195z',
            'M1374 0h-211l-148 415h-640l-148 -415h-201l519 1407q-89 44 -142.5 123.5t-53.5 181.5q0 143 102 240t248 97q147 0 248.5 -97t101.5 -240q0 -100 -52.5 -181.5t-141.5 -123.5zM899 1710q0 86 -57 143.5t-143 57.5t-143 -58t-57 -143q0 -86 57.5 -143.5t142.5 -57.5 q86 0 143 57.5t57 143.5zM953 585l-258 715l-259 -715h517z',
            'M1901 0h-944v556h-524l-212 -556h-207l594 1489h1293v-176h-749v-408h749v-176h-749v-553h749v-176zM957 723v601h-219l-239 -601h458z',
            'M1350 108q-55 -24 -99.5 -45t-116.5 -44q-11 -3 -24 -7.5t-31 -7.5q2 -19 3.5 -44.5t1.5 -48.5q0 -162 -93.5 -248t-240.5 -86q-38 0 -97.5 7t-104.5 19v162h9q26 -10 71.5 -24t95.5 -14q106 0 155 40t49 126q0 19 -1 41.5t-3 42.5q-19 -2 -40.5 -3t-39.5 -1 q-162 0 -294.5 45.5t-230.5 142.5q-96 95 -150 241.5t-54 340.5q0 184 52 329t150 245q95 97 229.5 148t298.5 51q120 0 239.5 -29t265.5 -102v-235h-15q-123 103 -244 150t-259 47q-113 0 -203.5 -36.5t-161.5 -113.5q-69 -75 -107.5 -189.5t-38.5 -264.5q0 -157 42.5 -270 t109.5 -184q70 -74 163.5 -109.5t197.5 -35.5q143 0 268 49t234 147h14v-232z',
            'M1181 0h-981v1489h981v-176h-783v-408h783v-176h-783v-553h783v-176zM822 1675h-149l-273 374h243z',
            'M1181 0h-981v1489h981v-176h-783v-408h783v-176h-783v-553h783v-176zM993 2049l-273 -374h-149l179 374h243z',
            'M1181 0h-981v1489h981v-176h-783v-408h783v-176h-783v-553h783v-176zM1031 1670h-159l-185 256l-184 -256h-155l228 379h227z',
            'M1181 0h-981v1489h981v-176h-783v-408h783v-176h-783v-553h783v-176zM1038 1677h-199v195h199v-195zM625 1677h-199v195h199v-195z',
            'M725 0h-588v152h195v1185h-195v152h588v-152h-195v-1185h195v-152zM568 1675h-149l-273 374h243z',
            'M725 0h-588v152h195v1185h-195v152h588v-152h-195v-1185h195v-152zM725 2049l-273 -374h-149l179 374h243z',
            'M725 0h-588v152h195v1185h-195v152h588v-152h-195v-1185h195v-152zM776 1670h-159l-185 256l-184 -256h-155l228 379h227z',
            'M725 0h-588v152h195v1185h-195v152h588v-152h-195v-1185h195v-152zM738 1677h-199v195h199v-195zM325 1677h-199v195h199v-195z',
            'M1468 743q0 -203 -88.5 -368t-235.5 -256q-102 -63 -227.5 -91t-330.5 -28h-376v740h-196v143h196v606h372q218 0 347 -31.5t217 -86.5q152 -95 237 -253t85 -375zM1261 746q0 175 -61 295t-182 189q-88 50 -187 69.5t-237 19.5h-188v-436h361v-143h-361v-570h188 q143 0 249.5 21t195.5 78q111 71 166.5 187t55.5 290z',
            'M1336 0h-245l-706 1332v-1332h-185v1489h307l644 -1216v1216h185v-1489zM1208 1992q-11 -152 -77 -229t-177 -77q-54 0 -100 19.5t-87 56.5q-47 43 -79.5 64.5t-71.5 21.5q-52 0 -78 -45t-30 -121h-131q8 151 79 228t174 77q50 0 96.5 -19.5t88.5 -55.5 q47 -41 83.5 -61.5t69.5 -20.5q51 0 79.5 46t31.5 116h129z',
            'M1310 1318q91 -100 139.5 -245t48.5 -329t-49.5 -329.5t-138.5 -242.5q-92 -101 -217.5 -152t-286.5 -51q-157 0 -285.5 52t-218.5 151t-138.5 243t-48.5 329q0 182 48 326.5t140 247.5q88 98 218.5 150t284.5 52q160 0 287.5 -52.5t216.5 -149.5zM1292 744 q0 290 -130 447.5t-355 157.5q-227 0 -356.5 -157.5t-129.5 -447.5q0 -293 132 -448.5t354 -155.5t353.5 155.5t131.5 448.5zM932 1675h-149l-273 374h243z',
            'M1310 1318q91 -100 139.5 -245t48.5 -329t-49.5 -329.5t-138.5 -242.5q-92 -101 -217.5 -152t-286.5 -51q-157 0 -285.5 52t-218.5 151t-138.5 243t-48.5 329q0 182 48 326.5t140 247.5q88 98 218.5 150t284.5 52q160 0 287.5 -52.5t216.5 -149.5zM1292 744 q0 290 -130 447.5t-355 157.5q-227 0 -356.5 -157.5t-129.5 -447.5q0 -293 132 -448.5t354 -155.5t353.5 155.5t131.5 448.5zM1083 2049l-273 -374h-149l179 374h243z',
            'M1310 1318q91 -100 139.5 -245t48.5 -329t-49.5 -329.5t-138.5 -242.5q-92 -101 -217.5 -152t-286.5 -51q-157 0 -285.5 52t-218.5 151t-138.5 243t-48.5 329q0 182 48 326.5t140 247.5q88 98 218.5 150t284.5 52q160 0 287.5 -52.5t216.5 -149.5zM1292 744 q0 290 -130 447.5t-355 157.5q-227 0 -356.5 -157.5t-129.5 -447.5q0 -293 132 -448.5t354 -155.5t353.5 155.5t131.5 448.5zM1136 1670h-159l-185 256l-184 -256h-155l228 379h227z',
            'M1310 1318q91 -100 139.5 -245t48.5 -329t-49.5 -329.5t-138.5 -242.5q-92 -101 -217.5 -152t-286.5 -51q-157 0 -285.5 52t-218.5 151t-138.5 243t-48.5 329q0 182 48 326.5t140 247.5q88 98 218.5 150t284.5 52q160 0 287.5 -52.5t216.5 -149.5zM1292 744 q0 290 -130 447.5t-355 157.5q-227 0 -356.5 -157.5t-129.5 -447.5q0 -293 132 -448.5t354 -155.5t353.5 155.5t131.5 448.5zM1207 1992q-11 -152 -77 -229t-177 -77q-54 0 -100 19.5t-87 56.5q-47 43 -79.5 64.5t-71.5 21.5q-52 0 -78 -45t-30 -121h-131q8 151 79 228 t174 77q50 0 96.5 -19.5t88.5 -55.5q47 -41 83.5 -61.5t69.5 -20.5q51 0 79.5 46t31.5 116h129z',
            'M1307 1318q91 -100 139.5 -245t48.5 -329t-49.5 -329.5t-138.5 -242.5q-92 -101 -217.5 -152t-286.5 -51q-157 0 -285.5 52t-218.5 151t-138.5 243t-48.5 329q0 182 48 326.5t140 247.5q88 98 218.5 150t284.5 52q160 0 287.5 -52.5t216.5 -149.5zM1289 744 q0 290 -130 447.5t-355 157.5q-227 0 -356.5 -157.5t-129.5 -447.5q0 -293 132 -448.5t354 -155.5t353.5 155.5t131.5 448.5zM1108 1677h-199v195h199v-195zM695 1677h-199v195h199v-195z',
            'M1385 216l-111 -111l-436 440l-436 -440l-111 111l440 436l-440 436l111 111l436 -440l436 440l111 -111l-440 -436z',
            'M1498 744q0 -184 -49.5 -329.5t-138.5 -242.5q-92 -101 -217.5 -152t-286.5 -51q-115 0 -215.5 29t-179.5 84l-159 -228h-132l205 294q-101 100 -155.5 250t-54.5 346q0 182 48 326.5t140 247.5q88 98 218.5 150t284.5 52q118 0 215 -27.5t179 -82.5l142 201h132 l-188 -268q101 -100 156.5 -248.5t55.5 -350.5zM1097 1260q-57 46 -129 68.5t-161 22.5q-110 0 -200 -38.5t-156 -116.5q-64 -76 -98.5 -190.5t-34.5 -261.5q0 -140 29.5 -252t87.5 -188zM1295 744q0 139 -30 253t-88 189l-664 -957q60 -45 132.5 -68t161.5 -23 q110 0 201.5 40t153.5 116q67 82 100 194.5t33 255.5z',
            'M1321 598q0 -162 -35.5 -282.5t-116.5 -200.5q-77 -76 -180 -111t-240 -35q-140 0 -244 37t-175 109q-81 82 -116.5 198t-35.5 285v891h198v-901q0 -121 16.5 -191t55.5 -127q44 -65 119.5 -98t181.5 -33q107 0 182 32.5t120 98.5q39 57 55.5 130.5t16.5 182.5v906h198 v-891zM932 1675h-149l-273 374h243z',
            'M1321 598q0 -162 -35.5 -282.5t-116.5 -200.5q-77 -76 -180 -111t-240 -35q-140 0 -244 37t-175 109q-81 82 -116.5 198t-35.5 285v891h198v-901q0 -121 16.5 -191t55.5 -127q44 -65 119.5 -98t181.5 -33q107 0 182 32.5t120 98.5q39 57 55.5 130.5t16.5 182.5v906h198 v-891zM1073 2049l-273 -374h-149l179 374h243z',
            'M1321 598q0 -162 -35.5 -282.5t-116.5 -200.5q-77 -76 -180 -111t-240 -35q-140 0 -244 37t-175 109q-81 82 -116.5 198t-35.5 285v891h198v-901q0 -121 16.5 -191t55.5 -127q44 -65 119.5 -98t181.5 -33q107 0 182 32.5t120 98.5q39 57 55.5 130.5t16.5 182.5v906h198 v-891zM1084 1670h-159l-185 256l-184 -256h-155l228 379h227z',
            'M1321 598q0 -162 -35.5 -282.5t-116.5 -200.5q-77 -76 -180 -111t-240 -35q-140 0 -244 37t-175 109q-81 82 -116.5 198t-35.5 285v891h198v-901q0 -121 16.5 -191t55.5 -127q44 -65 119.5 -98t181.5 -33q107 0 182 32.5t120 98.5q39 57 55.5 130.5t16.5 182.5v906h198 v-891zM1056 1677h-199v195h199v-195zM643 1677h-199v195h199v-195z',
            'M1254 1489l-524 -836v-653h-198v632l-526 857h219l407 -666l411 666h211zM935 2049l-273 -374h-149l179 374h243z',
            'M1174 787q0 -92 -35 -176.5t-95 -141.5q-78 -75 -187.5 -111t-260.5 -36h-198v-322h-198v1489h198v-270h205q133 0 230 -22.5t164 -66.5q83 -53 130 -138t47 -205zM968 782q0 72 -26 125.5t-82 88.5q-48 30 -112 42.5t-154 12.5h-196v-563h167q119 0 195 20.5t123 65.5 q44 41 64.5 92t20.5 116z',
            'M1165 481q0 -214 -135.5 -359.5t-354.5 -145.5q-44 0 -101.5 7.5t-93.5 20.5v165h10q42 -24 91.5 -33t105.5 -9q74 0 129 29t88 78q35 52 50.5 115.5t15.5 139.5q0 166 -105.5 250.5t-303.5 84.5v150q157 0 234 59.5t77 188.5q0 35 -11 68t-41 64q-27 29 -71 46.5 t-105 17.5q-57 0 -103 -14.5t-86 -53.5q-37 -36 -59.5 -102t-22.5 -161v-1087h-188v1080q0 124 36 215.5t100 153.5q60 58 149.5 87.5t183.5 29.5q183 0 297.5 -87t114.5 -238q0 -112 -71 -201t-184 -121v-9q164 -37 259 -148.5t95 -280.5z',
            'M1053 0h-187v119q-25 -17 -67.5 -47.5t-82.5 -48.5q-47 -23 -108 -38.5t-143 -15.5q-151 0 -256 100t-105 255q0 127 54.5 205.5t155.5 123.5q102 45 245 61t307 24v29q0 64 -22.5 106t-64.5 66q-40 23 -96 31t-117 8q-74 0 -165 -19.5t-188 -56.5h-10v191q55 15 159 33 t205 18q118 0 205.5 -19.5t151.5 -66.5q63 -46 96 -119t33 -181v-758zM866 275v311q-86 -5 -202.5 -15t-184.5 -29q-81 -23 -131 -71.5t-50 -133.5q0 -96 58 -144.5t177 -48.5q99 0 181 38.5t152 92.5zM738 1302h-149l-273 374h243z',
            'M1053 0h-187v119q-25 -17 -67.5 -47.5t-82.5 -48.5q-47 -23 -108 -38.5t-143 -15.5q-151 0 -256 100t-105 255q0 127 54.5 205.5t155.5 123.5q102 45 245 61t307 24v29q0 64 -22.5 106t-64.5 66q-40 23 -96 31t-117 8q-74 0 -165 -19.5t-188 -56.5h-10v191q55 15 159 33 t205 18q118 0 205.5 -19.5t151.5 -66.5q63 -46 96 -119t33 -181v-758zM866 275v311q-86 -5 -202.5 -15t-184.5 -29q-81 -23 -131 -71.5t-50 -133.5q0 -96 58 -144.5t177 -48.5q99 0 181 38.5t152 92.5zM934 1676l-273 -374h-149l179 374h243z',
            'M1053 0h-187v119q-25 -17 -67.5 -47.5t-82.5 -48.5q-47 -23 -108 -38.5t-143 -15.5q-151 0 -256 100t-105 255q0 127 54.5 205.5t155.5 123.5q102 45 245 61t307 24v29q0 64 -22.5 106t-64.5 66q-40 23 -96 31t-117 8q-74 0 -165 -19.5t-188 -56.5h-10v191q55 15 159 33 t205 18q118 0 205.5 -19.5t151.5 -66.5q63 -46 96 -119t33 -181v-758zM866 275v311q-86 -5 -202.5 -15t-184.5 -29q-81 -23 -131 -71.5t-50 -133.5q0 -96 58 -144.5t177 -48.5q99 0 181 38.5t152 92.5zM961 1297h-159l-185 256l-184 -256h-155l228 379h227z',
            'M1053 0h-187v119q-25 -17 -67.5 -47.5t-82.5 -48.5q-47 -23 -108 -38.5t-143 -15.5q-151 0 -256 100t-105 255q0 127 54.5 205.5t155.5 123.5q102 45 245 61t307 24v29q0 64 -22.5 106t-64.5 66q-40 23 -96 31t-117 8q-74 0 -165 -19.5t-188 -56.5h-10v191q55 15 159 33 t205 18q118 0 205.5 -19.5t151.5 -66.5q63 -46 96 -119t33 -181v-758zM866 275v311q-86 -5 -202.5 -15t-184.5 -29q-81 -23 -131 -71.5t-50 -133.5q0 -96 58 -144.5t177 -48.5q99 0 181 38.5t152 92.5zM1038 1619q-11 -152 -77 -229t-177 -77q-54 0 -100 19.5t-87 56.5 q-47 43 -79.5 64.5t-71.5 21.5q-52 0 -78 -45t-30 -121h-131q8 151 79 228t174 77q50 0 96.5 -19.5t88.5 -55.5q47 -41 83.5 -61.5t69.5 -20.5q51 0 79.5 46t31.5 116h129z',
            'M1053 0h-187v119q-25 -17 -67.5 -47.5t-82.5 -48.5q-47 -23 -108 -38.5t-143 -15.5q-151 0 -256 100t-105 255q0 127 54.5 205.5t155.5 123.5q102 45 245 61t307 24v29q0 64 -22.5 106t-64.5 66q-40 23 -96 31t-117 8q-74 0 -165 -19.5t-188 -56.5h-10v191q55 15 159 33 t205 18q118 0 205.5 -19.5t151.5 -66.5q63 -46 96 -119t33 -181v-758zM866 275v311q-86 -5 -202.5 -15t-184.5 -29q-81 -23 -131 -71.5t-50 -133.5q0 -96 58 -144.5t177 -48.5q99 0 181 38.5t152 92.5zM926 1304h-199v195h199v-195zM513 1304h-199v195h199v-195z',
            'M1053 0h-187v119q-25 -17 -67.5 -47.5t-82.5 -48.5q-47 -23 -108 -38.5t-143 -15.5q-151 0 -256 100t-105 255q0 127 54.5 205.5t155.5 123.5q102 45 245 61t307 24v29q0 64 -22.5 106t-64.5 66q-40 23 -96 31t-117 8q-74 0 -165 -19.5t-188 -56.5h-10v191q55 15 159 33 t205 18q118 0 205.5 -19.5t151.5 -66.5q63 -46 96 -119t33 -181v-758zM866 275v311q-86 -5 -202.5 -15t-184.5 -29q-81 -23 -131 -71.5t-50 -133.5q0 -96 58 -144.5t177 -48.5q99 0 181 38.5t152 92.5zM956 1630q0 -143 -102 -242t-248 -99q-144 0 -247 98.5t-103 242.5 q0 143 102 241t248 98q147 0 248.5 -98t101.5 -241zM811 1630q0 86 -58.5 145.5t-146.5 59.5t-146.5 -59t-58.5 -146t59 -146t146 -59q88 0 146.5 59t58.5 146z',
            'M1855 559h-819q0 -114 30 -195t85 -133q52 -48 123 -70.5t157 -22.5q111 0 217.5 41.5t172.5 93.5h12v-205q-78 -35 -184.5 -64.5t-215.5 -29.5q-166 0 -284.5 52t-194.5 155q-21 -19 -67 -59t-96 -68q-63 -36 -137 -59.5t-189 -23.5q-150 0 -255.5 97t-105.5 249 q0 124 54 200.5t155 118.5q95 39 241 53t308 17v61q0 65 -23 107.5t-64 65.5q-40 23 -96 31.5t-116 8.5q-79 0 -168.5 -21t-179.5 -57h-13v191q55 15 158 34t204 19q159 0 264.5 -46.5t162.5 -137.5q69 82 170 134t226 52q217 0 342.5 -128t125.5 -379v-82zM1673 703 q-5 68 -23.5 119t-50.5 88q-34 39 -88.5 61t-133.5 22q-133 0 -223 -75t-115 -215h634zM894 298q-20 53 -30.5 119t-10.5 141q-105 -3 -201 -7.5t-178 -25.5q-79 -20 -127.5 -65.5t-48.5 -128.5q0 -95 58 -141t176 -46q99 0 195.5 43t166.5 111z',
            'M1011 70q-33 -15 -71.5 -30.5t-67.5 -24.5q3 -19 5.5 -47.5t2.5 -56.5q0 -162 -91.5 -248t-237.5 -86q-37 0 -95 7t-103 19v160h9q26 -10 70 -23t94 -13q104 0 153 39t49 127q0 22 -1.5 45t-3.5 43q-16 -2 -30.5 -4t-39.5 -2q-121 0 -222 35.5t-173 107.5 q-73 72 -113 182t-40 257q0 274 150.5 430t397.5 156q96 0 188.5 -27t169.5 -66v-209h-10q-86 67 -177.5 103t-178.5 36q-160 0 -252.5 -107.5t-92.5 -315.5q0 -202 90.5 -310.5t254.5 -108.5q57 0 116 15t106 39q41 21 77 44.5t57 40.5h10v-207z',
            'M1120 539h-823q0 -103 31 -179.5t85 -125.5q52 -48 123.5 -72t157.5 -24q114 0 229.5 45.5t164.5 89.5h10v-205q-95 -40 -194 -67t-208 -27q-278 0 -434 150.5t-156 427.5q0 274 149.5 435t393.5 161q226 0 348.5 -132t122.5 -375v-102zM937 683q-1 148 -74.5 229 t-223.5 81q-151 0 -240.5 -89t-101.5 -221h640zM759 1302h-149l-273 374h243z',
            'M1120 539h-823q0 -103 31 -179.5t85 -125.5q52 -48 123.5 -72t157.5 -24q114 0 229.5 45.5t164.5 89.5h10v-205q-95 -40 -194 -67t-208 -27q-278 0 -434 150.5t-156 427.5q0 274 149.5 435t393.5 161q226 0 348.5 -132t122.5 -375v-102zM937 683q-1 148 -74.5 229 t-223.5 81q-151 0 -240.5 -89t-101.5 -221h640zM960 1676l-273 -374h-149l179 374h243z',
            'M1120 539h-823q0 -103 31 -179.5t85 -125.5q52 -48 123.5 -72t157.5 -24q114 0 229.5 45.5t164.5 89.5h10v-205q-95 -40 -194 -67t-208 -27q-278 0 -434 150.5t-156 427.5q0 274 149.5 435t393.5 161q226 0 348.5 -132t122.5 -375v-102zM937 683q-1 148 -74.5 229 t-223.5 81q-151 0 -240.5 -89t-101.5 -221h640zM986 1297h-159l-185 256l-184 -256h-155l228 379h227z',
            'M1120 539h-823q0 -103 31 -179.5t85 -125.5q52 -48 123.5 -72t157.5 -24q114 0 229.5 45.5t164.5 89.5h10v-205q-95 -40 -194 -67t-208 -27q-278 0 -434 150.5t-156 427.5q0 274 149.5 435t393.5 161q226 0 348.5 -132t122.5 -375v-102zM937 683q-1 148 -74.5 229 t-223.5 81q-151 0 -240.5 -89t-101.5 -221h640zM951 1304h-199v195h199v-195zM538 1304h-199v195h199v-195z',
            'M375 0h-188v1117h188v-1117zM401 1302h-149l-273 374h243z',
            'M375 0h-188v1117h188v-1117zM582 1676l-273 -374h-149l179 374h243z',
            'M572 1297h-151l-143 267l-142 -267h-147l178 379h227zM375 0h-188v1117h188v-1117z',
            'M557 1304h-189v195h189v-195zM194 1304h-189v195h189v-195zM375 0h-188v1117h188v-1117z',
            'M1137 637q0 -324 -142 -496t-383 -172q-229 0 -367.5 135t-138.5 380q0 226 137 358t339 132q108 0 185.5 -26.5t163.5 -79.5q-32 112 -99.5 219t-154.5 181l-264 -162l-66 97l237 142q-84 67 -156 107.5t-165 87.5v16h295q35 -25 84 -58.5t86 -59.5l210 128l66 -97 l-186 -109q153 -147 236 -325.5t83 -397.5zM847 226q49 59 75 143.5t26 234.5q0 32 -1.5 59.5t-3.5 57.5q-75 45 -157.5 66.5t-168.5 21.5q-147 0 -231.5 -87.5t-84.5 -239.5q0 -180 84.5 -267t227.5 -87q66 0 127.5 22t106.5 76z',
            'M1119 0h-188v636q0 77 -9 144.5t-33 105.5q-25 42 -72 62.5t-122 20.5q-77 0 -161 -38t-161 -97v-834h-188v1117h188v-124q88 73 182 114t193 41q181 0 276 -109t95 -314v-725zM1075 1619q-11 -152 -77 -229t-177 -77q-54 0 -100 19.5t-87 56.5q-47 43 -79.5 64.5 t-71.5 21.5q-52 0 -78 -45t-30 -121h-131q8 151 79 228t174 77q50 0 96.5 -19.5t88.5 -55.5q47 -41 83.5 -61.5t69.5 -20.5q51 0 79.5 46t31.5 116h129z',
            'M1137 558q0 -273 -140 -431t-375 -158q-237 0 -376.5 158t-139.5 431t139.5 431.5t376.5 158.5q235 0 375 -158.5t140 -431.5zM943 558q0 217 -85 322.5t-236 105.5q-153 0 -237.5 -105.5t-84.5 -322.5q0 -210 85 -318.5t237 -108.5q150 0 235.5 107.5t85.5 319.5z M732 1302h-149l-273 374h243z',
            'M1137 558q0 -273 -140 -431t-375 -158q-237 0 -376.5 158t-139.5 431t139.5 431.5t376.5 158.5q235 0 375 -158.5t140 -431.5zM943 558q0 217 -85 322.5t-236 105.5q-153 0 -237.5 -105.5t-84.5 -322.5q0 -210 85 -318.5t237 -108.5q150 0 235.5 107.5t85.5 319.5z M933 1676l-273 -374h-149l179 374h243z',
            'M1137 558q0 -273 -140 -431t-375 -158q-237 0 -376.5 158t-139.5 431t139.5 431.5t376.5 158.5q235 0 375 -158.5t140 -431.5zM943 558q0 217 -85 322.5t-236 105.5q-153 0 -237.5 -105.5t-84.5 -322.5q0 -210 85 -318.5t237 -108.5q150 0 235.5 107.5t85.5 319.5z M963 1297h-159l-185 256l-184 -256h-155l228 379h227z',
            'M1137 558q0 -273 -140 -431t-375 -158q-237 0 -376.5 158t-139.5 431t139.5 431.5t376.5 158.5q235 0 375 -158.5t140 -431.5zM943 558q0 217 -85 322.5t-236 105.5q-153 0 -237.5 -105.5t-84.5 -322.5q0 -210 85 -318.5t237 -108.5q150 0 235.5 107.5t85.5 319.5z M1038 1619q-11 -152 -77 -229t-177 -77q-54 0 -100 19.5t-87 56.5q-47 43 -79.5 64.5t-71.5 21.5q-52 0 -78 -45t-30 -121h-131q8 151 79 228t174 77q50 0 96.5 -19.5t88.5 -55.5q47 -41 83.5 -61.5t69.5 -20.5q51 0 79.5 46t31.5 116h129z',
            'M1137 558q0 -273 -140 -431t-375 -158q-237 0 -376.5 158t-139.5 431t139.5 431.5t376.5 158.5q235 0 375 -158.5t140 -431.5zM943 558q0 217 -85 322.5t-236 105.5q-153 0 -237.5 -105.5t-84.5 -322.5q0 -210 85 -318.5t237 -108.5q150 0 235.5 107.5t85.5 319.5z M928 1304h-199v195h199v-195zM515 1304h-199v195h199v-195z',
            'M957 1022h-238v275h238v-275zM1466 572h-1256v160h1256v-160zM957 7h-238v275h238v-275z',
            'M1137 558q0 -273 -140 -431t-375 -158q-84 0 -155.5 21t-130.5 60l-133 -198h-110l171 256q-75 77 -116.5 190t-41.5 260q0 273 139.5 431.5t376.5 158.5q87 0 158 -22t125 -57l116 172h111l-155 -231q76 -76 118 -188t42 -264zM813 930q-37 29 -86.5 43.5t-104.5 14.5 q-155 0 -240 -110t-85 -320q0 -97 17 -171t52 -128zM946 558q0 97 -17.5 173t-51.5 130l-448 -671q39 -31 86.5 -46t106.5 -15q150 0 237 108.5t87 320.5z',
            'M1111 0h-188v124q-95 -75 -182 -115t-192 -40q-176 0 -274 107.5t-98 315.5v725h188v-636q0 -85 8 -145.5t34 -103.5q27 -44 70 -64t125 -20q73 0 159.5 38t161.5 97v834h188v-1117zM764 1302h-149l-273 374h243z',
            'M1111 0h-188v124q-95 -75 -182 -115t-192 -40q-176 0 -274 107.5t-98 315.5v725h188v-636q0 -85 8 -145.5t34 -103.5q27 -44 70 -64t125 -20q73 0 159.5 38t161.5 97v834h188v-1117zM945 1676l-273 -374h-149l179 374h243z',
            'M1111 0h-188v124q-95 -75 -182 -115t-192 -40q-176 0 -274 107.5t-98 315.5v725h188v-636q0 -85 8 -145.5t34 -103.5q27 -44 70 -64t125 -20q73 0 159.5 38t161.5 97v834h188v-1117zM985 1297h-159l-185 256l-184 -256h-155l228 379h227z',
            'M1111 0h-188v124q-95 -75 -182 -115t-192 -40q-176 0 -274 107.5t-98 315.5v725h188v-636q0 -85 8 -145.5t34 -103.5q27 -44 70 -64t125 -20q73 0 159.5 38t161.5 97v834h188v-1117zM955 1304h-199v195h199v-195zM542 1304h-199v195h199v-195z',
            'M1151 1117l-652 -1529h-201l208 466l-445 1063h204l343 -828l346 828h197zM928 1676l-273 -374h-149l179 374h243z',
            'M1168 572q0 -136 -39 -248.5t-110 -190.5q-66 -74 -155.5 -114.5t-189.5 -40.5q-87 0 -157.5 19t-143.5 59v-468h-188v1968h188v-556q75 63 168.5 105.5t199.5 42.5q202 0 314.5 -152.5t112.5 -423.5zM974 567q0 202 -69 302t-212 100q-81 0 -163 -35t-157 -92v-633 q80 -36 137.5 -49t130.5 -13q157 0 245 106t88 314z',
            'M585 832h-239v285h239v-285zM658 285l-282 -655h-146l174 655h254z',
            'M773 1676l-49 -384h-145l-49 384h243z',
            'M765 1676l-49 -384h-128l-49 384h226zM1048 1304h-191v195h191v-195zM447 1304h-191v195h191v-195z',
            'M1374 0h-211l-146 415h-644l-146 -415h-201l542 1489h264zM956 585l-261 731l-262 -731h523zM250 1489l-49 -384h-145l-49 384h243z',
            'M585 832h-239v285h239v-285z',
            'M1424 0h-981v1489h981v-176h-783v-408h783v-176h-783v-553h783v-176zM243 1489l-49 -384h-145l-49 384h243z',
            'M1582 0h-198v729h-743v-729h-198v1489h198v-584h743v584h198v-1489zM243 1489l-49 -384h-145l-49 384h243z',
            'M968 0h-588v152h195v1185h-195v152h588v-152h-195v-1185h195v-152zM243 1489l-49 -384h-145l-49 384h243z',
            'M1501 1318q91 -100 139.5 -245t48.5 -329t-49.5 -329.5t-138.5 -242.5q-92 -101 -217.5 -152t-286.5 -51q-157 0 -285.5 52t-218.5 151t-138.5 243t-48.5 329q0 182 48 326.5t140 247.5q88 98 218.5 150t284.5 52q160 0 287.5 -52.5t216.5 -149.5zM1483 744 q0 290 -130 447.5t-355 157.5q-227 0 -356.5 -157.5t-129.5 -447.5q0 -293 132 -448.5t354 -155.5t353.5 155.5t131.5 448.5zM243 1489l-49 -384h-145l-49 384h243z',
            'M1537 1489l-524 -836v-653h-198v632l-526 857h219l407 -666l411 666h211zM243 1489l-49 -384h-145l-49 384h243z',
            'M1751 0h-576v387q60 38 119.5 82t103.5 101q45 59 71 138.5t26 185.5q0 206 -127 330.5t-347 124.5t-347 -124.5t-127 -330.5q0 -106 26 -185.5t71 -138.5q45 -57 104 -101t119 -82v-387h-576v174h410v124q-157 90 -258.5 246t-101.5 350q0 276 187.5 451t492.5 175 t492.5 -175t187.5 -451q0 -194 -101.5 -350t-258.5 -246v-124h410v-174zM243 1489l-49 -384h-145l-49 384h243z',
            'M375 0h-188v1117h188v-1117zM379 1676l-56 -384h-84l-56 384h196zM615 1304h-171v195h171v-195zM118 1304h-171v195h171v-195z',
            'M1374 0h-211l-146 415h-644l-146 -415h-201l542 1489h264zM956 585l-261 731l-262 -731h523z',
            'M1323 458q0 -111 -42 -196t-113 -140q-84 -66 -184.5 -94t-255.5 -28h-528v1489h441q163 0 244 -12t155 -50q82 -43 119 -110.5t37 -161.5q0 -106 -54 -180.5t-144 -119.5v-8q151 -31 238 -132.5t87 -256.5zM990 1129q0 54 -18 91t-58 60q-47 27 -114 33.5t-166 6.5h-236 v-430h256q93 0 148 9.5t102 39.5t66.5 77.5t19.5 112.5zM1117 450q0 90 -27 143t-98 90q-48 25 -116.5 32.5t-166.5 7.5h-311v-554h262q130 0 213 13.5t136 49.5q56 39 82 89t26 129z',
            'M1162 1313h-764v-1313h-198v1489h962v-176z',
            'M1414 0h-1388l562 1489h264zM1147 168l-432 1147l-431 -1147h863z',
            'M1181 0h-981v1489h981v-176h-783v-408h783v-176h-783v-553h783v-176z',
            'M1288 0h-1162v184l913 1129h-879v176h1106v-179l-922 -1134h944v-176z',
            'M1339 0h-198v729h-743v-729h-198v1489h198v-584h743v584h198v-1489z',
            'M1310 1318q91 -100 139.5 -245t48.5 -329t-49.5 -329.5t-138.5 -242.5q-92 -101 -217.5 -152t-286.5 -51q-157 0 -285.5 52t-218.5 151t-138.5 243t-48.5 329q0 182 48 326.5t140 247.5q88 98 218.5 150t284.5 52q160 0 287.5 -52.5t216.5 -149.5zM1292 744 q0 290 -130 447.5t-355 157.5q-227 0 -356.5 -157.5t-129.5 -447.5q0 -293 132 -448.5t354 -155.5t353.5 155.5t131.5 448.5zM1120 713h-627v179h627v-179z',
            'M725 0h-588v152h195v1185h-195v152h588v-152h-195v-1185h195v-152z',
            'M1397 0h-257l-589 663l-148 -158v-505h-198v1489h198v-777l723 777h240l-665 -700z',
            'M1378 0h-213l-468 1285l-468 -1285h-203l556 1489h240z',
            'M1526 0h-198v1283l-414 -873h-118l-411 873v-1283h-185v1489h270l397 -829l384 829h275v-1489z',
            'M1336 0h-245l-706 1332v-1332h-185v1489h307l644 -1216v1216h185v-1489z',
            'M1215 1313h-1101v176h1101v-176zM1163 729h-997v176h997v-176zM1215 0h-1101v176h1101v-176z',
            'M1310 1318q91 -100 139.5 -245t48.5 -329t-49.5 -329.5t-138.5 -242.5q-92 -101 -217.5 -152t-286.5 -51q-157 0 -285.5 52t-218.5 151t-138.5 243t-48.5 329q0 182 48 326.5t140 247.5q88 98 218.5 150t284.5 52q160 0 287.5 -52.5t216.5 -149.5zM1292 744 q0 290 -130 447.5t-355 157.5q-227 0 -356.5 -157.5t-129.5 -447.5q0 -293 132 -448.5t354 -155.5t353.5 155.5t131.5 448.5z',
            'M1339 0h-198v1313h-743v-1313h-198v1489h1139v-1489z',
            'M1174 1039q0 -99 -34.5 -183.5t-96.5 -146.5q-77 -77 -182 -115.5t-265 -38.5h-198v-555h-198v1489h404q134 0 227 -22.5t165 -70.5q85 -57 131.5 -142t46.5 -215zM968 1034q0 77 -27 134t-82 93q-48 31 -109.5 44.5t-155.5 13.5h-196v-595h167q120 0 195 21.5t122 68.5 q47 48 66.5 101t19.5 119z',
            'M1280 0h-1162v184l620 600l-600 526v179h1096v-176h-832l586 -506v-26l-630 -605h922v-176z',
            'M1262 1313h-532v-1313h-198v1313h-532v176h1262v-176z',
            'M1254 1489l-524 -836v-653h-198v632l-526 857h219l407 -666l411 666h211z',
            'M1572 755q0 -140 -44.5 -248.5t-123.5 -181.5q-85 -79 -207 -125.5t-260 -49.5v-166h-197v166q-134 3 -257 48t-210 127q-79 74 -123.5 182t-44.5 248q0 136 43 238t119 178q81 81 202.5 128t270.5 51v155h197v-155q148 -3 271 -52t202 -127q75 -73 118.5 -177t43.5 -239 zM1366 763q0 99 -32 182t-91 140q-58 56 -129 82t-177 28v-890q94 2 171 30.5t127 75.5q65 60 98 147t33 205zM740 305v890q-106 -1 -177 -28t-129 -82t-90.5 -140t-32.5 -182q0 -112 33.5 -203t97.5 -149q49 -45 126.5 -75t171.5 -31z',
            'M1336 1489l-514 -736l513 -753h-229l-406 613l-416 -613h-216l519 744l-507 745h228l401 -605l410 605h217z',
            'M1604 910q0 -157 -40.5 -264.5t-117.5 -174.5q-80 -69 -192.5 -104t-263.5 -45v-322h-197v322q-154 11 -267 47t-188 102q-78 69 -118.5 176t-40.5 263v579h198v-602q0 -109 29.5 -180t81.5 -115q53 -45 130 -68.5t175 -30.5v996h197v-996q97 8 175 30.5t131 68.5 q56 49 83 115.5t27 179.5v602h198v-579z',
            'M1568 0h-576v387q60 38 119.5 82t103.5 101q45 59 71 138.5t26 185.5q0 206 -127 330.5t-347 124.5t-347 -124.5t-127 -330.5q0 -106 26 -185.5t71 -138.5q45 -57 104 -101t119 -82v-387h-576v174h410v124q-157 90 -258.5 246t-101.5 350q0 276 187.5 451t492.5 175 t492.5 -175t187.5 -451q0 -194 -101.5 -350t-258.5 -246v-124h410v-174z',
            'M725 0h-588v152h195v1185h-195v152h588v-152h-195v-1185h195v-152zM738 1677h-199v195h199v-195zM325 1677h-199v195h199v-195z',
            'M1254 1489l-524 -836v-653h-198v632l-526 857h219l407 -666l411 666h211zM939 1677h-199v195h199v-195zM526 1677h-199v195h199v-195z',
            'M1091 0h-188v117q-81 -70 -169 -109t-191 -39q-200 0 -317.5 154t-117.5 427q0 142 40.5 253t109.5 189q68 76 158.5 116t187.5 40q88 0 156 -22t143 -61v52h188v-1117zM903 275v636q-76 34 -136 49.5t-131 15.5q-158 0 -246 -110t-88 -312q0 -199 68 -302.5t218 -103.5 q80 0 162 35.5t153 91.5zM743 1676l-49 -384h-145l-49 384h243z',
            'M1006 64q-107 -48 -210 -69t-218 -21q-79 0 -161 16t-152 56q-69 39 -112.5 102.5t-43.5 157.5q0 96 56.5 168t177.5 110v7q-91 24 -145 90t-54 158q0 89 47.5 147.5t112.5 92.5q64 33 145 49t160 16q98 0 180 -16.5t172 -44.5v-207h-13q-66 51 -163.5 79t-197.5 28 q-45 0 -84 -5.5t-81 -25.5q-35 -15 -60.5 -48.5t-25.5 -77.5q0 -61 28 -95t76 -49q45 -14 97 -15.5t105 -1.5h111v-166h-158q-62 0 -112 -4.5t-92 -21.5q-41 -17 -65.5 -54t-24.5 -96q0 -53 26 -90t67 -58q37 -19 87.5 -29t106.5 -10q102 0 218 36t187 98h13v-206zM721 1676 l-49 -384h-145l-49 384h243z',
            'M1119 -412h-188v1048q0 77 -9 144.5t-33 105.5q-25 42 -72 62.5t-122 20.5q-77 0 -161 -38t-161 -97v-834h-188v1117h188v-124q88 73 182 114t193 41q181 0 276 -109t95 -314v-1137zM802 1676l-49 -384h-145l-49 384h243z',
            'M375 0h-188v1117h188v-1117zM403 1676l-49 -384h-145l-49 384h243z',
            'M1116 407q0 -218 -122 -327.5t-348 -109.5q-223 0 -346 107.5t-123 329.5v710h188v-641q0 -93 10 -153t42 -106q31 -43 84.5 -64.5t145.5 -21.5q86 0 143.5 22t87.5 66q29 44 39.5 105.5t10.5 151.5v641h188v-710zM760 1676l-49 -384h-128l-49 384h226zM1043 1304h-191 v195h191v-195zM442 1304h-191v195h191v-195z',
            'M1091 0h-188v117q-81 -70 -169 -109t-191 -39q-200 0 -317.5 154t-117.5 427q0 142 40.5 253t109.5 189q68 76 158.5 116t187.5 40q88 0 156 -22t143 -61v52h188v-1117zM903 275v636q-76 34 -136 49.5t-131 15.5q-158 0 -246 -110t-88 -312q0 -199 68 -302.5t218 -103.5 q80 0 162 35.5t153 91.5z',
            'M1165 444q0 -202 -134.5 -334t-339.5 -132q-79 0 -167 22t-151 64v-476h-188v1490q0 224 126.5 351t349.5 127q90 0 164.5 -21.5t133.5 -67.5q57 -43 91 -112t34 -160q0 -127 -69.5 -221.5t-196.5 -131.5v-17q159 -26 253 -125.5t94 -255.5zM971 449q0 89 -34.5 144.5 t-92.5 86.5q-59 32 -132 43t-146 11h-36v160h36q66 0 131 14.5t104 44.5q46 34 68.5 83t22.5 134q0 112 -69 170t-178 58q-73 0 -125 -26.5t-85 -70.5q-32 -44 -47 -102.5t-15 -120.5v-862q66 -38 141 -53.5t147 -15.5q149 0 229.5 78.5t80.5 223.5z',
            'M1151 1117l-457 -1061v-468h-188v468l-445 1061h204l343 -828l346 828h197z',
            'M1139 551q0 -272 -138.5 -427t-376.5 -155q-241 0 -379.5 151.5t-138.5 413.5q0 141 43 239.5t107 162.5q69 72 159 113t182 58q-76 63 -166 130.5t-192 139.5v179h810v-158h-561v-10q68 -46 179 -124t204 -162q150 -136 209 -261.5t59 -289.5zM945 551q0 135 -55 249 t-165 200q-66 -8 -138.5 -32t-138.5 -77q-63 -50 -105.5 -137t-42.5 -214q0 -201 85 -305t241 -104q153 0 236 105.5t83 314.5z',
            'M1006 64q-107 -48 -210 -69t-218 -21q-79 0 -161 16t-152 56q-69 39 -112.5 102.5t-43.5 157.5q0 96 56.5 168t177.5 110v7q-91 24 -145 90t-54 158q0 89 47.5 147.5t112.5 92.5q64 33 145 49t160 16q98 0 180 -16.5t172 -44.5v-207h-13q-66 51 -163.5 79t-197.5 28 q-45 0 -84 -5.5t-81 -25.5q-35 -15 -60.5 -48.5t-25.5 -77.5q0 -61 28 -95t76 -49q45 -14 97 -15.5t105 -1.5h111v-166h-158q-62 0 -112 -4.5t-92 -21.5q-41 -17 -65.5 -54t-24.5 -96q0 -53 26 -90t67 -58q37 -19 87.5 -29t106.5 -10q102 0 218 36t187 98h13v-206z',
            'M922 75q32 -40 46 -85.5t14 -85.5q0 -84 -45 -168.5t-112 -147.5h-179v14q90 79 128 138.5t38 128.5q0 57 -30.5 95t-77.5 38h-145q-229 0 -340 116t-111 345q0 140 46 268t124 247q75 112 173.5 214.5t206.5 196.5v9h-460v158h744v-135q-117 -78 -231.5 -181 t-204.5 -223q-89 -117 -146 -257t-57 -283q0 -34 3 -70t15 -76q10 -38 34.5 -75.5t63.5 -61.5q36 -22 96.5 -24.5t116.5 -2.5h86q71 0 122 -26t82 -66z',
            'M1119 -412h-188v1048q0 77 -9 144.5t-33 105.5q-25 42 -72 62.5t-122 20.5q-77 0 -161 -38t-161 -97v-834h-188v1117h188v-124q88 73 182 114t193 41q181 0 276 -109t95 -314v-1137z',
            'M1141 768q0 -190 -23 -316.5t-59 -210.5q-58 -135 -163 -203.5t-257 -68.5t-257 68.5t-163 203.5q-37 84 -59.5 210.5t-22.5 316.5q0 174 22.5 305.5t60.5 214.5q57 130 162.5 199t256.5 69t256.5 -69t162.5 -199q37 -84 60 -215t23 -305zM952 858q-4 143 -28.5 250 t-56.5 161q-41 70 -95 98.5t-133 28.5t-133 -28.5t-95 -98.5q-34 -55 -57.5 -161.5t-27.5 -249.5h626zM952 697h-626q0 -142 23 -258.5t59 -178.5q40 -69 96 -100t135 -31t135 31t96 100q36 62 59 178.5t23 258.5z',
            'M375 0h-188v1117h188v-1117z',
            'M1192 0h-248l-451 489l-112 -109v-380h-188v1117h188v-550l384 417q72 79 135.5 107t126.5 28q28 0 58 -1t37 -1v-166h-11q-16 2 -39.5 3t-36.5 1q-47 0 -85.5 -23.5t-67.5 -56.5l-251 -271z',
            'M1151 0h-205l-328 829l-361 -829h-196l465 1056l-215 500h211z',
            'M1125 0h-186v118q-74 -78 -141.5 -108.5t-145.5 -30.5q-75 0 -135 27t-144 107v-525h-188v1529h188v-838q32 -39 111 -80t170 -41q93 0 161 33.5t122 93.5v832h188v-1117z',
            'M1151 1117l-452 -1117h-189l-449 1117h204l346 -889l343 889h197z',
            'M1041 -96q0 -85 -45.5 -169t-111.5 -147h-180v14q92 79 129.5 139t37.5 128q0 55 -29 94t-75 39h-140q-140 0 -232.5 27t-155.5 84q-66 60 -100.5 135.5t-34.5 163.5q0 78 25 144t73 119q44 49 112.5 83.5t144.5 53.5v11q-125 28 -200 110.5t-75 186.5q0 83 43.5 150.5 t133.5 125.5v6h-228v154h824v-158h-256q-68 0 -122.5 -14.5t-102.5 -48.5q-45 -32 -72 -83t-27 -118q0 -79 32.5 -128t83.5 -75q45 -23 104 -34t139 -11h170v-165h-295q-66 0 -118.5 -20t-99.5 -59q-43 -37 -68.5 -90t-25.5 -112q0 -102 37.5 -159t101.5 -82 q63 -25 139.5 -28.5t166.5 -3.5h28q68 0 119.5 -23.5t84.5 -60.5q31 -35 48 -82.5t17 -96.5z',
            'M1137 558q0 -273 -140 -431t-375 -158q-237 0 -376.5 158t-139.5 431t139.5 431.5t376.5 158.5q235 0 375 -158.5t140 -431.5zM943 558q0 217 -85 322.5t-236 105.5q-153 0 -237.5 -105.5t-84.5 -322.5q0 -210 85 -318.5t237 -108.5q150 0 235.5 107.5t85.5 319.5z',
            'M1120 0h-188v955h-559v-955h-188v1117h935v-1117z',
            'M1172 577q0 -258 -138.5 -428.5t-360.5 -170.5q-65 0 -146.5 18t-153.5 61v-469h-188v1058q0 123 35.5 215.5t101.5 158.5q62 62 155.5 95t195.5 33q243 0 371 -147t128 -424zM978 565q0 218 -80 320t-226 102q-158 0 -228.5 -96t-70.5 -278v-403q73 -34 132.5 -48.5 t134.5 -14.5q162 0 250 111t88 307z',
            'M1018 -96q0 -87 -47 -172t-109 -144h-177v14q86 75 124.5 135.5t38.5 131.5q0 54 -30 93.5t-75 39.5h-92q-117 0 -216 30t-174 97q-73 66 -114.5 170t-41.5 250q0 270 155.5 432t414.5 162q84 0 164 -18.5t147 -45.5v-211h-12q-94 62 -172.5 87t-146.5 25 q-166 0 -260.5 -119t-94.5 -312q0 -112 28.5 -183t78.5 -116q50 -44 114.5 -63.5t139.5 -19.5h100q115 0 186 -76.5t71 -186.5z',
            'M1137 558q0 -281 -140.5 -435t-373.5 -154q-241 0 -379 158t-138 431q0 275 141 432.5t378 157.5q55 0 108 -11t82 -20h480v-165h-288q62 -73 96 -170t34 -224zM943 558q0 215 -82 322t-236 107q-161 0 -243 -112t-82 -317q0 -209 83.5 -318t239.5 -109q152 0 236 107.5 t84 319.5z',
            'M1006 952h-404v-952h-188v952h-404v165h996v-165z',
            'M1116 407q0 -218 -122 -327.5t-348 -109.5q-223 0 -346 107.5t-123 329.5v710h188v-641q0 -93 10 -153t42 -106q31 -43 84.5 -64.5t145.5 -21.5q86 0 143.5 22t87.5 66q29 44 39.5 105.5t10.5 151.5v641h188v-710z',
            'M1514 576q0 -259 -171.5 -417t-440.5 -173v-398h-187v398q-130 6 -240.5 46.5t-191.5 109.5q-85 74 -132 172t-47 232q0 159 59 296t192 275h229v-17q-136 -99 -210 -232t-74 -300q0 -189 112.5 -304t301.5 -121v1000q33 2 70.5 2.5t76.5 0.5q304 0 478.5 -149.5 t174.5 -420.5zM1319 586q0 184 -112 293.5t-305 109.5v-846q206 10 311.5 126t105.5 317z',
            'M1160 -412h-213l-346 619l-350 -619h-203l444 770l-433 759h213l335 -600l339 600h203l-433 -751z',
            'M1507 446q0 -114 -48 -198t-127 -137q-82 -55 -182 -82.5t-215 -32.5v-408h-187v408q-115 6 -214.5 32t-182.5 83q-80 54 -127.5 137.5t-47.5 197.5v671h188v-612q0 -113 37.5 -180.5t89.5 -102.5q56 -38 123 -53t134 -19v967h187v-967q67 5 134 19t123 53 q59 40 93 101.5t34 181.5v612h188v-671z',
            'M1553 503q0 -96 -23.5 -192.5t-74.5 -171.5q-55 -80 -133.5 -124.5t-193.5 -44.5q-96 0 -177 49.5t-118 116.5h-6q-39 -68 -113 -117t-176 -49q-113 0 -194.5 46.5t-132.5 122.5t-74.5 171.5t-23.5 192.5q0 170 57 308.5t201 305.5h228v-17q-135 -108 -214.5 -262 t-79.5 -337q0 -66 8 -122.5t38 -119.5q26 -55 72.5 -91.5t117.5 -36.5q51 0 86.5 12.5t55.5 29.5q22 18 36.5 40t20.5 37v584h186v-584q9 -17 23 -39t35 -39q24 -19 52.5 -30t86.5 -11q70 0 117 35.5t74 92.5q25 55 36 116t11 126q0 182 -78.5 336t-215.5 263v17h228 q144 -167 201 -305.5t57 -308.5z',
            'M557 1304h-189v195h189v-195zM194 1304h-189v195h189v-195zM375 0h-188v1117h188v-1117z',
            'M1116 407q0 -218 -122 -327.5t-348 -109.5q-223 0 -346 107.5t-123 329.5v710h188v-641q0 -93 10 -153t42 -106q31 -43 84.5 -64.5t145.5 -21.5q86 0 143.5 22t87.5 66q29 44 39.5 105.5t10.5 151.5v641h188v-710zM953 1304h-199v195h199v-195zM540 1304h-199v195h199 v-195z',
            'M1137 558q0 -273 -140 -431t-375 -158q-237 0 -376.5 158t-139.5 431t139.5 431.5t376.5 158.5q235 0 375 -158.5t140 -431.5zM943 558q0 217 -85 322.5t-236 105.5q-153 0 -237.5 -105.5t-84.5 -322.5q0 -210 85 -318.5t237 -108.5q150 0 235.5 107.5t85.5 319.5z M743 1676l-49 -384h-145l-49 384h243z',
            'M1116 407q0 -218 -122 -327.5t-348 -109.5q-223 0 -346 107.5t-123 329.5v710h188v-641q0 -93 10 -153t42 -106q31 -43 84.5 -64.5t145.5 -21.5q86 0 143.5 22t87.5 66q29 44 39.5 105.5t10.5 151.5v641h188v-710zM768 1676l-49 -384h-145l-49 384h243z',
            'M1553 503q0 -96 -23.5 -192.5t-74.5 -171.5q-55 -80 -133.5 -124.5t-193.5 -44.5q-96 0 -177 49.5t-118 116.5h-6q-39 -68 -113 -117t-176 -49q-113 0 -194.5 46.5t-132.5 122.5t-74.5 171.5t-23.5 192.5q0 170 57 308.5t201 305.5h228v-17q-135 -108 -214.5 -262 t-79.5 -337q0 -66 8 -122.5t38 -119.5q26 -55 72.5 -91.5t117.5 -36.5q51 0 86.5 12.5t55.5 29.5q22 18 36.5 40t20.5 37v584h186v-584q9 -17 23 -39t35 -39q24 -19 52.5 -30t86.5 -11q70 0 117 35.5t74 92.5q25 55 36 116t11 126q0 182 -78.5 336t-215.5 263v17h228 q144 -167 201 -305.5t57 -308.5zM955 1676l-49 -384h-145l-49 384h243z',
            'M1145 837q0 -164 -39 -344t-121 -303q-85 -124 -186.5 -173t-214.5 -49q-192 0 -313.5 126.5t-121.5 329.5q0 228 134.5 372.5t336.5 144.5q90 0 169.5 -26t158.5 -91q2 26 3 55.5t1 55.5q0 217 -79 318t-231 101q-78 0 -169.5 -31.5t-169.5 -86.5h-11v194 q81 44 181.5 66.5t196.5 22.5q137 0 239.5 -54.5t164.5 -178.5q42 -86 56.5 -189t14.5 -260zM942 678q-60 47 -136 74t-148 27q-141 0 -225 -91t-84 -261q0 -145 67.5 -221.5t179.5 -76.5q128 0 209.5 97t115.5 287q6 33 11.5 73t9.5 92z',
            'M1438 0h-1388l562 1489h264zM1171 168l-432 1147l-431 -1147h863z',
            'M1532 1315h-200v-1508h-198v1508h-592v-1508h-198v1508h-200v174h1388v-174z',
            'M1369 -189h-1182v191l673 668l-663 631v188h1133v-176h-891l648 -601v-72l-666 -653h948v-176z',
            'M1456 572h-1236v160h1236v-160z',
            'M843 1489l-780 -1489h-165l780 1489h165z',
            'M492 511h-239v283h239v-283z',
            'M1737 1788l-880 -1939h-102l-384 993h-237v139h393l313 -821l730 1628h167z',
            'M1887 663q0 -239 -122.5 -372.5t-329.5 -133.5q-133 0 -244 76.5t-180 222.5q-79 -151 -184.5 -225t-248.5 -74q-191 0 -304 135.5t-113 349.5q0 238 125 372t327 134q134 0 245 -77t179 -222q79 150 185.5 224.5t247.5 74.5q191 0 304 -135.5t113 -349.5zM967 729 q-63 117 -155 175.5t-188 58.5q-138 0 -216 -83.5t-78 -237.5q0 -133 63.5 -216t182.5 -83q110 0 172 48.5t119 142.5q34 57 52.5 92.5t47.5 102.5zM1718 663q0 134 -64 216.5t-182 82.5q-88 0 -152.5 -35.5t-138.5 -155.5q-30 -48 -55.5 -99.5t-44.5 -95.5 q60 -115 153.5 -174.5t189.5 -59.5q138 0 216 83t78 238z',
            'M1168 1367h-10q-32 8 -89.5 18.5t-89.5 10.5q-129 0 -181 -61q-53 -61 -53 -210v-1123q0 -206 -104 -315q-105 -110 -293 -110q-52 0 -106.5 5.5t-103.5 15.5v178h10q33 -8 87 -18.5t88 -10.5q129 0 182 61q52 61 52 210v1123q0 204 104 315q104 110 293 110 q58 0 109 -5.5t105 -15.5v-178z',
            'M1431 1104q-20 -194 -111 -293t-249 -99q-77 0 -147 37.5t-126 82.5q-65 52 -117 79.5t-96 27.5q-75 0 -117 -48t-70 -172h-155q23 182 112.5 280t248.5 98q72 0 143 -37t130 -83q61 -48 114.5 -77.5t98.5 -29.5q76 0 120.5 54.5t63.5 179.5h157zM1432 588 q-25 -184 -112 -281.5t-250 -97.5q-72 0 -144 37.5t-129 82.5q-39 31 -103 69t-110 38q-78 0 -121 -55t-63 -179h-157q19 192 110.5 292t249.5 100q77 0 146 -37t127 -83q35 -28 97 -67.5t116 -39.5q75 0 117 49.5t69 171.5h157z',
            'M1431 362h-608l-104 -335h-153l104 335h-425v156h474l84 268h-558v156h606l105 335h153l-105 -335h427v-156h-476l-83 -268h559v-156z',
            'M1408 303l-1154 483v124l1154 483v-183l-889 -362l889 -362v-183zM1408 0h-1154v160h1154v-160z',
            'M1422 786l-1154 -483v183l889 362l-889 362v183l1154 -483v-124zM1422 0h-1154v160h1154v-160z'
        ];
        this.OUTLINE_X = [
            [], [291, 301, 505, 515], [168, 211, 729, 772, 554], [195, 389, 917, 1364, 1481, 1481, 1288, 760, 312, 195],
            [155, 604, 722, 1129.8, 1160, 1107, 722, 604, 278.5, 191.1, 162, 155], [149, 172.3, 242, 630, 1687, 1844.3, 1960, 2031.3, 2055, 2031.8, 1962, 1575, 517, 359.8, 244, 172.8],
            [115, 149.4, 252.5, 407.6, 598, 1555, 1287, 961.3, 881, 757.5, 601, 423.5, 293, 213.5, 187], [164, 207, 343, 386], [181, 205.5, 279, 554, 783, 783, 554, 279, 205.5],
            [147, 376, 651, 724.5, 749, 724.5, 651, 376, 147], [167, 232, 588, 717, 1073, 1137, 1137, 1073, 717, 588, 232, 167], [210, 755, 921, 1466, 1466, 921, 755, 210],
            [147, 293, 575, 321], [153, 777, 777, 153], [253, 492, 492, 253], [-30, 143, 860, 684],
            [137, 167.9, 260.5, 420.1, 652, 881.4, 1041.5, 1135.6, 1167, 1136.1, 1043.5, 883.9, 652, 422, 262, 168.3], [278, 1084, 1084, 780, 625, 278],
            [161, 1169, 1169, 1106, 1073.5, 976, 821.3, 617, 387.5, 198, 161], [167, 364, 608, 830.5, 1007, 1111, 1148, 1117, 1080, 971, 821, 629, 399.5, 210, 167],
            [77, 790, 982, 1203, 1203, 982, 798, 77], [187, 378, 613, 843.5, 1015, 1119, 1157, 1147, 251, 187],
            [137, 183.5, 316, 475, 675, 875.1, 1041.5, 1153.6, 1191, 1046, 965, 866, 542, 315, 179.5], [154, 285, 499, 1173, 1173, 154],
            [122, 157.9, 265.5, 433.6, 651, 859.6, 1029.5, 1142.4, 1180, 1140, 1106.8, 1007, 851.5, 651, 456.8, 300, 196.5, 162],
            [113, 258, 340, 438, 760, 988, 1122.5, 1167, 1121, 990, 829, 629, 429.5, 263, 150.5], [346, 585, 585, 346], [230, 376, 658, 585, 346], [254, 1408, 1408, 254],
            [245, 1431, 1431, 245], [268, 1422, 1422, 268], [160, 406, 610, 970, 1005, 973.9, 880.5, 733.4, 541, 337.5, 160],
            [176, 240, 419, 692, 1037, 1210, 1391, 1714, 1829.5, 1870, 1813.5, 1651, 1391, 1041, 701, 426, 243], [26, 1374, 832, 568],
            [200, 728, 983.5, 1168, 1281, 1323, 1196, 1159, 1040, 885, 641, 200], [115, 169, 319, 549.5, 844, 1001.5, 1134, 1250.5, 1350, 1350, 1084.5, 845, 546.5, 317, 167],
            [200, 576, 906.5, 1134, 1369.5, 1458, 1373, 1136, 918.5, 572, 200], [200, 1181, 1181, 200], [200, 398, 1045, 1151, 1151, 200],
            [115, 171, 330, 577, 896, 1175.5, 1442, 1442, 1441, 1155.5, 896, 570.9, 323.5, 167.1], [200, 1339, 1339, 200], [137, 725, 725, 137],
            [44, 178, 306, 486.6, 626.5, 716.1, 746, 746, 233, 44], [205, 1397, 1366, 205], [200, 1142, 1142, 398, 200], [200, 1526, 1526, 200], [200, 1336, 1336, 200],
            [115, 163.5, 302, 520.5, 806, 1092.5, 1310, 1448.5, 1498, 1449.5, 1310, 1093.5, 806, 521.5, 303, 163], [200, 398, 1043, 1139.5, 1174, 1127.5, 996, 831, 604, 200],
            [115, 163.5, 302, 520.5, 1010.5, 1133.1, 1290, 1409.5, 1528, 1528, 1498, 1449.5, 1310, 1093.5, 806, 521.5, 303, 163], [200, 1432, 1130.5, 1004, 842, 617, 200],
            [134, 395.5, 685, 941.5, 1128, 1241.5, 1282, 1222, 990, 702, 480.3, 301, 182.5, 143, 134], [0, 532, 730, 1262, 1262, 0],
            [178, 213.5, 330, 505, 749, 989, 1169, 1285.5, 1321, 1321, 178], [26, 568, 832, 1374, 238], [92, 486, 1546, 1933, 295], [68, 1335, 1336, 80], [6, 532, 730, 1254, 225],
            [126, 1288, 1288, 1266, 160, 126], [239, 759, 759, 239], [70, 787, 960, 246], [171, 691, 691, 171], [186, 383, 1490, 901, 775], [-4, 1306, 1306, -4], [340, 613, 762, 583],
            [104, 130.3, 209, 325.5, 465, 1053, 1053, 1020, 924, 772.5, 567, 362, 203], [185, 679, 866, 1022, 1128.5, 1168, 1139.4, 1053.5, 918.1, 373, 185],
            [105, 145, 258, 431, 653, 832.5, 1011, 1011, 841.5, 653, 430.1, 255.5, 142.6], [108, 137.4, 225.5, 363.6, 543, 1091, 1091, 903, 258, 148.5],
            [106, 145, 262, 448.5, 696, 904, 1098, 1120, 1120, 1089.4, 997.5, 849.1, 649, 428.6, 255.5, 143.4], [68, 195, 383, 716, 786, 786, 693.5, 580, 415, 294, 68],
            [108, 225, 391.5, 565, 798.3, 962, 1058.8, 1091, 1091, 602, 417, 259, 148.5], [185, 1119, 1119, 1095.3, 1024, 373, 185], [175, 187, 375, 387, 387, 175],
            [-62, 47.5, 153, 304, 421, 496, 521, 533, 533, 321, 100, -62], [193, 1199, 1161, 381, 193], [187, 375, 375, 187], [185, 1815, 1815, 1793.1, 1727.5, 1615.9, 1456, 735, 185],
            [185, 1119, 1119, 1095.3, 1024, 907.5, 748, 185], [106, 140.9, 245.5, 409.4, 622, 833.3, 997, 1102, 1137, 1102, 997, 833.3, 622, 409.4, 245.5, 140.9],
            [185, 373, 1019, 1129, 1168, 1139.9, 1055.5, 920.6, 741, 185], [108, 137.6, 226.5, 365.1, 903, 1091, 1091, 602, 414, 259, 149.5], [185, 373, 882, 882, 816, 745, 185],
            [110, 283.5, 511, 706.9, 856.5, 951.4, 983, 939, 768.5, 566, 372.5, 230, 143.5, 115, 110], [62, 211.3, 278, 387.5, 538, 649.5, 765, 765, 377, 189, 62],
            [177, 201.5, 275, 392.5, 549, 1111, 1111, 177], [61, 510, 699, 1151, 265], [86, 380, 1299, 1590, 766], [60, 1152, 1152, 64], [61, 298, 499, 1151, 265],
            [93, 995, 995, 978, 107, 93], [173, 588.9, 672.5, 800.9, 963, 1113, 1113, 963, 800.9, 672.5, 588.9, 173], [378, 552, 552, 378],
            [187, 337, 499.1, 627.5, 711.1, 1127, 1127, 711.1, 627.5, 499.1, 337, 187], [187, 354, 1125, 1290, 1401, 1466.5, 1489, 1322, 551, 386, 274, 209.5], [], [291, 515, 505, 301],
            [159, 191.6, 289.5, 647, 765, 1120, 1120, 765, 647, 292.5, 192.4], [137, 1163, 1163, 1137, 997, 816, 630.6, 484.5, 389.6, 182, 137],
            [138, 247, 1058, 1168, 1168, 1055, 249, 138], [108, 187, 557, 745, 1115, 1191, 320], [378, 552, 552, 378],
            [172, 229, 404.5, 575, 796, 965, 1063, 1096, 1128, 1071, 896, 725, 497.5, 334, 235, 203], [346, 958, 958, 346],
            [159, 222.4, 412.5, 692.1, 1024, 1355.9, 1635.5, 1825.6, 1889, 1825.6, 1635.5, 1355.9, 1024, 692.1, 412.5, 222.4],
            [151, 238.5, 454, 944, 944, 920.3, 849, 723.5, 537, 368, 231], [166, 716, 1146, 1146, 716, 166], [210, 1285, 1456, 1456, 210], [153, 777, 777, 153],
            [159, 222.4, 412.5, 692.1, 1024, 1355.9, 1635.5, 1825.6, 1889, 1825.6, 1635.5, 1355.9, 1024, 692.1, 412.5, 222.4], [-4, 1, 1306, 1306],
            [154, 183, 270, 399.3, 555, 710.8, 840, 927, 956, 927.1, 840.5, 711.4, 555, 399.3, 270, 183], [215, 1461, 1461, 921, 755, 215],
            [207, 967, 967, 911, 887.6, 817.5, 544, 369.5, 211, 207], [207, 363.5, 540, 703, 834, 923, 956, 929, 904.9, 832.5, 561, 384.5, 224, 207], [541, 690, 963, 720],
            [190, 378, 1124, 1124, 190], [137, 168.5, 595, 1106, 1106, 640, 425.3, 267, 169.5], [253, 492, 492, 253], [353, 456, 551, 788.5, 857.1, 880, 877, 872, 719, 353],
            [291, 299, 914, 914, 693, 558, 291], [121, 150.6, 239.5, 378.6, 559, 734.3, 874, 965.5, 996, 965.5, 874, 734.3, 559, 378.6, 239.5, 150.6], [174, 604, 1154, 1154, 604, 174],
            [171, 465, 1694, 1857, 1857, 1694, 1410, 545, 408, 171], [171, 465, 1955, 1955, 1890, 1805.5, 1410, 545, 408, 171], [140, 555, 1750, 1913, 1913, 1750, 1500, 448, 294, 155, 140],
            [113, 144.1, 237.5, 384.6, 577, 782, 958, 958, 712, 508, 147.5], [26, 1374, 862, 683, 440], [26, 1374, 955, 712, 533], [26, 1374, 1033, 805, 578, 350],
            [26, 1374, 1119, 990, 541, 367, 288], [26, 1374, 1005, 806, 393], [26, 1374, 1049, 1023.6, 947.5, 834.6, 699, 564, 451, 374.5, 349], [14, 1901, 1901, 608],
            [115, 169, 548, 652.5, 750, 990.5, 1350, 1350, 1084.5, 845, 546.5, 317, 167], [200, 1181, 1181, 643, 400, 200], [200, 1181, 1181, 993, 750, 200],
            [200, 1181, 1181, 803, 576, 200], [200, 1181, 1181, 1038, 426, 200], [137, 725, 725, 389, 146, 137], [137, 725, 725, 482, 137], [93, 137, 725, 776, 548, 321],
            [126, 137, 725, 738, 738, 126], [14, 210, 586, 916.5, 1144, 1379.5, 1468, 1383, 1146, 929, 582, 210, 14], [200, 1336, 1336, 1208, 1079, 630, 456, 200],
            [115, 163.5, 302, 520.5, 806, 1092.5, 1310, 1448.5, 1498, 1449.5, 1310, 753, 510, 163], [115, 163.5, 302, 520.5, 806, 1092.5, 1310, 1448.5, 1498, 1449.5, 1083, 840, 303, 163],
            [115, 163.5, 302, 520.5, 806, 1092.5, 1310, 1448.5, 1498, 1449.5, 1136, 908, 681, 453, 163],
            [115, 163.5, 302, 520.5, 806, 1092.5, 1310, 1448.5, 1498, 1449.5, 1207, 1078, 629, 455, 163],
            [112, 160.5, 299, 517.5, 803, 1089.5, 1307, 1445.5, 1495, 1446.5, 1108, 909, 496, 160], [291, 402, 1274, 1385, 1385, 1274, 402, 291],
            [115, 120, 252, 1092.5, 1310, 1448.5, 1498, 1474, 1342, 806, 521.5, 303, 163], [178, 213.5, 330, 505, 749, 989, 1169, 1285.5, 1321, 1321, 753, 510, 178],
            [178, 213.5, 330, 505, 749, 989, 1169, 1285.5, 1321, 1321, 1073, 830, 178], [178, 213.5, 330, 505, 749, 989, 1169, 1285.5, 1321, 1321, 856, 629, 178],
            [178, 213.5, 330, 505, 749, 989, 1169, 1285.5, 1321, 1321, 1056, 444, 178], [6, 532, 730, 1254, 935, 692], [200, 398, 1044, 1139, 1174, 1127, 997, 398, 200],
            [185, 675, 873.1, 1029.5, 1131.1, 1165, 1066, 1037.4, 951.5, 819.9, 654, 470.5, 321, 221, 185], [104, 130.3, 209, 325.5, 465, 1053, 1053, 1020, 559, 316, 203],
            [104, 130.3, 209, 325.5, 465, 1053, 1053, 934, 691, 203], [104, 130.3, 209, 325.5, 465, 1053, 1053, 961, 733, 506, 278, 203],
            [104, 130.3, 209, 325.5, 465, 1053, 1053, 1038, 909, 460, 286, 207], [104, 130.3, 209, 325.5, 465, 1053, 1053, 926, 314, 203],
            [104, 130.3, 209, 325.5, 465, 1053, 1053, 956, 930.6, 854.5, 741.6, 606, 471, 358, 281.5, 256],
            [104, 130.4, 209.5, 326.1, 465, 1433, 1648.5, 1833, 1855, 1855, 1823.6, 1729.5, 1581.1, 1387, 564, 360, 202],
            [105, 145, 353, 456, 551, 788.5, 857.1, 1011, 1011, 841.5, 653, 430.1, 255.5, 142.6], [106, 145, 262, 448.5, 696, 904, 1098, 1120, 1120, 1089.4, 997.5, 580, 337, 143.4],
            [106, 145, 262, 448.5, 696, 904, 1098, 1120, 1120, 1089.4, 960, 717, 255.5, 143.4], [106, 145, 262, 448.5, 696, 904, 1098, 1120, 1120, 1089.4, 986, 758, 531, 303, 143.4],
            [106, 145, 262, 448.5, 696, 904, 1098, 1120, 1120, 1089.4, 951, 339, 143.4], [-21, 187, 375, 401, 222], [160, 187, 375, 582, 339], [-11, 187, 375, 572, 394, 167],
            [5, 187, 375, 557, 557, 5], [106, 140.6, 244.5, 405.6, 612, 828.3, 995, 1101.5, 1137, 1004, 938, 263], [185, 1119, 1119, 1075, 946, 497, 323, 244, 185],
            [106, 140.9, 245.5, 409.4, 622, 833.3, 997, 1102, 1137, 1102, 997, 553, 310, 140.9], [106, 140.9, 245.5, 409.4, 622, 833.3, 997, 1102, 1137, 1102, 933, 690, 245.5, 140.9],
            [106, 140.9, 245.5, 409.4, 622, 833.3, 997, 1102, 1137, 1102, 963, 735, 508, 280, 140.9], [106, 140.9, 245.5, 409.4, 622, 833.3, 997, 1102, 1137, 1038, 909, 460, 286, 207],
            [106, 140.9, 245.5, 409.4, 622, 833.3, 997, 1102, 1137, 1102, 928, 729, 316, 140.9], [210, 719, 957, 1466, 1466, 957, 719, 210],
            [93, 203, 833.3, 997, 1102, 1137, 1132, 1021, 409.4, 245.5, 140.9, 106], [177, 201.5, 275, 392.5, 549, 1111, 1111, 585, 342, 177],
            [177, 201.5, 275, 392.5, 549, 1111, 1111, 945, 702, 177], [177, 201.5, 275, 392.5, 549, 1111, 1111, 757, 530, 177], [177, 201.5, 275, 392.5, 549, 1111, 1111, 955, 343, 177],
            [61, 298, 499, 1151, 928, 685], [185, 373, 1019, 1129, 1168, 1139.9, 1055.5, 920.6, 373, 185], [230, 376, 658, 585, 346], [530, 579, 724, 773],
            [256, 588, 716, 1048, 1048, 765, 539, 256], [7, 26, 1374, 832], [346, 585, 585, 346], [0, 49, 443, 1424, 1424, 443], [0, 49, 443, 1582, 1582, 443], [0, 49, 380, 968, 968, 380],
            [0, 49, 354.5, 493, 711.5, 997, 1283.5, 1501, 1639.5, 1689, 1640.5, 1501, 1284.5, 997], [0, 49, 815, 1013, 1537, 289],
            [0, 49, 291, 1751, 1751, 1701, 1654.1, 1513.5, 1296.6, 1021], [-53, 187, 375, 615, 615, 379, 183, -53], [26, 1374, 832, 568],
            [200, 728, 983.5, 1168, 1281, 1323, 1196, 1159, 1040, 885, 641, 200], [200, 398, 1162, 1162, 200], [26, 1414, 852, 588], [200, 1181, 1181, 200],
            [126, 1288, 1288, 1266, 160, 126], [200, 1339, 1339, 200], [115, 163.5, 302, 520.5, 806, 1092.5, 1310, 1448.5, 1498, 1449.5, 1310, 1093.5, 806, 521.5, 303, 163],
            [137, 725, 725, 137], [205, 1397, 1366, 205], [26, 1378, 822, 582], [200, 1526, 1526, 200], [200, 1336, 1336, 200], [114, 1215, 1215, 114],
            [115, 163.5, 302, 520.5, 806, 1092.5, 1310, 1448.5, 1498, 1449.5, 1310, 1093.5, 806, 521.5, 303, 163], [200, 1339, 1339, 200],
            [200, 398, 1043, 1139.5, 1174, 1127.5, 996, 831, 604, 200], [118, 1280, 1280, 1234, 138, 118], [0, 532, 730, 1262, 1262, 0], [6, 532, 730, 1254, 225],
            [105, 149.5, 273, 740, 937, 1404, 1527.5, 1572, 1528.5, 1410, 937, 740, 267, 148], [68, 1335, 1336, 80], [179, 219.5, 338, 793, 990, 1446, 1563.5, 1604, 1604, 179],
            [108, 1568, 1568, 1518, 1471.1, 1330.5, 1113.6, 838, 562.4, 345.5, 204.9, 158, 108], [126, 137, 725, 738, 738, 126], [6, 532, 730, 1254, 939, 740, 327],
            [108, 137.4, 225.5, 363.6, 543, 1091, 1091, 743, 500, 148.5], [109, 152.5, 265, 417, 578, 796, 1006, 1006, 961, 721, 478, 191.5, 144],
            [185, 931, 1119, 1119, 1095.3, 802, 559, 185], [160, 187, 375, 403], [177, 207.8, 300, 448, 646, 846, 994, 1085.5, 1116, 1116, 1043, 760, 534, 251, 177],
            [108, 137.4, 225.5, 363.6, 543, 1091, 1091, 604, 416.5, 258, 148.5], [185, 373, 1030.5, 1131.4, 1165, 1084, 1050, 959, 825.5, 661, 462.1, 311.5, 216.6, 185],
            [61, 506, 694, 1151, 265], [106, 140.6, 244.5, 408.6, 624, 837.1, 1000.5, 1104.4, 1139, 1049, 239],
            [109, 152.5, 265, 417, 578, 796, 1006, 1006, 961, 789, 609, 449, 304, 191.5, 144], [108, 135.8, 219, 646, 825, 937, 982, 942, 198],
            [185, 931, 1119, 1119, 1095.3, 1024, 907.5, 748, 185], [137, 159.5, 219, 382, 639, 896, 1059, 1118, 1141, 1118, 1058, 895.5, 639, 382.5, 220, 159.5], [187, 375, 375, 187],
            [193, 1192, 1122, 1085, 1027, 193], [61, 1151, 522, 311], [185, 373, 1125, 1125, 185], [61, 510, 699, 1151, 265], [104, 138.5, 239, 704, 884, 995.5, 1041, 957, 133],
            [106, 140.9, 245.5, 409.4, 622, 833.3, 997, 1102, 1137, 1102, 997, 833.3, 622, 409.4, 245.5, 140.9], [185, 1120, 1120, 185],
            [185, 373, 1033.5, 1137.4, 1172, 1140, 1044, 887.3, 673, 477.5, 322, 220.5, 185], [105, 146.5, 261, 685, 862, 971, 1018, 986, 839, 675, 441.9, 260.5, 143.9],
            [106, 140.5, 244, 407.8, 623, 832.9, 996.5, 1101.9, 1295, 1295, 625, 412, 247, 141.3], [10, 414, 602, 1006, 1006, 10],
            [177, 207.8, 300, 448, 646, 846, 994, 1085.5, 1116, 1116, 177], [104, 151, 283, 715, 902, 1342.5, 1471.1, 1514, 1470.4, 1339.5, 1132.6, 861, 784.5, 714, 355, 163],
            [48, 1160, 1149, 59], [176, 223.5, 748, 935, 1459, 1507, 1507, 176], [113, 136.5, 211, 343.5, 538, 1128, 1321.5, 1455, 1529.5, 1553, 1496, 1295, 371, 170],
            [5, 187, 375, 557, 557, 5], [177, 207.8, 300, 448, 646, 846, 994, 1085.5, 1116, 1116, 953, 341, 177],
            [106, 140.9, 245.5, 409.4, 622, 833.3, 997, 1102, 1137, 1102, 743, 500, 140.9], [177, 207.8, 300, 448, 646, 846, 994, 1085.5, 1116, 1116, 768, 525, 177],
            [113, 136.5, 211, 343.5, 538, 1128, 1321.5, 1455, 1529.5, 1553, 1496, 955, 712, 170],
            [149, 179.4, 270.5, 409.6, 584, 798.5, 985, 1106, 1145, 1130.5, 1074, 909.5, 670, 473.5, 292], [50, 1438, 876, 612], [144, 344, 1332, 1532, 1532, 144],
            [187, 1369, 1369, 1330, 197, 187], [220, 1456, 1456, 220], [-102, 63, 843, 678], [253, 492, 492, 253], [134, 755, 857, 1737, 1570, 134],
            [161, 189.3, 274, 406.5, 578, 1435, 1620.9, 1764.5, 1856.4, 1887, 1858.8, 1774, 1641.5, 1470, 613, 430.3, 286, 192.3],
            [138, 241.5, 348, 515.3, 641, 719, 1168, 1168, 1063, 954, 786.3, 661, 583, 138], [243, 400, 1070, 1214, 1320, 1432, 1431, 1274, 604, 462.4, 355.5, 243],
            [245, 566, 719, 1431, 1431, 1109, 956, 245], [254, 1408, 1408, 254], [268, 1422, 1422, 268]
        ];
        this.OUTLINE_Y = [
            [], [1489, 0, 0, 1489], [1556, 977, 977, 1556, 1556], [421, 0, 0, 421, 932, 1067, 1489, 1489, 1067, 556],
            [85, -361, -361, 238.1, 380, 1231, 1576, 1576, 1185, 1071.5, 935, 283], [1075, 880.5, 743, 0, -29, -1.8, 80, 217.8, 413, 607.5, 745, 1489, 1517, 1489.8, 1408, 1270.3],
            [409, 230.9, 90.5, -0.6, -31, 0, 909, 1333.4, 1432.5, 1498.1, 1520, 1490, 1412, 1301.5, 1174], [1556, 977, 977, 1556], [572, 286.3, 31, -412, -412, 1556, 1556, 1113, 857.8],
            [-412, -412, 31, 286.3, 572, 857.8, 1113, 1556, 1556], [886, 776, 630, 630, 777, 887, 1299, 1409, 1556, 1556, 1410, 1300], [572, 27, 27, 572, 732, 1277, 1277, 732],
            [-370, -370, 285, 285], [561, 561, 742, 742], [0, 0, 285, 285], [-304, -304, 1556, 1556],
            [743, 400, 159, 16.5, -31, 15.9, 156.5, 397.4, 745, 1084.9, 1326.5, 1470.9, 1519, 1471.6, 1329.5, 1088.1], [0, 0, 152, 1494, 1494, 1286],
            [0, 0, 171, 1110, 1279.4, 1409.5, 1492.4, 1520, 1491, 1427, 209], [63, -1.5, -31, 2.5, 106, 254, 441, 1161, 1320, 1436, 1500, 1520, 1490.5, 1426, 272],
            [419, 0, 0, 419, 579, 1489, 1489, 649], [56, -5.5, -31, 6.5, 114, 274, 473, 1489, 1489, 267],
            [654, 324, 104, 3, -31, 4.9, 112.5, 276.9, 483, 1494, 1512, 1517, 1453.5, 1277, 1005], [1314, 0, 0, 1266, 1489, 1489],
            [411, 233.5, 91, -2.8, -34, -2, 94, 238.3, 415, 1144, 1294.5, 1416, 1496.3, 1523, 1495, 1411, 1285, 1131],
            [1005, -6, -23.5, -29, 33, 209, 480, 834, 1171.5, 1385, 1485.5, 1519, 1483.3, 1376, 1211.8], [0, 0, 1117, 1117], [-370, -370, 285, 1117, 1117], [590, 77, 1227, 714],
            [362, 362, 942, 942], [77, 590, 714, 1227], [1245, 0, 0, 964.5, 1139, 1293.4, 1414.5, 1492.9, 1519, 1497.5, 1449],
            [647, 291, 15, -162.5, -226, -218.5, -190, 157, 394, 663, 1013.5, 1283, 1457, 1519, 1452, 1268, 991.5], [0, 0, 1489, 1489],
            [0, 0, 28, 122, 262, 458, 1155, 1316.5, 1427, 1477, 1489, 1489], [743, 402.5, 161, 18.5, -27, -13.5, 19, 63, 108, 1385, 1487, 1516, 1465, 1317, 1072],
            [0, 0, 28, 119, 375, 743, 1118, 1371, 1457.5, 1489, 1489], [0, 0, 1489, 1489], [0, 0, 717, 1313, 1489, 1489],
            [746, 405.5, 163, 19, -29, 12.5, 110, 749, 1382, 1485.5, 1516, 1464.4, 1309.5, 1065.4], [0, 0, 1489, 1489], [0, 0, 1489, 1489],
            [8, -12.5, -21, 5.5, 85, 213.5, 387, 1489, 1489, 193], [0, 0, 1489, 1489], [0, 0, 176, 1489, 1489], [0, 0, 1489, 1489], [0, 0, 1489, 1489],
            [744, 415, 172, 21, -31, 20, 172, 414.5, 744, 1073, 1318, 1467.5, 1520, 1468, 1318, 1070.5], [0, 0, 709, 855.5, 1039, 1254, 1396, 1466.5, 1489, 1489],
            [744, 415, 172, 21, -297.5, -369.1, -393, -386.5, -365, -183, 744, 1073, 1318, 1467.5, 1520, 1468, 1318, 1070.5], [0, 0, 1280.5, 1409, 1471.5, 1489, 1489],
            [92, 3, -27, 9, 109, 253, 425, 1412, 1486, 1516, 1486.1, 1396.5, 1260.1, 1090, 340], [1313, 0, 0, 1313, 1489, 1489], [598, 313, 115, 6, -31, 4, 115, 315.5, 598, 1489, 1489],
            [1489, 0, 0, 1489, 1489], [1489, 0, 0, 1489, 1489], [0, 0, 1489, 1489], [1489, 0, 0, 1489, 1489], [0, 0, 176, 1489, 1489, 184], [-392, -392, 1556, 1556],
            [1556, -304, -304, 1556], [-392, -392, 1556, 1556], [682, 682, 684, 1489, 1489], [-300, -300, -180, -180], [1676, 1302, 1302, 1676],
            [324, 182.8, 69, -6, -31, 0, 758, 939, 1058, 1124.5, 1144, 1126, 1093], [0, -31, 8.5, 127, 315, 567, 812.8, 996, 1110, 1556, 1556],
            [557, 300, 118, 10.5, -25, 0, 70, 1050, 1116, 1143, 1104, 987, 801.5], [550, 306.8, 123, 7.5, -31, 0, 1556, 1556, 992, 803],
            [552, 306.6, 124.5, 11.6, -26, 1, 68, 539, 641, 856.3, 1016, 1115, 1148, 1107.8, 987, 797.8], [959, 0, 0, 959, 1374, 1546, 1560, 1566, 1539.4, 1459.5, 1117],
            [569, -375, -410.5, -423, -389.8, -290, -119.3, 127, 1117, 1148, 1108.5, 998, 817.5], [0, 0, 725, 906, 1039, 1556, 1556], [1304, 0, 0, 1304, 1499, 1499],
            [-395, -415, -423, -398, -323, -199, -27, 1304, 1499, 1499, 1117, -216], [0, 0, 1117, 1556, 1556], [0, 0, 1556, 1556], [0, 0, 725, 902.9, 1036.5, 1120.1, 1148, 1148, 1117],
            [0, 0, 725, 906, 1039, 1120.8, 1148, 1117], [558, 313.8, 127, 8.5, -31, 8.5, 127, 313.8, 558, 802.4, 989.5, 1108.4, 1148, 1108.4, 989.5, 802.4],
            [-412, -412, 133, 323.5, 572, 813.4, 995.5, 1109.9, 1148, 1117], [555, 314.1, 131.5, 16.4, -412, -412, 1117, 1148, 1108, 995, 809.5], [0, 0, 912, 1105, 1114.5, 1117, 1117],
            [67, 2.5, -27, -2.5, 71, 182.8, 322, 1060, 1119.5, 1144, 1116.5, 1042, 933, 803, 278], [959, 189.8, 70, 1, -22, -13, 10, 1117, 1438, 1438, 1117],
            [392, 209.1, 76.5, -4.1, -31, 0, 1117, 1117], [1117, 0, 0, 1117, 1117], [1117, 0, 0, 1117, 1117], [0, 0, 1117, 1117], [1117, -412, -412, 1117, 1117],
            [0, 0, 159, 1117, 1117, 139], [504, -170.9, -292.5, -367.1, -392, -392, 1556, 1556, 1531.1, 1456.5, 1334.9, 660], [-392, -392, 1556, 1556],
            [-392, -392, -367.1, -292.5, -170.9, 504, 660, 1334.9, 1456.5, 1531.1, 1556, 1556], [395, 395, 396, 440, 561, 732, 927, 927, 926, 880.5, 761, 589.5], [], [0, 0, 1489, 1489],
            [557, 333.5, 163, -361, -361, 74, 1046, 1475, 1475, 948.5, 775.9], [0, 0, 171, 1467, 1501, 1518, 1485.9, 1389.5, 1243.1, 751, 207],
            [258, 145, 147, 257, 1067, 1176, 1176, 1066], [1489, 426, 0, 0, 426, 1489, 1489], [-392, -392, 1556, 1556],
            [533, -327, -371.5, -385, -358, -275, -156, -10, 601, 1462, 1505, 1519, 1490, 1411, 1293.5, 1147], [1304, 1304, 1499, 1499],
            [655, 323.1, 43.5, -146.6, -210, -146.6, 43.5, 323.1, 655, 986.9, 1266.5, 1456.6, 1520, 1456.6, 1266.5, 986.9],
            [833, 616, 531, 554, 1192, 1332.4, 1435.5, 1498.9, 1520, 1504, 1475], [608, 162, 191, 1113, 1142, 697], [602, 57, 57, 762, 762], [561, 561, 742, 742],
            [655, 323.1, 43.5, -146.6, -210, -146.6, 43.5, 323.1, 655, 986.9, 1266.5, 1456.6, 1520, 1456.6, 1266.5, 986.9], [1788, 1668, 1668, 1788],
            [1116, 960.4, 831.5, 744.9, 716, 745, 832, 961, 1116, 1271, 1400, 1487, 1516, 1487, 1400, 1271], [179, 179, 917, 1462, 1462, 917],
            [566, 566, 711, 1237, 1350.4, 1440.5, 1519, 1501.5, 1458, 722], [585, 542, 527, 543.5, 595, 685.5, 817, 1278, 1374.5, 1452, 1520, 1502.5, 1458, 764],
            [1302, 1302, 1676, 1676], [-412, -412, 0, 1117, 1117], [1050, 866, -363, -363, 1489, 1489, 1460, 1373, 1234.3], [511, 511, 794, 794],
            [-397, -416, -423, -337, -232, -89, -25, 20, 20, -237], [1256, 566, 566, 688, 1493, 1493, 1368],
            [1025, 820.1, 663.5, 564.1, 531, 563.4, 660.5, 816.4, 1025, 1233.8, 1390, 1487.5, 1520, 1486.8, 1387, 1230], [191, 162, 608, 697, 1142, 1113],
            [1246, 0, 0, 220, 353, 944, 1489, 1493, 1493, 1363], [1246, 0, 0, 139, 664, 865, 1489, 1493, 1493, 1363], [598, 0, 0, 220, 353, 944, 1489, 1517, 1500, 1456, 773],
            [350, 195.6, 74.5, -3.9, -30, -10, 40, 244, 1489, 1489, 523], [0, 0, 1675, 2049, 2049], [0, 0, 2049, 2049, 1675], [0, 0, 1670, 2049, 2049, 1670],
            [0, 0, 1992, 1992, 1987, 1910, 1682], [0, 0, 1872, 1872, 1872], [0, 0, 1712, 1843.5, 1952, 2024.8, 2049, 2024.8, 1952, 1843.5, 1712], [0, 0, 1489, 1489],
            [743, 402.5, -397, -416, -423, -337, 108, 1385, 1487, 1516, 1465, 1317, 1072], [0, 0, 1489, 2049, 2049, 1489], [0, 0, 1489, 2049, 2049, 1489], [0, 0, 1489, 2049, 2049, 1489],
            [0, 0, 1489, 1872, 1872, 1489], [0, 0, 1489, 2049, 2049, 1489], [0, 0, 2049, 2049, 1489], [1670, 0, 0, 1670, 2049, 2049], [1677, 0, 0, 1677, 1872, 1872],
            [740, 0, 0, 28, 119, 375, 743, 1118, 1371, 1457.5, 1489, 1489, 883], [0, 0, 1489, 1992, 1992, 1987, 1910, 1489],
            [744, 415, 172, 21, -31, 20, 172, 414.5, 744, 1073, 1318, 2049, 2049, 1070.5], [744, 415, 172, 21, -31, 20, 172, 414.5, 744, 1073, 2049, 2049, 1318, 1070.5],
            [744, 415, 172, 21, -31, 20, 172, 414.5, 744, 1073, 1670, 2049, 2049, 1670, 1070.5], [744, 415, 172, 21, -31, 20, 172, 414.5, 744, 1073, 1992, 1992, 1987, 1910, 1070.5],
            [744, 415, 172, 21, -31, 20, 172, 414.5, 744, 1073, 1872, 1872, 1872, 1070.5], [216, 105, 105, 216, 1088, 1199, 1199, 1088],
            [744, -146, -146, 20, 172, 414.5, 744, 1611, 1611, 1520, 1468, 1318, 1070.5], [598, 313, 115, 6, -31, 4, 115, 315.5, 598, 1489, 2049, 2049, 1489],
            [598, 313, 115, 6, -31, 4, 115, 315.5, 598, 1489, 2049, 2049, 1489], [598, 313, 115, 6, -31, 4, 115, 315.5, 598, 1489, 2049, 2049, 1489],
            [598, 313, 115, 6, -31, 4, 115, 315.5, 598, 1489, 1872, 1872, 1489], [1489, 0, 0, 1489, 2049, 2049], [0, 0, 469, 610.5, 787, 992, 1130, 1489, 1489],
            [0, -24, 12.4, 121.5, 284.1, 481, 1241, 1376, 1479, 1544.3, 1566, 1536.5, 1449, 1295.5, 1080], [324, 182.8, 69, -6, -31, 0, 758, 939, 1676, 1676, 1093],
            [324, 182.8, 69, -6, -31, 0, 758, 1676, 1676, 1093], [324, 182.8, 69, -6, -31, 0, 758, 1297, 1676, 1676, 1297, 1093],
            [324, 182.8, 69, -6, -31, 0, 758, 1619, 1619, 1614, 1537, 1309], [324, 182.8, 69, -6, -31, 0, 758, 1499, 1499, 1093],
            [324, 182.8, 69, -6, -31, 0, 758, 1630, 1761.8, 1871, 1944.5, 1969, 1944.5, 1871, 1761.8, 1630],
            [317, 178.8, 68, -4.8, -29, -26, 3.5, 68, 559, 641, 861.3, 1020, 1116, 1148, 1146, 1127, 1093], [557, 300, -397, -416, -423, -337, -232, 70, 1050, 1116, 1143, 1104, 987, 801.5],
            [552, 306.6, 124.5, 11.6, -26, 1, 68, 539, 641, 856.3, 1016, 1676, 1676, 797.8], [552, 306.6, 124.5, 11.6, -26, 1, 68, 539, 641, 856.3, 1676, 1676, 987, 797.8],
            [552, 306.6, 124.5, 11.6, -26, 1, 68, 539, 641, 856.3, 1297, 1676, 1676, 1297, 797.8], [552, 306.6, 124.5, 11.6, -26, 1, 68, 539, 641, 856.3, 1499, 1499, 797.8],
            [1676, 0, 0, 1302, 1676], [1302, 0, 0, 1676, 1676], [1297, 0, 0, 1297, 1676, 1676], [1304, 0, 0, 1304, 1499, 1499],
            [484, 266.5, 104, 2.8, -31, 12, 141, 351, 637, 1469, 1566, 1556], [0, 0, 725, 1619, 1619, 1614, 1537, 1309, 1117],
            [558, 313.8, 127, 8.5, -31, 8.5, 127, 313.8, 558, 802.4, 989.5, 1676, 1676, 802.4], [558, 313.8, 127, 8.5, -31, 8.5, 127, 313.8, 558, 802.4, 1676, 1676, 989.5, 802.4],
            [558, 313.8, 127, 8.5, -31, 8.5, 127, 313.8, 558, 802.4, 1297, 1676, 1676, 1297, 802.4], [558, 313.8, 127, 8.5, -31, 8.5, 127, 313.8, 558, 1619, 1619, 1614, 1537, 1309],
            [558, 313.8, 127, 8.5, -31, 8.5, 127, 313.8, 558, 802.4, 1499, 1499, 1499, 802.4], [572, 7, 7, 572, 732, 1297, 1297, 732],
            [-148, -148, 8.5, 127, 313.8, 558, 1241, 1241, 1108.4, 989.5, 802.4, 558], [392, 209.1, 76.5, -4.1, -31, 0, 1117, 1676, 1676, 1117],
            [392, 209.1, 76.5, -4.1, -31, 0, 1117, 1676, 1676, 1117], [392, 209.1, 76.5, -4.1, -31, 0, 1117, 1676, 1676, 1117], [392, 209.1, 76.5, -4.1, -31, 0, 1117, 1499, 1499, 1117],
            [1117, -412, -412, 1117, 1676, 1676], [-412, -412, 133, 323.5, 572, 813.4, 995.5, 1109.9, 1556, 1556], [-370, -370, 285, 1117, 1117], [1676, 1292, 1292, 1676],
            [1304, 1292, 1292, 1304, 1499, 1676, 1676, 1499], [1489, 0, 0, 1489], [832, 832, 1117, 1117], [1489, 1105, 0, 0, 1489, 1489], [1489, 1105, 0, 0, 1489, 1489],
            [1489, 1105, 0, 0, 1489, 1489], [1489, 1105, 415, 172, 21, -31, 20, 172, 414.5, 744, 1073, 1318, 1467.5, 1520], [1489, 1105, 0, 0, 1489, 1489],
            [1489, 1105, 0, 0, 174, 894, 1144.8, 1345, 1476.3, 1520], [1304, 0, 0, 1304, 1499, 1676, 1676, 1499], [0, 0, 1489, 1489],
            [0, 0, 28, 122, 262, 458, 1155, 1316.5, 1427, 1477, 1489, 1489], [0, 0, 1313, 1489, 1489], [0, 0, 1489, 1489], [0, 0, 1489, 1489], [0, 0, 176, 1489, 1489, 184],
            [0, 0, 1489, 1489], [744, 415, 172, 21, -31, 20, 172, 414.5, 744, 1073, 1318, 1467.5, 1520, 1468, 1318, 1070.5], [0, 0, 1489, 1489], [0, 0, 1489, 1489], [0, 0, 1489, 1489],
            [0, 0, 1489, 1489], [0, 0, 1489, 1489], [0, 0, 1489, 1489], [744, 415, 172, 21, -31, 20, 172, 414.5, 744, 1073, 1318, 1467.5, 1520, 1468, 1318, 1070.5], [0, 0, 1489, 1489],
            [0, 0, 709, 855.5, 1039, 1254, 1396, 1466.5, 1489, 1489], [0, 0, 176, 1489, 1489, 184], [1313, 0, 0, 1313, 1489, 1489], [1489, 0, 0, 1489, 1489],
            [755, 507, 325, -16, -16, 325, 506.5, 755, 994, 1171, 1505, 1505, 1171, 993], [0, 0, 1489, 1489], [910, 647, 471, 0, 0, 471, 645.5, 910, 1489, 1489],
            [0, 0, 174, 894, 1144.8, 1345, 1476.3, 1520, 1476.3, 1345, 1144.8, 894, 174], [1677, 0, 0, 1677, 1872, 1872], [1489, 0, 0, 1489, 1872, 1872, 1872],
            [550, 306.8, 123, 7.5, -31, 0, 1117, 1676, 1676, 803], [306, 148.5, 46, -10, -26, -5, 64, 270, 1083, 1676, 1676, 986.5, 839], [0, -412, -412, 725, 906, 1676, 1676, 1117],
            [1676, 0, 0, 1676], [407, 213.6, 77.5, -3.1, -30, -2.6, 79.5, 216.1, 407, 1117, 1499, 1676, 1676, 1499, 1117], [550, 306.8, 123, 7.5, -31, 0, 1117, 1148, 1108, 992, 803],
            [-412, -412, 110, 259.5, 444, 1195, 1355, 1467, 1534.5, 1556, 1524.3, 1429, 1277.8, 1078], [1117, -412, -412, 1117, 1117],
            [534, 299.6, 120.5, 6.9, -31, 7.8, 124, 308.3, 551, 1556, 1556], [306, 148.5, 46, -10, -26, -5, 64, 270, 1083, 1127.5, 1144, 1128, 1079, 986.5, 839],
            [463, 262.3, 118, -412, -412, -264.5, -96, 1556, 1556], [0, -412, -412, 725, 906, 1039, 1120.8, 1148, 1117],
            [768, 451.5, 241, 37.5, -31, 37.5, 241, 451.5, 768, 1073, 1288, 1487, 1556, 1487, 1288, 1073.5], [0, 0, 1117, 1117], [0, 0, 1117, 1118, 1119, 1117], [0, 0, 1556, 1556],
            [-412, -412, 0, 1117, 1117], [1117, 0, 0, 1117, 1117], [412, 248.5, 113, -412, -412, -265, -96, 1556, 1556],
            [558, 313.8, 127, 8.5, -31, 8.5, 127, 313.8, 558, 802.4, 989.5, 1108.4, 1148, 1108.4, 989.5, 802.4], [0, 0, 1117, 1117],
            [-412, -412, 148.5, 340.9, 577, 821.5, 1001, 1111.3, 1148, 1115, 1020, 861.5, 646], [549, 299, 129, -412, -412, -268, -96, 1079, 1124.5, 1143, 1102.5, 981, 792],
            [558, 313.8, 127, 8.5, -31, 7.5, 123, 308.8, 952, 1117, 1148, 1108.6, 990.5, 803.6], [952, 0, 0, 952, 1117, 1117],
            [407, 213.6, 77.5, -3.1, -30, -2.6, 79.5, 216.1, 407, 1117, 1117], [546, 314, 142, -412, -412, 159, 342.3, 576, 816.6, 996.5, 1108.6, 1146, 1145.5, 1143, 1117, 842],
            [-412, -412, 1117, 1117], [446, 248.5, -412, -412, 248, 446, 1117, 1117], [503, 310.5, 139, 16.5, -30, -30, 14.5, 139, 310.5, 503, 811.5, 1117, 1117, 811.5],
            [1304, 0, 0, 1304, 1499, 1499], [407, 213.6, 77.5, -3.1, -30, -2.6, 79.5, 216.1, 407, 1117, 1499, 1499, 1117],
            [558, 313.8, 127, 8.5, -31, 8.5, 127, 313.8, 558, 802.4, 1676, 1676, 802.4], [407, 213.6, 77.5, -3.1, -30, -2.6, 79.5, 216.1, 407, 1117, 1676, 1676, 1117],
            [503, 310.5, 139, 16.5, -30, -30, 14.5, 139, 310.5, 503, 811.5, 1676, 1676, 811.5], [424, 240.1, 94.5, -0.4, -32, 17, 190, 493, 837, 1097, 1286, 1464.5, 1519, 1496.5, 1430],
            [0, 0, 1489, 1489], [1315, -193, -193, 1315, 1489, 1489], [-189, -189, -13, 1489, 1489, 2], [572, 572, 732, 732], [0, 0, 1489, 1489], [511, 511, 794, 794],
            [842, -151, -151, 1788, 1788, 981], [642, 447.6, 292.5, 190.9, 157, 157, 190.4, 290.5, 450.4, 663, 857.4, 1012.5, 1114.1, 1148, 1148, 1114.5, 1014, 854],
            [-402, -417.5, -423, -395.5, -313, -179.8, 1367, 1545, 1560.5, 1566, 1538.5, 1456, 1321.8, -224], [202, 202, 209, 233.4, 306.5, 588, 1104, 1104, 1097, 1072.5, 999, 719],
            [362, 27, 27, 362, 942, 1277, 1277, 942], [0, 0, 1393, 910], [0, 0, 910, 1393]
        ];
        this.KERN_C1 = [
            '\'', '\'', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '.', '.', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
            'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'C', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F',
            'I', 'J', 'J', 'J', 'J', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L',
            'L', 'O', 'O', 'O', 'O', 'O', 'O', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'Q', 'Q', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'S',
            'S', 'S', 'S', 'S', 'S', 'S', 'S', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T',
            'T', 'T', 'T', 'T', 'T', 'T', 'U', 'U', 'U', 'U', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'W', 'W', 'W', 'W', 'W', 'W',
            'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y',
            'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z',
            'a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'e', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'h', 'h', 'h', 'k', 'k', 'k', 'k', 'm', 'm',
            'm', 'n', 'n', 'n', 'o', 'o', 'o', 'o', 'o', 'p', 'p', 'p', 'r', 'r', 'r', 'r', 'r', 't', 't', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v', 'w', 'w', 'w',
            'w', 'w', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'y', 'y', 'y', 'y', 'y', 'y', 'y', 'y', 'y', 'y', 'y', 'y', 'y', 'z', 'z', 'z', 'z', 'z', 'z', 'z',
            'z', 'z', '\u00C7', '\u00E7', '\u00D8', '\u00D8', '\u00D8', '\u00D8', '\u00D8', '\u00D8', '\u00F8', '\u00F8', '\u00F8', '\u00F8', '\u00F8'
        ];
        this.KERN_C2 = [
            '\u00C6', 'A', '\u00E6', '\u00C6', 'z', 'y', 'x', 'w', 'v', 'a', 'Z', 'Y', 'X', 'W', 'V', 'T', 'S', 'J', 'I', 'A', '-', ',', 'y', 'w', 'v', 'u', 't',
            'Y', 'W', 'V', 'U', 'T', 'S', '-', 'T', '.', '-', ',', '-', 'Z', 'Y', 'X', 'W', 'T', '.', ',', '\u00F8', '\u00E6', '\u00C6', 'o', 'e', 'a', 'T', 'A',
            '?', ';', ':', '.', ',', '-', '\u00C6', 'A', '.', ',', '\u00F8', '\u00E6', '\u00D8', 'y', 'w', 'v', 'u', 'o', 'e', 'a', 'O', '-', '\u00D8', '\u00C7',
            'y', 'v', 'Y', 'W', 'V', 'T', 'O', 'J', 'G', 'C', '-', '\'', 'Z', 'Y', 'X', 'T', '.', ',', '\u00F8', '\u00E6', '\u00C6', 'o', 'e', 'a', 'Y', 'A',
            '.', ',', '.', ',', '\u00F8', '\u00E6', 'y', 'u', 'o', 'e', 'a', 'Y', 'T', '-', '\u00C6', 'y', 'w', 'v', 'S', 'A', '.', ',', '\u00F8', '\u00E6',
            '\u00D8', '\u00C6', '\u00C7', 'z', 'y', 'w', 'v', 'u', 's', 'r', 'o', 'g', 'e', 'c', 'a', 'T', 'S', 'O', 'G', 'C', 'A', '?', ';', ':', '.', '-', ',',
            '\u00C6', 'A', '.', ',', '\u00F8', '\u00E6', '\u00C6', 'y', 'u', 'o', 'e', 'a', 'A', ';', ':', '.', '-', ',', '\u00F8', '\u00E6', '\u00C6', 'y', 'u',
            'r', 'o', 'e', 'a', 'A', ';', ':', '.', '-', ',', '\u00F8', '\u00E6', '\u00D8', '\u00C7', 'y', 'u', 'o', 'e', 'a', 'O', 'G', 'C', '-', '\u00F8',
            '\u00E6', '\u00D8', '\u00C6', 'v', 'u', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'g', 'e', 'd', 'a', 'O', 'A', ';', ':', '.', '-', ',', '\u00F8', '\u00E6',
            '\u00D8', '\u00C7', 'y', 'w', 'o', 'e', 'a', 'Z', 'O', 'G', 'C', '-', 'y', 'w', 'v', 'y', '.', ',', 'T', '-', 'T', '}', 'y', ']', '\\', '?', '.',
            '-', ',', '*', ')', '\'', '"', 'y', 'w', 'v', '\u00F8', 'o', 'e', '-', 'y', 'w', 'v', 'y', 'w', 'v', 'y', 'x', 'v', '.', ',', 'y', '.', ',',
            '\u00E6', 'a', '.', '-', ',', 'y', '-', '\u00F8', '\u00E6', 'o', 'e', 'a', '.', '-', ',', '\u00E6', 'a', '.', '-', ',', '\u00F8', '\u00E7', 'o', 'g',
            'e', 'd', 'c', '-', '\u00F8', '\u00E6', '\u00E7', 'q', 'o', 'g', 'e', 'd', 'c', 'a', '.', '-', ',', '\u00F8', '\u00E7', 'q', 'o', 'g', 'e', 'd', 'c',
            '-', '-', '-', 'Z', 'Y', 'X', 'T', '.', ',', 'y', 'x', 'v', '.', ','
        ];
        this.KERN_K = [
            100, 100, 20, 50, 40, 40, 50, 20, 40, 20, 30, 140, 80, 50, 50, 150, 20, 100, 30, 50, 160, 130, 50, 30, 50, 10, 20, 80, 50, 60, 10, 120, 10, 50, 60,
            20, -10, 20, 50, 20, 20, 10, 20, 50, 50, 50, 50, 100, 110, 50, 50, 100, -30, 100, -60, 60, 60, 300, 300, 30, 10, 10, 20, 20, 70, 60, 20, 80, 70, 80,
            50, 70, 70, 60, 20, 110, 20, 20, 110, 110, 160, 100, 110, 170, 20, -100, 20, 20, 160, 120, 20, 20, 10, 50, 30, 30, 50, 50, 70, 50, 50, 50, -20, 50,
            300, 300, 30, 30, 50, 50, 55, 20, 50, 50, 40, 20, 60, 100, 20, 30, 20, 30, 22, 20, 20, 20, 220, 240, 50, 130, 40, 170, 200, 200, 200, 200, 180, 200,
            220, 210, 220, 220, 240, 70, 12, 50, 40, 40, 120, -60, 200, 200, 290, 150, 290, 20, 10, 20, 20, 100, 100, 70, 65, 60, 100, 100, 100, 60, 80, 80, 290,
            50, 290, 100, 100, 60, 65, 60, 60, 100, 100, 100, 50, 80, 80, 220, 50, 290, 60, 50, 10, 10, 80, 30, 60, 60, 50, 10, 10, 10, 80, 130, 140, 20, 80,
            100, 110, 110, 100, 130, 100, 130, 100, 100, 130, 130, 120, 140, 20, 80, 200, 200, 290, 140, 290, 60, 50, 20, 20, 65, 40, 60, 60, 50, 10, 20, 20, 20,
            60, 16, 10, 16, 5, 20, 30, 60, 20, 140, -100, 10, -100, -100, -110, 120, 50, 130, -50, -100, -60, -60, 20, 10, 20, 20, 20, 20, 100, 20, 10, 20, 20,
            10, 20, 15, 20, 15, 20, 30, 5, 20, 30, 40, 36, 290, 20, 290, 10, 40, 18, 40, 18, 18, 40, 180, 40, 180, 20, 20, 70, 20, 70, 24, 20, 24, 10, 24, 10,
            20, 50, 18, 40, 18, 10, 18, 10, 18, 10, 18, 40, 190, 40, 190, 12, 10, 10, 12, 10, 12, 10, 10, 20, 50, 20, 20, 20, 10, 50, 30, 30, 15, 20, 15, 20, 30
        ];
        this.pathCache = [];
        this.pathMissing = null;
        this.ctxReference = null;
        for (let n = this.GLYPH_DATA.length - 1; n >= 0; n--)
            this.pathCache[n] = null;
    }
    getKerning(ch1, ch2) {
        const sz = this.KERN_K.length;
        for (let n = 0; n < sz; n++)
            if (this.KERN_C1[n] == ch1 && this.KERN_C2[n] == ch2)
                return -this.KERN_K[n];
        return 0;
    }
    static measureText(txt, size) { return this.main.measureText(txt, size); }
    measureText(txt, size) {
        let font = FontData.main;
        let scale = size / font.UNITS_PER_EM;
        let dx = 0;
        for (let n = 0; n < txt.length; n++) {
            let ch = txt.charAt(n);
            let i = this.getIndex(ch);
            if (i < 0) {
                dx += font.MISSING_HORZ;
                continue;
            }
            dx += font.HORIZ_ADV_X[i];
            if (n < txt.length - 1)
                dx += font.getKerning(ch, txt.charAt(n + 1));
        }
        return [dx * scale, font.ASCENT * scale * font.ASCENT_FUDGE, -font.DESCENT * scale];
    }
    static measureWidths(txt, size) { return this.main.measureWidths(txt, size); }
    measureWidths(txt, size) {
        let font = FontData.main;
        let scale = size / font.UNITS_PER_EM;
        let xpos = [0];
        let dx = 0;
        for (let n = 0; n < txt.length; n++) {
            let ch = txt.charAt(n);
            let i = this.getIndex(ch);
            if (i < 0) {
                dx += font.MISSING_HORZ;
                xpos.push(dx * scale);
                continue;
            }
            dx += font.HORIZ_ADV_X[i];
            if (n < txt.length - 1)
                dx += font.getKerning(ch, txt.charAt(n + 1));
            xpos.push(dx * scale);
        }
        return xpos;
    }
    getIndex(ch) {
        return this.UNICODE.indexOf(ch);
    }
    getRawGlyph(idx) {
        return this.GLYPH_DATA[idx];
    }
    getGlyphPath(idx) {
        let path = this.pathCache[idx];
        if (path != null)
            return path;
        path = new Path2D(this.GLYPH_DATA[idx]);
        this.pathCache[idx] = path;
        return path;
    }
    getMissingPath() {
        if (!this.pathMissing)
            this.pathMissing = new Path2D(this.MISSING_DATA);
        return this.pathMissing;
    }
    getOutlineX(idx) { return this.OUTLINE_X[idx].slice(0); }
    getOutlineY(idx) { return this.OUTLINE_Y[idx].slice(0); }
    initNativeFont(ctx) {
        if (ctx == null && this.ctxReference)
            return;
        if (ctx == null) {
            let canvas = new OffscreenCanvas(256, 256);
            this.ctxReference = canvas.getContext('2d');
        }
        else
            this.ctxReference = ctx;
    }
    static measureTextNative(txt, family, size, opt = {}) {
        return this.main.measureTextNative(txt, family, size, opt);
    }
    measureTextNative(txt, family, size, opt = {}) {
        if (!this.ctxReference)
            throw 'Calling measureTextNative without having called initNativeFont first';
        this.ctxReference.save();
        let pfx = '';
        if (opt.bold)
            pfx += 'bold ';
        if (opt.italic)
            pfx += 'italic ';
        this.ctxReference.font = pfx + size + 'px ' + family;
        let metrics = this.ctxReference.measureText(txt);
        this.ctxReference.restore();
        const FUDGE = this.ASCENT_FUDGE * this.ASCENT / this.UNITS_PER_EM;
        return [metrics.width, size * FUDGE, size * (-this.DESCENT / this.ASCENT) * FUDGE];
    }
}
FontData.main = new FontData();


/***/ }),

/***/ "./src/gfx/MetaVector.ts":
/*!*******************************!*\
  !*** ./src/gfx/MetaVector.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MetaVector: () => (/* binding */ MetaVector),
/* harmony export */   TextAlign: () => (/* binding */ TextAlign)
/* harmony export */ });
/* harmony import */ var _util_Geom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Geom */ "./src/util/Geom.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _FontData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FontData */ "./src/gfx/FontData.ts");




var TextAlign;
(function (TextAlign) {
    TextAlign[TextAlign["Centre"] = 0] = "Centre";
    TextAlign[TextAlign["Left"] = 1] = "Left";
    TextAlign[TextAlign["Right"] = 2] = "Right";
    TextAlign[TextAlign["Baseline"] = 0] = "Baseline";
    TextAlign[TextAlign["Middle"] = 4] = "Middle";
    TextAlign[TextAlign["Top"] = 8] = "Top";
    TextAlign[TextAlign["Bottom"] = 16] = "Bottom";
})(TextAlign || (TextAlign = {}));
var PrimClass;
(function (PrimClass) {
    PrimClass[PrimClass["Line"] = 1] = "Line";
    PrimClass[PrimClass["Rect"] = 2] = "Rect";
    PrimClass[PrimClass["Oval"] = 3] = "Oval";
    PrimClass[PrimClass["Path"] = 4] = "Path";
    PrimClass[PrimClass["Text"] = 5] = "Text";
    PrimClass[PrimClass["TextNative"] = 6] = "TextNative";
})(PrimClass || (PrimClass = {}));
function pixelCoord(val) {
    var _a;
    let str = val.toFixed(4);
    let match = (_a = /^(.*\.\d*?[1-9]+)0+$/.exec(str)) !== null && _a !== void 0 ? _a : /^(.*)\.0+$/.exec(str);
    if (match)
        str = match[1];
    return str;
}
class SpoolSVG {
    constructor(prettyPrint) {
        this.prettyPrint = prettyPrint;
        this.lines = [];
        this.depth = 0;
    }
    spool(str) { if ((str === null || str === void 0 ? void 0 : str.length) > 0)
        this.lines.push(str); }
    start(str) {
        if (this.prettyPrint && this.depth > 0)
            this.lines.push('  '.repeat(this.depth));
        this.spool(str);
    }
    stop(str) {
        this.spool(str);
        if (this.prettyPrint)
            this.lines.push('\n');
    }
    whole(str) {
        if (this.prettyPrint && this.depth > 0)
            this.lines.push('  '.repeat(this.depth));
        this.spool(str);
        if (this.prettyPrint)
            this.lines.push('\n');
    }
    attr(key, val) {
        if (typeof val == 'number') {
            val = pixelCoord(val);
        }
        this.spool(` ${key}="${val}"`);
    }
    inc() { this.depth++; }
    dec() { this.depth--; }
    toString() { return this.lines.join(''); }
}
class MetaVector {
    constructor(vec) {
        this.types = [];
        this.prims = [];
        this.width = 0;
        this.height = 0;
        this.offsetX = 0;
        this.offsetY = 0;
        this.scale = 1;
        this.density = 1;
        this.charMissing = false;
        this.lowX = null;
        this.lowY = null;
        this.highX = null;
        this.highY = null;
        const font = _FontData__WEBPACK_IMPORTED_MODULE_3__.FontData.main;
        this.charMask = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.booleanArray(false, font.UNICODE.length);
        if (vec != null) {
            if (vec.size != null) {
                this.width = vec.size[0];
                this.height = vec.size[1];
            }
            if (vec.types != null)
                this.types = vec.types;
            if (vec.prims != null)
                this.prims = vec.prims;
            for (let p of this.prims)
                if (p.primClass == PrimClass.Text) {
                    let { txt } = p;
                    for (let n = 0; n < txt.length; n++) {
                        let i = font.getIndex(txt.charAt(n));
                        if (i >= 0)
                            this.charMask[i] = true;
                        else
                            this.charMissing = true;
                    }
                }
        }
    }
    drawLine(x1, y1, x2, y2, colour, thickness) {
        if (thickness == null)
            thickness = 1;
        let typeidx = this.findOrCreateType({ primClass: PrimClass.Line, thickness, colour });
        const bump = 0.5 * thickness;
        this.updateBounds(Math.min(x1, x2) - bump, Math.min(y1, y2) - bump);
        this.updateBounds(Math.max(x1, x2) + bump, Math.max(y1, y2) + bump);
        this.prims.push({ primClass: PrimClass.Line, typeidx, x1, y1, x2, y2 });
    }
    drawRect(x, y, w, h, edgeCol, thickness, fillCol) {
        if (edgeCol == null)
            edgeCol = MetaVector.NOCOLOUR;
        if (fillCol == null)
            fillCol = MetaVector.NOCOLOUR;
        if (thickness == null)
            thickness = 1;
        let typeidx = this.findOrCreateType({ primClass: PrimClass.Rect, edgeCol, fillCol, thickness });
        const bump = 0.5 * thickness;
        this.updateBounds(x - bump, y - bump);
        this.updateBounds(x + w + bump, y + h + bump);
        this.prims.push({ primClass: PrimClass.Rect, typeidx, x, y, w, h });
    }
    drawOval(cx, cy, rw, rh, edgeCol, thickness, fillCol) {
        if (edgeCol == null)
            edgeCol = MetaVector.NOCOLOUR;
        if (fillCol == null)
            fillCol = MetaVector.NOCOLOUR;
        if (thickness == null)
            thickness = 1;
        const bump = 0.5 * thickness;
        this.updateBounds(cx - rw - bump, cy - rh - bump);
        this.updateBounds(cx + rw + bump, cy + rh + bump);
        let typeidx = this.findOrCreateType({ primClass: PrimClass.Oval, edgeCol, fillCol, thickness });
        this.prims.push({ primClass: PrimClass.Oval, typeidx, cx, cy, rw, rh });
    }
    drawPath(xpoints, ypoints, ctrlFlags, isClosed, edgeCol, thickness, fillCol, hardEdge) {
        if (edgeCol == null)
            edgeCol = MetaVector.NOCOLOUR;
        if (fillCol == null)
            fillCol = MetaVector.NOCOLOUR;
        if (thickness == null)
            thickness = 1;
        if (hardEdge == null)
            hardEdge = false;
        const bump = 0.5 * thickness;
        for (let n = 0; n < xpoints.length; n++) {
            this.updateBounds(xpoints[n] - bump, ypoints[n] - bump);
            if (bump != 0)
                this.updateBounds(xpoints[n] + bump, ypoints[n] + bump);
        }
        let typeidx = this.findOrCreateType({ primClass: PrimClass.Path, edgeCol, fillCol, thickness, hardEdge });
        this.prims.push({ primClass: PrimClass.Path, typeidx, count: xpoints.length,
            x: _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.duplicate(xpoints), y: _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.duplicate(ypoints), ctrl: ctrlFlags && [...ctrlFlags], closed: isClosed });
    }
    drawPoly(xpoints, ypoints, edgeCol, thickness, fillCol, hardEdge) {
        this.drawPath(xpoints, ypoints, null, true, edgeCol, thickness, fillCol, hardEdge);
    }
    drawText(x, y, txt, size, colour, align, direction) {
        if (align == null)
            align = TextAlign.Left | TextAlign.Baseline;
        if (direction == null)
            direction = 0;
        let cosTheta = 1, sinTheta = 0;
        if (direction != 0)
            [cosTheta, sinTheta] = [Math.cos(direction * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD), Math.sin(direction * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD)];
        const font = _FontData__WEBPACK_IMPORTED_MODULE_3__.FontData.main;
        for (let n = 0; n < txt.length; n++) {
            let i = font.getIndex(txt.charAt(n));
            if (i >= 0)
                this.charMask[i] = true;
            else
                this.charMissing = true;
        }
        let metrics = font.measureText(txt, size);
        let bx = 0, by = 0;
        let dx = 0;
        if ((align & TextAlign.Left) != 0) { }
        else if ((align & TextAlign.Right) != 0)
            dx = -metrics[0];
        else
            dx = -0.5 * metrics[0];
        if (dx != 0) {
            bx += dx * cosTheta;
            by += dx * sinTheta;
        }
        let dy = 0;
        if ((align & TextAlign.Middle) != 0)
            dy = 0.5 * metrics[1];
        else if ((align & TextAlign.Top) != 0)
            dy = metrics[1];
        else if ((align & TextAlign.Bottom) != 0)
            dy = -metrics[2];
        if (dy != 0) {
            bx -= dy * sinTheta;
            by += dy * cosTheta;
        }
        let x1 = 0, y1 = 0, x2 = 0, y2 = 0;
        let tx = 0;
        for (let n = 0; n < txt.length; n++) {
            let ch = txt.charAt(n);
            let i = font.getIndex(ch);
            if (i >= 0) {
                let outlineX = font.getOutlineX(i), outlineY = font.getOutlineY(i);
                x1 = Math.min(x1, tx + _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.min(outlineX));
                x2 = Math.max(x2, tx + _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.max(outlineX));
                y1 = Math.min(y1, -_util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.max(outlineY));
                y2 = Math.max(y2, -_util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.min(outlineY));
                tx += font.HORIZ_ADV_X[i];
                if (n < txt.length - 1)
                    tx += font.getKerning(ch, txt.charAt(n + 1));
            }
            else
                tx += font.MISSING_HORZ;
        }
        const mscale = size * font.INV_UNITS_PER_EM;
        if (direction == 0) {
            this.updateBounds(x + bx + x1 * mscale, y + by + y1 * mscale);
            this.updateBounds(x + bx + x2 * mscale, y + by + y2 * mscale);
        }
        else {
            let rx1 = x1 * mscale, ry1 = y1 * mscale;
            let rx2 = x2 * mscale, ry2 = y2 * mscale;
            this.updateBounds(x + bx + rx1 * cosTheta - ry1 * sinTheta, y + by + rx1 * sinTheta + ry1 * cosTheta);
            this.updateBounds(x + bx + rx2 * cosTheta - ry1 * sinTheta, y + by + rx2 * sinTheta + ry1 * cosTheta);
            this.updateBounds(x + bx + rx2 * cosTheta - ry2 * sinTheta, y + by + rx2 * sinTheta + ry2 * cosTheta);
            this.updateBounds(x + bx + rx1 * cosTheta - ry2 * sinTheta, y + by + rx1 * sinTheta + ry2 * cosTheta);
        }
        let typeidx = this.findOrCreateType({ primClass: PrimClass.Text, size, colour });
        this.prims.push({ primClass: PrimClass.Text, typeidx, x: x + bx, y: y + by, txt, direction });
    }
    drawTextNative(x, y, txt, fontFamily, fontSize, colour, align, opt) {
        if (!opt)
            opt = {};
        if (align == null)
            align = TextAlign.Left | TextAlign.Baseline;
        const font = _FontData__WEBPACK_IMPORTED_MODULE_3__.FontData.main;
        let metrics = font.measureTextNative(txt, fontFamily, fontSize, opt);
        if ((align & TextAlign.Left) != 0) { }
        else if ((align & TextAlign.Right) != 0)
            x -= metrics[0];
        else
            x -= 0.5 * metrics[0];
        if ((align & TextAlign.Middle) != 0)
            y += 0.5 * metrics[1];
        else if ((align & TextAlign.Top) != 0)
            y += metrics[1];
        else if ((align & TextAlign.Bottom) != 0)
            y -= metrics[2];
        this.updateBounds(x, y - metrics[1]);
        this.updateBounds(x + metrics[0], y + metrics[2]);
        let typeidx = this.findOrCreateType({ primClass: PrimClass.TextNative, family: fontFamily, size: fontSize, colour, opt });
        this.prims.push({ primClass: PrimClass.TextNative, typeidx, x, y, txt });
    }
    boundLowX() { return this.lowX; }
    boundLowY() { return this.lowY; }
    boundHighX() { return this.highX; }
    boundHighY() { return this.highY; }
    getBounds() { return new _util_Geom__WEBPACK_IMPORTED_MODULE_0__.Box(this.lowX, this.lowY, this.highX - this.lowX, this.highY - this.lowY); }
    measure() {
        this.width = Math.ceil(this.highX - this.lowX);
        this.height = Math.ceil(this.highY - this.lowY);
    }
    normalise() {
        if (this.lowX != 0 || this.lowY != 0)
            this.transformPrimitives(-this.lowX, -this.lowY, 1, 1);
        this.width = Math.ceil(this.highX - this.lowX);
        this.height = Math.ceil(this.highY - this.lowY);
    }
    setSize(width, height) { this.width = width; this.height = height; }
    transformIntoBox(box) {
        this.transformPrimitives(-this.lowX, -this.lowY, 1, 1);
        let nw = Math.ceil(this.highX - this.lowX), nh = Math.ceil(this.highY - this.lowY);
        let scale = 1;
        if (nw > box.w) {
            let mod = box.w / nw;
            nw = box.w;
            nh *= mod;
            scale *= mod;
        }
        if (nh > box.h) {
            let mod = box.h / nh;
            nh = box.h;
            nw *= mod;
            scale *= mod;
        }
        let ox = 0.5 * (box.w - nw), oy = 0.5 * (box.h - nh);
        this.transformPrimitives(box.x + ox, box.y + oy, scale, scale);
    }
    scaleExtent(maxWidth, maxHeight) {
        let w = this.highX - this.lowX, h = this.highY - this.lowY;
        if (w <= maxWidth && h <= maxHeight)
            return;
        let scale = Math.min(maxWidth / w, maxHeight / h);
        this.transformPrimitives(0, 0, scale, scale);
    }
    transformPrimitives(ox, oy, sw, sh) {
        if (ox == 0 && oy == 0 && sw == 1 && sh == 1)
            return;
        for (let a of this.prims) {
            const type = a.primClass;
            if (type == PrimClass.Line) {
                let line = a;
                line.x1 = ox + line.x1 * sw;
                line.y1 = oy + line.y1 * sh;
                line.x2 = ox + line.x2 * sw;
                line.y2 = oy + line.y2 * sh;
            }
            else if (type == PrimClass.Rect) {
                let rect = a;
                rect.x = ox + rect.x * sw;
                rect.y = oy + rect.y * sh;
                rect.w = rect.w * sw;
                rect.h = rect.h * sh;
            }
            else if (type == PrimClass.Oval) {
                let oval = a;
                oval.cx = ox + oval.cx * sw;
                oval.cy = oy + oval.cy * sh;
                oval.rw *= sw;
                oval.rh *= sh;
            }
            else if (type == PrimClass.Path) {
                let path = a;
                let sz = path.count, px = path.x, py = path.y;
                for (let n = 0; n < sz; n++) {
                    px[n] = ox + px[n] * sw;
                    py[n] = oy + py[n] * sh;
                }
            }
            else if (type == PrimClass.Text || type == PrimClass.TextNative) {
                let text = a;
                text.x = ox + text.x * sw;
                text.y = oy + text.y * sh;
            }
        }
        let swsh = 0.5 * (sw + sh);
        if (swsh != 1)
            for (let t of this.types) {
                const type = t.primClass;
                if (type == PrimClass.Line)
                    t.thickness *= swsh;
                else if (type == PrimClass.Rect)
                    t.thickness *= swsh;
                else if (type == PrimClass.Oval)
                    t.thickness *= swsh;
                else if (type == PrimClass.Path)
                    t.thickness *= swsh;
                else if (type == PrimClass.Text)
                    t.size *= swsh;
                else if (type == PrimClass.TextNative)
                    t.size *= swsh;
            }
        this.lowX = ox + this.lowX * sw;
        this.lowY = oy + this.lowY * sh;
        this.highX = ox + this.highX * sw;
        this.highY = oy + this.highY * sh;
    }
    renderInto(parent) {
        let canvas = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.newElement)(parent, 'canvas', { 'width': this.width, 'height': this.height });
        this.renderCanvas(canvas);
        return canvas;
    }
    renderCanvas(canvas, clearFirst) {
        let ctx = canvas.getContext('2d');
        if (clearFirst)
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        let w = this.width, h = this.height;
        this.density = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.pixelDensity)();
        canvas.style.width = w + 'px';
        canvas.style.height = h + 'px';
        canvas.width = w * this.density;
        canvas.height = h * this.density;
        this.renderContext(ctx);
    }
    renderContext(ctx) {
        ctx.save();
        ctx.scale(this.density, this.density);
        this.typeObj = [];
        for (let n = 0; n < this.types.length; n++) {
            let t = this.types[n];
            if (t.primClass == PrimClass.Line)
                this.typeObj[n] = this.setupTypeLine(t);
            else if (t.primClass == PrimClass.Rect)
                this.typeObj[n] = this.setupTypeRect(t);
            else if (t.primClass == PrimClass.Oval)
                this.typeObj[n] = this.setupTypeOval(t);
            else if (t.primClass == PrimClass.Path)
                this.typeObj[n] = this.setupTypePath(t);
            else if (t.primClass == PrimClass.Text)
                this.typeObj[n] = this.setupTypeText(t);
            else if (t.primClass == PrimClass.TextNative)
                this.typeObj[n] = this.setupTypeTextNative(t);
        }
        for (let n = 0; n < this.prims.length; n++) {
            let p = this.prims[n];
            if (p.primClass == PrimClass.Line)
                this.renderLine(ctx, p);
            else if (p.primClass == PrimClass.Rect)
                this.renderRect(ctx, p);
            else if (p.primClass == PrimClass.Oval)
                this.renderOval(ctx, p);
            else if (p.primClass == PrimClass.Path)
                this.renderPath(ctx, p);
            else if (p.primClass == PrimClass.Text)
                this.renderText(ctx, p);
            else if (p.primClass == PrimClass.TextNative)
                this.renderTextNative(ctx, p);
        }
        ctx.restore();
    }
    createSVG(prettyPrint = false, withXlink = false) {
        let svg = new SpoolSVG(prettyPrint);
        svg.start('<svg xmlns="http://www.w3.org/2000/svg"');
        if (withXlink)
            svg.attr('xmlns:xlink', 'http://www.w3.org/1999/xlink');
        svg.attr('width', this.width);
        svg.attr('height', this.height);
        svg.attr('viewBox', `0 0 ${this.width} ${this.height}`);
        svg.stop('>');
        svg.inc();
        this.renderSVG(svg, withXlink);
        svg.dec();
        svg.whole('</svg>');
        return svg.toString();
    }
    renderSVG(svg, withXlink = false) {
        this.typeObj = [];
        const font = _FontData__WEBPACK_IMPORTED_MODULE_3__.FontData.main;
        svg.whole('<defs>');
        svg.inc();
        if (this.charMissing) {
            svg.start('<path');
            svg.attr('id', 'missing');
            svg.attr('d', font.MISSING_DATA);
            svg.attr('edge', 'none');
            svg.stop('/>');
        }
        for (let n = 0; n < font.UNICODE.length; n++)
            if (this.charMask[n]) {
                svg.start('<path');
                svg.attr('id', 'char' + n);
                svg.attr('d', font.GLYPH_DATA[n]);
                svg.attr('edge', 'none');
                svg.stop('/>');
            }
        svg.dec();
        svg.whole('</defs>');
        for (let n = 0; n < this.types.length; n++) {
            let t = this.types[n];
            if (t.primClass == PrimClass.Line)
                this.typeObj[n] = this.setupTypeLine(t);
            else if (t.primClass == PrimClass.Rect)
                this.typeObj[n] = this.setupTypeRect(t);
            else if (t.primClass == PrimClass.Oval)
                this.typeObj[n] = this.setupTypeOval(t);
            else if (t.primClass == PrimClass.Path)
                this.typeObj[n] = this.setupTypePath(t);
            else if (t.primClass == PrimClass.Text)
                this.typeObj[n] = this.setupTypeText(t);
            else if (t.primClass == PrimClass.TextNative)
                this.typeObj[n] = this.setupTypeTextNative(t);
        }
        for (let n = 0; n < this.prims.length;) {
            let p = this.prims[n], num = 1;
            if (p.primClass != PrimClass.Path && p.primClass != PrimClass.Text && p.primClass != PrimClass.TextNative) {
                for (; n + num < this.prims.length; num++)
                    if (this.prims[n + num].primClass != p.primClass || this.prims[n + num].typeidx != p.typeidx)
                        break;
            }
            if (p.primClass == PrimClass.Line) {
                if (num == 1)
                    this.svgLine1(svg, p);
                else
                    this.svgLineN(svg, this.prims.slice(n, n + num));
            }
            else if (p.primClass == PrimClass.Rect) {
                if (num == 1)
                    this.svgRect1(svg, p);
                else
                    this.svgRectN(svg, this.prims.slice(n, n + num));
            }
            else if (p.primClass == PrimClass.Oval) {
                if (num == 1)
                    this.svgOval1(svg, p);
                else
                    this.svgOvalN(svg, this.prims.slice(n, n + num));
            }
            else if (p.primClass == PrimClass.Path)
                this.svgPath(svg, p);
            else if (p.primClass == PrimClass.Text)
                this.svgText(svg, p, withXlink);
            else if (p.primClass == PrimClass.TextNative)
                this.svgTextNative(svg, p);
            n += num;
        }
    }
    spool(into) {
        for (let p of this.prims) {
            if (p.primClass == PrimClass.Line) {
                let { typeidx, x1, y1, x2, y2 } = p;
                let { thickness, colour } = this.types[typeidx];
                into.drawLine(x1, y1, x2, y2, colour, thickness);
            }
            else if (p.primClass == PrimClass.Rect) {
                let { typeidx, x, y, w, h } = p;
                let { edgeCol, fillCol, thickness } = this.types[typeidx];
                into.drawRect(x, y, w, h, edgeCol, thickness, fillCol);
            }
            else if (p.primClass == PrimClass.Oval) {
                let { typeidx, cx, cy, rw, rh } = p;
                let { edgeCol, fillCol, thickness } = this.types[typeidx];
                into.drawOval(cx, cy, rw, rh, edgeCol, thickness, fillCol);
            }
            else if (p.primClass == PrimClass.Path) {
                let { typeidx, count, x, y, ctrl, closed } = p;
                let { edgeCol, fillCol, thickness, hardEdge } = this.types[typeidx];
                into.drawPath(x, y, ctrl, closed, edgeCol, thickness, fillCol, hardEdge);
            }
            else if (p.primClass == PrimClass.Text) {
                let { typeidx, x, y, txt, direction } = p;
                let { size, colour } = this.types[typeidx];
                into.drawText(x, y, txt, size, colour, null, direction);
            }
            else if (p.primClass == PrimClass.TextNative) {
                let { typeidx, x, y, txt } = p;
                let { family, size, colour } = this.types[typeidx];
                into.drawTextNative(x, y, txt, family, size, colour);
            }
        }
    }
    setupTypeLine(t) {
        let thickness = t.thickness * this.scale;
        let colour = t.colour;
        return { primClass: t.primClass, thickness, colour };
    }
    setupTypeRect(t) {
        let edgeCol = t.edgeCol;
        let fillCol = t.fillCol;
        let thickness = t.thickness * this.scale;
        return { primClass: t.primClass, edgeCol, fillCol, thickness };
    }
    setupTypeOval(t) {
        let edgeCol = t.edgeCol;
        let fillCol = t.fillCol;
        let thickness = t.thickness * this.scale;
        return { primClass: t.primClass, edgeCol, fillCol, thickness };
    }
    setupTypePath(t) {
        let edgeCol = t.edgeCol;
        let fillCol = t.fillCol;
        let thickness = t.thickness * this.scale;
        let hardEdge = t.hardEdge;
        return { primClass: t.primClass, edgeCol, fillCol, thickness, hardEdge };
    }
    setupTypeText(t) {
        let size = t.size * this.scale;
        let colour = t.colour;
        return { primClass: t.primClass, colour, size };
    }
    setupTypeTextNative(t) {
        let family = t.family;
        let size = t.size * this.scale;
        let colour = t.colour;
        let opt = t.opt;
        return { primClass: t.primClass, colour, family, size, opt };
    }
    renderLine(ctx, line) {
        let { x1, y1, x2, y2 } = line;
        let { colour, thickness } = this.typeObj[line.typeidx];
        x1 = this.offsetX + this.scale * x1;
        y1 = this.offsetY + this.scale * y1;
        x2 = this.offsetX + this.scale * x2;
        y2 = this.offsetY + this.scale * y2;
        if (colour != null) {
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.strokeStyle = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourCanvas)(colour);
            ctx.lineWidth = thickness;
            ctx.lineCap = 'round';
            ctx.stroke();
        }
    }
    renderRect(ctx, rect) {
        let { x, y, w, h } = rect;
        let { edgeCol, fillCol, thickness } = this.typeObj[rect.typeidx];
        x = this.offsetX + this.scale * x;
        y = this.offsetY + this.scale * y;
        w *= this.scale;
        h *= this.scale;
        if (fillCol != MetaVector.NOCOLOUR) {
            ctx.fillStyle = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourCanvas)(fillCol);
            ctx.fillRect(x, y, w, h);
        }
        if (edgeCol != MetaVector.NOCOLOUR) {
            ctx.strokeStyle = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourCanvas)(edgeCol);
            ctx.lineWidth = thickness;
            ctx.lineCap = 'square';
            ctx.strokeRect(x, y, w, h);
        }
    }
    renderOval(ctx, oval) {
        let { cx, cy, rw, rh } = oval;
        let { edgeCol, fillCol, thickness } = this.typeObj[oval.typeidx];
        cx = this.offsetX + this.scale * cx;
        cy = this.offsetY + this.scale * cy;
        rw *= this.scale;
        rh *= this.scale;
        if (fillCol != MetaVector.NOCOLOUR) {
            ctx.fillStyle = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourCanvas)(fillCol);
            ctx.beginPath();
            ctx.ellipse(cx, cy, rw, rh, 0, 0, 2 * Math.PI, true);
            ctx.fill();
        }
        if (edgeCol != MetaVector.NOCOLOUR) {
            ctx.strokeStyle = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourCanvas)(edgeCol);
            ctx.lineWidth = thickness;
            ctx.beginPath();
            ctx.ellipse(cx, cy, rw, rh, 0, 0, 2 * Math.PI, true);
            ctx.stroke();
        }
    }
    renderPath(ctx, path) {
        let { count, x, y, ctrl, closed } = path;
        let { edgeCol, fillCol, thickness, hardEdge } = this.typeObj[path.typeidx];
        x = [...x];
        y = [...y];
        for (let n = 0; n < count; n++) {
            x[n] = this.offsetX + this.scale * x[n];
            y[n] = this.offsetY + this.scale * y[n];
        }
        for (let layer = 1; layer <= 2; layer++) {
            if (layer == 1 && fillCol == MetaVector.NOCOLOUR)
                continue;
            if (layer == 2 && edgeCol == MetaVector.NOCOLOUR)
                continue;
            ctx.beginPath();
            ctx.moveTo(x[0], y[0]);
            for (let i = 1; i < count; i++) {
                if (!ctrl || !ctrl[i]) {
                    ctx.lineTo(x[i], y[i]);
                }
                else if (i < count - 1 && !ctrl[i + 1]) {
                    ctx.quadraticCurveTo(x[i], y[i], x[i + 1], y[i + 1]);
                    i++;
                }
                else if (i < count - 1 && !ctrl[i + 2]) {
                    ctx.bezierCurveTo(x[i], y[i], x[i + 1], y[i + 1], x[i + 2], y[i + 2]);
                    i += 2;
                }
            }
            if (closed)
                ctx.closePath();
            if (layer == 1) {
                ctx.fillStyle = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourCanvas)(fillCol);
                ctx.fill();
            }
            else {
                ctx.strokeStyle = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourCanvas)(edgeCol);
                ctx.lineWidth = thickness;
                ctx.lineCap = hardEdge ? 'square' : 'round';
                ctx.lineJoin = hardEdge ? 'miter' : 'round';
                ctx.stroke();
            }
        }
    }
    renderText(ctx, text) {
        let { x, y, txt, direction } = text;
        let { size, colour } = this.typeObj[text.typeidx];
        let fill = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourCanvas)(colour);
        x = this.offsetX + this.scale * x;
        y = this.offsetY + this.scale * y;
        let font = _FontData__WEBPACK_IMPORTED_MODULE_3__.FontData.main;
        let scale = size * this.scale / font.UNITS_PER_EM;
        let dx = 0;
        for (let n = 0; n < txt.length; n++) {
            let ch = txt.charAt(n);
            let i = font.getIndex(ch);
            let path = null;
            if (i < 0) {
                dx += font.MISSING_HORZ;
                path = font.getMissingPath();
            }
            else
                path = font.getGlyphPath(i);
            if (path) {
                ctx.save();
                let theta = direction != 0 ? direction * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD : 0;
                if (theta == 0)
                    ctx.translate(x + dx * scale, y);
                else
                    ctx.translate(x + Math.cos(theta) * dx * scale, y + Math.sin(theta) * dx * scale);
                ctx.scale(scale, -scale);
                if (theta != 0)
                    ctx.rotate(-theta);
                ctx.fillStyle = fill;
                ctx.fill(path);
                ctx.restore();
            }
            dx += font.HORIZ_ADV_X[i];
            if (n < txt.length - 1)
                dx += font.getKerning(ch, txt.charAt(n + 1));
        }
    }
    renderTextNative(ctx, text) {
        let { x, y, txt } = text;
        let { size, colour, family, opt } = this.typeObj[text.typeidx];
        let fill = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourCanvas)(colour);
        x = this.offsetX + this.scale * x;
        y = this.offsetY + this.scale * y;
        ctx.save();
        let pfx = '';
        if (opt.bold)
            pfx += 'bold ';
        if (opt.italic)
            pfx += 'italic ';
        ctx.font = pfx + (size * this.scale) + 'px ' + family;
        ctx.fillStyle = fill;
        ctx.fillText(txt, x, y);
        ctx.restore();
    }
    svgLine1(svg, line) {
        let { x1, y1, x2, y2 } = line;
        let { colour, thickness } = this.typeObj[line.typeidx];
        x1 = this.offsetX + this.scale * x1;
        y1 = this.offsetY + this.scale * y1;
        x2 = this.offsetX + this.scale * x2;
        y2 = this.offsetY + this.scale * y2;
        if (colour != MetaVector.NOCOLOUR) {
            svg.start('<line');
            svg.attr('x1', x1);
            svg.attr('y1', y1);
            svg.attr('x2', x2);
            svg.attr('y2', y2);
            this.defineSVGStroke(svg, colour);
            svg.attr('stroke-width', thickness);
            svg.attr('stroke-linecap', 'round');
            svg.stop('/>');
        }
    }
    svgLineN(svg, lines) {
        let { colour, thickness } = this.typeObj[lines[0].typeidx];
        svg.start('<g');
        this.defineSVGStroke(svg, colour);
        svg.attr('stroke-width', thickness);
        svg.attr('stroke-linecap', 'round');
        svg.stop('>');
        svg.inc();
        for (let line of lines) {
            let { x1, y1, x2, y2 } = line;
            x1 = this.offsetX + this.scale * x1;
            y1 = this.offsetY + this.scale * y1;
            x2 = this.offsetX + this.scale * x2;
            y2 = this.offsetY + this.scale * y2;
            svg.start('<line');
            svg.attr('x1', x1);
            svg.attr('y1', y1);
            svg.attr('x2', x2);
            svg.attr('y2', y2);
            svg.stop('/>');
        }
        svg.dec();
        svg.whole('</g>');
    }
    svgRect1(svg, rect) {
        let { x, y, w, h } = rect;
        let { edgeCol, fillCol, thickness } = this.typeObj[rect.typeidx];
        x = this.offsetX + this.scale * x;
        y = this.offsetY + this.scale * y;
        w *= this.scale;
        h *= this.scale;
        svg.start('<rect');
        svg.attr('x', x);
        svg.attr('y', y);
        svg.attr('width', w);
        svg.attr('height', h);
        this.defineSVGStroke(svg, edgeCol);
        if (edgeCol != MetaVector.NOCOLOUR) {
            svg.attr('stroke-width', thickness);
            svg.attr('stroke-linecap', 'square');
        }
        this.defineSVGFill(svg, fillCol);
        svg.stop('/>');
    }
    svgRectN(svg, rects) {
        let { edgeCol, fillCol, thickness } = this.typeObj[rects[0].typeidx];
        svg.start('<g');
        this.defineSVGStroke(svg, edgeCol);
        if (edgeCol != MetaVector.NOCOLOUR) {
            svg.attr('stroke-width', thickness);
            svg.attr('stroke-linecap', 'square');
        }
        this.defineSVGFill(svg, fillCol);
        svg.stop('>');
        svg.inc();
        for (let rect of rects) {
            let { x, y, w, h } = rect;
            x = this.offsetX + this.scale * x;
            y = this.offsetY + this.scale * y;
            w *= this.scale;
            h *= this.scale;
            svg.start('<rect');
            svg.attr('x', x);
            svg.attr('y', y);
            svg.attr('width', w);
            svg.attr('height', h);
            svg.stop('/>');
        }
        svg.dec();
        svg.whole('</g>');
    }
    svgOval1(svg, oval) {
        let { cx, cy, rw, rh } = oval;
        let { edgeCol, fillCol, thickness } = this.typeObj[oval.typeidx];
        cx = this.offsetX + this.scale * cx;
        cy = this.offsetY + this.scale * cy;
        rw *= this.scale;
        rh *= this.scale;
        svg.start('<ellipse');
        svg.attr('cx', cx);
        svg.attr('cy', cy);
        svg.attr('rx', rw);
        svg.attr('ry', rh);
        this.defineSVGStroke(svg, edgeCol);
        if (edgeCol != MetaVector.NOCOLOUR) {
            svg.attr('stroke-width', thickness);
        }
        this.defineSVGFill(svg, fillCol);
        svg.stop('/>');
    }
    svgOvalN(svg, ovals) {
        let { edgeCol, fillCol, thickness } = this.typeObj[ovals[0].typeidx];
        svg.start('<g');
        this.defineSVGStroke(svg, edgeCol);
        if (edgeCol != MetaVector.NOCOLOUR) {
            svg.attr('stroke-width', thickness);
        }
        this.defineSVGFill(svg, fillCol);
        svg.stop('>');
        svg.inc();
        for (let oval of ovals) {
            let { cx, cy, rw, rh } = oval;
            cx = this.offsetX + this.scale * cx;
            cy = this.offsetY + this.scale * cy;
            rw *= this.scale;
            rh *= this.scale;
            svg.start('<ellipse');
            svg.attr('cx', cx);
            svg.attr('cy', cy);
            svg.attr('rx', rw);
            svg.attr('ry', rh);
            svg.stop('/>');
        }
        svg.dec();
        svg.whole('</g>');
    }
    svgPath(svg, path) {
        let { count, x, y, ctrl, closed } = path;
        let { edgeCol, fillCol, thickness, hardEdge } = this.typeObj[path.typeidx];
        x = [...x];
        y = [...y];
        for (let n = 0; n < count; n++) {
            x[n] = this.offsetX + this.scale * x[n];
            y[n] = this.offsetY + this.scale * y[n];
        }
        let shape = 'M ' + pixelCoord(x[0]) + ' ' + pixelCoord(y[0]);
        let n = 1;
        while (n < count) {
            if (!ctrl || !ctrl[n]) {
                shape += ' L ' + pixelCoord(x[n]) + ' ' + pixelCoord(y[n]);
                n++;
            }
            else if (ctrl[n] && n < count - 1 && !ctrl[n + 1]) {
                shape += ' Q ' + pixelCoord(x[n]) + ' ' + pixelCoord(y[n]) + ' '
                    + pixelCoord(x[n + 1]) + ' ' + pixelCoord(y[n + 1]);
                n += 2;
            }
            else if (ctrl[n] && n < count - 2 && ctrl[n + 1] && !ctrl[n + 2]) {
                shape += ' C ' + pixelCoord(x[n]) + ' ' + pixelCoord(y[n]) + ' '
                    + pixelCoord(x[n + 1]) + ' ' + pixelCoord(y[n + 1]) + ' '
                    + pixelCoord(x[n + 2]) + ' ' + pixelCoord(y[n + 2]);
                n += 3;
            }
            else
                n++;
        }
        if (closed)
            shape += ' Z';
        svg.start('<path');
        svg.attr('d', shape);
        this.defineSVGStroke(svg, edgeCol);
        if (edgeCol != MetaVector.NOCOLOUR) {
            svg.attr('stroke-width', thickness);
            svg.attr('stroke-linejoin', hardEdge ? 'miter' : 'round');
            svg.attr('stroke-linecap', hardEdge ? 'square' : 'round');
        }
        this.defineSVGFill(svg, fillCol);
        svg.stop('/>');
    }
    svgText(svg, text, withXlink = true) {
        let { x, y, txt, direction } = text;
        let { size, colour } = this.typeObj[text.typeidx];
        x = this.offsetX + this.scale * x;
        y = this.offsetY + this.scale * y;
        let font = _FontData__WEBPACK_IMPORTED_MODULE_3__.FontData.main;
        let scale = size * this.scale / font.UNITS_PER_EM;
        if (direction != 0) {
            svg.start('<g');
            svg.attr('transform', `rotate(${direction},${pixelCoord(x)},${pixelCoord(y)})`);
            svg.stop('>');
            svg.inc();
        }
        svg.start('<g');
        svg.attr('transform', `translate(${pixelCoord(x)},${pixelCoord(y)})`);
        this.defineSVGFill(svg, colour);
        svg.stop('>');
        svg.inc();
        svg.start('<g');
        svg.attr('transform', `scale(${pixelCoord(scale)},${pixelCoord(-scale)})`);
        svg.stop('>');
        svg.inc();
        let dx = 0;
        for (let n = 0; n < txt.length; n++) {
            let ch = txt.charAt(n);
            let i = font.getIndex(ch);
            svg.start('<use');
            let ref = i < 0 ? '#missing' : '#char' + i;
            if (withXlink)
                svg.attr('xlink:href', ref);
            else
                svg.attr('href', ref);
            svg.attr('x', dx);
            svg.stop('/>');
            if (i >= 0) {
                dx += font.HORIZ_ADV_X[i];
                if (n < txt.length - 1)
                    dx += font.getKerning(ch, txt.charAt(n + 1));
            }
            else
                dx += font.MISSING_HORZ;
        }
        svg.dec();
        svg.whole('</g>');
        svg.dec();
        svg.whole('</g>');
        if (direction != 0) {
            svg.dec();
            svg.whole('</g>');
        }
    }
    svgTextNative(svg, text) {
        let { x, y, txt } = text;
        let { size, colour, family, opt } = this.typeObj[text.typeidx];
        x = this.offsetX + this.scale * x;
        y = this.offsetY + this.scale * y;
        let fill = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourCanvas)(colour);
        let style = `fill: ${fill}; font-family: ${family}; font-size: ${size * this.scale};`;
        if (opt.bold)
            style += ' font-weight: bold;';
        if (opt.italic)
            style += ' font-style: italic;';
        const escapeXML = (str) => {
            return str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
        };
        svg.start('<text');
        svg.attr('xml:space', 'preserve');
        svg.attr('x', x);
        svg.attr('y', y);
        svg.attr('style', style);
        svg.stop('>' + escapeXML(txt) + '</text>');
    }
    defineSVGStroke(svg, col) {
        if (col == MetaVector.NOCOLOUR) {
            svg.attr('stroke-opacity', '0');
            return;
        }
        svg.attr('stroke', (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourCode)(col));
        let alpha = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourAlpha)(col);
        if (alpha != 1)
            svg.attr('stroke-opacity', alpha);
    }
    defineSVGFill(svg, col) {
        if (col == MetaVector.NOCOLOUR) {
            svg.attr('fill-opacity', '0');
            return;
        }
        svg.attr('fill', (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourCode)(col));
        let alpha = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourAlpha)(col);
        if (alpha != 1)
            svg.attr('fill-opacity', alpha);
    }
    findOrCreateType(typeDef) {
        for (let n = 0; n < this.types.length; n++) {
            if (this.types[n].primClass != typeDef.primClass)
                continue;
            let keys = Object.keys(typeDef);
            let match = keys.every((k) => typeDef[k] == this.types[n][k]);
            if (match)
                return n;
        }
        this.types.push(typeDef);
        return this.types.length - 1;
    }
    updateBounds(x, y) {
        if (this.lowX == null) {
            this.lowX = x;
            this.lowY = y;
            this.highX = x;
            this.highY = y;
            return;
        }
        this.lowX = Math.min(this.lowX, x);
        this.lowY = Math.min(this.lowY, y);
        this.highX = Math.max(this.highX, x);
        this.highY = Math.max(this.highY, y);
    }
}
MetaVector.NOCOLOUR = -1;


/***/ }),

/***/ "./src/gfx/Rendering.ts":
/*!******************************!*\
  !*** ./src/gfx/Rendering.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RenderEffects: () => (/* binding */ RenderEffects),
/* harmony export */   RenderMnemonicType: () => (/* binding */ RenderMnemonicType),
/* harmony export */   RenderMnemonics: () => (/* binding */ RenderMnemonics),
/* harmony export */   RenderPolicy: () => (/* binding */ RenderPolicy)
/* harmony export */ });
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");

class RenderPolicy {
    constructor(data) {
        if (!data) {
            data =
                {
                    name: 'default',
                    pointScale: 20,
                    resolutionDPI: 100,
                    fontSize: 0.65,
                    lineSize: 0.075,
                    bondSep: 0.2,
                    defaultPadding: 0.2,
                    foreground: 0x000000,
                    background: 0xFFFFFF,
                    atomCols: new Array(112)
                };
            for (let n = 0; n <= 111; n++)
                data.atomCols[n] = 0x000000;
            this.data = data;
        }
        else {
            this.data = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.clone)(data);
        }
    }
    clone() { return new RenderPolicy(this.data); }
    static defaultBlackOnWhite(pixPerAng) {
        let policy = new RenderPolicy();
        if (pixPerAng)
            policy.data.pointScale = pixPerAng;
        return policy;
    }
    static defaultWhiteOnBlack(pixPerAng) {
        let policy = new RenderPolicy();
        if (pixPerAng)
            policy.data.pointScale = pixPerAng;
        policy.data.foreground = 0xFFFFFF;
        policy.data.background = 0x000000;
        for (let n = 0; n <= 111; n++)
            policy.data.atomCols[n] = 0xFFFFFF;
        return policy;
    }
    static defaultColourOnWhite(pixPerAng) {
        let policy = RenderPolicy.defaultBlackOnWhite(pixPerAng);
        policy.data.atomCols[0] = 0x404040;
        policy.data.atomCols[1] = 0x808080;
        policy.data.atomCols[6] = 0x000000;
        policy.data.atomCols[7] = 0x0000FF;
        policy.data.atomCols[8] = 0xFF0000;
        policy.data.atomCols[9] = 0xFF8080;
        policy.data.atomCols[15] = 0xFF8000;
        policy.data.atomCols[16] = 0x808000;
        policy.data.atomCols[17] = 0x00C000;
        policy.data.atomCols[35] = 0xC04000;
        return policy;
    }
    static defaultColourOnBlack(pixPerAng) {
        let policy = RenderPolicy.defaultWhiteOnBlack(pixPerAng);
        policy.data.atomCols[0] = 0xA0A0A0;
        policy.data.atomCols[1] = 0x808080;
        policy.data.atomCols[6] = 0xFFFFFF;
        policy.data.atomCols[7] = 0x4040FF;
        policy.data.atomCols[8] = 0xFF4040;
        policy.data.atomCols[9] = 0xFF8080;
        policy.data.atomCols[15] = 0xFF8000;
        policy.data.atomCols[16] = 0xFFFF00;
        policy.data.atomCols[17] = 0x40FF40;
        policy.data.atomCols[35] = 0xFF8040;
        return policy;
    }
    static defaultPrintedPublication() {
        let policy = RenderPolicy.defaultBlackOnWhite(9.6);
        policy.data.resolutionDPI = 600;
        policy.data.fontSize = 0.80;
        policy.data.bondSep = 0.27;
        policy.data.lineSize = 0.0625;
        return policy;
    }
}
class RenderEffects {
    constructor() {
        this.colAtom = {};
        this.colBond = {};
        this.dottedRectOutline = {};
        this.dottedBondCross = {};
        this.hideAtoms = new Set();
        this.hideBonds = new Set();
        this.atomFrameDotSz = [];
        this.atomFrameCol = [];
        this.atomCircleSz = [];
        this.atomCircleCol = [];
        this.atomDecoText = [];
        this.atomDecoCol = [];
        this.atomDecoSize = [];
        this.bondDecoText = [];
        this.bondDecoCol = [];
        this.bondDecoSize = [];
        this.overlapAtoms = [];
    }
}
var RenderMnemonicType;
(function (RenderMnemonicType) {
    RenderMnemonicType["Atom"] = "A";
    RenderMnemonicType["Bond"] = "B";
    RenderMnemonicType["Artifact"] = "R";
    RenderMnemonicType["Effect"] = "E";
})(RenderMnemonicType || (RenderMnemonicType = {}));
class RenderMnemonics {
    constructor(encoded) {
        this.items = [];
        let lines = (encoded || '').split('&');
        for (let line of lines) {
            let bits = line.split('|');
            if (bits.length != 3)
                continue;
            let item = {
                type: bits[0],
                details: bits[1],
                coords: bits[2].split(',').map((str) => parseFloat(str)),
            };
            this.items.push(item);
        }
    }
    append(type, details, coords) {
        for (let n = details.length - 1; n >= 0; n--)
            if (details[n] == '|' || details[n] == '&')
                details = details.substring(0, n) + details.substring(n + 1);
        this.items.push({ type, details, coords });
    }
    serialise() {
        var _a;
        let lines = [];
        for (let item of this.items) {
            let coords = ((_a = item.coords) !== null && _a !== void 0 ? _a : []).map((coord) => coord.toFixed(1)).join(',');
            lines.push(`${item.type}|${item.details}|${coords}`);
        }
        return lines.join('&');
    }
    packWithCoords() { return this.serialise(); }
    packWithoutCoords() {
        return this.items.map((item) => `${item.type}|${item.details}`).join('&');
    }
}


/***/ }),

/***/ "./src/io/DataSheetStream.ts":
/*!***********************************!*\
  !*** ./src/io/DataSheetStream.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataSheetStream: () => (/* binding */ DataSheetStream)
/* harmony export */ });
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_XML__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/XML */ "./src/util/XML.ts");
/* harmony import */ var _ds_DataSheet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ds/DataSheet */ "./src/ds/DataSheet.ts");
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _MoleculeStream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MoleculeStream */ "./src/io/MoleculeStream.ts");





class DataSheetStream {
    static readXML(strXML) {
        let xmlDoc;
        if (_util_XML__WEBPACK_IMPORTED_MODULE_1__.XML.customParser)
            xmlDoc = new _util_XML__WEBPACK_IMPORTED_MODULE_1__.XML.customParser().parseFromString(strXML, 'application/xml');
        else
            xmlDoc = new DOMParser().parseFromString(strXML, 'application/xml');
        if (xmlDoc == null)
            return null;
        let root = xmlDoc.documentElement;
        if (root == null)
            return null;
        let ds = new _ds_DataSheet__WEBPACK_IMPORTED_MODULE_2__.DataSheet();
        let summary = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.findNode)(root, 'Summary');
        if (summary == null)
            return null;
        ds.title = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.nodeText)((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.findNode)(summary, 'Title'));
        ds.description = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.nodeText)((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.findNode)(summary, 'Description'));
        let extRoot = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.findNode)(root, 'Extension');
        if (extRoot != null) {
            let extList = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.findNodes)(extRoot, 'Ext');
            for (let n = 0; n < extList.length; n++) {
                let ext = extList[n];
                ds.appendExtension(ext.getAttribute('name'), ext.getAttribute('type'), (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.nodeText)(ext));
            }
        }
        let header = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.findNode)(root, 'Header');
        let numCols = parseInt(header.getAttribute('ncols'));
        let colList = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.findNodes)(header, 'Column');
        if (colList.length != numCols)
            return null;
        for (let n = 0; n < numCols; n++) {
            let col = colList[n];
            let id = parseInt(col.getAttribute('id'));
            if (id != n + 1)
                return null;
            ds.appendColumn(col.getAttribute('name'), col.getAttribute('type'), (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.nodeText)(col));
        }
        let rowidx = 0;
        for (let row of (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.findNodes)((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.findNode)(root, 'Content'), 'Row')) {
            if (parseInt(row.getAttribute('id')) != rowidx + 1)
                return null;
            ds.appendRow();
            for (let col of (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.findNodes)(row, 'Cell')) {
                let colidx = parseInt(col.getAttribute('id')) - 1;
                let ct = ds.colType(colidx), val = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.nodeText)(col);
                if (val == '') { }
                else if (ct == "molecule")
                    ds.setObject(rowidx, colidx, val);
                else if (ct == "string")
                    ds.setString(rowidx, colidx, val);
                else if (ct == "real")
                    ds.setReal(rowidx, colidx, parseFloat(val));
                else if (ct == "integer")
                    ds.setInteger(rowidx, colidx, parseInt(val));
                else if (ct == "boolean")
                    ds.setBoolean(rowidx, colidx, val == 'true' ? true : val == 'false' ? false : null);
                else if (ct == "extend")
                    ds.setExtend(rowidx, colidx, val);
                col = col.nextElementSibling;
                colidx++;
            }
            row = row.nextElementSibling;
            rowidx++;
        }
        return ds;
    }
    static readJSON(json) {
        if (!json.colData || !json.rowData)
            throw 'Not a JSON-formatted datasheet.';
        return new _ds_DataSheet__WEBPACK_IMPORTED_MODULE_2__.DataSheet((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.deepClone)(json));
    }
    static writeXML(ds) {
        let xml;
        if (_util_XML__WEBPACK_IMPORTED_MODULE_1__.XML.customParser)
            xml = new _util_XML__WEBPACK_IMPORTED_MODULE_1__.XML.customParser().parseFromString('<DataSheet/>', 'application/xml');
        else
            xml = new DOMParser().parseFromString('<DataSheet/>', 'application/xml');
        let summary = xml.createElement('Summary');
        xml.documentElement.appendChild(summary);
        let title = xml.createElement('Title'), descr = xml.createElement('Description');
        summary.appendChild(title);
        title.appendChild(xml.createTextNode(ds.title));
        summary.appendChild(descr);
        descr.appendChild(xml.createCDATASection(ds.description));
        let extension = xml.createElement('Extension');
        xml.documentElement.appendChild(extension);
        for (let n = 0; n < ds.numExtensions; n++) {
            let ext = xml.createElement('Ext');
            extension.appendChild(ext);
            ext.setAttribute('name', ds.getExtName(n));
            ext.setAttribute('type', ds.getExtType(n));
            ext.appendChild(xml.createCDATASection(ds.getExtData(n)));
        }
        let header = xml.createElement('Header');
        xml.documentElement.appendChild(header);
        header.setAttribute('nrows', ds.numRows.toString());
        header.setAttribute('ncols', ds.numCols.toString());
        for (let n = 0; n < ds.numCols; n++) {
            let column = xml.createElement('Column');
            header.appendChild(column);
            column.setAttribute('id', (n + 1).toString());
            column.setAttribute('name', ds.colName(n));
            column.setAttribute('type', ds.colType(n));
            column.appendChild(xml.createTextNode(ds.colDescr(n)));
        }
        let content = xml.createElement('Content');
        xml.documentElement.appendChild(content);
        for (let r = 0; r < ds.numRows; r++) {
            let row = xml.createElement('Row');
            row.setAttribute('id', (r + 1).toString());
            content.appendChild(row);
            for (let c = 0; c < ds.numCols; c++) {
                let cell = xml.createElement('Cell');
                cell.setAttribute('id', (c + 1).toString());
                row.appendChild(cell);
                let ct = ds.colType(c);
                let txtNode = null;
                if (ds.isNull(r, c)) { }
                else if (ct == "molecule") {
                    let obj = ds.getObject(r, c);
                    if (obj instanceof _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule)
                        obj = _MoleculeStream__WEBPACK_IMPORTED_MODULE_4__.MoleculeStream.writeNative(obj);
                    txtNode = xml.createCDATASection(obj);
                }
                else if (ct == "string")
                    txtNode = xml.createCDATASection(ds.getString(r, c));
                else if (ct == "real")
                    txtNode = xml.createTextNode(ds.getReal(r, c).toString());
                else if (ct == "integer")
                    txtNode = xml.createTextNode(ds.getInteger(r, c).toString());
                else if (ct == "boolean")
                    txtNode = xml.createTextNode(ds.getBoolean(r, c).toString());
                else if (ct == "extend")
                    txtNode = xml.createCDATASection(ds.getExtend(r, c));
                if (txtNode != null)
                    cell.appendChild(txtNode);
            }
        }
        if (_util_XML__WEBPACK_IMPORTED_MODULE_1__.XML.customSerial)
            return new _util_XML__WEBPACK_IMPORTED_MODULE_1__.XML.customSerial().serializeToString(xml.documentElement);
        else
            return new XMLSerializer().serializeToString(xml.documentElement);
    }
    static writeJSON(ds) {
        let data = ds.data;
        let nrow = ds.numRows, ncol = ds.numCols;
        let rowData = new Array(nrow);
        for (let n = 0; n < nrow; n++)
            rowData[n] = new Array(ncol);
        for (let c = 0; c < ncol; c++) {
            let doConvert = ds.colType(c) == "molecule";
            for (let r = 0; r < nrow; r++) {
                let val = data.rowData[r][c];
                if (val != null && doConvert)
                    val = val.toString();
                rowData[r][c] = val;
            }
        }
        let json = {
            title: data.title,
            description: data.description,
            colData: (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.deepClone)(data.colData),
            rowData: rowData,
            extData: (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.deepClone)(data.extData),
        };
        return json;
    }
}


/***/ }),

/***/ "./src/io/MDLReader.ts":
/*!*****************************!*\
  !*** ./src/io/MDLReader.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MDLMOLReader: () => (/* binding */ MDLMOLReader),
/* harmony export */   MDLMOL_VALENCE: () => (/* binding */ MDLMOL_VALENCE),
/* harmony export */   MDLSDFReader: () => (/* binding */ MDLSDFReader)
/* harmony export */ });
/* harmony import */ var _calc_ResonanceRemover__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../calc/ResonanceRemover */ "./src/calc/ResonanceRemover.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _mol_BondArtifact__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/BondArtifact */ "./src/mol/BondArtifact.ts");
/* harmony import */ var _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mol/CoordUtil */ "./src/mol/CoordUtil.ts");
/* harmony import */ var _ds_DataSheet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ds/DataSheet */ "./src/ds/DataSheet.ts");
/* harmony import */ var _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mol/ForeignMolecule */ "./src/mol/ForeignMolecule.ts");
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../mol/PolymerBlock */ "./src/mol/PolymerBlock.ts");
/* harmony import */ var _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../mol/QueryUtil */ "./src/mol/QueryUtil.ts");
/* harmony import */ var _mol_StereoGroup__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../mol/StereoGroup */ "./src/mol/StereoGroup.ts");











const MDLMOL_VALENCE = {
    'H': [1],
    'B': [3],
    'C': [4],
    'Si': [4],
    'N': [3],
    'P': [3, 5],
    'As': [3, 5],
    'O': [2],
    'S': [2, 4, 6],
    'Se': [2, 4, 6],
    'Te': [2, 4, 6],
    'F': [1],
    'Cl': [1, 3, 5, 7],
    'Br': [1],
    'I': [1, 3, 5, 7],
    'At': [1, 3, 5, 7],
};
class MDLMOLReader {
    constructor(strData) {
        this.parseHeader = true;
        this.parseExtended = true;
        this.allowV3000 = true;
        this.considerRescale = true;
        this.keepAromatic = false;
        this.keepParity = false;
        this.keepQuery = true;
        this.mol = null;
        this.molName = '';
        this.overallStereoAbsolute = true;
        this.resBonds = null;
        this.groupAttachAny = new Map();
        this.groupAttachAll = new Map();
        this.groupStereoAbsolute = [];
        this.groupStereoRacemic = [];
        this.groupStereoRelative = [];
        this.groupLinkNodes = [];
        this.groupMixtures = [];
        this.scsrTemplates = null;
        this.pos = 0;
        this.lines = strData.split(/\r?\n/);
    }
    parse() {
        if (this.parseHeader) {
            this.molName = this.lines[0];
            this.pos = 3;
        }
        this.parseCTAB();
        return this.mol;
    }
    nextLine() {
        if (this.pos >= this.lines.length)
            throw 'MDL Molfile parser: premature end, at line ' + (this.pos + 1);
        return this.lines[this.pos++];
    }
    parseCTAB() {
        this.mol = new _mol_Molecule__WEBPACK_IMPORTED_MODULE_6__.Molecule();
        this.mol.keepTransient = true;
        let line = this.nextLine();
        let version = line.length >= 39 ? line.substring(34, 39) : '';
        if (this.allowV3000 && version == 'V3000') {
            this.parseV3000();
            this.mol.keepTransient = false;
            return;
        }
        if (version != 'V2000')
            throw 'Invalid MDL MOL: no Vx000 tag.';
        let numAtoms = parseInt(line.substring(0, 3).trim());
        let numBonds = parseInt(line.substring(3, 6).trim());
        if (line.length >= 15)
            this.overallStereoAbsolute = parseInt(line.substring(12, 15).trim()) == 1;
        for (let n = 0; n < numAtoms; n++) {
            line = this.nextLine();
            if (line.length < 34)
                throw 'Invalid MDL MOL: atom line' + (n + 1);
            let x = parseFloat(line.substring(0, 10).trim());
            let y = parseFloat(line.substring(10, 20).trim());
            let z = parseFloat(line.substring(20, 30).trim());
            let el = line.substring(31, 34).trim();
            let chg = line.length < 39 ? 0 : parseInt(line.substring(36, 39).trim()), rad = 0;
            let stereo = line.length < 42 ? 0 : parseInt(line.substring(39, 42).trim());
            let hyd = line.length < 45 ? 0 : parseInt(line.substring(42, 45).trim());
            let val = line.length < 51 ? 0 : parseInt(line.substring(48, 51).trim());
            let mapnum = line.length < 63 ? 0 : parseInt(line.substring(60, 63).trim());
            if (chg >= 1 && chg <= 3)
                chg = 4 - chg;
            else if (chg == 4) {
                chg = 0;
                rad = 2;
            }
            else if (chg >= 5 && chg <= 7)
                chg = 4 - chg;
            else
                chg = 0;
            let a = this.mol.addAtom(el, x, y, chg, rad);
            if (z != 0) {
                this.mol.setAtomZ(a, z);
                this.mol.setIs3D(true);
            }
            this.mol.setAtomMapNum(a, mapnum);
            if (hyd > 0)
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryAtomHydrogens(this.mol, a, [hyd - 1]);
            if (stereo > 0 && this.keepParity) {
                let trans = this.mol.atomTransient(a);
                if (stereo == 1)
                    this.mol.setAtomTransient(a, _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.append(trans, _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMoleculeTransient.AtomChiralMDLOdd));
                else if (stereo == 2)
                    this.mol.setAtomTransient(a, _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.append(trans, _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMoleculeTransient.AtomChiralMDLEven));
                else if (stereo == 3)
                    this.mol.setAtomTransient(a, _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.append(trans, _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMoleculeTransient.AtomChiralMDLRacemic));
            }
            if (val != 0)
                _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMolecule.markExplicitValence(this.mol, n + 1, val > 14 ? 0 : val);
        }
        for (let n = 0; n < numBonds; n++) {
            line = this.nextLine();
            if (line.length >= 9 && line.length < 12)
                line = line.substring(0, 9) + '  0';
            if (line.length < 12)
                throw 'Invalid MDL MOL: bond line' + (n + 1);
            let bfr = parseInt(line.substring(0, 3).trim()), bto = parseInt(line.substring(3, 6).trim());
            let type = parseInt(line.substring(6, 9).trim()), stereo = parseInt(line.substring(9, 12).trim());
            if (bfr == bto || bfr < 1 || bfr > numAtoms || bto < 1 || bto > numAtoms)
                throw 'Invalid MDL MOL: bond line' + (n + 1);
            let order = type >= 1 && type <= 3 ? type : type == 8 || type == 9 || type == 10 ? 0 : 1;
            let style = _mol_Molecule__WEBPACK_IMPORTED_MODULE_6__.Molecule.BONDTYPE_NORMAL;
            if (stereo == 1)
                style = _mol_Molecule__WEBPACK_IMPORTED_MODULE_6__.Molecule.BONDTYPE_INCLINED;
            else if (stereo == 6)
                style = _mol_Molecule__WEBPACK_IMPORTED_MODULE_6__.Molecule.BONDTYPE_DECLINED;
            else if (stereo == 3 || stereo == 4)
                style = _mol_Molecule__WEBPACK_IMPORTED_MODULE_6__.Molecule.BONDTYPE_UNKNOWN;
            let b = this.mol.addBond(bfr, bto, order, style);
            if (type == 9)
                this.mol.appendBondTransient(b, _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMoleculeTransient.BondZeroDative);
            if (type == 9)
                this.mol.appendBondTransient(b, _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMoleculeTransient.BondZeroHydrogen);
            if (this.keepQuery) {
                if (type == 4)
                    _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryBondOrders(this.mol, b, [-1]);
                else if (type == 5)
                    _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryBondOrders(this.mol, b, [1, 2]);
                else if (type == 6)
                    _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryBondOrders(this.mol, b, [-1, 1]);
                else if (type == 7)
                    _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryBondOrders(this.mol, b, [-1, 2]);
                else if (type == 8)
                    _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryBondOrders(this.mol, b, [-1, 0, 1, 2, 3]);
            }
            else {
                if (type == 4) {
                    if (this.keepAromatic)
                        this.mol.setBondTransient(b, _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.append(this.mol.bondTransient(b), _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMoleculeTransient.BondAromatic));
                    else {
                        if (this.resBonds == null)
                            this.resBonds = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.booleanArray(false, numBonds);
                        this.resBonds[n] = true;
                    }
                }
            }
        }
        const MBLK_CHG = 1, MBLK_RAD = 2, MBLK_ISO = 3, MBLK_RGP = 4, MBLK_HYD = 5, MBLK_ZCH = 6, MBLK_ZBO = 7, MBLK_ZPA = 8, MBLK_ZRI = 9, MBLK_ZAR = 10, MBLK_RBC = 11, MBLK_SUB = 12, MBLK_UNS = 13;
        let resPaths = new Map(), resRings = new Map(), arenes = new Map();
        let superatoms = new Map(), mixtures = new Map();
        while (true) {
            line = this.nextLine();
            if (line.startsWith('M  END'))
                break;
            let type = 0;
            if (line.startsWith('M  CHG'))
                type = MBLK_CHG;
            else if (line.startsWith('M  RAD'))
                type = MBLK_RAD;
            else if (line.startsWith('M  ISO'))
                type = MBLK_ISO;
            else if (line.startsWith('M  RGP'))
                type = MBLK_RGP;
            else if (this.parseExtended && line.startsWith('M  HYD'))
                type = MBLK_HYD;
            else if (this.parseExtended && line.startsWith('M  ZCH'))
                type = MBLK_ZCH;
            else if (this.parseExtended && line.startsWith('M  ZBO'))
                type = MBLK_ZBO;
            else if (this.parseExtended && line.startsWith('M  ZPA'))
                type = MBLK_ZPA;
            else if (this.parseExtended && line.startsWith('M  ZRI'))
                type = MBLK_ZRI;
            else if (this.parseExtended && line.startsWith('M  ZAR'))
                type = MBLK_ZAR;
            else if (this.parseExtended && line.startsWith('M  RBC'))
                type = MBLK_RBC;
            else if (this.parseExtended && line.startsWith('M  SUB'))
                type = MBLK_SUB;
            else if (this.parseExtended && line.startsWith('M  UNS'))
                type = MBLK_UNS;
            else if (line.startsWith('A  ') && line.length >= 6) {
                let anum = parseInt(line.substring(3, 6).trim());
                if (anum >= 1 && anum <= this.mol.numAtoms) {
                    line = this.nextLine();
                    if (line == null)
                        break;
                    this.mol.setAtomElement(anum, line);
                    continue;
                }
            }
            else if (line.startsWith('M  STY')) {
                let len = parseInt(line.substring(6, 9).trim());
                for (let n = 0; n < len; n++) {
                    let idx = parseInt(line.substring(9 + 8 * n, 13 + 8 * n).trim());
                    let stype = line.substring(14 + 8 * n, 17 + 8 * n);
                    if (stype == 'SUP')
                        superatoms.set(idx, { atoms: [], name: null });
                    else if (stype == 'MIX' || stype == 'FOR')
                        mixtures.set(idx, { index: idx, parent: 0, atoms: [], type: stype });
                    else if (stype == 'SRU' || stype == 'COP' || stype == 'MUL' || stype == 'DAT')
                        superatoms.set(idx, { atoms: [], name: null, bracketType: stype });
                }
            }
            else if (line.startsWith('M  SPL')) {
                let len = parseInt(line.substring(6, 9).trim());
                for (let n = 0; n < len; n++) {
                    let child = parseInt(line.substring(9 + 8 * n, 13 + 8 * n).trim());
                    let parent = parseInt(line.substring(13 + 8 * n, 17 + 8 * n).trim());
                    let mix = mixtures.get(child);
                    if (mix != null)
                        mix.parent = parent;
                }
            }
            else if (line.startsWith('M  SAL')) {
                let idx = parseInt(line.substring(6, 10).trim());
                let sup = superatoms.get(idx);
                if (sup != null) {
                    let len = parseInt(line.substring(10, 13).trim());
                    let atoms = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.numberArray(0, len);
                    for (let n = 0; n < len; n++)
                        atoms[n] = parseInt(line.substring(13 + 4 * n, 17 + 4 * n).trim());
                    sup.atoms = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.concat(sup.atoms, atoms);
                }
                let mix = mixtures.get(idx);
                if (mix != null) {
                    let len = parseInt(line.substring(10, 13).trim());
                    let atoms = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.numberArray(0, len);
                    for (let n = 0; n < len; n++)
                        atoms[n] = parseInt(line.substring(13 + 4 * n, 17 + 4 * n).trim());
                    mix.atoms = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.concat(mix.atoms, atoms);
                }
            }
            else if (line.startsWith('M  SBL')) {
                let idx = parseInt(line.substring(6, 10).trim());
                let sup = superatoms.get(idx);
                if (sup != null) {
                    let len = parseInt(line.substring(10, 13).trim());
                    let bonds = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.numberArray(0, len);
                    for (let n = 0; n < len; n++)
                        bonds[n] = parseInt(line.substring(13 + 4 * n, 17 + 4 * n).trim());
                    sup.bonds = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.concat(sup.bonds, bonds);
                }
            }
            else if (line.startsWith('M  SMT')) {
                let idx = parseInt(line.substring(6, 10).trim());
                let sup = superatoms.get(idx);
                if (sup != null)
                    sup.name = line.substring(11).trim();
            }
            else if (line.startsWith('M  SCL')) {
                let idx = parseInt(line.substring(6, 10).trim());
                let sup = superatoms.get(idx);
                if (sup != null)
                    sup.templateClass = line.substring(11).trim();
            }
            else if (line.startsWith('M  SDT')) {
                let idx = parseInt(line.substring(6, 10).trim());
                let sup = superatoms.get(idx);
                if (sup) {
                    sup.name = line.substring(11, 41).trim();
                    sup.unit = line.substring(43, 63).trim();
                    sup.query = line.substring(63).trim();
                }
            }
            else if (line.startsWith('M  SED')) {
                let idx = parseInt(line.substring(6, 10).trim());
                let sup = superatoms.get(idx);
                if (sup)
                    sup.value = line.substring(11).trim();
            }
            else if (line.startsWith('M  SCN')) {
                let len = parseInt(line.substring(6, 9).trim());
                for (let n = 0; n < len; n++) {
                    let idx = parseInt(line.substring(9 + 8 * n, 13 + 8 * n).trim());
                    let stype = line.substring(14 + 8 * n, 17 + 8 * n);
                    let sup = superatoms.get(idx);
                    if (sup != null)
                        sup.connectType = stype.trim();
                }
            }
            else if (line.startsWith('M  CRS')) {
                let idx = parseInt(line.substring(6, 10).trim());
                let sup = superatoms.get(idx);
                if (sup != null) {
                    let len = parseInt(line.substring(10, 13).trim());
                    sup.bondConn = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.numberArray(0, len);
                    for (let n = 0; n < len; n++)
                        sup.bondConn[n] = parseInt(line.substring(13 + 4 * n, 17 + 4 * n).trim());
                }
            }
            else if (line.startsWith('M  LIN')) {
                let len = parseInt(line.substring(6, 9).trim());
                for (let n = 0; n < len; n++) {
                    let node = {
                        atom: parseInt(line.substring(9 + 8 * n, 13 + 8 * n).trim()),
                        nbrs: [],
                        minRep: 1,
                        maxRep: parseInt(line.substring(13 + 8 * n, 17 + 8 * n).trim()),
                    };
                    let nbr1 = parseInt(line.substring(17 + 8 * n, 21 + 8 * n).trim());
                    let nbr2 = parseInt(line.substring(21 + 8 * n, 25 + 8 * n).trim());
                    if (nbr1 > 0)
                        node.nbrs.push(nbr1);
                    if (nbr2 > 0)
                        node.nbrs.push(nbr2);
                    this.groupLinkNodes.push(node);
                }
            }
            else if (line.startsWith('M  ALS')) {
                let atom = parseInt(line.substring(7, 10).trim());
                let len = parseInt(line.substring(10, 13).trim());
                let logic = line.charAt(14);
                let elements = [];
                for (let n = 0; n < len; n++)
                    elements.push(line.substring(16 + n * 4, 20 + n * 4).trim());
                this.mol.setAtomElement(atom, '*');
                if (logic == 'F')
                    _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryAtomElements(this.mol, atom, elements);
                else if (logic == 'T')
                    _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryAtomElementsNot(this.mol, atom, elements);
            }
            if (type == MBLK_ZPA || type == MBLK_ZRI || type == MBLK_ZAR) {
                let len = parseInt(line.substring(6, 9).trim()), blk = parseInt(line.substring(9, 13).trim());
                let map = type == MBLK_ZPA ? resPaths : type == MBLK_ZRI ? resRings : arenes;
                for (let n = 0; n < len; n++) {
                    let val = parseInt(line.substring(13 + 4 * n, 17 + 4 * n).trim());
                    if (val < 1 || val > numAtoms)
                        throw 'Invalid MDL MOL: M-block';
                    let atoms = map.get(blk);
                    if (!atoms)
                        map.set(blk, atoms = []);
                    atoms.push(val);
                }
            }
            else if (type > 0) {
                let len = parseInt(line.substring(6, 9).trim());
                for (let n = 0; n < len; n++) {
                    let pos = parseInt(line.substring(9 + 8 * n, 13 + 8 * n).trim());
                    let val = parseInt(line.substring(13 + 8 * n, 17 + 8 * n).trim());
                    if (pos < 1)
                        throw 'Invalid MDL MOL: M-block';
                    if (type == MBLK_CHG)
                        this.mol.setAtomCharge(pos, val);
                    else if (type == MBLK_RAD) {
                        if (val == 1 || val == 3)
                            this.mol.setAtomUnpaired(pos, 2);
                        else if (val == 2)
                            this.mol.setAtomUnpaired(pos, 1);
                    }
                    else if (type == MBLK_ISO)
                        this.mol.setAtomIsotope(pos, val);
                    else if (type == MBLK_RGP)
                        this.mol.setAtomElement(pos, 'R' + val);
                    else if (type == MBLK_HYD)
                        this.mol.setAtomHExplicit(pos, val);
                    else if (type == MBLK_ZCH)
                        this.mol.setAtomCharge(pos, val);
                    else if (type == MBLK_ZBO)
                        this.mol.setBondOrder(pos, val);
                    else if (type == MBLK_RBC && val != 0) {
                        if (val == -2)
                            val = this.countRingBonds(pos);
                        else if (val == -1)
                            val = 0;
                        _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryAtomRingBonds(this.mol, pos, [val]);
                    }
                    else if (type == MBLK_SUB && val != 0) {
                        if (val == -2)
                            val = this.countSubstitutions(pos);
                        else if (val == -1)
                            val = 0;
                        _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryAtomAdjacency(this.mol, pos, [val]);
                    }
                    else if (type == MBLK_UNS) {
                        if (val == 1)
                            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryAtomUnsaturated(this.mol, pos, true);
                    }
                }
            }
        }
        this.postFix();
        if (this.parseExtended) {
            let artifacts = new _mol_BondArtifact__WEBPACK_IMPORTED_MODULE_2__.BondArtifact(this.mol);
            for (let atoms of resPaths.values())
                artifacts.createPath(atoms);
            for (let atoms of resRings.values())
                artifacts.createRing(atoms);
            for (let atoms of arenes.values())
                artifacts.createArene(atoms);
            artifacts.rewriteMolecule();
        }
        for (let key of _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sorted(Array.from(superatoms.keys()))) {
            let value = superatoms.get(key);
            if (value.bracketType) {
                superatoms.delete(key);
                this.applyPolymerBlock(value);
            }
        }
        for (let key of _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sorted(Array.from(superatoms.keys()))) {
            let value = superatoms.get(key);
            superatoms.delete(key);
            this.applySuperAtom(value, Array.from(superatoms.values()));
        }
        for (let key of _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sorted(Array.from(mixtures.keys())))
            this.groupMixtures.push(mixtures.get(key));
        this.mol.keepTransient = false;
    }
    postFix() {
        const mol = this.mol;
        for (let n = 1; n <= mol.numAtoms; n++) {
            if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_7__.MolUtil.hasAbbrev(mol, n) || mol.atomTransient(n).some((str) => str.startsWith(_mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMoleculeTransient.AtomSCSRClass)))
                continue;
            let el = mol.atomElement(n);
            if (el == 'D') {
                mol.setAtomElement(n, 'H');
                mol.setAtomIsotope(n, 2);
            }
            else if (el == 'T') {
                mol.setAtomElement(n, 'H');
                mol.setAtomIsotope(n, 3);
            }
            if (mol.is3D && mol.atomZ(n) === undefined)
                mol.setAtomZ(n, 0);
            let valence = _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMolecule.noteExplicitValence(this.mol, n);
            let options = MDLMOL_VALENCE[el];
            if (valence != null) {
                let hcount = valence < 0 || valence > 14 ? 0 : valence;
                for (let b of mol.atomAdjBonds(n))
                    hcount -= mol.bondOrder(b);
                if (hcount != mol.atomHydrogens(n))
                    mol.setAtomHExplicit(n, Math.max(0, hcount));
            }
            else if (options) {
                let chg = mol.atomCharge(n);
                let chgmod = (el == 'C' || el == 'H') ? Math.abs(chg) : el == 'B' ? -Math.abs(chg) : -chg;
                let usedValence = chgmod;
                let unp = mol.atomUnpaired(n);
                if (unp > 0 && (el == 'C' || el == 'O' || el == 'S' || el == 'N' || el == 'P'))
                    usedValence += unp;
                for (let b of mol.atomAdjBonds(n))
                    usedValence += mol.bondOrder(b);
                for (let v of options)
                    if (usedValence <= v) {
                        let hcount = v - usedValence;
                        if (hcount != mol.atomHydrogens(n))
                            mol.setAtomHExplicit(n, Math.max(0, hcount));
                        break;
                    }
            }
        }
        if (this.considerRescale && _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.isBlank(this.scsrTemplates))
            _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.normaliseBondDistances(mol);
        if (this.resBonds != null) {
            let derez = new _calc_ResonanceRemover__WEBPACK_IMPORTED_MODULE_0__.ResonanceRemover(mol, this.resBonds, null);
            try {
                derez.perform();
                for (let n = 0; n < mol.numBonds; n++)
                    mol.setBondOrder(n + 1, derez.bondOrders[n]);
            }
            catch (ex) {
            }
        }
    }
    parseV3000() {
        var _a;
        let Section;
        (function (Section) {
            Section[Section["Atom"] = 0] = "Atom";
            Section[Section["Bond"] = 1] = "Bond";
            Section[Section["Coll"] = 2] = "Coll";
            Section[Section["SGroup"] = 3] = "SGroup";
            Section[Section["Template"] = 4] = "Template";
        })(Section || (Section = {}));
        let inCTAB = false, inTemplate = false;
        let section = null;
        let lineCounts = null;
        let lineAtom = [], lineBond = [], lineColl = [], lineSgroup = [];
        let asdrawnRBC = [], asdrawnSUB = [];
        let templateBlocks = [];
        const ERRPFX = 'Invalid MDL MOL V3000: ';
        while (true) {
            let fullLine = this.nextLine();
            if (fullLine == 'M  END')
                break;
            if (!fullLine.startsWith('M  V30 '))
                continue;
            let line = fullLine.substring(7);
            if (line.startsWith('BEGIN TEMPLATE'))
                inTemplate = true;
            else if (line.startsWith('END TEMPLATE'))
                inTemplate = false;
            else if (line.startsWith('TEMPLATE ') && inTemplate)
                templateBlocks.push([fullLine]);
            else if (inTemplate && templateBlocks != null)
                _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.last(templateBlocks).push(fullLine);
            else if (line.startsWith('COUNTS '))
                lineCounts = line.substring(7);
            else if (line.startsWith('BEGIN CTAB'))
                inCTAB = true;
            else if (line.startsWith('BEGIN ATOM'))
                section = Section.Atom;
            else if (line.startsWith('BEGIN BOND'))
                section = Section.Bond;
            else if (line.startsWith('BEGIN COLLECTION'))
                section = Section.Coll;
            else if (line.startsWith('BEGIN SGROUP'))
                section = Section.SGroup;
            else if (line.startsWith('END '))
                section = null;
            else if (inCTAB && section == Section.Atom)
                lineAtom.push(line);
            else if (inCTAB && section == Section.Bond)
                lineBond.push(line);
            else if (inCTAB && section == Section.Coll)
                lineColl.push(line);
            else if (inCTAB && section == Section.SGroup)
                lineSgroup.push(line);
            else if (inCTAB && section == null) {
                if (line.startsWith('LINKNODE ')) {
                    let bits = this.splitWithQuotes(line.substring(9));
                    let node = {
                        atom: 0,
                        nbrs: [],
                        minRep: parseInt(bits[0]),
                        maxRep: parseInt(bits[1])
                    };
                    let nb = parseInt(bits[2]);
                    let atoms = [];
                    for (let n = 0; n < nb * 2; n++)
                        atoms.push(parseInt(bits[3 + n]));
                    _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sort(atoms);
                    for (let n = 0; n < atoms.length; n++) {
                        if (n < atoms.length - 1 && atoms[n] == atoms[n + 1])
                            node.atom = atoms[n++];
                        else
                            node.nbrs.push(atoms[n]);
                    }
                    this.groupLinkNodes.push(node);
                }
            }
        }
        let counts = lineCounts.trim().split(/\s+/);
        if (counts.length < 2)
            throw ERRPFX + 'counts line malformatted';
        let numAtoms = parseInt(counts[0]), numBonds = parseInt(counts[1]);
        if (numAtoms < 0 || numAtoms > lineAtom.length)
            throw ERRPFX + 'unreasonable atom count: ' + numAtoms;
        if (numBonds < 0 || numBonds > lineBond.length)
            throw ERRPFX + 'unreasonable bond count: ' + numBonds;
        let atomBits = [], bondBits = [];
        for (let n = 0; n < lineAtom.length; n++) {
            let line = lineAtom[n];
            while (n < lineAtom.length - 1 && line.endsWith('-')) {
                n++;
                line = line.substring(0, line.length - 1) + lineAtom[n];
            }
            let bits = this.splitWithQuotes(line);
            if (bits.length < 6)
                throw ERRPFX + 'atom line has too few components: ' + line;
            let idx = parseInt(bits[0], 0);
            if (idx < 1 || idx > numAtoms)
                throw ERRPFX + 'invalid atom index: ' + bits[0];
            if (atomBits[idx - 1] != null)
                throw ERRPFX + 'duplicate atom index: ' + idx;
            atomBits[idx - 1] = bits;
        }
        for (let n = 0; n < lineBond.length; n++) {
            let line = lineBond[n];
            while (n < lineBond.length - 1 && line.endsWith('-')) {
                n++;
                line = line.substring(0, line.length - 1) + lineBond[n];
            }
            let bits = this.splitWithQuotes(line);
            if (bits.length < 4)
                throw ERRPFX + 'bond line has too few components: ' + line;
            let idx = parseInt(bits[0], 0);
            if (idx < 1 || idx > numBonds)
                throw ERRPFX + 'invalid bond index: ' + bits[0];
            if (bondBits[idx - 1] != null)
                throw ERRPFX + 'duplicate bond index: ' + idx;
            bondBits[idx - 1] = bits;
        }
        for (let a = 1; a <= numAtoms; a++) {
            let bits = atomBits[a - 1];
            if (bits == null)
                throw ERRPFX + 'atom definition missing for #' + a;
            let type = bits[1];
            if (type.length > 2 && type.startsWith('"') && type.endsWith('"'))
                type = type.substring(1, type.length - 1);
            let x = parseFloat(bits[2]), y = parseFloat(bits[3]), z = parseFloat(bits[4]);
            let map = parseInt(bits[5]);
            this.mol.addAtom(type, x, y);
            if (z != 0) {
                this.mol.setAtomZ(a, z);
                this.mol.setIs3D(true);
            }
            this.mol.setAtomMapNum(a, map);
            this.parseQueryAtomList(this.mol, a);
            for (let i = 6; i < bits.length; i++) {
                let eq = bits[i].indexOf('=');
                if (eq < 0)
                    continue;
                let key = bits[i].substring(0, eq), val = bits[i].substring(eq + 1);
                if (key == 'CHG')
                    this.mol.setAtomCharge(a, parseInt(val));
                else if (key == 'RAD') {
                    let spin = parseInt(val);
                    if (spin == 1 || spin == 3)
                        this.mol.setAtomUnpaired(a, 2);
                    else if (spin == 2)
                        this.mol.setAtomUnpaired(a, 1);
                }
                else if (key == 'MASS')
                    this.mol.setAtomIsotope(a, parseInt(val));
                else if (key == 'CFG') {
                    let stereo = parseInt(val);
                    if (stereo > 0 && this.keepParity) {
                    }
                }
                else if (key == 'VAL')
                    _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMolecule.markExplicitValence(this.mol, a, parseInt(val));
                else if (key == 'CLASS') {
                    this.mol.appendAtomTransient(a, _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMoleculeTransient.AtomSCSRClass + ':' + val);
                }
                else if (key == 'SEQID') {
                    this.mol.appendAtomTransient(a, _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMoleculeTransient.AtomSCSRSeqID + ':' + val);
                }
                else if (key == 'ATTCHORD') {
                    let attch = this.unpackStrings(val);
                    if (attch != null)
                        this.mol.appendAtomTransient(a, _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMoleculeTransient.AtomSCSRAttchOrd + ':' + attch.join(','));
                }
                else if (key == 'HCOUNT') {
                    let hyd = parseInt(val);
                    if (hyd != 0)
                        _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryAtomHydrogens(this.mol, a, [Math.max(hyd, 0)]);
                }
                else if (key == 'RBCNT') {
                    let rbc = parseInt(val);
                    if (rbc == -2)
                        asdrawnRBC.push(a);
                    else if (rbc != 0)
                        _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryAtomRingBonds(this.mol, a, [Math.max(rbc, 0)]);
                }
                else if (key == 'SUBST') {
                    let sub = parseInt(val);
                    if (sub == -2)
                        asdrawnSUB.push(a);
                    else if (sub != 0)
                        _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryAtomAdjacency(this.mol, a, [Math.max(sub, 0)]);
                }
                else if (key == 'UNSAT') {
                    let uns = parseInt(val);
                    if (uns == 1)
                        _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryAtomUnsaturated(this.mol, a, true);
                }
            }
        }
        for (let b = 1; b <= numBonds; b++) {
            let bits = bondBits[b - 1];
            if (bits == null)
                throw ERRPFX + 'bond definition missing for #' + b;
            let type = parseInt(bits[1]), bfr = parseInt(bits[2]), bto = parseInt(bits[3]);
            let order = type >= 1 && type <= 3 ? type : type == 9 || type == 10 ? 0 : 1;
            this.mol.addBond(bfr, bto, order);
            if (type == 9)
                this.mol.appendBondTransient(b, _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMoleculeTransient.BondZeroDative);
            if (type == 10)
                this.mol.appendBondTransient(b, _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMoleculeTransient.BondZeroHydrogen);
            if (this.keepQuery) {
                if (type == 4)
                    _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryBondOrders(this.mol, b, [-1]);
                else if (type == 5)
                    _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryBondOrders(this.mol, b, [1, 2]);
                else if (type == 6)
                    _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryBondOrders(this.mol, b, [-1, 1]);
                else if (type == 7)
                    _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryBondOrders(this.mol, b, [-1, 2]);
                else if (type == 8)
                    _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryBondOrders(this.mol, b, [-1, 0, 1, 2, 3]);
            }
            else {
                if (type == 4) {
                    if (this.keepAromatic)
                        this.mol.setBondTransient(b, _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.append(this.mol.bondTransient(b), _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMoleculeTransient.BondAromatic));
                    else {
                        if (this.resBonds == null)
                            this.resBonds = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.booleanArray(false, numBonds);
                        this.resBonds[b - 1] = true;
                    }
                }
            }
            let endpts = null;
            let attach = null;
            for (let i = 4; i < bits.length; i++) {
                let eq = bits[i].indexOf('=');
                if (eq < 0)
                    continue;
                let key = bits[i].substring(0, eq), val = bits[i].substring(eq + 1);
                if (key == 'CFG') {
                    let dir = parseInt(val);
                    this.mol.setBondType(b, dir == 1 ? _mol_Molecule__WEBPACK_IMPORTED_MODULE_6__.Molecule.BONDTYPE_INCLINED :
                        dir == 2 ? _mol_Molecule__WEBPACK_IMPORTED_MODULE_6__.Molecule.BONDTYPE_UNKNOWN :
                            dir == 3 ? _mol_Molecule__WEBPACK_IMPORTED_MODULE_6__.Molecule.BONDTYPE_DECLINED : _mol_Molecule__WEBPACK_IMPORTED_MODULE_6__.Molecule.BONDTYPE_NORMAL);
                }
                else if (key == 'DISP') {
                    if (val == 'COORD')
                        this.mol.setBondOrder(b, 0);
                }
                else if (key == 'ENDPTS')
                    endpts = this.unpackList(val);
                else if (key == 'ATTACH')
                    attach = val;
            }
            if (attach != null && endpts != null) {
                if (attach == 'ALL')
                    this.groupAttachAll.set(b, endpts);
                else if (attach == 'ANY')
                    this.groupAttachAny.set(b, endpts);
            }
        }
        for (let atom of asdrawnRBC)
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryAtomRingBonds(this.mol, atom, [this.countRingBonds(atom)]);
        for (let atom of asdrawnSUB)
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryAtomAdjacency(this.mol, atom, [this.countSubstitutions(atom)]);
        this.postFix();
        for (let n = 0; n < lineColl.length; n++) {
            let line = lineColl[n];
            while (n < lineColl.length - 1 && line.endsWith('-')) {
                n++;
                line = line.substring(0, line.length - 1) + lineColl[n];
            }
            let bits = this.splitWithQuotes(line);
            if (bits[0].startsWith('MDLV30/STEABS')) {
                if (bits[1].startsWith('ATOMS='))
                    this.groupStereoAbsolute = this.unpackList(bits[1].substring(5));
            }
            else if (bits[0].startsWith('MDLV30/STERAC')) {
                if (bits[1].startsWith('ATOMS='))
                    this.groupStereoRacemic.push(this.unpackList(bits[1].substring(6)));
            }
            else if (bits[0].startsWith('MDLV30/STEREL')) {
                if (bits[1].startsWith('ATOMS='))
                    this.groupStereoRelative.push(this.unpackList(bits[1].substring(6)));
            }
        }
        let stereoGroup = new _mol_StereoGroup__WEBPACK_IMPORTED_MODULE_10__.StereoGroup(this.mol);
        for (let atoms of this.groupStereoRacemic)
            stereoGroup.createRacemic(atoms);
        for (let atoms of this.groupStereoRelative)
            stereoGroup.createRelative(atoms);
        stereoGroup.rewriteMolecule();
        let superatoms = new Map();
        for (let n = 0; n < lineSgroup.length; n++) {
            let line = lineSgroup[n];
            while (n < lineSgroup.length - 1 && line.endsWith('-')) {
                n++;
                line = line.substring(0, line.length - 1) + lineSgroup[n];
            }
            let bits = this.splitWithQuotes(line);
            let idx = parseInt(bits[0]);
            if (bits.length > 3 && idx > 0 && bits[1] == 'SUP') {
                let sup = { atoms: [], name: null };
                for (let i = 3; i < bits.length; i++) {
                    if (bits[i].startsWith('ATOMS='))
                        sup.atoms = this.unpackList(bits[i].substring(6));
                    else if (bits[i].startsWith('LABEL='))
                        sup.name = this.withoutQuotes(bits[i].substring(6));
                    else if (bits[i].startsWith('XBONDS='))
                        sup.bonds = this.unpackList(bits[i].substring(7));
                    else if (bits[i].startsWith('CLASS='))
                        sup.templateClass = this.withoutQuotes(bits[i].substring(6));
                    else if (bits[i].startsWith('NATREPLACE='))
                        sup.natReplace = this.withoutQuotes(bits[i].substring(11));
                    else if (bits[i].startsWith('SAP=')) {
                        const pts = this.unpackStrings(bits[i].substring(4));
                        sup.attachPoints = [...((_a = sup.attachPoints) !== null && _a !== void 0 ? _a : []), ...pts];
                    }
                }
                superatoms.set(idx, sup);
            }
            else if (bits.length > 3 && idx > 0 && (bits[1] == 'MIX' || bits[1] == 'FOR') && parseInt(bits[2]) == idx) {
                let mix = { index: idx, parent: 0, atoms: null, type: bits[1] };
                for (let i = 3; i < bits.length; i++) {
                    if (bits[i].startsWith('ATOMS='))
                        mix.atoms = this.unpackList(bits[i].substring(6));
                    else if (bits[i].startsWith('PARENT='))
                        mix.parent = parseInt(bits[i].substring(7));
                }
                this.groupMixtures.push(mix);
            }
            else if (bits.length > 3 && idx > 0 && (bits[1] == 'SRU' || bits[1] == 'COP' || bits[1] == 'MUL' || bits[1] == 'DAT')) {
                let sup = { atoms: [], name: null, bracketType: bits[1] };
                for (let i = 3; i < bits.length; i++) {
                    if (bits[i].startsWith('ATOMS='))
                        sup.atoms = this.unpackList(bits[i].substring(6));
                    else if (bits[i].startsWith('BONDS='))
                        sup.bonds = this.unpackList(bits[i].substring(6));
                    else if (bits[i].startsWith('LABEL='))
                        sup.name = this.withoutQuotes(bits[i].substring(6));
                    else if (bits[i].startsWith('CONNECT='))
                        sup.connectType = bits[i].substring(8);
                    else if (bits[i].startsWith('XBCORR='))
                        sup.bondConn = this.unpackList(bits[i].substring(7));
                    else if (bits[i].startsWith('MULT='))
                        sup.name = this.withoutQuotes(bits[i].substring(5));
                    else if (bits[i].startsWith('FIELDNAME='))
                        sup.name = this.withoutQuotes(bits[i].substring(10));
                    else if (bits[i].startsWith('FIELDDATA='))
                        sup.value = this.withoutQuotes(bits[i].substring(10));
                }
                superatoms.set(idx, sup);
            }
        }
        for (let key of _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sorted(Array.from(superatoms.keys()))) {
            let value = superatoms.get(key);
            if (value.bracketType) {
                superatoms.delete(key);
                this.applyPolymerBlock(value);
            }
        }
        for (let key of _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sorted(Array.from(superatoms.keys()))) {
            let value = superatoms.get(key);
            superatoms.delete(key);
            this.applySuperAtom(value, Array.from(superatoms.values()));
        }
        if (templateBlocks.length > 0) {
            this.scsrTemplates = templateBlocks.map((lines) => this.parseV3000Template(lines));
        }
    }
    parseQueryAtomList(mol, atom) {
        let label = mol.atomElement(atom);
        let not = false;
        if (label.startsWith('NOT ')) {
            label = label.substring(4);
            not = true;
        }
        if (label.length < 2 || !label.startsWith('[') || !label.endsWith(']'))
            return;
        label = label.substring(1, label.length - 1);
        let elements = label.split(',');
        mol.setAtomElement(atom, '*');
        if (!not)
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryAtomElements(mol, atom, elements);
        else
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_9__.QueryUtil.setQueryAtomElementsNot(mol, atom, elements);
    }
    applySuperAtom(sup, residual) {
        if ((sup.name == null && sup.templateClass == null) || _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.isBlank(sup.atoms))
            return;
        let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.booleanArray(true, this.mol.numAtoms);
        for (let a of sup.atoms)
            mask[a - 1] = false;
        let name = sup.name;
        if (name != null) {
            let i;
            while ((i = name.indexOf('\\S')) >= 0)
                name = name.substring(0, i) + '{^' + name.substring(i + 2);
            while ((i = name.indexOf('\\s')) >= 0)
                name = name.substring(0, i) + '{' + name.substring(i + 2);
            while ((i = name.indexOf('\\n')) >= 0)
                name = name.substring(0, i) + '}' + name.substring(i + 2);
        }
        let [mod, abvAtom] = !sup.templateClass ? _mol_MolUtil__WEBPACK_IMPORTED_MODULE_7__.MolUtil.convertToAbbrevIndex(this.mol, mask, name) : [null, null];
        if (mod == null) {
            let keyval = {};
            if (sup.bonds)
                keyval['bonds'] = sup.bonds.join(' ');
            if (sup.templateClass)
                keyval['templateClass'] = sup.templateClass;
            if (sup.natReplace)
                keyval['natReplace'] = sup.natReplace;
            if (sup.attachPoints)
                keyval['attachPoints'] = sup.attachPoints.join(' ');
            _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMolecule.markSgroupMultiAttach(this.mol, name, sup.atoms, keyval);
            return;
        }
        this.mol = mod;
        let map = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.maskMap(mask);
        for (let res of residual) {
            let subsumed = false;
            for (let n = res.atoms.length - 1; n >= 0; n--) {
                let atom = map[res.atoms[n] - 1] + 1;
                if (atom == 0) {
                    res.atoms = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.remove(res.atoms, n);
                    subsumed = true;
                }
                else
                    res.atoms[n] = atom;
            }
            if (subsumed)
                res.atoms = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sorted(_util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.append(res.atoms, abvAtom));
        }
    }
    applyPolymerBlock(sup) {
        if (sup.bracketType == 'MUL') {
            let mult = parseInt(sup.name);
            _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMolecule.markSgroupMultiRepeat(this.mol, mult, sup.atoms);
            return;
        }
        if (sup.bracketType == 'DAT') {
            if (sup.atoms != null)
                _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_5__.ForeignMolecule.markSgroupData(this.mol, sup.name, sup.value, sup.unit, sup.query, sup.atoms);
            return;
        }
        let poly = new _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_8__.PolymerBlock(this.mol);
        let connect = null;
        if (sup.connectType == null) { }
        else if (sup.connectType == 'HT')
            connect = _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_8__.PolymerBlockConnectivity.HeadToTail;
        else if (sup.connectType == 'HH')
            connect = _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_8__.PolymerBlockConnectivity.HeadToHead;
        else if (sup.connectType == 'EU')
            connect = _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_8__.PolymerBlockConnectivity.Random;
        else
            return;
        let bondConn = null;
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.len(sup.bondConn) == 3) {
            let b1 = sup.bondConn[0], b2 = sup.bondConn[2], b3 = sup.bondConn[1], b4 = 0;
            for (let n = 1; n <= this.mol.numBonds; n++)
                if (n != b1 && n != b2 && n != b3) {
                    let in1 = sup.atoms.indexOf(this.mol.bondFrom(n)) >= 0, in2 = sup.atoms.indexOf(this.mol.bondTo(n)) >= 0;
                    if ((in1 && !in2) || (!in1 && in2)) {
                        if (b4 > 0) {
                            b4 = 0;
                            break;
                        }
                        b4 = n;
                    }
                }
            bondConn = [b1, b2, b3, b4];
        }
        else if (_util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.len(sup.bondConn) == 4) {
            bondConn = sup.bondConn;
        }
        let unit = new _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_8__.PolymerBlockUnit(sup.atoms);
        unit.connect = connect;
        unit.bondConn = bondConn;
        poly.createUnit(unit);
    }
    parseV3000Template(lines) {
        let header = lines[0];
        let bits = this.splitWithQuotes(header.substring('M  V30 TEMPLATE '.length));
        let name = bits[1], natReplace = null;
        for (let n = 2; n < bits.length; n++) {
            if (bits[n].startsWith('NATREPLACE='))
                natReplace = bits[n].substring(11);
        }
        lines[0] = '  0  0  0  0  0  0  0  0  0  0  0 V3000';
        lines.push('M  END');
        let mdl = new MDLMOLReader(lines.join('\n'));
        mdl.parseHeader = false;
        mdl.parse();
        return { name, natReplace, mol: mdl.mol };
    }
    withoutQuotes(str) {
        if (str.length >= 2 && str.startsWith('"') && str.endsWith('"'))
            return str.substring(1, str.length - 1);
        return str;
    }
    splitWithQuotes(line) {
        let segments = [];
        let seg = '';
        let depth = 0, quote = false;
        for (let n = 0; n < line.length; n++) {
            let ch = line.charAt(n);
            if (ch == ' ' && depth == 0 && !quote) {
                if (seg.length > 0)
                    segments.push(seg);
                seg = '';
            }
            else {
                seg += ch;
                if (ch == '"')
                    quote = !quote;
                else if (ch == '(' || ch == '[')
                    depth++;
                else if (ch == ')' || ch == ']')
                    depth--;
            }
        }
        if (seg.length > 0)
            segments.push(seg);
        return segments;
    }
    unpackList(str) {
        if (!str.startsWith('(') || !str.endsWith(')'))
            return null;
        str = str.substring(1, str.length - 1);
        let values = [];
        for (let bit of str.split(' '))
            values.push(parseInt(bit));
        if (values[0] != values.length - 1)
            return null;
        return _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.remove(values, 0);
    }
    unpackStrings(str) {
        if (!str.startsWith('(') || !str.endsWith(')'))
            return null;
        str = str.substring(1, str.length - 1);
        let values = str.split(' ');
        if (parseInt(values[0]) != values.length - 1)
            return null;
        return _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.remove(values, 0);
    }
    countRingBonds(atom) {
        let count = 0;
        for (let b of this.mol.atomAdjBonds(atom))
            if (this.mol.bondInRing(b))
                count++;
        return count;
    }
    countSubstitutions(atom) {
        let count = 0;
        for (let adj of this.mol.atomAdjList(atom))
            if (this.mol.atomElement(adj) != 'H')
                count++;
        return count;
    }
}
class MDLSDFReader {
    constructor(strData) {
        this.ds = new _ds_DataSheet__WEBPACK_IMPORTED_MODULE_4__.DataSheet();
        this.upcastColumns = true;
        this.pos = 0;
        this.lines = strData.split(/\r?\n/);
    }
    parse() {
        this.parseStream();
        if (this.upcastColumns)
            this.upcastStringColumns();
        return this.ds;
    }
    parseStream() {
        let ds = this.ds;
        ds.appendColumn('Molecule', "molecule", 'Molecular structure');
        let colName = -1;
        let entry = [];
        while (this.pos < this.lines.length) {
            let line = this.lines[this.pos++];
            if (!line.startsWith('$$$$')) {
                entry.push(line);
                continue;
            }
            let rn = ds.appendRow();
            let molstr = '';
            let pos = 0;
            while (pos < entry.length) {
                line = entry[pos];
                if (line.startsWith('> '))
                    break;
                molstr += line + '\n';
                pos++;
                if (line.startsWith('M	END'))
                    break;
            }
            let mol = null, name = null;
            try {
                if (molstr.length > 0) {
                    let mdl = new MDLMOLReader(molstr);
                    mdl.parse();
                    mol = mdl.mol;
                    name = mdl.molName;
                }
            }
            catch (ex) {
            }
            if (mol != null)
                ds.setMolecule(rn, 0, mol);
            if (name) {
                if (colName < 0)
                    colName = ds.appendColumn('Name', "string", 'Molecule name');
                ds.setString(rn, colName, name);
            }
            if (rn == 0 && mol != null) {
                let str1 = entry[0], str3 = entry[2];
                if (str1.length >= 7 && str1.startsWith('$name=')) {
                    ds.changeColumnName(0, str1.substring(6), ds.colDescr(0));
                }
                if (str3.length >= 8 && str3.startsWith('$title=')) {
                    ds.title = str3.substring(7);
                }
            }
            for (; pos + 1 < entry.length; pos += 3) {
                let key = entry[pos], val = entry[pos + 1];
                if (!key.startsWith('>'))
                    continue;
                let z = key.indexOf('<');
                if (z < 0)
                    continue;
                key = key.substring(z + 1);
                z = key.indexOf('>');
                if (z < 0)
                    continue;
                key = key.substring(0, z);
                if (key.length == 0)
                    continue;
                while (pos + 2 < entry.length && entry[pos + 2].length > 0) {
                    val += '\n' + entry[pos + 2];
                    pos++;
                }
                let cn = ds.findColByName(key);
                if (cn < 0)
                    cn = ds.appendColumn(key, "string", '');
                if (val.length == 0)
                    ds.setToNull(rn, cn);
                else
                    ds.setString(rn, cn, val);
            }
            entry = [];
        }
        if (ds.numRows == 0)
            this.ds = null;
    }
    upcastStringColumns() {
        let ds = this.ds;
        for (let i = 0; i < ds.numCols; i++)
            if (ds.colType(i) == "string") {
                let allnull = true, allreal = true, allint = true, allbool = true;
                for (let j = 0; j < ds.numRows; j++) {
                    if (!allreal && !allint && !allbool)
                        break;
                    if (ds.isNull(j, i))
                        continue;
                    allnull = false;
                    let val = ds.getString(j, i);
                    if (allbool) {
                        let lc = val.toLowerCase();
                        if (lc != 'true' && lc != 'false')
                            allbool = false;
                    }
                    if (allint) {
                        let int = parseInt(val);
                        if (!isFinite(int) || int != parseFloat(val))
                            allint = false;
                    }
                    if (allreal) {
                        if (!isFinite(parseFloat(val)))
                            allreal = false;
                    }
                }
                if (allnull) { }
                else if (allint)
                    ds.changeColumnType(i, "integer");
                else if (allreal)
                    ds.changeColumnType(i, "real");
                else if (allbool)
                    ds.changeColumnType(i, "boolean");
            }
    }
}


/***/ }),

/***/ "./src/io/MDLWriter.ts":
/*!*****************************!*\
  !*** ./src/io/MDLWriter.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MDLMOLWriter: () => (/* binding */ MDLMOLWriter),
/* harmony export */   MDLSDFWriter: () => (/* binding */ MDLSDFWriter)
/* harmony export */ });
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _mol_BondArtifact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mol/BondArtifact */ "./src/mol/BondArtifact.ts");
/* harmony import */ var _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/ForeignMolecule */ "./src/mol/ForeignMolecule.ts");
/* harmony import */ var _MDLReader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MDLReader */ "./src/io/MDLReader.ts");
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../mol/PolymerBlock */ "./src/mol/PolymerBlock.ts");
/* harmony import */ var _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../mol/QueryUtil */ "./src/mol/QueryUtil.ts");
/* harmony import */ var _mol_StereoGroup__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../mol/StereoGroup */ "./src/mol/StereoGroup.ts");









const VPFX = 'M  V30 ';
class MDLMOLWriter {
    constructor(mol) {
        this.mol = mol;
        this.includeHeader = true;
        this.includeCounts = true;
        this.includeEnd = true;
        this.overallStereoAbsolute = true;
        this.enhancedFields = false;
        this.chargeSeparate = false;
        this.abbrevSgroups = true;
        this.polymerBlocks = true;
        this.molName = '';
        this.scsrTemplates = null;
        this.sgroups = [];
        this.lines = [];
    }
    write() {
        if (this.includeHeader) {
            this.lines.push(this.molName);
            this.lines.push('Generated by WebMolKit');
            this.lines.push('');
        }
        this.writeCTAB();
        return this.lines.join('\n');
    }
    writeV3000() {
        if (this.includeHeader) {
            this.lines.push(this.molName);
            this.lines.push('Generated by WebMolKit');
            this.lines.push('');
        }
        this.writeCTAB3000();
        return this.lines.join('\n');
    }
    writeEither() {
        let triggered = _mol_StereoGroup__WEBPACK_IMPORTED_MODULE_8__.StereoGroup.hasStereoGroups(this.mol) || this.mol.numAtoms >= 1000 || this.mol.numBonds >= 1000 || _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.notBlank(this.scsrTemplates);
        if (!triggered)
            for (let n = 1; n <= this.mol.numBonds; n++)
                if (this.mol.bondOrder(n) == 0 && _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_7__.QueryUtil.queryBondOrders(this.mol, n) == null) {
                    triggered = true;
                    break;
                }
        if (triggered)
            return this.writeV3000();
        else
            return this.write();
    }
    getResult() {
        return this.lines.join('\n');
    }
    writeCTAB() {
        var _a;
        let mol = this.mol = this.mol.clone();
        mol.keepTransient = true;
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.hasAnyAbbrev(mol) || _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMolecule.hasAnySgroupMultiAttach(mol) || _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMolecule.hasAnySgroupMultiRepeat(mol) || _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMolecule.hasAnySgroupData(mol)) {
            if (this.abbrevSgroups)
                this.partialAbbrevExpansion();
            else
                _mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.expandAbbrevs(mol, true);
            this.prepareSgroups();
        }
        let atomList1 = [], atomList2 = [];
        for (let n = 1; n <= mol.numAtoms; n++) {
            let elements = null;
            let logic = 'F';
            elements = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_7__.QueryUtil.queryAtomElements(mol, n);
            if (elements == null) {
                elements = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_7__.QueryUtil.queryAtomElementsNot(mol, n);
                logic = 'T';
            }
            if (elements == null)
                continue;
            mol.setAtomElement(n, 'L');
            let line = this.intrpad(n, 3) + ' ' + logic + '  ' + this.intrpad(elements.length, 3);
            for (let el of elements)
                line += this.intrpad(_mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.elementAtomicNumber(el), 4);
            atomList1.push(line);
            line = 'M  ALS ' + this.intrpad(n, 3) + this.intrpad(elements.length, 3) + ' ' + logic + ' ';
            for (let el of elements)
                line += this.pad(el, 4);
            atomList2.push(line);
        }
        this.lines.push(this.intrpad(mol.numAtoms, 3) + this.intrpad(mol.numBonds, 3) + this.intrpad(atomList1.length, 3) +
            '  0' + (this.overallStereoAbsolute ? '  1' : '  0') + '  0  0  0  0  0999 V2000');
        let chgidx = [], chgval = [];
        let radidx = [], radval = [];
        let isoidx = [], isoval = [];
        let rgpidx = [], rgpval = [];
        let hydidx = [], hydval = [];
        let zchidx = [], zchval = [];
        let zboidx = [], zboval = [];
        let rbcidx = [], rbcval = [];
        let subidx = [], subval = [];
        let unsidx = [], unsval = [];
        for (let n = 1; n <= mol.numAtoms; n++) {
            let x = mol.atomX(n), y = mol.atomY(n);
            let z = mol.is3D() ? mol.atomZ(n) : 0;
            let line = this.rpad(x.toFixed(4), 10) + this.rpad(y.toFixed(4), 10) + this.rpad(z.toFixed(4), 10);
            let el = mol.atomElement(n);
            let str = el;
            if (str.length > 3)
                str = str.substring(0, 3);
            if (str.length > 1 && str.charAt(0) == 'R' && str.charAt(1) >= '0' && str.charAt(1) <= '9') {
                rgpidx.push(n);
                rgpval.push(parseInt(str.substring(1)));
                str = 'R#';
            }
            while (str.length < 4)
                str += ' ';
            line += ' ' + str + '0';
            let chg = mol.atomCharge(n), rad = mol.atomUnpaired(n), mapnum = mol.atomMapNum(n);
            if (chg >= -3 && chg <= -1)
                chg = 4 - chg;
            else if (chg == 0 && rad == 2)
                chg = 4;
            else if (chg >= 1 && chg <= 3)
                chg = 4 - chg;
            else
                chg = 0;
            let qhyd = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_7__.QueryUtil.queryAtomHydrogens(mol, n);
            let hyd = 0;
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.len(qhyd) == 1)
                hyd = qhyd[0] + 1;
            let val = this.mdlValence(mol, n, 15);
            line += this.intrpad(chg, 3) + '  0' + this.intrpad(hyd, 3) + '  0' + this.intrpad(val, 3) + '  0  0  0' + this.intrpad(mapnum, 3) + '  0  0';
            this.lines.push(line);
            if (mol.atomCharge(n) != 0) {
                chgidx.push(n);
                chgval.push(mol.atomCharge(n));
            }
            if (this.enhancedFields) {
                if (mol.atomHExplicit(n) != _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.HEXPLICIT_UNKNOWN) {
                    hydidx.push(n);
                    hydval.push(mol.atomHExplicit(n));
                }
            }
            if (rad == 1) {
                radidx.push(n);
                radval.push(2);
            }
            if (rad == 2) {
                radidx.push(n);
                radval.push(1);
            }
            if (mol.atomIsotope(n) != _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.ISOTOPE_NATURAL) {
                isoidx.push(n);
                isoval.push(mol.atomIsotope(n));
            }
            let qrbc = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_7__.QueryUtil.queryAtomRingBonds(mol, n), qsub = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_7__.QueryUtil.queryAtomAdjacency(mol, n);
            let quns = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_7__.QueryUtil.queryAtomUnsaturated(mol, n);
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.len(qrbc) == 1) {
                rbcidx.push(n);
                rbcval.push(qrbc[0] == 0 ? -1 : qrbc[0]);
            }
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.len(qsub) == 1) {
                subidx.push(n);
                subval.push(qsub[0] == 0 ? -1 : qsub[0]);
            }
            if (quns == true) {
                unsidx.push(n);
                unsval.push(1);
            }
        }
        let maskArom = _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMolecule.noteAromaticBonds(mol);
        for (let n = 1; n <= mol.numBonds; n++) {
            let order = mol.bondOrder(n), type = order;
            let qbond = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.sorted((_a = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_7__.QueryUtil.queryBondOrders(mol, n)) !== null && _a !== void 0 ? _a : []);
            if (maskArom[n - 1] || _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.equals(qbond, [-1]))
                type = 4;
            else if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.equals(qbond, [1, 2]))
                type = 5;
            else if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.equals(qbond, [-1, 1]))
                type = 6;
            else if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.equals(qbond, [-1, 2]))
                type = 7;
            else if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.equals(qbond, [-1, 0, 1, 2, 3]))
                type = 8;
            else if (type > 3)
                type = 3;
            let stereo = mol.bondType(n);
            if (stereo == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_NORMAL) { }
            else if (stereo == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_INCLINED) {
                stereo = 1;
            }
            else if (stereo == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_DECLINED) {
                stereo = 6;
            }
            else if (stereo == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_UNKNOWN) {
                if (type == 1)
                    stereo = 4;
                else
                    stereo = 3;
            }
            else
                stereo = 0;
            let line = this.intrpad(mol.bondFrom(n), 3) + this.intrpad(mol.bondTo(n), 3) +
                this.intrpad(type, 3) + this.intrpad(stereo, 3) + '  0  0  0';
            this.lines.push(line);
            if (this.enhancedFields) {
                if ((order < 1 || order > 3) || type != order && _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.isBlank(qbond)) {
                    zboidx.push(n);
                    zboval.push(order);
                }
            }
        }
        this.lines.push(...atomList1);
        this.lines.push(...atomList2);
        this.writeMBlockPair('CHG', chgidx, chgval);
        this.writeMBlockPair('RAD', radidx, radval);
        this.writeMBlockPair('ISO', isoidx, isoval);
        this.writeMBlockPair('RGP', rgpidx, rgpval);
        this.writeMBlockPair('HYD', hydidx, hydval);
        this.writeMBlockPair('ZCH', zchidx, zchval);
        this.writeMBlockPair('ZBO', zboidx, zboval);
        this.writeMBlockPair('RBC', rbcidx, rbcval);
        this.writeMBlockPair('SUB', subidx, subval);
        this.writeMBlockPair('UNS', unsidx, unsval);
        if (this.enhancedFields) {
            let artifacts = new _mol_BondArtifact__WEBPACK_IMPORTED_MODULE_1__.BondArtifact(this.mol);
            let idx = 0;
            for (let path of artifacts.getResPaths())
                this.writeMBlockFlat('ZPA', ++idx, path.atoms);
            for (let ring of artifacts.getResRings())
                this.writeMBlockFlat('ZRI', ++idx, ring.atoms);
            for (let arene of artifacts.getArenes())
                this.writeMBlockFlat('ZAR', ++idx, _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.prepend(arene.atoms, arene.centre));
        }
        let inSgroup = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, mol.numAtoms);
        for (let s = 0; s < this.sgroups.length; s++) {
            let sg = this.sgroups[s];
            for (let n of sg.atoms)
                inSgroup[n - 1] = true;
            let sidx = this.intrpad(s + 1, 4);
            this.lines.push('M  STY  1' + sidx + ' ' + sg.type);
            for (let n = 0; n < sg.atoms.length; n += 15) {
                let sz = Math.min(sg.atoms.length - n, 15);
                let line = 'M  SAL' + sidx + this.intrpad(sz, 3);
                for (let i = 0; i < sz; i++)
                    line += this.intrpad(sg.atoms[n + i], 4);
                this.lines.push(line);
            }
            if (sg.type != 'DAT') {
                if (sg.name)
                    this.lines.push('M  SMT' + sidx + ' ' + sg.name);
                if (sg.templateClass) {
                    this.lines.push('M  SCL' + sidx + ' ' + sg.templateClass);
                    if (!sg.name)
                        this.lines.push('M  SDS EXP  1' + sidx);
                }
            }
            if (sg.type == 'MUL') {
                let mult = parseInt(sg.name), unit = sg.atoms.length / mult;
                for (let n = 0; n < unit; n += 15) {
                    let sz = Math.min(unit - n, 15);
                    let line = 'M  SPA' + sidx + this.intrpad(sz, 3);
                    for (let i = 0; i < sz; i++)
                        line += this.intrpad(sg.atoms[n + i], 4);
                    this.lines.push(line);
                }
                if (sg.parent > 0)
                    this.lines.push('M  SPL    1' + sidx + this.intrpad(sg.parent, 4));
            }
            if (sg.type == 'DAT') {
                this.lines.push('M  SDT' + sidx + ' ' + this.pad(sg.name, 32) + this.pad(sg.unit, 20) + sg.query);
                this.lines.push('M  SED' + sidx + ' ' + sg.value);
            }
        }
        if (this.polymerBlocks)
            this.encodePolymerBlocks(this.sgroups.length);
        for (let n = 1; n <= mol.numAtoms; n++)
            if (mol.atomElement(n).length > 2) {
                this.lines.push('A  ' + this.intrpad(n, 3));
                this.lines.push(mol.atomElement(n));
            }
        if (this.includeEnd)
            this.lines.push('M  END');
    }
    writeMBlockPair(token, idx, val) {
        const sz = idx.length;
        for (let i = 0; i < sz; i += 8) {
            let count = Math.min(8, sz - i);
            let line = 'M  ' + token + this.intrpad(count, 3);
            for (let j = 0; j < count; j++)
                line += this.intrpad(idx[i + j], 4) + this.intrpad(val[i + j], 4);
            this.lines.push(line);
        }
    }
    writeMBlockFlat(token, idx, val) {
        const sz = val.length;
        for (let i = 0; i < sz; i += 15) {
            let count = Math.min(15, sz - i);
            let line = 'M  ' + token + this.intrpad(count, 3) + this.intrpad(idx, 4);
            for (let j = 0; j < count; j++)
                line += this.intrpad(val[i + j], 4);
            this.lines.push(line);
        }
    }
    writeMBlockFlatIdxFirst(token, idx, val) {
        const sz = val.length;
        for (let i = 0; i < sz; i += 15) {
            let count = Math.min(15, sz - i);
            let line = 'M  ' + token + this.intrpad(idx, 4) + this.intrpad(count, 3);
            for (let j = 0; j < count; j++)
                line += this.intrpad(val[i + j], 4);
            this.lines.push(line);
        }
    }
    intrpad(num, sz) {
        return this.rpad(num.toString(), sz);
    }
    rpad(str, sz) {
        while (str.length < sz)
            str = ' ' + str;
        return str;
    }
    pad(str, sz) {
        while (str.length < sz)
            str += ' ';
        return str;
    }
    mdlValence(mol, atom, zeroVal) {
        let marked = _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMolecule.noteExplicitValence(mol, atom);
        if (marked != null)
            return marked > 0 ? marked : zeroVal;
        let hyd = mol.atomHydrogens(atom), el = mol.atomElement(atom);
        let options = _MDLReader__WEBPACK_IMPORTED_MODULE_3__.MDLMOL_VALENCE[el];
        if (options == null && hyd == 0)
            return 0;
        let chg = mol.atomCharge(atom);
        let chgmod = (el == 'C' || el == 'H') ? Math.abs(chg) : el == 'B' ? -Math.abs(chg) : -chg;
        let bondSum = 0;
        for (let b of mol.atomAdjBonds(atom))
            bondSum += mol.bondOrder(b);
        let nativeVal = chgmod + hyd + bondSum;
        if (options)
            for (let optVal of options)
                if (optVal >= chgmod + bondSum) {
                    if (optVal == nativeVal)
                        return 0;
                    break;
                }
        let val = nativeVal - chgmod;
        return val <= 0 || val > 14 ? zeroVal : val;
    }
    partialAbbrevExpansion() {
        const { mol } = this;
        for (let n = 1; n <= mol.numAtoms; n++)
            if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.hasAbbrev(mol, n)) {
                let frag = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.getAbbrev(mol, n);
                if (frag == null || mol.atomAdjCount(n) != 1) {
                    _mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.clearAbbrev(mol, n);
                    continue;
                }
                if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.hasAnyAbbrev(frag)) {
                    _mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.expandAbbrevs(frag, true);
                    _mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.setAbbrev(mol, n, frag);
                }
                let order = mol.bondOrder(mol.atomAdjBonds(n)[0]);
                if (frag.atomAdjCount(1) == 1 && order == frag.bondOrder(frag.atomAdjBonds(1)[0]))
                    continue;
                _mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.expandOneAbbrev(mol, n, true);
                n--;
            }
    }
    prepareSgroups() {
        const { mol } = this;
        for (let n = 1; n <= mol.numAtoms; n++)
            if (mol.atomMapNum(n) < 0)
                mol.setAtomMapNum(n, 0);
        let next = 0;
        for (let n = 1; n <= mol.numAtoms; n++)
            if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.hasAbbrev(mol, n)) {
                this.sgroups.push({ type: 'SUP', name: mol.atomElement(n), atoms: null });
                let mask = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.expandOneAbbrev(mol, n, true);
                if (mask == null)
                    continue;
                next--;
                for (let i = 0; i < mask.length; i++)
                    if (mask[i])
                        mol.setAtomMapNum(i + 1, next);
                n--;
            }
        for (let idx = -1, p = 0; idx >= next; idx--, p++) {
            let atoms = [];
            for (let n = 1; n <= mol.numAtoms; n++)
                if (mol.atomMapNum(n) == idx) {
                    atoms.push(n);
                    mol.setAtomMapNum(n, 0);
                }
            this.sgroups[p].atoms = atoms;
        }
        for (let ma of _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMolecule.noteAllSgroupMultiAttach(mol)) {
            let sg = { type: 'SUP', name: ma.name, atoms: ma.atoms };
            let str = ma.keyval['bonds'];
            if (str)
                sg.bonds = str.split(' ').map((v) => parseInt(v));
            sg.templateClass = ma.keyval['templateClass'];
            sg.natReplace = ma.keyval['natReplace'];
            str = ma.keyval['attachPoints'];
            if (str)
                sg.attachPoints = str.split(' ');
            this.sgroups.push(sg);
        }
        for (let mr of _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMolecule.noteAllSgroupMultiRepeat(mol))
            this.sgroups.push({ type: 'MUL', name: mr.mult.toString(), atoms: mr.atoms });
        for (let dat of _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMolecule.noteAllSgroupData(mol))
            this.sgroups.push({ type: 'DAT', name: dat.name, value: dat.value, unit: dat.unit, query: dat.query, atoms: dat.atoms });
        for (let n = 0; n < this.sgroups.length; n++) {
            let sg = this.sgroups[n];
            if (sg.type != 'MUL')
                continue;
            let bestIdx = -1, bestSize = Number.MAX_SAFE_INTEGER;
            skip: for (let i = 0; i < this.sgroups.length; i++)
                if (i != n) {
                    let look = this.sgroups[i];
                    if (look.type != 'MUL' || look.atoms.length >= bestSize)
                        continue;
                    for (let a of sg.atoms)
                        if (!look.atoms.includes(a))
                            continue skip;
                    bestIdx = i;
                    bestSize = look.atoms.length;
                }
            if (bestIdx >= 0)
                sg.parent = bestIdx + 1;
        }
    }
    encodePolymerBlocks(idx) {
        let polymers = new _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_6__.PolymerBlock(this.mol);
        for (let id of polymers.getIDList()) {
            let unit = polymers.getUnit(id);
            let sidx = this.intrpad(++idx, 4);
            this.lines.push('M  STY  1' + sidx + ' SRU');
            if (unit.connect == _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_6__.PolymerBlockConnectivity.HeadToTail)
                this.lines.push('M  SCN  1' + sidx + ' HT ');
            else if (unit.connect == _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_6__.PolymerBlockConnectivity.HeadToHead)
                this.lines.push('M  SCN  1' + sidx + ' HH ');
            else if (unit.connect == _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_6__.PolymerBlockConnectivity.Random)
                this.lines.push('M  SCN  1' + sidx + ' EU ');
            this.writeMBlockFlatIdxFirst('SAL', idx, unit.atoms);
            let bonds = null;
            for (let n = 1; n <= this.mol.numBonds; n++) {
                let fl1 = unit.atoms.indexOf(this.mol.bondFrom(n)) >= 0, fl2 = unit.atoms.indexOf(this.mol.bondTo(n)) >= 0;
                if ((fl1 && !fl2) || (!fl1 && fl2))
                    bonds = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.append(bonds, n);
            }
            if (bonds != null)
                this.writeMBlockFlatIdxFirst('SBL', idx, bonds);
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.len(unit.bondConn) == 4) {
                let bcrs = [unit.bondConn[0], unit.bondConn[2], unit.bondConn[1]];
                this.writeMBlockFlatIdxFirst('CRS', idx, bcrs);
            }
            this.lines.push('M  SMT' + sidx + ' n');
        }
    }
    writeCTAB3000() {
        var _a;
        let mol = this.mol;
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.hasAnyAbbrev(mol) || _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMolecule.hasAnySgroupMultiAttach(mol) || _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMolecule.hasAnySgroupMultiRepeat(mol) || _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMolecule.hasAnySgroupData(mol)) {
            mol = this.mol = mol.clone();
            mol.keepTransient = true;
            if (this.abbrevSgroups)
                this.partialAbbrevExpansion();
            else
                _mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.expandAbbrevs(mol, true);
            this.prepareSgroups();
        }
        let sgroupText = this.populateV3000Sgroups();
        if (this.includeCounts)
            this.lines.push('  0  0  0     0  0            999 V3000');
        this.lines.push(VPFX + 'BEGIN CTAB');
        this.lines.push(VPFX + `COUNTS ${mol.numAtoms} ${mol.numBonds} ${sgroupText.length} 0 ${this.overallStereoAbsolute ? 1 : 0}`);
        this.lines.push(VPFX + 'BEGIN ATOM');
        for (let n = 1; n <= mol.numAtoms; n++) {
            let label = mol.atomElement(n);
            let qel = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_7__.QueryUtil.queryAtomElements(mol, n);
            if (qel != null)
                label = '[' + qel.join(',') + ']';
            else {
                qel = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_7__.QueryUtil.queryAtomElementsNot(mol, n);
                if (qel != null)
                    label = 'NOT [' + qel.join(',') + ']';
            }
            if (label.includes(' '))
                label = `"${label}"`;
            let x = mol.atomX(n), y = mol.atomY(n);
            let z = mol.is3D() ? mol.atomZ(n) : 0;
            let mapnum = mol.atomMapNum(n), chg = mol.atomCharge(n), unp = mol.atomUnpaired(n);
            let isotope = mol.atomIsotope(n), val = this.mdlValence(mol, n, -1);
            let line = `${VPFX}${n} ${label} ${x.toFixed(4)} ${y.toFixed(4)} ${z.toFixed(4)} ${mapnum}`;
            if (chg != 0)
                line += ' CHG=' + chg;
            if (unp == 1)
                line += ' RAD=2';
            else if (unp == 2)
                line += ' RAD=1';
            if (isotope != 0)
                line += ' MASS=' + isotope;
            if (val != 0)
                line += ' VAL=' + val;
            let qhyd = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_7__.QueryUtil.queryAtomHydrogens(mol, n), qrbc = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_7__.QueryUtil.queryAtomRingBonds(mol, n), qsub = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_7__.QueryUtil.queryAtomAdjacency(mol, n);
            let quns = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_7__.QueryUtil.queryAtomUnsaturated(mol, n);
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.len(qhyd) == 1)
                line += ' HCOUNT=' + (qhyd[0] == 0 ? -1 : qhyd[0]);
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.len(qrbc) == 1)
                line += ' RBCNT=' + (qrbc[0] == 0 ? -1 : qrbc[0]);
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.len(qsub) == 1)
                line += ' SUBST=' + (qsub[0] == 0 ? -1 : qsub[0]);
            if (quns == true)
                line += ' UNSAT=1';
            for (let trans of mol.atomTransient(n)) {
                if (trans.startsWith(_mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMoleculeTransient.AtomSCSRClass))
                    line += ' CLASS=' + trans.substring(_mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMoleculeTransient.AtomSCSRClass.length + 1);
                else if (trans.startsWith(_mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMoleculeTransient.AtomSCSRSeqID))
                    line += ' SEQID=' + trans.substring(_mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMoleculeTransient.AtomSCSRSeqID.length + 1);
                else if (trans.startsWith(_mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMoleculeTransient.AtomSCSRAttchOrd)) {
                    let bits = trans.substring(_mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMoleculeTransient.AtomSCSRAttchOrd.length + 1).split(',');
                    line += ' ATTCHORD=' + this.packV3000Strings(bits);
                }
            }
            this.lines.push(line);
        }
        this.lines.push(VPFX + 'END ATOM');
        if (mol.numBonds > 0) {
            this.lines.push(VPFX + 'BEGIN BOND');
            let maskArom = _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMolecule.noteAromaticBonds(mol);
            let maskHBond = _mol_ForeignMolecule__WEBPACK_IMPORTED_MODULE_2__.ForeignMolecule.noteZeroHydrogenBonds(mol);
            for (let n = 1; n <= mol.numBonds; n++) {
                let bfr = mol.bondFrom(n), bto = mol.bondTo(n);
                let order = mol.bondOrder(n), type = order;
                let qbond = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.sorted((_a = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_7__.QueryUtil.queryBondOrders(mol, n)) !== null && _a !== void 0 ? _a : []);
                if (maskArom[n - 1] || _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.equals(qbond, [-1]))
                    type = 4;
                else if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.equals(qbond, [1, 2]))
                    type = 5;
                else if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.equals(qbond, [-1, 1]))
                    type = 6;
                else if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.equals(qbond, [-1, 2]))
                    type = 7;
                else if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.equals(qbond, [-1, 0, 1, 2, 3]))
                    type = 8;
                else if (type == 0) {
                    if (!maskHBond[n - 1])
                        type = 9;
                    else
                        type = 10;
                }
                else if (type > 3)
                    type = 3;
                let stereo = mol.bondType(n);
                let line = `${VPFX}${n} ${type} ${bfr} ${bto}`;
                if (stereo == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_INCLINED)
                    line += ' CFG=1';
                else if (stereo == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_DECLINED)
                    line += ' CFG=3';
                else if (stereo == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_UNKNOWN)
                    line += ' CFG=2';
                if (order == 0 && !maskHBond[n - 1])
                    line += ' DISP=COORD';
                this.lines.push(line);
            }
            this.lines.push(VPFX + 'END BOND');
        }
        if (sgroupText.length > 0) {
            this.lines.push(VPFX + 'BEGIN SGROUP');
            this.lines.push(...sgroupText);
            this.lines.push(VPFX + 'END SGROUP');
        }
        let collections = [];
        let stereoGroup = new _mol_StereoGroup__WEBPACK_IMPORTED_MODULE_8__.StereoGroup(mol);
        let racidx = 0, relidx = 0;
        for (let atoms of stereoGroup.getRacemicAtoms())
            collections.push(VPFX + 'MDLV30/STERAC' + (++racidx) + ' ATOMS=' + this.packV3000List(atoms));
        for (let atoms of stereoGroup.getRelativeAtoms())
            collections.push(VPFX + 'MDLV30/STEREL' + (++relidx) + ' ATOMS=' + this.packV3000List(atoms));
        if (collections.length > 0) {
            this.lines.push(VPFX + 'BEGIN COLLECTION');
            this.lines.push(...collections);
            this.lines.push(VPFX + 'END COLLECTION');
        }
        this.lines.push(VPFX + 'END CTAB');
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.notBlank(this.scsrTemplates))
            this.populateSCSRTemplates();
        if (this.includeEnd)
            this.lines.push('M  END');
    }
    populateV3000Sgroups() {
        let mol = this.mol;
        let lines = [];
        for (let s = 0; s < this.sgroups.length; s++) {
            let sg = this.sgroups[s];
            let sid = lines.length + 1;
            let txt = `${VPFX}${sid} ${sg.type} 0`;
            if (sg.type == 'SUP') {
                txt += ' LABEL=' + (sg.name.includes(' ') ? `"${sg.name}"` : sg.name);
                txt += ' ATOMS=' + this.packV3000List(sg.atoms);
                if (sg.bonds)
                    txt += ' XBONDS=' + this.packV3000List(sg.bonds);
                if (sg.templateClass)
                    txt += ' CLASS=' + sg.templateClass;
                if (!sg.name)
                    txt += ' ESTATE=E';
                if (sg.natReplace)
                    txt += ' NATREPLACE=' + sg.natReplace;
                if (sg.attachPoints) {
                    for (let n = 0; n + 2 < sg.attachPoints.length; n += 3) {
                        let v1 = sg.attachPoints[n], v2 = sg.attachPoints[n + 1], v3 = sg.attachPoints[n + 2];
                        txt += ` SAP=(3 ${v1} ${v2} ${v3})`;
                    }
                }
            }
            else if (sg.type == 'MUL') {
                let mult = parseInt(sg.name), unit = sg.atoms.length / mult;
                txt += ' MULT=' + sg.name;
                txt += ' ATOMS=' + this.packV3000List(sg.atoms);
                txt += ' PATOMS=' + this.packV3000List(sg.atoms.slice(0, unit));
                if (sg.parent > 0)
                    txt += ' PARENT=' + sg.parent;
            }
            else if (sg.type == 'DAT') {
                txt += ' ATOMS=' + this.packV3000List(sg.atoms);
                txt += ' FIELDNAME=' + (sg.name.includes(' ') ? `"${sg.name}"` : sg.name);
                txt += ' FIELDDATA=' + (sg.value.includes(' ') ? `"${sg.value}"` : sg.value);
            }
            lines.push(txt);
        }
        if (this.polymerBlocks) {
            let polymers = new _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_6__.PolymerBlock(mol);
            for (let id of polymers.getIDList()) {
                let sid = lines.length + 1;
                let unit = polymers.getUnit(id);
                let txt = `${VPFX}${sid} SRU 0`;
                txt += ' ATOMS=' + this.packV3000List(unit.atoms);
                if (unit.connect == _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_6__.PolymerBlockConnectivity.HeadToTail)
                    txt += ' CONNECT=HT';
                else if (unit.connect == _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_6__.PolymerBlockConnectivity.HeadToHead)
                    txt += ' CONNECT=HH';
                else if (unit.connect == _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_6__.PolymerBlockConnectivity.Random)
                    txt += ' CONNECT=EU';
                let bonds = [];
                for (let n = 1; n <= mol.numBonds; n++) {
                    let fl1 = unit.atoms.includes(mol.bondFrom(n)), fl2 = unit.atoms.includes(mol.bondTo(n));
                    if ((fl1 && !fl2) || (!fl1 && fl2))
                        bonds.push(n);
                }
                if (bonds.length > 0)
                    txt += ' BONDS=' + this.packV3000List(bonds);
                if (unit.bondConn != null)
                    txt += ' XBCORR=' + this.packV3000List(unit.bondConn);
                lines.push(txt);
            }
        }
        return lines;
    }
    populateSCSRTemplates() {
        this.lines.push(VPFX + 'BEGIN TEMPLATE');
        for (let n = 0; n < this.scsrTemplates.length; n++) {
            var defn = this.scsrTemplates[n];
            let line = VPFX + 'TEMPLATE ' + (n + 1) + ' ' + defn.name;
            if (defn.natReplace)
                line += ' NATREPLACE=' + defn.natReplace;
            this.lines.push(line);
            var tmdl = new MDLMOLWriter(defn.mol);
            tmdl.includeHeader = false;
            tmdl.includeCounts = false;
            tmdl.includeEnd = false;
            let molfile = tmdl.writeV3000();
            for (line of molfile.trimEnd().split('\n'))
                this.lines.push(line);
        }
        this.lines.push(VPFX + 'END TEMPLATE');
    }
    packV3000List(values) {
        let str = '(' + values.length;
        for (let v of values)
            str += ' ' + v;
        return str + ')';
    }
    packV3000Strings(values) {
        let str = '(' + values.length;
        for (let v of values)
            str += ' ' + v;
        return str + ')';
    }
}
class MDLSDFWriter {
    constructor(ds) {
        this.ds = ds;
        this.enhancedFields = true;
        this.chargeSeparate = false;
        this.abbrevSgroups = true;
        this.lines = [];
    }
    write() {
        let ds = this.ds, lines = this.lines;
        let colMol = this.ds.firstColOfType("molecule");
        for (let i = 0; i < ds.numRows; i++) {
            let mol = colMol < 0 ? null : ds.getMolecule(i, colMol);
            if (mol != null) {
                let wtr = new MDLMOLWriter(mol);
                wtr.enhancedFields = this.enhancedFields;
                wtr.chargeSeparate = this.chargeSeparate;
                wtr.abbrevSgroups = this.abbrevSgroups;
                let molstr = wtr.write();
                lines.push(molstr);
            }
            for (let j = 0; j < ds.numCols; j++)
                if (j != colMol && ds.notNull(i, j)) {
                    let ct = ds.colType(j);
                    let val = '';
                    if (ct == "string")
                        val = ds.getString(i, j);
                    else if (ct == "integer")
                        val = ds.getInteger(i, j).toString();
                    else if (ct == "real")
                        val = ds.getReal(i, j).toString();
                    else if (ct == "boolean")
                        val = ds.getBoolean(i, j) ? 'true' : 'false';
                    if (val != '') {
                        lines.push('> <' + ds.colName(j) + '>');
                        lines.push(val);
                        lines.push('');
                    }
                }
            lines.push('$$$$');
        }
        return lines.join('\n');
    }
    getResult() {
        return this.lines.join('\n');
    }
}


/***/ }),

/***/ "./src/io/MoleculeStream.ts":
/*!**********************************!*\
  !*** ./src/io/MoleculeStream.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MoleculeStream: () => (/* binding */ MoleculeStream)
/* harmony export */ });
/* harmony import */ var _MDLReader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MDLReader */ "./src/io/MDLReader.ts");
/* harmony import */ var _MDLWriter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MDLWriter */ "./src/io/MDLWriter.ts");
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");



const ESCAPED_CHARS = '\n\t\\,=';
function escape(str) {
    let buff = null;
    for (let n = 0; n < str.length; n++) {
        let ch = str.charAt(n);
        let escape = ESCAPED_CHARS.includes(ch), ctrl = ch.charCodeAt(0) < 32;
        if (buff == null && (escape || ctrl)) {
            buff = str.substring(0, n);
        }
        if (escape) {
            if (ch == '\n')
                buff += '\\n';
            else if (ch == '\t')
                buff += '\\t';
            else
                buff += '\\' + ch;
        }
        else if (ctrl) { }
        else if (buff != null)
            buff += ch;
    }
    return buff !== null && buff !== void 0 ? buff : str;
}
function writeKeyVals(keyvals) {
    let str = '';
    let multiline = [];
    for (let kv of keyvals) {
        if (!kv.includes('\n'))
            str += ',' + escape(kv);
        else
            multiline.push(kv);
    }
    str += '\n';
    for (let kv of multiline) {
        let lines = kv.trimEnd().split('\n');
        for (let n = 0; n < lines.length; n++) {
            str += `${n == 0 ? '.' : ':'}${lines[n]}\n`;
        }
    }
    return str;
}
function readNextChunk(line, pos, term, mandatory) {
    let end = pos, sz = line.length;
    if (pos >= sz) {
        if (mandatory)
            throw new Error('Molecule missing line fragment');
        return null;
    }
    let escaped = false;
    while (end < sz) {
        let ch = line.charAt(end);
        if (ch == '\\') {
            if (end == sz - 1)
                throw new Error('Escape character \\ at end of line');
            escaped = true;
            end += 2;
        }
        else if (ch == term)
            break;
        else
            end++;
    }
    if (!escaped)
        return { str: line.substring(pos, end), pos: end };
    var str = '';
    for (let n = pos; n < end; n++) {
        let ch = line.charAt(n);
        if (ch == '\\') {
            ch = line.charAt(++n);
            if (ch == 'n')
                str += '\n';
            else if (ch == 't')
                str += '\t';
            else
                str += ch;
        }
        else
            str += ch;
    }
    return { str, pos: end };
}
class MoleculeStream {
    static readUnknown(strData) {
        if (strData.startsWith('"')) {
            try {
                let jsonStr = JSON.parse(strData);
                if (jsonStr && typeof jsonStr == 'string') {
                    try {
                        let mol = MoleculeStream.readNative(jsonStr);
                        if (mol)
                            return mol;
                    }
                    catch (ex) { }
                    try {
                        let mol = MoleculeStream.readMDLMOL(jsonStr);
                        if (mol)
                            return mol;
                    }
                    catch (ex) { }
                }
            }
            catch (ex) { }
        }
        let mol = MoleculeStream.readNative(strData);
        if (mol)
            return mol;
        try {
            mol = MoleculeStream.readMDLMOL(strData);
        }
        catch (e) { }
        return mol;
    }
    static readNative(strData) {
        if (strData.startsWith('SketchEl!'))
            return this.readNativeLegacy(strData);
        let mol = new _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule();
        mol.keepTransient = true;
        let lines = strData.split(/\r?\n/);
        let match = lines[0].match(/^Elements\!\((\d+),(\d+)\)$/);
        if (!match)
            return null;
        let numAtoms = parseInt(match[1]), numBonds = parseInt(match[2]);
        if (!(numAtoms >= 0))
            throw new Error(`Invalid atom count: ${match[1]}`);
        if (!(numBonds >= 0))
            throw new Error(`Invalid bond count: ${match[2]}`);
        const MSG_PREMATURE = 'Molecule atom content ends prematurely';
        const MSG_UNEXPECTED = 'Molecule unexpected end tag';
        const parseIntHard = (str) => {
            let v = parseInt(str);
            if (Number.isNaN(v))
                throw new Error(`Malformed integer: ${str}`);
            return v;
        };
        const parseFloatHard = (str) => {
            let v = parseFloat(str);
            if (Number.isNaN(v))
                throw new Error(`Malformed float: ${str}`);
            return v;
        };
        const applyAtomProperty = (atom, str) => {
            if (!str)
                return;
            let pfx = str.charAt(0);
            if (pfx == 'z')
                mol.setAtomZ(atom, parseFloatHard(str.substring(1)));
            else if (pfx == 'c')
                mol.setAtomCharge(atom, parseIntHard(str.substring(1)));
            else if (pfx == 'u')
                mol.setAtomUnpaired(atom, parseIntHard(str.substring(1)));
            else if (pfx == 'h')
                mol.setAtomHExplicit(atom, parseIntHard(str.substring(1)));
            else if (pfx == 'i')
                mol.setAtomIsotope(atom, parseIntHard(str.substring(1)));
            else if (pfx == 'm')
                mol.setAtomMapNum(atom, parseIntHard(str.substring(1)));
            else if (pfx == 'y')
                mol.appendAtomTransient(atom, str);
            else
                mol.appendAtomExtra(atom, str);
        };
        const applyBondProperty = (bond, str) => {
            if (!str)
                return;
            let pfx = str.charAt(0);
            if (pfx == 'i')
                mol.setBondType(bond, _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.BONDTYPE_INCLINED);
            else if (pfx == 'd')
                mol.setBondType(bond, _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.BONDTYPE_DECLINED);
            else if (pfx == 'u')
                mol.setBondType(bond, _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.BONDTYPE_UNKNOWN);
            else if (pfx == 'y')
                mol.appendBondTransient(bond, str);
            else
                mol.appendBondExtra(bond, str);
        };
        let lnum = 1;
        for (let n = 1; n <= numAtoms; n++) {
            if (!lines[lnum])
                throw new Error(MSG_PREMATURE);
            let chunkEl = readNextChunk(lines[lnum], 0, '=', true);
            let chunkX = readNextChunk(lines[lnum], chunkEl.pos + 1, ',', true);
            let chunkY = readNextChunk(lines[lnum], chunkX.pos + 1, ',', true);
            let x = parseFloatHard(chunkX.str), y = parseFloatHard(chunkY.str);
            mol.addAtom(chunkEl.str, x, y);
            let pos = chunkY.pos + 1;
            while (true) {
                var chunk = readNextChunk(lines[lnum], pos, ',', false);
                if (chunk == null)
                    break;
                applyAtomProperty(n, chunk.str);
                pos = chunk.pos + 1;
            }
            lnum++;
            while (true) {
                if (!lines[lnum])
                    throw new Error(MSG_PREMATURE);
                if (lines[lnum] == '!End') {
                    if (n == numAtoms && numBonds == 0)
                        break;
                    throw new Error(MSG_UNEXPECTED);
                }
                if (!lines[lnum].startsWith('.'))
                    break;
                var buff = lines[lnum].substring(1);
                while (true) {
                    lnum++;
                    if (!lines[lnum])
                        throw new Error(MSG_PREMATURE);
                    if (!lines[lnum].startsWith(':'))
                        break;
                    buff += '\n' + lines[lnum].substring(1);
                }
                applyAtomProperty(n, buff);
            }
        }
        for (let n = 1; n <= numBonds; n++) {
            if (!lines[lnum])
                throw new Error(MSG_PREMATURE);
            var chunkFrom = readNextChunk(lines[lnum], 0, '-', true);
            var chunkTo = readNextChunk(lines[lnum], chunkFrom.pos + 1, '=', true);
            var chunkOrder = readNextChunk(lines[lnum], chunkTo.pos + 1, ',', true);
            let bfr = parseIntHard(chunkFrom.str), bto = parseIntHard(chunkTo.str), order = parseIntHard(chunkOrder.str);
            if (bfr < 1 || bfr > numAtoms || bto < 1 || bto > numAtoms || order < 0 || order > 4)
                throw new Error('Invalid bond specification');
            mol.addBond(bfr, bto, order);
            let pos = chunkOrder.pos + 1;
            while (true) {
                var chunk = readNextChunk(lines[lnum], pos, ',', false);
                if (chunk == null)
                    break;
                applyBondProperty(n, chunk.str);
                pos = chunk.pos + 1;
            }
            lnum++;
            while (true) {
                if (!lines[lnum])
                    throw new Error(MSG_PREMATURE);
                if (lines[lnum] == '!End') {
                    if (n == numBonds)
                        break;
                    throw new Error(MSG_UNEXPECTED);
                }
                if (!lines[lnum].startsWith('.'))
                    break;
                let buff = lines[lnum].substring(1);
                while (true) {
                    lnum++;
                    if (!lines[lnum])
                        throw new Error(MSG_PREMATURE);
                    if (!lines[lnum].startsWith(':'))
                        break;
                    buff += '\n' + lines[lnum].substring(1);
                }
                applyBondProperty(n, buff);
            }
        }
        if (lines[lnum] != '!End')
            throw new Error('Molecule end tag missing');
        mol.keepTransient = false;
        return mol;
    }
    static readNativeLegacy(strData) {
        let mol = new _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule();
        mol.keepTransient = true;
        let lines = strData.split(/\r?\n/);
        if (lines.length < 2)
            return null;
        if (!lines[0].startsWith('SketchEl!') && lines.length >= 4 && lines[3].indexOf('V2000') >= 0) {
            let i = strData.indexOf('SketchEl!');
            if (i < 0)
                return null;
            lines = strData.substring(i).split(/r?\n/);
        }
        let hdr = lines[0].match(/^SketchEl\!\((\d+)\,(\d+)\)/);
        if (!hdr)
            return null;
        let numAtoms = parseInt(hdr[1]), numBonds = parseInt(hdr[2]);
        if (lines.length < 2 + numAtoms + numBonds)
            return null;
        if (!lines[1 + numAtoms + numBonds].match(/^!End/))
            return null;
        for (let n = 0; n < numAtoms; n++) {
            let bits = lines[1 + n].split(/[=,;]/);
            let num = mol.addAtom(MoleculeStream.skUnescape(bits[0]), parseFloat(bits[1]), parseFloat(bits[2]), parseInt(bits[3]), parseInt(bits[4]));
            let extra = [], trans = [];
            for (let i = 5; i < bits.length; i++) {
                let ch = bits[i].charAt(0);
                if (bits[i].charAt(0) == 'i') { }
                else if (bits[i].charAt(0) == 'e')
                    mol.setAtomHExplicit(num, parseInt(bits[i].substring(1)));
                else if (bits[i].charAt(0) == 'm')
                    mol.setAtomIsotope(num, parseInt(bits[i].substring(1)));
                else if (bits[i].charAt(0) == 'n')
                    mol.setAtomMapNum(num, parseInt(bits[i].substring(1)));
                else if (bits[i].charAt(0) == 'x')
                    extra.push(MoleculeStream.skUnescape(bits[i]));
                else if (bits[i].charAt(0) == 'y')
                    trans.push(MoleculeStream.skUnescape(bits[i]));
                else if (bits[i].charAt(0) == 'z') {
                    mol.setAtomZ(num, parseFloat(bits[i].substring(1)));
                    mol.setIs3D(true);
                }
                else
                    extra.push(MoleculeStream.skUnescape(bits[i]));
            }
            mol.setAtomExtra(num, extra);
            mol.setAtomTransient(num, trans);
        }
        for (let n = 0; n < numBonds; n++) {
            let bits = lines[1 + numAtoms + n].split(/[=,]/);
            let frto = bits[0].split('-');
            let bfr = parseInt(frto[0].trim()), bto = parseInt(frto[1].trim());
            if (bfr == bto)
                continue;
            let num = mol.addBond(bfr, bto, parseInt(bits[1]), parseInt(bits[2]));
            let extra = new Array(), trans = new Array();
            for (let i = 3; i < bits.length; i++) {
                let ch = bits[i].charAt(0);
                if (bits[i].charAt(0) == 'x')
                    extra.push(MoleculeStream.skUnescape(bits[i]));
                else if (bits[i].charAt(0) == 'y')
                    trans.push(MoleculeStream.skUnescape(bits[i]));
                else
                    extra.push(MoleculeStream.skUnescape(bits[i]));
            }
            mol.setBondExtra(num, extra);
            mol.setBondTransient(num, trans);
        }
        mol.keepTransient = false;
        return mol;
    }
    static writeNative(mol) {
        if (!this.formatV2Elements)
            return this.writeNativeLegacy(mol);
        let bits = [`Elements!(${mol.numAtoms},${mol.numBonds})\n`];
        const roundedNumber = (v) => {
            return (Math.round(v * 1E4) * 1E-4).toFixed(4);
        };
        for (let n = 1; n <= mol.numAtoms; n++) {
            let el = mol.atomElement(n), x = roundedNumber(mol.atomX(n)), y = roundedNumber(mol.atomY(n));
            bits.push(`${escape(el)}=${x},${y}`);
            let keyvals = [];
            if (mol.is3D())
                keyvals.push(`z${roundedNumber(mol.atomZ(n))}`);
            let chg = mol.atomCharge(n), unp = mol.atomUnpaired(n), hyd = mol.atomHExplicit(n), iso = mol.atomIsotope(n), map = mol.atomMapNum(n);
            if (chg != 0)
                keyvals.push(`c${chg}`);
            if (unp != 0)
                keyvals.push(`u${unp}`);
            if (hyd != _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.HEXPLICIT_UNKNOWN)
                keyvals.push(`h${hyd}`);
            if (iso != _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.ISOTOPE_NATURAL)
                keyvals.push(`i${iso}`);
            if (map > 0)
                keyvals.push(`m${map}`);
            keyvals.push(...mol.atomExtra(n));
            keyvals.push(...mol.atomTransient(n));
            bits.push(writeKeyVals(keyvals));
        }
        for (let n = 1; n <= mol.numBonds; n++) {
            let bfr = mol.bondFrom(n), bto = mol.bondTo(n), order = mol.bondOrder(n);
            bits.push(`${bfr}-${bto}=${order}`);
            let keyvals = [];
            let typ = mol.bondType(n);
            if (typ == _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.BONDTYPE_INCLINED)
                keyvals.push('i');
            else if (typ == _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.BONDTYPE_DECLINED)
                keyvals.push('d');
            else if (typ == _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.BONDTYPE_UNKNOWN)
                keyvals.push('u');
            keyvals.push(...mol.bondExtra(n));
            keyvals.push(...mol.bondTransient(n));
            bits.push(writeKeyVals(keyvals));
        }
        bits.push('!End\n');
        return bits.join('');
    }
    static writeNativeLegacy(mol) {
        let ret = 'SketchEl!(' + mol.numAtoms + ',' + mol.numBonds + ')\n';
        for (let n = 1; n <= mol.numAtoms; n++) {
            let el = mol.atomElement(n), x = mol.atomX(n), y = mol.atomY(n), charge = mol.atomCharge(n), unpaired = mol.atomUnpaired(n);
            let hy = mol.atomHExplicit(n) != _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.HEXPLICIT_UNKNOWN ? ('e' + mol.atomHExplicit(n)) : ('i' + mol.atomHydrogens(n));
            ret += MoleculeStream.skEscape(el) + '=' + x.toFixed(4) + ',' + y.toFixed(4) + ';' + charge + ',' + unpaired + ',' + hy;
            if (mol.is3D())
                ret += ',z' + mol.atomZ(n);
            if (mol.atomIsotope(n) != _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.ISOTOPE_NATURAL)
                ret += ',m' + mol.atomIsotope(n);
            if (mol.atomMapNum(n) > 0)
                ret += ',n' + mol.atomMapNum(n);
            ret += MoleculeStream.skEncodeExtra(mol.atomExtra(n));
            ret += MoleculeStream.skEncodeExtra(mol.atomTransient(n));
            ret += '\n';
        }
        for (let n = 1; n <= mol.numBonds; n++) {
            ret += mol.bondFrom(n) + '-' + mol.bondTo(n) + '=' + mol.bondOrder(n) + ',' + mol.bondType(n);
            ret += MoleculeStream.skEncodeExtra(mol.bondExtra(n));
            ret += MoleculeStream.skEncodeExtra(mol.bondTransient(n));
            ret += '\n';
        }
        ret += '!End\n';
        return ret;
    }
    static readMDLMOL(strData) {
        let src = new _MDLReader__WEBPACK_IMPORTED_MODULE_0__.MDLMOLReader(strData);
        src.parseHeader = true;
        src.parse();
        return src.mol;
    }
    static writeMDLMOL(mol) {
        return new _MDLWriter__WEBPACK_IMPORTED_MODULE_1__.MDLMOLWriter(mol).write();
    }
    static skUnescape(str) {
        let ret = '', match;
        while (match = str.match(/^(.*?)\\([0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f])(.*)/)) {
            ret += match[1] + String.fromCharCode(parseInt('0x' + match[2]));
            str = match[3];
        }
        return ret + str;
    }
    static skEscape(str) {
        let ret = '';
        for (let n = 0; n < str.length; n++) {
            let ch = str.charAt(n), code = str.charCodeAt(n);
            if (code <= 32 || code > 127 || ch == '\\' || ch == ',' || ch == ';' || ch == '=') {
                let hex = (code & 0xFFFF).toString(16).toUpperCase();
                ret += '\\';
                for (let i = 4 - hex.length; i > 0; i--)
                    ret += '0';
                ret += hex;
            }
            else
                ret += ch;
        }
        return ret;
    }
    static skEncodeExtra(extra) {
        let ret = '';
        for (let n = 0; n < extra.length; n++)
            ret += ',' + MoleculeStream.skEscape(extra[n]);
        return ret;
    }
}
MoleculeStream.formatV2Elements = false;


/***/ }),

/***/ "./src/mol/BondArtifact.ts":
/*!*********************************!*\
  !*** ./src/mol/BondArtifact.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BONDARTIFACT_EXTRA_ARENE: () => (/* binding */ BONDARTIFACT_EXTRA_ARENE),
/* harmony export */   BONDARTIFACT_EXTRA_RESPATH: () => (/* binding */ BONDARTIFACT_EXTRA_RESPATH),
/* harmony export */   BONDARTIFACT_EXTRA_RESRING: () => (/* binding */ BONDARTIFACT_EXTRA_RESRING),
/* harmony export */   BondArtifact: () => (/* binding */ BondArtifact)
/* harmony export */ });
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _Graph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Graph */ "./src/mol/Graph.ts");



const BONDARTIFACT_EXTRA_RESPATH = 'xRESPATH:';
const BONDARTIFACT_EXTRA_RESRING = 'xRESRING:';
const BONDARTIFACT_EXTRA_ARENE = 'xARENE:';
class BondArtifact {
    constructor(mol) {
        this.mol = mol;
        this.resPaths = new Map();
        this.resRings = new Map();
        this.arenes = new Map();
        for (let n = 1; n <= this.mol.numAtoms; n++) {
            for (let str of this.mol.atomExtra(n)) {
                if (str.startsWith(BONDARTIFACT_EXTRA_RESPATH))
                    this.appendResPath(n, str.substring(BONDARTIFACT_EXTRA_RESPATH.length).split(':'));
                else if (str.startsWith(BONDARTIFACT_EXTRA_RESRING))
                    this.appendResRing(n, str.substring(BONDARTIFACT_EXTRA_RESRING.length).split(':'));
                else if (str.startsWith(BONDARTIFACT_EXTRA_ARENE))
                    this.appendArene(n, str.substring(BONDARTIFACT_EXTRA_ARENE.length).split(':'));
            }
        }
        for (let [blk, res] of this.resPaths.entries()) {
            res.atoms = this.pack(res.atoms);
            if (!this.pathify(res.atoms, false))
                this.resPaths.delete(blk);
        }
        for (let [blk, res] of this.resRings.entries()) {
            res.atoms = this.pack(res.atoms);
            if (!this.pathify(res.atoms, true))
                this.resRings.delete(blk);
        }
        for (let [blk, res] of this.arenes.entries()) {
            res.atoms = this.pack(res.atoms);
            if (res.atoms.length > 1)
                res.centre = res.atoms.shift();
            if (!this.pathify(res.atoms, false))
                this.arenes.delete(blk);
        }
    }
    getPathBlocks() { return Array.from(this.resPaths.keys()); }
    getRingBlocks() { return Array.from(this.resRings.keys()); }
    getAreneBlocks() { return Array.from(this.arenes.keys()); }
    getResPaths() {
        let list = [];
        for (let key of _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sorted(Array.from(this.resPaths.keys())))
            list.push(this.resPaths.get(key));
        return list;
    }
    getResRings() {
        let list = [];
        for (let key of _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sorted(Array.from(this.resRings.keys())))
            list.push(this.resRings.get(key));
        return list;
    }
    getArenes() {
        let list = [];
        for (let key of _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sorted(Array.from(this.arenes.keys())))
            list.push(this.arenes.get(key));
        return list;
    }
    rewriteMolecule() {
        const mol = this.mol;
        for (let n = 1; n <= mol.numAtoms; n++) {
            let extra = mol.atomExtra(n), modified = false;
            for (let i = extra.length - 1; i >= 0; i--) {
                if (extra[i].startsWith(BONDARTIFACT_EXTRA_RESPATH) || extra[i].startsWith(BONDARTIFACT_EXTRA_RESRING) || extra[i].startsWith(BONDARTIFACT_EXTRA_ARENE)) {
                    extra.splice(i);
                    modified = true;
                }
            }
            if (modified)
                mol.setAtomExtra(n, extra);
        }
        for (let [blk, path] of this.resPaths.entries()) {
            for (let n = 0; n < path.atoms.length; n++) {
                let extra = mol.atomExtra(path.atoms[n]);
                extra.push(BONDARTIFACT_EXTRA_RESPATH + blk + ':' + (n + 1));
                mol.setAtomExtra(path.atoms[n], extra);
            }
        }
        for (let [blk, ring] of this.resRings.entries()) {
            for (let n = 0; n < ring.atoms.length; n++) {
                let extra = mol.atomExtra(ring.atoms[n]);
                extra.push(BONDARTIFACT_EXTRA_RESRING + blk + ':' + (n + 1));
                mol.setAtomExtra(ring.atoms[n], extra);
            }
        }
        for (let [blk, arene] of this.arenes.entries()) {
            for (let n = -1; n < arene.atoms.length; n++) {
                let atom = n < 0 ? arene.centre : arene.atoms[n];
                let extra = mol.atomExtra(atom);
                extra.push(BONDARTIFACT_EXTRA_ARENE + blk + ':' + (n + 2));
                mol.setAtomExtra(atom, extra);
            }
        }
    }
    harmoniseNumbering(other) {
        let blocks = other.getPathBlocks();
        let stashPaths = this.getResPaths();
        this.resPaths.clear();
        for (let path of stashPaths) {
            let blk = this.nextIdentifier(blocks);
            this.resPaths.set(blk, path);
            blocks.push(blk);
        }
        blocks = other.getRingBlocks();
        let stashRings = this.getResRings();
        this.resRings.clear();
        for (let ring of stashRings) {
            let blk = this.nextIdentifier(blocks);
            this.resRings.set(blk, ring);
            blocks.push(blk);
        }
        blocks = other.getAreneBlocks();
        let stashArenes = this.getArenes();
        this.arenes.clear();
        for (let arene of stashArenes) {
            let blk = this.nextIdentifier(blocks);
            this.arenes.set(blk, arene);
            blocks.push(blk);
        }
    }
    createPath(atoms) {
        if (this.alreadyExists(atoms))
            return false;
        let path = this.atomsAsPath(atoms);
        if (path) {
            let id = this.nextIdentifier(Array.from(this.resPaths.keys()));
            this.resPaths.set(id, path);
            return true;
        }
        return false;
    }
    createRing(atoms) {
        if (this.alreadyExists(atoms))
            return false;
        let ring = this.atomsAsRing(atoms);
        if (ring) {
            let id = this.nextIdentifier(Array.from(this.resRings.keys()));
            this.resRings.set(id, ring);
            return true;
        }
        return false;
    }
    createArene(atoms) {
        if (this.alreadyExists(atoms))
            return false;
        let arene = this.atomsAsArene(atoms);
        if (arene) {
            let id = this.nextIdentifier(Array.from(this.arenes.keys()));
            this.arenes.set(id, arene);
            return true;
        }
        return false;
    }
    removeArtifact(atoms) {
        let type = 0, pick = 0, overlap = 0;
        for (let [blk, path] of this.resPaths.entries()) {
            let count = 0;
            for (let a of path.atoms)
                if (atoms.indexOf(a) >= 0)
                    count++;
            if (count > overlap) {
                type = 1;
                pick = blk;
                overlap = count;
            }
        }
        for (let [blk, ring] of this.resRings.entries()) {
            let count = 0;
            for (let a of ring.atoms)
                if (atoms.indexOf(a) >= 0)
                    count++;
            if (count > overlap) {
                type = 2;
                pick = blk;
                overlap = count;
            }
        }
        for (let [blk, arene] of this.arenes.entries()) {
            let count = atoms.indexOf(arene.centre) >= 0 ? 1 : 0;
            for (let a of arene.atoms)
                if (atoms.indexOf(a) >= 0)
                    count++;
            if (count > overlap) {
                type = 3;
                pick = blk;
                overlap = count;
            }
        }
        if (type == 0)
            return false;
        else if (type == 1)
            this.resPaths.delete(pick);
        else if (type == 2)
            this.resRings.delete(pick);
        else if (type == 3)
            this.arenes.delete(pick);
        return true;
    }
    static removeAll(mol) {
        for (let n = 1; n <= mol.numAtoms; n++) {
            let extra = mol.atomExtra(n);
            let modified = false;
            for (let i = extra.length - 1; i >= 0; i--) {
                if (!extra[i].startsWith(BONDARTIFACT_EXTRA_RESPATH) && !extra[i].startsWith(BONDARTIFACT_EXTRA_RESRING) &&
                    !extra[i].startsWith(BONDARTIFACT_EXTRA_ARENE))
                    continue;
                extra = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.remove(extra, i);
                modified = true;
            }
            if (modified)
                mol.setAtomExtra(n, extra);
        }
    }
    appendResPath(atom, bits) {
        let blk = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.safeInt)(bits[0], 0);
        if (blk <= 0)
            return;
        let res = this.resPaths.get(blk);
        if (res == null)
            this.resPaths.set(blk, res = { atoms: _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.numberArray(0, this.mol.numAtoms) });
        let idx = bits.length >= 2 ? (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.safeInt)(bits[1], 0) : 0;
        if (res.atoms.indexOf(atom) >= 0)
            return;
        if (idx >= 1 && idx <= this.mol.numAtoms)
            res.atoms[idx - 1] = atom;
        else
            res.atoms.push(atom);
    }
    appendResRing(atom, bits) {
        let blk = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.safeInt)(bits[0], 0);
        if (blk <= 0)
            return;
        let res = this.resRings.get(blk);
        if (res == null)
            this.resRings.set(blk, res = { atoms: _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.numberArray(0, this.mol.numAtoms) });
        let idx = bits.length >= 2 ? (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.safeInt)(bits[1], 0) : 0;
        if (res.atoms.indexOf(atom) >= 0)
            return;
        if (idx >= 1 && idx <= this.mol.numAtoms)
            res.atoms[idx - 1] = atom;
        else
            res.atoms.push(atom);
    }
    appendArene(atom, bits) {
        let blk = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.safeInt)(bits[0], 0);
        if (blk <= 0)
            return;
        let res = this.arenes.get(blk);
        if (res == null)
            this.arenes.set(blk, res = { centre: 0, atoms: _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.numberArray(0, this.mol.numAtoms) });
        let idx = bits.length >= 2 ? (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.safeInt)(bits[1], 0) : 0;
        if (res.atoms.indexOf(atom) >= 0)
            return;
        if (idx >= 1 && idx <= this.mol.numAtoms)
            res.atoms[idx - 1] = atom;
        else
            res.atoms.push(atom);
    }
    pack(arr) {
        let ret = [];
        for (let v of arr)
            if (v != 0)
                ret.push(v);
        return ret;
    }
    pathify(atoms, requireRing) {
        let sz = atoms.length;
        if (sz < 2)
            return false;
        let g = _Graph__WEBPACK_IMPORTED_MODULE_2__.Graph.fromMolecule(this.mol);
        for (let n = 0; n < this.mol.numAtoms; n++)
            g.setIndex(n, n + 1);
        g = g.subgraphIndex(_util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.add(atoms, -1));
        let pos = 0;
        for (let n = 1; n < sz; n++)
            if (g.numEdges(n) < g.numEdges(pos))
                pos = n;
        _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.setTo(atoms, -1);
        for (let n = 0; n < sz; n++) {
            atoms[n] = pos;
            if (n == sz - 1) {
                if (requireRing)
                    if (g.getEdges(pos).indexOf(atoms[0]) < 0)
                        return false;
            }
            else {
                let next = sz;
                for (let i of g.getEdges(pos))
                    if (atoms.indexOf(i) < 0 && i < next)
                        next = i;
                if (next == sz)
                    return false;
                pos = next;
            }
        }
        for (let n = 0; n < sz; n++)
            atoms[n] = g.getIndex(atoms[n]);
        return true;
    }
    alreadyExists(atoms) {
        atoms = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sorted(atoms);
        for (let path of this.resPaths.values()) {
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.equals(atoms, _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sorted(path.atoms)))
                return true;
        }
        for (let ring of this.resRings.values()) {
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.equals(atoms, _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sorted(ring.atoms)))
                return true;
        }
        for (let arene of this.arenes.values()) {
            let areneAtoms = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.append(arene.atoms, arene.centre);
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.equals(atoms, _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sorted(areneAtoms)))
                return true;
        }
        return false;
    }
    atomsAsPath(atoms) {
        if (atoms.length < 2)
            return null;
        let path = { atoms: atoms };
        if (!this.pathify(path.atoms, false))
            return null;
        return path;
    }
    atomsAsRing(atoms) {
        if (atoms.length < 3)
            return null;
        let ring = { atoms: atoms };
        if (!this.pathify(ring.atoms, true))
            return null;
        return ring;
    }
    atomsAsArene(atoms) {
        const sz = atoms.length;
        if (sz < 3)
            return null;
        let g = _Graph__WEBPACK_IMPORTED_MODULE_2__.Graph.fromMolecule(this.mol).subgraphIndex(_util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.add(atoms, -1));
        let best = 0;
        if (sz == 3) {
            let bsum = [0, 0, 0];
            for (let n = 0; n < sz; n++) {
                if (g.numEdges(n) != 2)
                    return null;
                for (let e of g.getEdges(n))
                    bsum[n] += this.mol.bondOrder(this.mol.findBond(atoms[n], atoms[e]));
                best = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.idxMin(bsum);
            }
        }
        else {
            for (let n = 1; n < sz; n++)
                if (g.numEdges(n) > g.numEdges(best))
                    best = n;
        }
        let arene = { centre: atoms[best], atoms: _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.remove(atoms, best) };
        if (!this.pathify(arene.atoms, false))
            return null;
        return arene;
    }
    nextIdentifier(inkeys) {
        if (inkeys.length == 0)
            return 1;
        let keys = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sorted(inkeys);
        for (let n = 0; n < keys.length - 1; n++)
            if (keys[n + 1] != keys[n] + 1)
                return keys[n] + 1;
        return keys[keys.length - 1] + 1;
    }
}


/***/ }),

/***/ "./src/mol/Chemistry.ts":
/*!******************************!*\
  !*** ./src/mol/Chemistry.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chemistry: () => (/* binding */ Chemistry)
/* harmony export */ });
class Chemistry {
}
Chemistry.ELEMENTS = [
    null,
    'H', 'He',
    'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne',
    'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar',
    'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr',
    'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe',
    'Cs', 'Ba',
    'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb',
    'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn',
    'Fr', 'Ra',
    'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No',
    'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn'
];
Chemistry.ELEMENT_GROUPS = [
    0,
    1, 18,
    1, 2, 13, 14, 15, 16, 17, 18,
    1, 2, 13, 14, 15, 16, 17, 18,
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    1, 2,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    1, 2,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 4, 5, 6, 7, 8, 9, 10, 11, 12
];
Chemistry.ELEMENT_ROWS = [
    0,
    1, 1,
    2, 2, 2, 2, 2, 2, 2, 2,
    3, 3, 3, 3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7
];
Chemistry.ELEMENT_BLOCKS = [
    0,
    1, 2,
    1, 1, 2, 2, 2, 2, 2, 2,
    1, 1, 2, 2, 2, 2, 2, 2,
    1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
    1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
    1, 1,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
    1, 1,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3
];
Chemistry.ELEMENT_VALENCE = [
    0,
    1, 2,
    1, 2, 3, 4, 5, 6, 7, 8,
    1, 2, 3, 4, 5, 6, 7, 8,
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 3, 4, 5, 6, 7, 8,
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 3, 4, 5, 6, 7, 8,
    1, 2,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 3, 4, 5, 6, 7, 8,
    1, 1,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    3, 4, 5, 6, 7, 8, 9, 10, 11, 12
];
Chemistry.ELEMENT_BONDING = [
    0,
    1, 0,
    1, 2, 3, 4, 3, 2, 1, 0,
    1, 2, 3, 4, 3, 2, 1, 0,
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 3, 4, 3, 2, 1, 0,
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 3, 4, 3, 2, 1, 0,
    1, 2,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 3, 4, 3, 2, 1, 0,
    1, 1,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    3, 4, 5, 6, 7, 8, 9, 10, 11, 12
];
Chemistry.ELEMENT_SHELL = [
    0,
    2, 2,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 8, 8, 8, 8, 8, 8,
    8, 8, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 8, 8, 8, 8, 8, 8,
    8, 8,
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
    8, 8,
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18
];
Chemistry.NATURAL_ATOMIC_WEIGHTS = [
    0, 1.00794, 4.002602, 6.941, 9.012182, 10.811, 12.0107, 14.0067, 15.9994, 18.9984032, 20.1797,
    22.989770, 24.3050, 26.981538, 28.0855, 30.973761, 32.065, 35.453, 39.948, 39.0983, 40.078,
    44.955910, 47.867, 50.9415, 51.9961, 54.938049, 55.845, 58.933200, 58.6934, 63.546, 65.409,
    69.723, 72.64, 74.92160, 78.96, 79.904, 83.798, 85.4678, 87.62, 88.90585, 91.224, 92.90638,
    95.94, 98, 101.07, 102.90550, 106.42, 107.8682, 112.411, 114.818, 118.710, 121.760, 127.60,
    126.90447, 131.293, 132.90545, 137.327, 138.9055, 140.116, 140.90765, 144.24, 145, 150.36,
    151.964, 157.25, 158.92534, 162.500, 164.93032, 167.259, 168.93421, 173.04, 174.967, 178.49,
    180.9479, 183.84, 186.207, 190.23, 192.217, 195.078, 196.96655, 200.59, 204.3833, 207.2, 208.98038,
    209, 210, 222, 223, 226, 227, 230.0331266, 231.03588, 233.039628, 237, 244, 243, 247, 247, 251, 252, 257,
    258, 259, 262, 261, 262, 266, 264, 277, 268, 271, 272, 285
];
Chemistry.ELEMENT_H = 1;
Chemistry.ELEMENT_He = 2;
Chemistry.ELEMENT_Li = 3;
Chemistry.ELEMENT_Be = 4;
Chemistry.ELEMENT_B = 5;
Chemistry.ELEMENT_C = 6;
Chemistry.ELEMENT_N = 7;
Chemistry.ELEMENT_O = 8;
Chemistry.ELEMENT_F = 9;
Chemistry.ELEMENT_Ne = 10;
Chemistry.ELEMENT_Na = 11;
Chemistry.ELEMENT_Mg = 12;
Chemistry.ELEMENT_Al = 13;
Chemistry.ELEMENT_Si = 14;
Chemistry.ELEMENT_P = 15;
Chemistry.ELEMENT_S = 16;
Chemistry.ELEMENT_Cl = 17;
Chemistry.ELEMENT_Ar = 18;
Chemistry.ELEMENT_K = 19;
Chemistry.ELEMENT_Ca = 20;
Chemistry.ELEMENT_Sc = 21;
Chemistry.ELEMENT_Ti = 22;
Chemistry.ELEMENT_V = 23;
Chemistry.ELEMENT_Cr = 24;
Chemistry.ELEMENT_Mn = 25;
Chemistry.ELEMENT_Fe = 26;
Chemistry.ELEMENT_Co = 27;
Chemistry.ELEMENT_Ni = 28;
Chemistry.ELEMENT_Cu = 29;
Chemistry.ELEMENT_Zn = 30;
Chemistry.ELEMENT_Ga = 31;
Chemistry.ELEMENT_Ge = 32;
Chemistry.ELEMENT_As = 33;
Chemistry.ELEMENT_Se = 34;
Chemistry.ELEMENT_Br = 35;
Chemistry.ELEMENT_Kr = 36;
Chemistry.ELEMENT_Rb = 37;
Chemistry.ELEMENT_Sr = 38;
Chemistry.ELEMENT_Y = 39;
Chemistry.ELEMENT_Zr = 40;
Chemistry.ELEMENT_Nb = 41;
Chemistry.ELEMENT_Mo = 42;
Chemistry.ELEMENT_Tc = 43;
Chemistry.ELEMENT_Ru = 44;
Chemistry.ELEMENT_Rh = 45;
Chemistry.ELEMENT_Pd = 46;
Chemistry.ELEMENT_Ag = 47;
Chemistry.ELEMENT_Cd = 48;
Chemistry.ELEMENT_In = 49;
Chemistry.ELEMENT_Sn = 50;
Chemistry.ELEMENT_Sb = 51;
Chemistry.ELEMENT_Te = 52;
Chemistry.ELEMENT_I = 53;
Chemistry.ELEMENT_Xe = 54;
Chemistry.ELEMENT_Cs = 55;
Chemistry.ELEMENT_Ba = 56;
Chemistry.ELEMENT_La = 57;
Chemistry.ELEMENT_Ce = 58;
Chemistry.ELEMENT_Pr = 59;
Chemistry.ELEMENT_Nd = 60;
Chemistry.ELEMENT_Pm = 61;
Chemistry.ELEMENT_Sm = 62;
Chemistry.ELEMENT_Eu = 63;
Chemistry.ELEMENT_Gd = 64;
Chemistry.ELEMENT_Tb = 65;
Chemistry.ELEMENT_Dy = 66;
Chemistry.ELEMENT_Ho = 67;
Chemistry.ELEMENT_Er = 68;
Chemistry.ELEMENT_Tm = 69;
Chemistry.ELEMENT_Yb = 70;
Chemistry.ELEMENT_Lu = 71;
Chemistry.ELEMENT_Hf = 72;
Chemistry.ELEMENT_Ta = 73;
Chemistry.ELEMENT_W = 74;
Chemistry.ELEMENT_Re = 75;
Chemistry.ELEMENT_Os = 76;
Chemistry.ELEMENT_Ir = 77;
Chemistry.ELEMENT_Pt = 78;
Chemistry.ELEMENT_Au = 79;
Chemistry.ELEMENT_Hg = 80;
Chemistry.ELEMENT_Tl = 81;
Chemistry.ELEMENT_Pb = 82;
Chemistry.ELEMENT_Bi = 83;
Chemistry.ELEMENT_Po = 84;
Chemistry.ELEMENT_At = 85;
Chemistry.ELEMENT_Rn = 86;
Chemistry.ELEMENT_Fr = 87;
Chemistry.ELEMENT_Ra = 88;
Chemistry.ELEMENT_Ac = 89;
Chemistry.ELEMENT_Th = 90;
Chemistry.ELEMENT_Pa = 91;
Chemistry.ELEMENT_U = 92;
Chemistry.ELEMENT_Np = 93;
Chemistry.ELEMENT_Pu = 94;
Chemistry.ELEMENT_Am = 95;
Chemistry.ELEMENT_Cm = 96;
Chemistry.ELEMENT_Bk = 97;
Chemistry.ELEMENT_Cf = 98;
Chemistry.ELEMENT_Es = 99;
Chemistry.ELEMENT_Fm = 100;
Chemistry.ELEMENT_Md = 101;
Chemistry.ELEMENT_No = 102;
Chemistry.ELEMENT_Lr = 103;
Chemistry.ELEMENT_Rf = 104;
Chemistry.ELEMENT_Db = 105;
Chemistry.ELEMENT_Sg = 106;
Chemistry.ELEMENT_Bh = 107;
Chemistry.ELEMENT_Hs = 108;
Chemistry.ELEMENT_Mt = 109;
Chemistry.ELEMENT_Ds = 110;
Chemistry.ELEMENT_Rg = 111;
Chemistry.ELEMENT_Cn = 112;


/***/ }),

/***/ "./src/mol/CoordUtil.ts":
/*!******************************!*\
  !*** ./src/mol/CoordUtil.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CoordUtil: () => (/* binding */ CoordUtil)
/* harmony export */ });
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _Graph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Graph */ "./src/mol/Graph.ts");
/* harmony import */ var _Molecule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");





class CoordUtil {
    static atomAtPoint(mol, x, y, tolerance) {
        if (tolerance == null)
            tolerance = CoordUtil.OVERLAP_THRESHOLD;
        const tolsq = tolerance * tolerance;
        for (let n = 1; n <= mol.numAtoms; n++)
            if ((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.norm2_xy)(mol.atomX(n) - x, mol.atomY(n) - y) < tolsq)
                return n;
        return 0;
    }
    static sketchEquivalent(mol1, mol2, tolerance) {
        if (tolerance == null)
            tolerance = CoordUtil.DEFAULT_EQUIV_TOLERANCE;
        const na = mol1.numAtoms, nb = mol1.numBonds;
        if (na != mol2.numAtoms || nb != mol2.numBonds)
            return false;
        const tolsq = tolerance * tolerance;
        let box1 = mol1.boundary(), box2 = mol2.boundary();
        if (Math.abs(box1.minX() - box2.minX()) > tolerance)
            return false;
        if (Math.abs(box1.minY() - box2.minY()) > tolerance)
            return false;
        if (Math.abs(box1.maxX() - box2.maxX()) > tolerance)
            return false;
        if (Math.abs(box1.maxY() - box2.maxY()) > tolerance)
            return false;
        let mx1 = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.arrayAtomX(mol1), my1 = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.arrayAtomY(mol1);
        let mx2 = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.arrayAtomX(mol2), my2 = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.arrayAtomY(mol2);
        let map = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.numberArray(0, na);
        let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.booleanArray(false, na);
        for (let i = 0; i < na; i++) {
            let j = -1;
            if ((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.norm2_xy)(mx1[i] - mx2[i], my1[i] - my2[i]) < tolsq)
                j = i;
            if (j < 0) {
                let bestdsq = Number.MAX_VALUE;
                for (let n = 0; n < na; n++)
                    if (!mask[n]) {
                        let dsq = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.norm2_xy)(mx1[i] - mx2[n], my1[i] - my2[n]);
                        if (dsq < bestdsq) {
                            bestdsq = dsq;
                            j = n;
                        }
                    }
                if (j < 0 || bestdsq > tolsq)
                    return false;
            }
            map[i] = j + 1;
            mask[j] = true;
            if (mol1.atomElement(i + 1) != mol2.atomElement(j + 1))
                return false;
            if (mol1.atomCharge(i + 1) != mol2.atomCharge(j + 1))
                return false;
            if (mol1.atomUnpaired(i + 1) != mol2.atomUnpaired(j + 1))
                return false;
            if (mol1.atomHExplicit(i + 1) != mol2.atomHExplicit(j + 1) &&
                mol1.atomHExplicit(i + 1) != _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.HEXPLICIT_UNKNOWN &&
                mol2.atomHExplicit(j + 1) != _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.HEXPLICIT_UNKNOWN)
                return false;
        }
        for (let i = 1; i <= nb; i++) {
            let i1 = mol1.bondFrom(i), i2 = mol1.bondTo(i), j1 = map[i1 - 1], j2 = map[i2 - 1];
            let j = mol2.findBond(j1, j2);
            if (j == 0)
                return false;
            if (mol1.bondOrder(i) != mol2.bondOrder(j) || mol1.bondType(i) != mol2.bondType(j))
                return false;
            if (mol2.bondFrom(j) == j1 && mol2.bondTo(j) == j2) { }
            else if (mol2.bondType(j) != _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_INCLINED &&
                mol2.bondType(j) != _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_DECLINED &&
                mol2.bondFrom(j) == j2 && mol2.bondTo(j) == j1) { }
            else
                return false;
        }
        return true;
    }
    static sketchMappable(mol1, mol2, tolerance) {
        if (tolerance == null)
            tolerance = CoordUtil.DEFAULT_EQUIV_TOLERANCE;
        let box1 = mol1.boundary(), box2 = mol2.boundary();
        let dx = box1.minX() - box2.minX(), dy = box1.minY() - box2.minY();
        if (Math.abs(dx) > tolerance * 0.1 || Math.abs(dy) > tolerance * 0.1) {
            mol2 = mol2.clone();
            for (let n = 1; n <= mol2.numAtoms; n++)
                mol2.setAtomPos(n, mol2.atomX(n) + dx, mol2.atomY(n) + dy);
        }
        return CoordUtil.sketchEquivalent(mol1, mol2, tolerance);
    }
    static atomBondAngles(mol, atom, adj) {
        if (adj == null)
            adj = mol.atomAdjList(atom);
        let bndang = [];
        let cx = mol.atomX(atom), cy = mol.atomY(atom);
        for (let a of adj)
            bndang.push(Math.atan2(mol.atomY(a) - cy, mol.atomX(a) - cx));
        return bndang;
    }
    static overlapsAtom(mol, x, y, tol) {
        const tolsq = tol * tol;
        for (let n = 1; n <= mol.numAtoms; n++)
            if ((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.norm2_xy)(mol.atomX(n) - x, mol.atomY(n) - y) < tolsq)
                return true;
        return false;
    }
    static overlappingAtomMask(mol, thresh) {
        if (thresh == null)
            thresh = CoordUtil.OVERLAP_THRESHOLD;
        const sz = mol.numAtoms;
        let box = mol.boundary();
        let p1, p2;
        if (box.w > box.h) {
            p1 = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.arrayAtomX(mol);
            p2 = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.arrayAtomY(mol);
        }
        else {
            p1 = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.arrayAtomY(mol);
            p2 = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.arrayAtomX(mol);
        }
        let omask = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.booleanArray(false, sz);
        let idx = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.idxSort(p1);
        const threshSQ = thresh * thresh;
        for (let i = 1; i < sz - 1; i++) {
            for (let j = i - 1; j >= 0; j--) {
                let d1 = p1[idx[i]] - p1[idx[j]];
                if (d1 > thresh)
                    break;
                if ((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.norm2_xy)(d1, p2[idx[i]] - p2[idx[j]]) < threshSQ) {
                    omask[idx[i]] = true;
                    omask[idx[j]] = true;
                }
            }
            for (let j = i + 1; j < sz; j++) {
                let d1 = p1[idx[j]] - p1[idx[i]];
                if (d1 > thresh)
                    break;
                if ((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.norm2_xy)(d1, p2[idx[j]] - p2[idx[i]]) < threshSQ) {
                    omask[idx[i]] = true;
                    omask[idx[j]] = true;
                }
            }
        }
        return omask;
    }
    static overlappingAtomList(mol, thresh) {
        if (thresh == null)
            thresh = CoordUtil.OVERLAP_THRESHOLD;
        return _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.add(_util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.maskIdx(CoordUtil.overlappingAtomMask(mol, thresh)), 1);
    }
    static congestionPoint(mol, x, y, approach) {
        if (approach == null)
            approach = 1E-5;
        let score = 0;
        let na = mol.numAtoms;
        for (let n = 1; n <= na; n++)
            score += 1.0 / (approach + (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.norm2_xy)(mol.atomX(n) - x, mol.atomY(n) - y));
        return score;
    }
    static congestionMolecule(mol, approach) {
        if (approach == null)
            approach = 1E-5;
        let score = 0;
        const na = mol.numAtoms;
        let mx = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.arrayAtomX(mol), my = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.arrayAtomY(mol);
        for (let i = 0; i < na - 1; i++)
            for (let j = i + 1; j < na; j++)
                score += 1.0 / (approach + (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.norm2_xy)(mx[i] - mx[j], my[i] - my[j]));
        return score;
    }
    static translateMolecule(mol, ox, oy) {
        for (let n = 1; n <= mol.numAtoms; n++)
            mol.setAtomPos(n, mol.atomX(n) + ox, mol.atomY(n) + oy);
    }
    static rotateMolecule(mol, theta, cx, cy) {
        if (cx == null || cy == null) {
            let box = mol.boundary();
            cx = box.midX();
            cy = box.midY();
        }
        let cosTheta = Math.cos(theta), sinTheta = Math.sin(theta);
        for (let n = 1; n <= mol.numAtoms; n++) {
            let x = mol.atomX(n) - cx, y = mol.atomY(n) - cy;
            mol.setAtomPos(n, cx + x * cosTheta - y * sinTheta, cy + x * sinTheta + y * cosTheta);
        }
    }
    static rotateBond(mol, centre, atom, theta) {
        theta = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.angleNorm)(theta);
        if (Math.abs(theta) < 0.1 * _util_util__WEBPACK_IMPORTED_MODULE_0__.DEGRAD)
            return;
        let g = _Graph__WEBPACK_IMPORTED_MODULE_2__.Graph.fromMolecule(mol);
        g.isolateNode(centre - 1);
        let cc = g.calculateComponents();
        let cx = mol.atomX(centre), cy = mol.atomY(centre);
        let cosTheta = Math.cos(theta), sinTheta = Math.sin(theta);
        for (let n = 1; n <= mol.numAtoms; n++)
            if (cc[n - 1] == cc[atom - 1]) {
                let x = mol.atomX(n) - cx, y = mol.atomY(n) - cy;
                mol.setAtomPos(n, cx + x * cosTheta - y * sinTheta, cy + x * sinTheta + y * cosTheta);
            }
    }
    static rotateAtoms(mol, mask, cx, cy, theta) {
        let cosTheta = Math.cos(theta), sinTheta = Math.sin(theta);
        for (let n = 1; n <= mol.numAtoms; n++)
            if (mask[n - 1]) {
                let x = mol.atomX(n) - cx, y = mol.atomY(n) - cy;
                mol.setAtomPos(n, cx + x * cosTheta - y * sinTheta, cy + x * sinTheta + y * cosTheta);
            }
    }
    static angleNeighbours(mol, atom) {
        let adj = mol.atomAdjList(atom);
        if (adj.length <= 1)
            return null;
        let th = [];
        for (let n = 0; n < adj.length; n++)
            th.push(Math.atan2(mol.atomY(adj[n]) - mol.atomY(atom), mol.atomX(adj[n]) - mol.atomX(atom)));
        if (adj.length == 2) {
            if ((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.angleDiff)(th[1], th[0]) > 0)
                return adj;
            return [adj[1], adj[0]];
        }
        let idx = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.idxSort(th);
        return _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.idxGet(adj, idx);
    }
    static mergeAtoms(mol, oldN, newN) {
        for (let n = 1; n <= mol.numBonds; n++) {
            if (mol.bondFrom(n) == oldN)
                mol.setBondFrom(n, newN);
            if (mol.bondTo(n) == oldN)
                mol.setBondTo(n, newN);
        }
        mol.deleteAtomAndBonds(oldN);
    }
    static normaliseBondDistances(mol) {
        const nb = mol.numBonds;
        if (nb == 0)
            return;
        let dsq = [];
        for (let n = 1; n <= nb; n++) {
            let bfr = mol.bondFrom(n), bto = mol.bondTo(n);
            dsq.push((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.norm2_xy)(mol.atomX(bto) - mol.atomX(bfr), mol.atomY(bto) - mol.atomY(bfr)));
        }
        _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sort(dsq);
        let median = (nb & 1) == 1 ? Math.sqrt(dsq[nb >> 1]) : 0.5 * (Math.sqrt(dsq[nb >> 1]) + Math.sqrt(dsq[(nb >> 1) - 1]));
        if (median < 0.1 || (median > _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.IDEALBOND * 0.9 && median < _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.IDEALBOND * 1.1))
            return;
        let box = mol.boundary();
        let cx = box.midX(), cy = box.midY();
        let scale = _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.IDEALBOND / median;
        for (let n = mol.numAtoms; n >= 1; n--) {
            let x = (mol.atomX(n) - cx) * scale + cx;
            let y = (mol.atomY(n) - cy) * scale + cy;
            mol.setAtomPos(n, x, y);
        }
    }
    static centreMolecule(mol) {
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.isBlank(mol))
            return;
        let x = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.arrayAtomX(mol), y = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.arrayAtomY(mol);
        let sz = x.length;
        let invsz = 1.0 / sz;
        let meanX = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sum(x) * invsz, meanY = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.sum(y) * invsz;
        let closest = Number.POSITIVE_INFINITY;
        let deltaX = 0, deltaY = 0;
        for (let n = 0; n < sz; n++) {
            let dsq = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.norm2_xy)(x[n] - meanX, y[n] - meanY);
            if (dsq < closest) {
                deltaX = -x[n];
                deltaY = -y[n];
                closest = dsq;
            }
        }
        for (let n = 0; n < sz; n++)
            mol.setAtomPos(n + 1, x[n] + deltaX, y[n] + deltaY);
    }
    static mirrorImage(mol) {
        mol = mol.clone();
        for (let n = 1; n <= mol.numAtoms; n++)
            mol.setAtomX(n, -mol.atomX(n));
        for (let n = 1; n <= mol.numBonds; n++) {
            if (mol.bondType(n) == _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_DECLINED)
                mol.setBondType(n, _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_INCLINED);
            else if (mol.bondType(n) == _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_INCLINED)
                mol.setBondType(n, _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_DECLINED);
        }
        return mol;
    }
    static alignOrientFlip(mol1, idx1, mol2, idx2) {
        if (idx1.length < 2 || idx1.length != idx2.length)
            throw 'Invalid mapping indices.';
        let x0 = mol1.atomX(idx1[0]), y0 = mol1.atomY(idx1[0]);
        CoordUtil.translateMolecule(mol2, x0 - mol2.atomX(idx2[0]), y0 - mol2.atomY(idx2[0]));
        const sz = idx1.length - 1;
        let th1 = [], th2 = [];
        let deltaA = 0, deltaB = 0;
        for (let n = 0; n < sz; n++) {
            th1.push(Math.atan2(mol1.atomY(idx1[n + 1]) - y0, mol1.atomX(idx1[n + 1]) - x0));
            th2.push(Math.atan2(mol2.atomY(idx2[n + 1]) - y0, mol2.atomX(idx2[n + 1]) - x0));
            let dthA = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.angleDiff)(th1[n], th2[n]), dthB = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.angleDiff)(th1[n], -th2[n]);
            if (dthA < -175 * _util_util__WEBPACK_IMPORTED_MODULE_0__.DEGRAD && deltaA > 0)
                dthA += _util_util__WEBPACK_IMPORTED_MODULE_0__.TWOPI;
            else if (dthA > 175 * _util_util__WEBPACK_IMPORTED_MODULE_0__.DEGRAD && deltaA < 0)
                dthA -= _util_util__WEBPACK_IMPORTED_MODULE_0__.TWOPI;
            if (dthB < -175 * _util_util__WEBPACK_IMPORTED_MODULE_0__.DEGRAD && deltaB > 0)
                dthB += _util_util__WEBPACK_IMPORTED_MODULE_0__.TWOPI;
            else if (dthB > 175 * _util_util__WEBPACK_IMPORTED_MODULE_0__.DEGRAD && deltaB < 0)
                dthB -= _util_util__WEBPACK_IMPORTED_MODULE_0__.TWOPI;
            deltaA += dthA;
            deltaB += dthB;
        }
        if (sz > 1) {
            let inv = 1.0 / sz;
            deltaA *= inv;
            deltaB *= inv;
        }
        let scoreA = 0, scoreB = 0;
        for (let n = 0; n < sz; n++) {
            scoreA += Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.angleDiff)(th1[n], th2[n] + deltaA));
            scoreB += Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.angleDiff)(th1[n], -th2[n] + deltaB));
        }
        if (scoreB < scoreA) {
            for (let n = 1; n <= mol2.numAtoms; n++)
                mol2.setAtomY(n, 2 * y0 - mol2.atomY(n));
            for (let n = 1; n <= mol2.numBonds; n++) {
                if (mol2.bondType(n) == _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_DECLINED)
                    mol2.setBondType(n, _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_INCLINED);
                else if (mol2.bondType(n) == _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_INCLINED)
                    mol2.setBondType(n, _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_DECLINED);
            }
            CoordUtil.rotateMolecule(mol2, x0, y0, deltaB);
        }
        else
            CoordUtil.rotateMolecule(mol2, x0, y0, deltaA);
    }
    static atomIsWeirdLinear(mol, idx) {
        let bonds = mol.atomAdjBonds(idx);
        if (bonds.length != 2)
            return false;
        for (let n = 0; n < bonds.length; n++)
            if (mol.bondOrder(bonds[n]) == 3)
                return false;
        let adj = mol.atomAdjList(idx);
        let th1 = Math.atan2(mol.atomY(adj[0]) - mol.atomY(idx), mol.atomX(adj[0]) - mol.atomX(idx));
        let th2 = Math.atan2(mol.atomY(adj[1]) - mol.atomY(idx), mol.atomX(adj[1]) - mol.atomX(idx));
        return Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.angleDiff)(th1, th2)) >= 175 * _util_util__WEBPACK_IMPORTED_MODULE_0__.DEGRAD;
    }
}
CoordUtil.OVERLAP_THRESHOLD = 0.2;
CoordUtil.OVERLAP_THRESHOLD_SQ = CoordUtil.OVERLAP_THRESHOLD * CoordUtil.OVERLAP_THRESHOLD;
CoordUtil.DEFAULT_EQUIV_TOLERANCE = 0.2;


/***/ }),

/***/ "./src/mol/DotPath.ts":
/*!****************************!*\
  !*** ./src/mol/DotPath.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DotPath: () => (/* binding */ DotPath),
/* harmony export */   DotPathBond: () => (/* binding */ DotPathBond),
/* harmony export */   DotPathCharge: () => (/* binding */ DotPathCharge)
/* harmony export */ });
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _Chemistry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Chemistry */ "./src/mol/Chemistry.ts");
/* harmony import */ var _ForeignMolecule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ForeignMolecule */ "./src/mol/ForeignMolecule.ts");
/* harmony import */ var _Graph__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Graph */ "./src/mol/Graph.ts");





var DotPathBond;
(function (DotPathBond) {
    DotPathBond[DotPathBond["O0"] = 0] = "O0";
    DotPathBond[DotPathBond["O01"] = 1] = "O01";
    DotPathBond[DotPathBond["O1"] = 2] = "O1";
    DotPathBond[DotPathBond["O12"] = 3] = "O12";
    DotPathBond[DotPathBond["O2"] = 4] = "O2";
    DotPathBond[DotPathBond["O23"] = 5] = "O23";
    DotPathBond[DotPathBond["O3"] = 6] = "O3";
    DotPathBond[DotPathBond["O3X"] = 7] = "O3X";
})(DotPathBond || (DotPathBond = {}));
var DotPathCharge;
(function (DotPathCharge) {
    DotPathCharge[DotPathCharge["N1X"] = -3] = "N1X";
    DotPathCharge[DotPathCharge["N1"] = -2] = "N1";
    DotPathCharge[DotPathCharge["N01"] = -1] = "N01";
    DotPathCharge[DotPathCharge["Z0"] = 0] = "Z0";
    DotPathCharge[DotPathCharge["P01"] = 1] = "P01";
    DotPathCharge[DotPathCharge["P1"] = 2] = "P1";
    DotPathCharge[DotPathCharge["P1X"] = 3] = "P1X";
})(DotPathCharge || (DotPathCharge = {}));
class DotPath {
    constructor(mol) {
        this.mol = mol;
        this.paths = [];
        if (mol)
            this.calculate();
    }
    clone() {
        let dup = new DotPath(null);
        dup.mol = this.mol;
        dup.maskBlock = this.maskBlock;
        dup.paths = this.paths.slice(0);
        return dup;
    }
    getBondOrders() {
        const mol = this.mol;
        let orders = [];
        for (let n = 1; n <= mol.numBonds; n++)
            orders.push(mol.bondOrder(n));
        for (let path of this.paths) {
            let fract = path.numer / path.denom;
            for (let n = 1; n <= 5; n++)
                if ((0,_util_util__WEBPACK_IMPORTED_MODULE_0__.fltEqual)(fract, n))
                    fract = n;
            for (let b of path.bonds)
                orders[b - 1] = fract;
        }
        return orders;
    }
    getBondClasses() {
        const mol = this.mol;
        let classes = [];
        for (let n = 1; n <= mol.numBonds; n++) {
            let bo = mol.bondOrder(n);
            classes.push(bo == 0 ? 0 :
                bo == 1 ? 2 :
                    bo == 2 ? 4 :
                        bo == 3 ? 6 : 7);
        }
        for (let path of this.paths) {
            let fract = path.numer / path.denom;
            let bcls = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.fltEqual)(fract, 0) ? 0 :
                (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.fltEqual)(fract, 1) ? 2 :
                    (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.fltEqual)(fract, 2) ? 4 :
                        (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.fltEqual)(fract, 3) ? 6 :
                            fract < 1 ? 1 :
                                fract < 2 ? 3 :
                                    fract < 3 ? 5 : 7;
            for (let b of path.bonds)
                classes[b - 1] = bcls;
        }
        return classes;
    }
    getChargeClasses() {
        const mol = this.mol;
        let classes = [];
        for (let n = 1; n <= mol.numAtoms; n++) {
            let chg = mol.atomCharge(n);
            classes.push(chg == 0 ? 0 :
                chg == -1 ? -2 :
                    chg == 1 ? 2 :
                        chg < -1 ? -3 : 3);
        }
        for (let path of this.paths) {
            let chg = 0;
            for (let a of path.atoms)
                chg += mol.atomCharge(a);
            chg /= path.atoms.length;
            let ccls = (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.fltEqual)(chg, 0) ? 0 :
                (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.fltEqual)(chg, -1) ? -2 :
                    (0,_util_util__WEBPACK_IMPORTED_MODULE_0__.fltEqual)(chg, 1) ? 2 :
                        chg > -1 && chg < 0 ? -1 :
                            chg > 0 && chg < 1 ? 1 :
                                chg < -1 ? -3 : 3;
            for (let a of path.atoms)
                classes[a - 1] = ccls;
        }
        return classes;
    }
    getAggregateCharges() {
        const mol = this.mol;
        let chg = [];
        for (let n = 1; n <= mol.numAtoms; n++)
            chg[n - 1] = mol.atomCharge(n);
        for (let path of this.paths) {
            let total = 0;
            for (let a of path.atoms)
                total += chg[a - 1];
            for (let a of path.atoms)
                chg[a - 1] = total;
        }
        return chg;
    }
    toString() {
        let str = 'blocking=' + JSON.stringify(this.maskBlock) + '; paths=' + this.paths.length;
        for (let p of this.paths)
            str += ' [' + p.numer + '/' + p.denom + ';a=' + JSON.stringify(p.atoms) + ';b=' + JSON.stringify(p.bonds) + ']';
        return str;
    }
    calculate() {
        const mol = this.mol, na = mol.numAtoms, nb = mol.numBonds;
        let nonsingle = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.booleanArray(false, na), pibonded = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.booleanArray(false, na), metalbonded = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.booleanArray(false, na);
        let bondsum = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.numberArray(0, na);
        for (let n = 0; n < na; n++)
            bondsum[n] = mol.atomHydrogens(n + 1);
        for (let n = 1; n <= nb; n++) {
            let bo = mol.bondOrder(n), bfr = mol.bondFrom(n), bto = mol.bondTo(n);
            if (bo != 1) {
                nonsingle[bfr - 1] = true;
                nonsingle[bto - 1] = true;
            }
            if (bo >= 2) {
                pibonded[bfr - 1] = true;
                pibonded[bto - 1] = true;
            }
            else {
                let blk1 = _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_BLOCKS[mol.atomicNumber(bfr)], blk2 = _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_BLOCKS[mol.atomicNumber(bto)];
                if (blk1 >= 3 || blk2 >= 3) {
                    metalbonded[bfr - 1] = true;
                    metalbonded[bto - 1] = true;
                }
            }
            bondsum[bfr - 1] += bo;
            bondsum[bto - 1] += bo;
            if (mol.bondTransient(n).indexOf(_ForeignMolecule__WEBPACK_IMPORTED_MODULE_3__.ForeignMoleculeTransient.BondAromatic) >= 0) {
                pibonded[bfr - 1] = true;
                pibonded[bto - 1] = true;
            }
        }
        let impliedPi = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.booleanArray(false, na);
        for (let n = 1; n <= na; n++)
            if (!pibonded[n - 1]) {
                let adjpi = 0;
                for (let adj of mol.atomAdjList(n))
                    if (pibonded[adj - 1] || metalbonded[adj - 1])
                        adjpi++;
                if (adjpi >= 2)
                    impliedPi[n - 1] = true;
            }
        for (let n = 0; n < na; n++)
            if (impliedPi[n])
                pibonded[n] = true;
        this.maskBlock = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.booleanArray(false, na);
        let maskMaybe = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.booleanArray(false, na);
        const COULD_BLOCK = [
            _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_H,
            _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_B, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_C, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_N, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_O, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_F,
            _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Al, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Si, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_P, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_S, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Cl,
            _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Ga, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Ge, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_As, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Se, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Br,
            _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_In, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Sn, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Sb, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Te, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_I,
            _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Tl, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Pb, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Bi, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Po, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_At,
        ];
        const ACIDS = [
            _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_B,
            _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Al, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Si,
            _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Ga, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Ge,
            _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_In, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Sn,
            _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Tl, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Pb,
        ];
        const BASES = [
            _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_N, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_O, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_F,
            _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_P, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_S, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Cl,
            _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_As, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Se, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Br,
            _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Sb, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Te, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_I,
            _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Bi, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_Po, _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_At,
        ];
        skip: for (let n = 0; n < na; n++) {
            const a = n + 1;
            if (nonsingle[n] || pibonded[n])
                continue;
            if (mol.atomCharge(a) != 0 || mol.atomUnpaired(a) != 0)
                continue;
            const atno = mol.atomicNumber(a);
            if (atno == 0) {
                this.maskBlock[n] = true;
                continue;
            }
            if (COULD_BLOCK.indexOf(atno) < 0)
                continue;
            if (bondsum[n] != _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_BONDING[atno])
                continue;
            if (ACIDS.indexOf(atno) >= 0) {
                for (let adj of mol.atomAdjList(a))
                    if (BASES.indexOf(mol.atomicNumber(adj)) >= 0)
                        continue skip;
            }
            if (BASES.indexOf(atno) >= 0) {
                for (let adj of mol.atomAdjList(a))
                    if (ACIDS.indexOf(mol.atomicNumber(adj)) >= 0)
                        continue skip;
            }
            maskMaybe[n] = true;
            if (atno == _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_C) {
                let hasMetal = false;
                for (let adj of mol.atomAdjList(a))
                    if (COULD_BLOCK.indexOf(mol.atomicNumber(adj)) < 0)
                        hasMetal = true;
                if (!hasMetal)
                    this.maskBlock[n] = true;
            }
            else if (atno == _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_H) {
                this.maskBlock[n] = true;
            }
        }
        skip: for (let n = 0; n < na; n++)
            if (maskMaybe[n] && !this.maskBlock[n]) {
                for (let a of mol.atomAdjList(n + 1))
                    if (!maskMaybe[a - 1])
                        continue skip;
                this.maskBlock[n] = true;
            }
        let g = _Graph__WEBPACK_IMPORTED_MODULE_4__.Graph.fromMolecule(mol);
        for (let n = 0; n < na; n++)
            if (this.maskBlock[n])
                g.isolateNode(n);
        for (let cc of g.calculateComponentGroups()) {
            if (cc.length == 1)
                continue;
            let amask = _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.idxMask(cc, na);
            _util_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.addTo(cc, 1);
            let p = {
                atoms: cc,
                bonds: [],
                numer: 0,
                denom: 0
            };
            for (let n = 1; n <= nb; n++)
                if (amask[mol.bondFrom(n) - 1] && amask[mol.bondTo(n) - 1])
                    p.bonds.push(n);
            let totalHave = 0, totalWant = 0;
            for (let a of p.atoms) {
                let others = mol.atomHydrogens(a);
                for (let o of mol.atomAdjList(a))
                    if (!amask[o - 1])
                        others++;
                let atno = mol.atomicNumber(a);
                let have = _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_VALENCE[atno] - mol.atomCharge(a) - others;
                let want = _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_SHELL[atno] - _Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_VALENCE[atno] - others;
                totalHave += have;
                totalWant += want;
            }
            let electrons = Math.min(totalHave, totalWant);
            p.numer = electrons;
            p.denom = 2 * p.bonds.length;
            this.paths.push(p);
        }
    }
}


/***/ }),

/***/ "./src/mol/ForeignMolecule.ts":
/*!************************************!*\
  !*** ./src/mol/ForeignMolecule.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ForeignMolecule: () => (/* binding */ ForeignMolecule),
/* harmony export */   ForeignMoleculeTransient: () => (/* binding */ ForeignMoleculeTransient)
/* harmony export */ });
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");

var ForeignMoleculeTransient;
(function (ForeignMoleculeTransient) {
    ForeignMoleculeTransient["AtomAromatic"] = "yAROMATIC";
    ForeignMoleculeTransient["BondAromatic"] = "yAROMATIC";
    ForeignMoleculeTransient["BondZeroDative"] = "yZERO_DATIVE";
    ForeignMoleculeTransient["BondZeroHydrogen"] = "yZERO_HYDROGEN";
    ForeignMoleculeTransient["AtomChiralMDLOdd"] = "yCHIRAL_MDL_ODD";
    ForeignMoleculeTransient["AtomChiralMDLEven"] = "yCHIRAL_MDL_EVEN";
    ForeignMoleculeTransient["AtomChiralMDLRacemic"] = "yCHIRAL_MDL_RACEMIC";
    ForeignMoleculeTransient["AtomExplicitValence"] = "yMDL_EXPLICIT_VALENCE";
    ForeignMoleculeTransient["AtomSgroupMultiAttach"] = "yMDL_SGROUP_MULTIATTACH";
    ForeignMoleculeTransient["AtomSgroupMultiRepeat"] = "yMDL_SGROUP_MULTIREPEAT";
    ForeignMoleculeTransient["AtomSgroupData"] = "yMDL_SGROUP_DATA";
    ForeignMoleculeTransient["AtomSCSRClass"] = "yMDL_SCSR_CLASS";
    ForeignMoleculeTransient["AtomSCSRSeqID"] = "yMDL_SCSR_SEQID";
    ForeignMoleculeTransient["AtomSCSRAttchOrd"] = "yMDL_SCSR_ATTCHORD";
})(ForeignMoleculeTransient || (ForeignMoleculeTransient = {}));
class ForeignMolecule {
    static noteAromaticAtoms(mol) {
        const sz = mol.numAtoms;
        let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, sz);
        for (let n = 1; n <= sz; n++)
            mask[n - 1] = mol.atomTransient(n).indexOf(ForeignMoleculeTransient.AtomAromatic) >= 0;
        return mask;
    }
    static noteAromaticBonds(mol) {
        const sz = mol.numBonds;
        let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, sz);
        for (let n = 1; n <= sz; n++)
            mask[n - 1] = mol.bondTransient(n).indexOf(ForeignMoleculeTransient.BondAromatic) >= 0;
        return mask;
    }
    static noteZeroDativeBonds(mol) {
        const sz = mol.numBonds;
        let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, sz);
        for (let n = 1; n <= sz; n++)
            mask[n - 1] = mol.bondTransient(n).includes(ForeignMoleculeTransient.BondZeroDative);
        return mask;
    }
    static noteZeroHydrogenBonds(mol) {
        const sz = mol.numBonds;
        let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, sz);
        for (let n = 1; n <= sz; n++)
            mask[n - 1] = mol.bondTransient(n).includes(ForeignMoleculeTransient.BondZeroHydrogen);
        return mask;
    }
    static markExplicitValence(mol, atom, valence) {
        let trans = mol.atomTransient(atom).filter((tr) => !tr.startsWith(ForeignMoleculeTransient.AtomExplicitValence + ':'));
        trans.push(`${ForeignMoleculeTransient.AtomExplicitValence}:${valence}`);
        mol.setAtomTransient(atom, trans);
    }
    static noteExplicitValence(mol, atom) {
        let trans = mol.atomTransient(atom);
        for (let tr of trans)
            if (tr.startsWith(ForeignMoleculeTransient.AtomExplicitValence + ':'))
                return parseInt(tr.substring(ForeignMoleculeTransient.AtomExplicitValence.length + 1));
        return null;
    }
    static markSgroupMultiAttach(mol, name, atoms, keyval = {}) {
        let idxHigh = 0;
        for (let n = 1; n <= mol.numAtoms; n++)
            for (let tag of mol.atomTransient(n))
                if (tag.startsWith(ForeignMoleculeTransient.AtomSgroupMultiAttach + ':')) {
                    let payload = tag.substring(ForeignMoleculeTransient.AtomSgroupMultiAttach.length + 1);
                    let comma = payload.indexOf(',');
                    let bits = payload.split(',');
                    let idx = parseInt(bits[0]);
                    if (!(idx > 0))
                        continue;
                    idxHigh = Math.max(idxHigh, idx);
                }
        let tag = `${ForeignMoleculeTransient.AtomSgroupMultiAttach}:${idxHigh + 1},${name !== null && name !== void 0 ? name : ''}`;
        for (let [key, val] of Object.entries(keyval))
            tag += ',' + key + '=' + val;
        for (let a of atoms)
            mol.setAtomTransient(a, _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.append(mol.atomTransient(a), tag));
    }
    static hasAnySgroupMultiAttach(mol) {
        for (let n = 1; n <= mol.numAtoms; n++)
            if (mol.atomTransient(n).some((tag) => tag.startsWith(ForeignMoleculeTransient.AtomSgroupMultiAttach + ':')))
                return true;
        return false;
    }
    static noteAllSgroupMultiAttach(mol) {
        let map = {};
        for (let n = 1; n <= mol.numAtoms; n++)
            for (let tag of mol.atomTransient(n))
                if (tag.startsWith(ForeignMoleculeTransient.AtomSgroupMultiAttach + ':')) {
                    let payload = tag.substring(ForeignMoleculeTransient.AtomSgroupMultiAttach.length + 1);
                    let bits = payload.split(',');
                    if (bits.length < 2)
                        continue;
                    let idx = parseInt(bits[0]), name = bits[1];
                    if (!(idx > 0))
                        continue;
                    let keyval = {};
                    for (let i = 2; i < bits.length; i++) {
                        let eq = bits[i].indexOf('=');
                        if (eq < 0)
                            continue;
                        keyval[bits[i].substring(0, eq)] = bits[i].substring(eq + 1);
                    }
                    let sgm = map[idx];
                    if (sgm)
                        sgm.atoms.push(n);
                    else
                        map[idx] = { name, atoms: [n], keyval };
                }
        return Object.values(map);
    }
    static markSgroupMultiRepeat(mol, mult, atoms) {
        let idxHigh = 0;
        for (let n = 1; n <= mol.numAtoms; n++)
            for (let tag of mol.atomTransient(n))
                if (tag.startsWith(ForeignMoleculeTransient.AtomSgroupMultiRepeat + ':')) {
                    let payload = tag.substring(ForeignMoleculeTransient.AtomSgroupMultiRepeat.length + 1);
                    let comma = payload.indexOf(',');
                    if (comma <= 0)
                        continue;
                    let idx = parseInt(payload.substring(0, comma));
                    if (idx <= 0)
                        continue;
                    idxHigh = Math.max(idxHigh, idx);
                }
        let unit = atoms.length / mult;
        let tag = `${ForeignMoleculeTransient.AtomSgroupMultiRepeat}:${idxHigh + 1},${mult},${unit},`;
        for (let n = 0; n < atoms.length; n++)
            mol.setAtomTransient(atoms[n], _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.append(mol.atomTransient(atoms[n]), tag + (n + 1)));
    }
    static hasAnySgroupMultiRepeat(mol) {
        for (let n = 1; n <= mol.numAtoms; n++)
            if (mol.atomTransient(n).some((tag) => tag.startsWith(ForeignMoleculeTransient.AtomSgroupMultiRepeat + ':')))
                return true;
        return false;
    }
    static noteAllSgroupMultiRepeat(mol) {
        let map = {};
        for (let n = 1; n <= mol.numAtoms; n++)
            for (let tag of mol.atomTransient(n))
                if (tag.startsWith(ForeignMoleculeTransient.AtomSgroupMultiRepeat + ':')) {
                    let payload = tag.substring(ForeignMoleculeTransient.AtomSgroupMultiRepeat.length + 1);
                    let bits = payload.split(',');
                    if (bits.length < 4)
                        continue;
                    let idx = parseInt(bits[0]), mult = parseInt(bits[1]), unit = parseInt(bits[2]), pos = parseInt(bits[3]);
                    if (!(idx > 0) || mult < 2 || unit < 1 || pos < 1 || pos > mult * unit)
                        continue;
                    let mr = map[idx];
                    if (mr == null)
                        map[idx] = mr = { mult, unit, atoms: _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(0, mult * unit) };
                    else if (mr.mult != mult || mr.unit != unit)
                        continue;
                    mr.atoms[pos - 1] = n;
                }
        return Object.values(map);
    }
    static markSgroupData(mol, name, value, unit, query, atoms) {
        var _a;
        let idxHigh = 0;
        for (let n = 1; n <= mol.numAtoms; n++)
            for (let tag of mol.atomTransient(n))
                if (tag.startsWith(ForeignMoleculeTransient.AtomSgroupData + ':')) {
                    let payload = tag.substring(ForeignMoleculeTransient.AtomSgroupData.length + 1);
                    let comma = payload.indexOf(',');
                    if (comma <= 0)
                        continue;
                    let idx = parseInt(payload.substring(0, comma));
                    if (idx <= 0)
                        continue;
                    idxHigh = Math.max(idxHigh, idx);
                }
        let bits = [(idxHigh + 1).toString(), name, value, unit, query];
        for (let n = 1; n < bits.length; n++)
            bits[n] = ((_a = bits[n]) !== null && _a !== void 0 ? _a : '').replace(/\,/g, '@@');
        let tag = ForeignMoleculeTransient.AtomSgroupData + ':' + bits.join(',');
        for (let n = 0; n < atoms.length; n++)
            mol.setAtomTransient(atoms[n], _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.append(mol.atomTransient(atoms[n]), tag));
    }
    static hasAnySgroupData(mol) {
        for (let n = 1; n <= mol.numAtoms; n++)
            if (mol.atomTransient(n).some((tag) => tag.startsWith(ForeignMoleculeTransient.AtomSgroupData + ':')))
                return true;
        return false;
    }
    static noteAllSgroupData(mol) {
        let map = {};
        for (let n = 1; n <= mol.numAtoms; n++)
            for (let tag of mol.atomTransient(n))
                if (tag.startsWith(ForeignMoleculeTransient.AtomSgroupData + ':')) {
                    let payload = tag.substring(ForeignMoleculeTransient.AtomSgroupData.length + 1);
                    let bits = payload.split(',');
                    if (bits.length < 5)
                        continue;
                    let idx = parseInt(bits[0]);
                    for (let i = 1; i < 5; i++)
                        bits[i] = bits[i].replace(/\@\@/g, ',');
                    if (!(idx > 0))
                        continue;
                    let sd = map[idx];
                    if (sd)
                        sd.atoms.push(n);
                    else
                        map[idx] = { name: bits[1], value: bits[2], unit: bits[3], query: bits[4], atoms: [n] };
                }
        return Object.values(map);
    }
}


/***/ }),

/***/ "./src/mol/Graph.ts":
/*!**************************!*\
  !*** ./src/mol/Graph.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Graph: () => (/* binding */ Graph)
/* harmony export */ });
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");

class Graph {
    constructor(sz, edge1, edge2) {
        this.nbrs = [];
        this.indices = null;
        this.labels = null;
        this.props = null;
        if (sz != null)
            for (let n = 0; n < sz; n++)
                this.nbrs.push([]);
        if (edge1 != null && edge2 != null) {
            for (let n = 0; n < edge1.length; n++) {
                this.nbrs[edge1[n]].push(edge2[n]);
                this.nbrs[edge2[n]].push(edge1[n]);
            }
        }
    }
    clone() {
        let g = new Graph();
        for (let nbr of this.nbrs)
            g.nbrs.push(nbr.slice(0));
        g.indices = this.indices == null ? null : this.indices.slice(0);
        g.labels = this.labels == null ? null : this.labels.slice(0);
        g.props = this.props == null ? null : this.props.slice(0);
        return g;
    }
    static fromMolecule(mol) {
        let g = new Graph();
        g.indices = [];
        for (let n = 0; n < mol.numAtoms; n++) {
            g.nbrs.push([]);
            g.indices.push(n + 1);
        }
        for (let n = 1; n <= mol.numBonds; n++) {
            let bfr = mol.bondFrom(n) - 1, bto = mol.bondTo(n) - 1;
            g.nbrs[bfr].push(bto);
            g.nbrs[bto].push(bfr);
        }
        return g;
    }
    static fromMoleculeMask(mol, mask) {
        let count = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskCount(mask);
        let map = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskMap(mask);
        let g = new Graph(count);
        g.indices = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskIdx(mask);
        _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.addTo(g.indices, 1);
        for (let n = 0; n < count; n++) {
            let adj = mol.atomAdjList(g.indices[n]);
            g.nbrs[n] = [];
            for (let i = 0; i < adj.length; i++)
                if (mask[adj[i] - 1])
                    g.nbrs[n].push(map[adj[i] - 1]);
        }
        return g;
    }
    static fromNeighbours(nbrs) {
        let g = new Graph();
        g.nbrs = nbrs;
        return g;
    }
    toString() {
        let buff = '#nodes=' + this.nbrs.length;
        for (let n = 0; n < this.nbrs.length; n++) {
            buff += ' ' + n + ':{' + this.nbrs[n] + '}';
            if (n < _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.len(this.indices))
                buff += '[i=' + this.indices[n] + ']';
            if (n < _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.len(this.labels))
                buff += '[l=' + this.labels[n] + ']';
        }
        return buff;
    }
    get numNodes() { return this.nbrs.length; }
    numEdges(node) { return this.nbrs[node].length; }
    getEdge(node, edge) { return this.nbrs[node][edge]; }
    getEdges(node) { return this.nbrs[node]; }
    getIndex(node) { return this.indices == null ? 0 : this.indices[node]; }
    setIndex(node, idx) {
        if (this.indices == null)
            this.indices = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(0, this.nbrs.length);
        this.indices[node] = idx;
    }
    getLabel(node) { return this.labels == null ? null : this.labels[node]; }
    setLabel(node, lbl) {
        if (this.labels == null)
            this.labels = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.stringArray('', this.nbrs.length);
        this.labels[node] = lbl;
    }
    getProperty(node) { return this.props == null ? null : this.props[node]; }
    setProperty(node, prp) {
        if (this.props == null)
            this.props = new Array(this.nbrs.length);
        this.props[node] = prp;
    }
    addNode() {
        this.nbrs.push([]);
        if (this.indices != null)
            this.indices.push(0);
        if (this.labels != null)
            this.labels.push('');
        if (this.props != null)
            this.props.push(null);
        return this.nbrs.length - 1;
    }
    hasEdge(node1, node2) {
        if (this.nbrs[node1].length <= this.nbrs[node2].length)
            return this.nbrs[node1].indexOf(node2) >= 0;
        else
            return this.nbrs[node2].indexOf(node1) >= 0;
    }
    addEdge(node1, node2) {
        this.nbrs[node1].push(node2);
        this.nbrs[node2].push(node1);
    }
    removeEdge(node1, node2) {
        let i1 = this.nbrs[node1].indexOf(node2), i2 = this.nbrs[node2].indexOf(node1);
        if (i1 >= 0)
            this.nbrs[node1].splice(i1, 1);
        if (i2 >= 0)
            this.nbrs[node2].splice(i2, 1);
    }
    isolateNode(node) {
        for (let o of this.nbrs[node]) {
            let i = this.nbrs[o].indexOf(node);
            if (i >= 0)
                this.nbrs[o].splice(i, 1);
        }
        this.nbrs[node] = [];
    }
    keepNodesMask(mask) {
        const oldsz = this.nbrs.length, newsz = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskCount(mask);
        if (newsz == oldsz)
            return;
        if (newsz == 0) {
            this.nbrs = [];
            this.indices = null;
            this.labels = null;
            this.props = null;
            return;
        }
        let newmap = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskMap(mask);
        let newnbrs = [];
        for (let n = 0; n < newsz; n++)
            newnbrs.push([]);
        for (let n = 0, pos = 0; n < oldsz; n++)
            if (mask[n]) {
                for (let i of this.nbrs[n])
                    if (mask[i])
                        newnbrs[pos].push(newmap[i]);
                pos++;
            }
        this.nbrs = newnbrs;
        if (this.indices != null)
            this.indices = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskGet(this.indices, mask);
        if (this.labels != null)
            this.labels = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskGet(this.labels, mask);
        if (this.props != null)
            this.props = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskGet(this.props, mask);
    }
    keepNodesIndex(idx) { this.keepNodesMask(_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.idxMask(idx, this.numNodes)); }
    removeNodesMask(mask) { this.keepNodesMask(_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.notMask(mask)); }
    removeNodesIndex(idx) { this.removeNodesMask(_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.idxMask(idx, this.numNodes)); }
    subgraphIndex(idx) {
        const nsz = idx.length;
        let g = new Graph(nsz);
        if (this.indices != null || this.labels != null || this.props != null)
            for (let n = 0; n < nsz; n++) {
                if (this.indices != null)
                    g.setIndex(n, this.indices[idx[n]]);
                if (this.labels != null)
                    g.setLabel(n, this.labels[idx[n]]);
                if (this.props != null)
                    g.setProperty(n, this.props[idx[n]]);
            }
        for (let i = 0; i < nsz; i++) {
            for (let n of this.nbrs[idx[i]]) {
                let j = idx.indexOf(n);
                if (j > i)
                    g.addEdge(i, j);
            }
        }
        return g;
    }
    subgraphMask(mask) {
        let g = this.clone();
        g.keepNodesMask(mask);
        return g;
    }
    calculateComponents() {
        const sz = this.nbrs.length;
        if (sz == 0)
            return [];
        let cc = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(0, sz);
        cc[0] = 1;
        let first = 1, high = 1;
        while (true) {
            while (first < sz && cc[first] > 0) {
                first++;
            }
            if (first >= sz)
                break;
            let anything = false;
            for (let i = first; i < sz; i++)
                if (cc[i] == 0) {
                    for (let j = 0; j < this.nbrs[i].length; j++) {
                        if (cc[this.nbrs[i][j]] != 0) {
                            cc[i] = cc[this.nbrs[i][j]];
                            anything = true;
                        }
                    }
                }
            if (!anything)
                cc[first] = ++high;
        }
        return cc;
    }
    calculateComponentGroups() {
        if (this.nbrs.length == 0)
            return [];
        let cc = this.calculateComponents();
        let sz = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.max(cc);
        let grp = [];
        for (let n = 0; n < sz; n++)
            grp.push([]);
        for (let n = 0; n < cc.length; n++)
            grp[cc[n] - 1].push(n);
        return grp;
    }
    calculateRingBlocks() {
        let sz = this.numNodes, nbrs = this.nbrs;
        if (sz == 0)
            return [[], 0];
        let rblk = new Array(this.numNodes);
        let visited = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, sz);
        _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.setTo(rblk, 0);
        let path = new Array(sz + 1);
        let plen = 0, numVisited = 0;
        while (true) {
            let last, current;
            if (plen == 0) {
                last = -1;
                for (current = 0; visited[current]; current++) { }
            }
            else {
                last = path[plen - 1];
                current = -1;
                for (let n = 0; n < nbrs[last].length; n++)
                    if (!visited[nbrs[last][n]]) {
                        current = nbrs[last][n];
                        break;
                    }
            }
            if (current >= 0 && plen >= 2) {
                let back = path[plen - 1];
                for (let n = 0; n < nbrs[current].length; n++) {
                    let join = nbrs[current][n];
                    if (join != back && visited[join]) {
                        path[plen] = current;
                        for (let i = plen; i == plen || path[i + 1] != join; i--) {
                            let id = rblk[path[i]];
                            if (id == 0)
                                rblk[path[i]] = last;
                            else if (id != last) {
                                for (let j = 0; j < sz; j++)
                                    if (rblk[j] == id)
                                        rblk[j] = last;
                            }
                        }
                    }
                }
            }
            if (current >= 0) {
                visited[current] = true;
                path[plen++] = current;
                numVisited++;
            }
            else {
                plen--;
            }
            if (numVisited == sz)
                break;
        }
        let nextID = 0;
        for (let i = 0; i < sz; i++)
            if (rblk[i] > 0) {
                nextID--;
                for (let j = sz - 1; j >= i; j--)
                    if (rblk[j] == rblk[i])
                        rblk[j] = nextID;
            }
        for (let i = 0; i < sz; i++)
            rblk[i] = -rblk[i];
        return [rblk, -nextID];
    }
    calculateRingBlockGroups() {
        let [rblk, sz] = this.calculateRingBlocks();
        if (sz == 0)
            return [];
        let cap = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(0, sz);
        for (let n = 0; n < rblk.length; n++)
            if (rblk[n] > 0)
                cap[rblk[n] - 1]++;
        let grp = new Array(sz);
        for (let n = 0; n < sz; n++) {
            grp[n] = new Array(cap[n]);
            cap[n] = 0;
        }
        for (let n = 0; n < rblk.length; n++) {
            let i = rblk[n] - 1;
            if (i < 0)
                continue;
            grp[i][cap[i]++] = n;
        }
        return grp;
    }
    findRingsOfSize(size) {
        let [rblk, num] = this.calculateRingBlocks();
        if (num == 0)
            return [];
        let rings = [];
        let mask = new Array(this.numNodes);
        for (let r = 1; r <= num; r++) {
            for (let n = 0; n < this.numNodes; n++)
                mask[n] = rblk[n] == r;
            let newRings = this.findRingsOfSizeMask(size, mask);
            for (let n = 0; n < newRings.length; n++)
                rings.push(newRings[n]);
        }
        return rings;
    }
    findRingsOfSizeMask(size, mask) {
        let rings = [];
        for (let n = 0; n < this.numNodes; n++)
            if (mask[n]) {
                let path = new Array(size);
                path[0] = n;
                this.recursiveRingFind(path, 1, size, mask, rings);
            }
        return rings;
    }
    calculateBFS(idx) {
        let ret = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(-1, this.numNodes);
        ret[idx] = 0;
        let curnum = 0, lsz = 1, watermark = 0;
        let list = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(0, this.numNodes);
        list[0] = idx;
        while (true) {
            let newsz = lsz;
            for (let n = watermark; n < lsz; n++) {
                for (let i = 0; i < this.nbrs[list[n]].length; i++) {
                    let j = this.nbrs[list[n]][i];
                    if (ret[j] < 0) {
                        ret[j] = curnum + 1;
                        list[newsz++] = j;
                    }
                }
            }
            if (newsz == lsz)
                break;
            watermark = lsz;
            lsz = newsz;
            curnum++;
        }
        return ret;
    }
    calculateGravity() {
        const sz = this.numNodes;
        const { nbrs } = this;
        let wght = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(1, sz);
        for (let n = 0; n < sz; n++) {
            let wmod = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(0, sz);
            for (let i = 0; i < sz; i++)
                for (let j = nbrs[i].length - 1; j >= 0; j--)
                    wmod[i] += wght[nbrs[i][j]];
            wght = wmod;
        }
        return wght;
    }
    calculateShortestPath(node1, node2) {
        const sz = this.numNodes;
        let q = new Set();
        for (let n = 0; n < sz; n++)
            q.add(n);
        let dist = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(Number.MAX_SAFE_INTEGER, sz);
        let prev = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(-1, sz);
        dist[node1] = 0;
        while (q.size > 0) {
            let u = -1;
            for (let i of q)
                if (u < 0 || dist[i] < dist[u])
                    u = i;
            q.delete(u);
            if (u == node2)
                break;
            for (let v of this.nbrs[u]) {
                let alt = dist[u] + 1;
                if (alt < dist[v]) {
                    dist[v] = alt;
                    prev[v] = u;
                }
            }
        }
        let path = [];
        for (let u = node2; prev[u] >= 0; u = prev[u])
            path.unshift(u);
        if (path.length > 0)
            path.unshift(node1);
        return path.length > 0 ? path : null;
    }
    adjacencyMatrix() {
        const sz = this.numNodes;
        let mtx = [];
        for (let n = 0; n < sz; n++)
            mtx.push(_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(0, sz));
        for (let i = 0; i < sz; i++)
            for (let j of this.nbrs[i])
                mtx[i][j] = mtx[j][i] = 1;
        return mtx;
    }
    distanceMatrix() {
        const sz = this.numNodes;
        let mtx = [];
        for (let n = 0; n < sz; n++)
            mtx.push(_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(Number.POSITIVE_INFINITY, sz));
        for (let i = 0; i < sz; i++) {
            mtx[i][i] = 0;
            for (let j of this.nbrs[i])
                mtx[i][j] = mtx[j][i] = 1;
        }
        for (let k = 0; k < sz; k++) {
            for (let i = 0; i < sz; i++)
                for (let j = 0; j < sz; j++) {
                    if (!Number.isFinite(mtx[k][j]) || !Number.isFinite(mtx[i][k]))
                        continue;
                    mtx[i][j] = Math.min(mtx[i][j], mtx[i][k] + mtx[k][j]);
                }
        }
        return mtx;
    }
    recursiveRingFind(path, psize, capacity, mask, rings) {
        if (psize < capacity) {
            let last = path[psize - 1];
            for (let n = 0; n < this.nbrs[last].length; n++) {
                let adj = this.nbrs[last][n];
                if (!mask[adj])
                    continue;
                let fnd = false;
                for (let i = 0; i < psize; i++)
                    if (path[i] == adj) {
                        fnd = true;
                        break;
                    }
                if (!fnd) {
                    let newPath = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.duplicate(path);
                    newPath[psize] = adj;
                    this.recursiveRingFind(newPath, psize + 1, capacity, mask, rings);
                }
            }
            return;
        }
        let last = path[psize - 1];
        let fnd = false;
        for (let n = 0; n < this.nbrs[last].length; n++)
            if (this.nbrs[last][n] == path[0]) {
                fnd = true;
                break;
            }
        if (!fnd)
            return;
        for (let n = 0; n < path.length; n++) {
            let count = 0, p = path[n];
            for (let i = 0; i < this.nbrs[p].length; i++)
                if (path.indexOf(this.nbrs[p][i]) >= 0)
                    count++;
            if (count != 2)
                return;
        }
        let first = 0;
        for (let n = 1; n < psize; n++)
            if (path[n] < path[first])
                first = n;
        let fm = (first - 1 + psize) % psize, fp = (first + 1) % psize;
        let flip = path[fm] < path[fp];
        if (first != 0 || flip) {
            let newPath = new Array(psize);
            for (let n = 0; n < psize; n++)
                newPath[n] = path[(first + (flip ? psize - n : n)) % psize];
            path = newPath;
        }
        for (let n = 0; n < rings.length; n++) {
            let look = rings[n];
            let same = true;
            for (let i = 0; i < psize; i++)
                if (look[i] != path[i]) {
                    same = false;
                    break;
                }
            if (same)
                return;
        }
        rings.push(path);
    }
}


/***/ }),

/***/ "./src/mol/MetaMolecule.ts":
/*!*********************************!*\
  !*** ./src/mol/MetaMolecule.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MetaMolecule: () => (/* binding */ MetaMolecule)
/* harmony export */ });
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _Chemistry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Chemistry */ "./src/mol/Chemistry.ts");
/* harmony import */ var _mol_DotPath__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/DotPath */ "./src/mol/DotPath.ts");
/* harmony import */ var _Molecule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _MolUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mol/Stereochemistry */ "./src/mol/Stereochemistry.ts");






class MetaMolecule {
    constructor(mol) {
        this.mol = mol;
        this.atomArom = null;
        this.bondArom = null;
        this.rubricTetra = null;
        this.rubricSquare = null;
        this.rubricBipy = null;
        this.rubricOcta = null;
        this.rubricSides = null;
        this.hash = null;
        this.heavyHash = null;
        this.uniqueElements = null;
        this.dots = null;
        this.piAtom = null;
    }
    calculateStrictAromaticity() {
        let mol = this.mol;
        this.atomArom = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, mol.numAtoms);
        this.bondArom = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, mol.numBonds);
        let rings = mol.findRingsOfSize(6);
        const nr = rings.length;
        if (nr == 0)
            return;
        this.ensurePiAtoms();
        let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, nr);
        for (let n = 0; n < nr; n++) {
            for (let i = 0; i < rings[n].length; i++) {
                let a = rings[n][i];
                if (!this.piAtom[a - 1]) {
                    mask[n] = true;
                    break;
                }
                let b = mol.findBond(a, rings[n][i == rings[n].length - 1 ? 0 : i + 1]);
                let bo = mol.bondOrder(b);
                if (bo != 1 && bo != 2) {
                    mask[n] = true;
                    break;
                }
            }
        }
        while (true) {
            let anyChange = false;
            for (let n = 0; n < nr; n++)
                if (!mask[n]) {
                    let phase1 = true, phase2 = true;
                    for (let i = 0; i < rings[n].length; i++) {
                        let b = mol.findBond(rings[n][i], rings[n][i == rings[n].length - 1 ? 0 : i + 1]);
                        if (this.bondArom[b - 1])
                            continue;
                        let bo = mol.bondOrder(b);
                        phase1 = phase1 && bo == (2 - (i & 1));
                        phase2 = phase2 && bo == (1 + (i & 1));
                    }
                    if (!phase1 && !phase2)
                        continue;
                    for (let i = 0; i < rings[n].length; i++) {
                        let b = mol.findBond(rings[n][i], rings[n][i == rings[n].length - 1 ? 0 : i + 1]);
                        this.bondArom[b - 1] = true;
                    }
                    mask[n] = true;
                    anyChange = true;
                }
            if (!anyChange)
                break;
        }
        for (let n = 0; n < this.bondArom.length; n++)
            if (this.bondArom[n]) {
                this.atomArom[mol.bondFrom(n + 1) - 1] = true;
                this.atomArom[mol.bondTo(n + 1) - 1] = true;
            }
    }
    calculateRelaxedAromaticity() {
        let mol = this.mol;
        this.atomArom = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, mol.numAtoms);
        this.bondArom = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, mol.numBonds);
        this.ensurePiAtoms();
        const na = mol.numAtoms, nb = mol.numBonds;
        let electrons = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(0, na);
        let exocyclic = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, na);
        for (let n = 1; n <= na; n++) {
            let atno = mol.atomicNumber(n);
            electrons[n - 1] = (_Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_BLOCKS[atno] == 2 ? _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_VALENCE[atno] : 0) - mol.atomCharge(n) - mol.atomHydrogens(n)
                - mol.atomUnpaired(n);
        }
        for (let n = 1; n <= nb; n++) {
            const bfr = mol.bondFrom(n), bto = mol.bondTo(n), bo = mol.bondOrder(n);
            electrons[bfr - 1] -= bo;
            electrons[bto - 1] -= bo;
            if (bo == 2) {
                const rblk1 = mol.atomRingBlock(bfr), rblk2 = mol.atomRingBlock(bto);
                if (rblk1 > 0 && rblk1 != rblk2)
                    exocyclic[bfr - 1] = true;
                if (rblk2 > 0 && rblk2 != rblk1)
                    exocyclic[bto - 1] = true;
            }
        }
        let rings = [];
        for (let rsz = 3; rsz <= 7; rsz++)
            for (let rng of mol.findRingsOfSize(rsz)) {
                let valid = true;
                for (let n = 0; n < rsz; n++) {
                    const a = rng[n];
                    if (!this.piAtom[a - 1] && electrons[a - 1] < 2 && !exocyclic[a - 1]) {
                        valid = false;
                        break;
                    }
                    let b = mol.findBond(a, rng[n < rsz - 1 ? n + 1 : 0]);
                    let bo = mol.bondOrder(b);
                    if (bo != 1 && bo != 2) {
                        valid = false;
                        break;
                    }
                }
                if (valid)
                    rings.push(rng);
            }
        while (rings.length > 0) {
            let anyChange = false;
            for (let n = 0; n < rings.length; n++) {
                let r = rings[n];
                let paths = [0];
                for (let i = 0; i < r.length; i++) {
                    const a = r[i];
                    const b1 = mol.findBond(a, r[i < r.length - 1 ? i + 1 : 0]);
                    const b2 = mol.findBond(a, r[i > 0 ? i - 1 : r.length - 1]);
                    if (this.bondArom[b1 - 1]) {
                        for (let j = paths.length - 1; j >= 0; j--) {
                            const e = paths[j] + 2;
                            if (paths.indexOf(e) < 0)
                                paths = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.append(paths, e);
                        }
                    }
                    else if (mol.bondOrder(b1) == 2)
                        _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.addTo(paths, 2);
                    else if (electrons[a - 1] >= 2 && mol.bondOrder(b1) == 1 && mol.bondOrder(b2) == 1)
                        _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.addTo(paths, 2);
                }
                let arom = false;
                for (let e of paths) {
                    if (e == 2 && r.length == 3) {
                        arom = true;
                        break;
                    }
                    if (e == 6) {
                        arom = true;
                        break;
                    }
                }
                if (arom) {
                    for (let i = 0; i < r.length; i++) {
                        let a = r[i], b = mol.findBond(a, r[i < r.length - 1 ? i + 1 : 0]);
                        this.atomArom[a - 1] = true;
                        this.bondArom[b - 1] = true;
                    }
                    rings.splice(n, 1);
                    n--;
                    anyChange = true;
                }
            }
            if (!anyChange)
                break;
        }
    }
    calculateStereoRubric() {
        const mol = this.mol, na = mol.numAtoms, nb = mol.numBonds;
        this.rubricTetra = new Array(na);
        this.rubricSquare = new Array(na);
        this.rubricBipy = new Array(na);
        this.rubricOcta = new Array(na);
        this.rubricSides = new Array(nb);
        for (let n = 1; n <= na; n++) {
            let blk = _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_BLOCKS[mol.atomicNumber(n)];
            let adjc = mol.atomAdjCount(n), hc = mol.atomHydrogens(n);
            let ninc = 0, ndec = 0;
            for (let b of mol.atomAdjBonds(n)) {
                if (mol.bondType(b) == _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_INCLINED && mol.bondFrom(b) == n)
                    ninc++;
                else if (mol.bondType(b) == _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_DECLINED && mol.bondFrom(b) == n)
                    ndec++;
            }
            if (blk == 2 && ((adjc == 3 && hc == 1) || (adjc == 4 && hc == 0))) {
                this.rubricTetra[n - 1] = _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_5__.Stereochemistry.rubricTetrahedral(mol, n);
            }
            else if (blk >= 3 && adjc == 4 && ninc == 1 && ndec == 1) {
                this.rubricTetra[n - 1] = _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_5__.Stereochemistry.rubricTetrahedral(mol, n);
            }
            if (blk >= 3 && adjc == 4 && hc == 0) {
                this.rubricSquare[n - 1] = _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_5__.Stereochemistry.rubricSquarePlanar(mol, n);
            }
            if (blk >= 3 && (adjc == 4 || adjc == 5) && hc == 0) {
                this.rubricBipy[n - 1] = _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_5__.Stereochemistry.rubricBipyrimidal(mol, n);
            }
            if (blk >= 3 && (adjc == 5 || adjc == 6) && hc == 0) {
                this.rubricOcta[n - 1] = _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_5__.Stereochemistry.rubricOctahedral(mol, n);
            }
            else if (blk == 2 && adjc == 6 && hc == 0) {
                this.rubricOcta[n - 1] = _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_5__.Stereochemistry.rubricOctahedral(mol, n);
            }
        }
        for (let n = 1; n <= mol.numBonds; n++) {
            if (mol.bondOrder(n) != 2 || mol.bondType(n) == _Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_UNKNOWN || this.isBondAromatic(n))
                continue;
            let bfr = mol.bondFrom(n), bto = mol.bondTo(n);
            let blk1 = _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_BLOCKS[mol.atomicNumber(bfr)];
            let blk2 = _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_BLOCKS[mol.atomicNumber(bto)];
            let adjc1 = mol.atomAdjCount(bfr), hc1 = mol.atomHydrogens(bfr);
            let adjc2 = mol.atomAdjCount(bto), hc2 = mol.atomHydrogens(bto);
            if (blk1 == 2 && blk2 == 2 && (adjc1 + hc1 == 3 && hc1 <= 1) && (adjc2 + hc2 == 3 && hc2 <= 1)) {
                this.rubricSides[n - 1] = _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_5__.Stereochemistry.rubricBondSides(mol, n);
            }
        }
    }
    removeHydrogens() {
        let mol = this.mol, na = mol.numAtoms, nb = mol.numBonds;
        let atomMask = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(true, na), bondMask = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(true, nb);
        for (let n = 1; n <= na; n++)
            if (_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.boringHydrogen(mol, n)) {
                atomMask[n - 1] = false;
                bondMask[mol.atomAdjBonds(n)[0] - 1] = false;
            }
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.allTrue(atomMask))
            return;
        mol = _MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.subgraphMask(mol, atomMask);
        if (this.atomArom)
            this.atomArom = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskGet(this.atomArom, atomMask);
        if (this.bondArom)
            this.bondArom = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskGet(this.bondArom, bondMask);
        if (this.rubricTetra || this.rubricSquare || this.rubricBipy || this.rubricOcta || this.rubricSides) {
            if (this.rubricTetra)
                this.rubricTetra = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskGet(this.rubricTetra, atomMask);
            if (this.rubricSquare)
                this.rubricSquare = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskGet(this.rubricSquare, atomMask);
            if (this.rubricBipy)
                this.rubricBipy = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskGet(this.rubricBipy, atomMask);
            if (this.rubricOcta)
                this.rubricOcta = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskGet(this.rubricOcta, atomMask);
            if (this.rubricSides)
                this.rubricSides = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskGet(this.rubricSides, bondMask);
            let atomMap = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.prepend(_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.add(_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskMap(atomMask), 1), 0);
            for (let n = 0; n < _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.len(this.rubricTetra); n++)
                if (this.rubricTetra[n])
                    this.rubricTetra[n] = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.idxGet(atomMap, this.rubricTetra[n]);
            for (let n = 0; n < _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.len(this.rubricSquare); n++)
                if (this.rubricSquare[n])
                    this.rubricSquare[n] = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.idxGet(atomMap, this.rubricSquare[n]);
            for (let n = 0; n < _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.len(this.rubricBipy); n++)
                if (this.rubricBipy[n])
                    this.rubricBipy[n] = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.idxGet(atomMap, this.rubricBipy[n]);
            for (let n = 0; n < _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.len(this.rubricOcta); n++)
                if (this.rubricOcta[n])
                    this.rubricOcta[n] = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.idxGet(atomMap, this.rubricOcta[n]);
            for (let n = 0; n < _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.len(this.rubricSides); n++)
                if (this.rubricSides[n])
                    this.rubricSides[n] = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.idxGet(atomMap, this.rubricSides[n]);
        }
    }
    calculateSkeletonHash() {
        if (MetaMolecule.skeletonHash == null)
            throw 'Skeleton hash not available.';
        this.hash = MetaMolecule.skeletonHash(this.mol);
    }
    calculateHeavyHash() {
        let anyH = false;
        for (let n = 1; n <= this.mol.numAtoms; n++)
            if (this.mol.atomElement(n) == 'H') {
                anyH = true;
                break;
            }
        if (!anyH) {
            this.heavyHash = this.getSkeletonHash();
            return;
        }
        let hvy = this.mol.clone();
        for (let n = hvy.numAtoms; n >= 1; n--)
            if (hvy.atomElement(n) == 'H')
                hvy.deleteAtomAndBonds(n);
        this.heavyHash = MetaMolecule.skeletonHash(hvy);
    }
    isAtomAromatic(atom) {
        return this.atomArom == null ? false : this.atomArom[atom - 1];
    }
    isBondAromatic(bond) {
        return this.bondArom == null ? false : this.bondArom[bond - 1];
    }
    bondOrderArom(bond) {
        return this.bondArom != null && this.bondArom[bond - 1] ? -1 : this.mol.bondOrder(bond);
    }
    getAtomAromaticity() {
        return this.atomArom == null ? null : this.atomArom.slice(0);
    }
    getBondAromaticity() {
        return this.bondArom == null ? null : this.bondArom.slice(0);
    }
    getSkeletonHash() {
        if (this.hash == null)
            this.calculateSkeletonHash();
        return this.hash;
    }
    getHeavyHash() {
        if (this.heavyHash == null)
            this.calculateHeavyHash();
        return this.heavyHash;
    }
    getDotPath() {
        if (this.dots == null)
            this.dots = new _mol_DotPath__WEBPACK_IMPORTED_MODULE_2__.DotPath(this.mol);
        return this.dots;
    }
    getUniqueElements() {
        if (this.uniqueElements == null) {
            this.uniqueElements = [];
            for (let n = 1; n <= this.mol.numAtoms; n++) {
                let el = this.mol.atomElement(n);
                if (this.uniqueElements.indexOf(el) < 0)
                    this.uniqueElements.push(el);
            }
        }
        return this.uniqueElements;
    }
    equivalentTo(other, timeout = 1000) {
        if (MetaMolecule.isomorphMatch == null)
            throw 'Isomorph search unavailable.';
        if (this.mol.numAtoms != other.mol.numAtoms || this.mol.numBonds != other.mol.numBonds)
            return false;
        if (this.hash == null)
            this.calculateSkeletonHash();
        if (other.hash == null)
            other.calculateSkeletonHash();
        if (this.hash != other.hash)
            return false;
        if (this.mol.compareTo(other.mol) == 0)
            return true;
        let uniq1 = this.getUniqueElements(), uniq2 = other.getUniqueElements();
        for (let n = 0; n < uniq1.length; n++) {
            if (!uniq2.includes(uniq1[n]))
                return false;
        }
        return MetaMolecule.isomorphMatch(this, other, timeout);
    }
    static createRubric(mol) {
        if (mol == null)
            return null;
        let meta = new MetaMolecule(mol);
        meta.calculateStereoRubric();
        return meta;
    }
    static createStrict(mol) {
        if (mol == null)
            return null;
        let meta = new MetaMolecule(mol);
        meta.calculateStrictAromaticity();
        return meta;
    }
    static createStrictRubric(mol) {
        if (mol == null)
            return null;
        let meta = new MetaMolecule(mol);
        meta.calculateStrictAromaticity();
        meta.calculateStereoRubric();
        return meta;
    }
    static createRelaxed(mol) {
        if (mol == null)
            return null;
        let meta = new MetaMolecule(mol);
        meta.calculateRelaxedAromaticity();
        return meta;
    }
    static createRelaxedRubric(mol) {
        if (mol == null)
            return null;
        let meta = new MetaMolecule(mol);
        meta.calculateRelaxedAromaticity();
        meta.calculateStereoRubric();
        return meta;
    }
    ensurePiAtoms() {
        if (this.piAtom != null)
            return;
        this.piAtom = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, this.mol.numAtoms);
        for (let n = 1; n <= this.mol.numBonds; n++)
            if (this.mol.bondOrder(n) == 2) {
                {
                    this.piAtom[this.mol.bondFrom(n) - 1] = true;
                    this.piAtom[this.mol.bondTo(n) - 1] = true;
                }
            }
    }
}
MetaMolecule.skeletonHash = null;
MetaMolecule.isomorphMatch = null;


/***/ }),

/***/ "./src/mol/MolUtil.ts":
/*!****************************!*\
  !*** ./src/mol/MolUtil.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MolUtil: () => (/* binding */ MolUtil)
/* harmony export */ });
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _Chemistry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Chemistry */ "./src/mol/Chemistry.ts");
/* harmony import */ var _CoordUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CoordUtil */ "./src/mol/CoordUtil.ts");
/* harmony import */ var _Graph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Graph */ "./src/mol/Graph.ts");
/* harmony import */ var _Molecule__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mol/PolymerBlock */ "./src/mol/PolymerBlock.ts");
/* harmony import */ var _SketchUtil__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SketchUtil */ "./src/mol/SketchUtil.ts");







class MolUtil {
    static isBlank(mol) {
        if (mol == null)
            return true;
        return mol.numAtoms == 0;
    }
    static notBlank(mol) {
        if (mol == null)
            return false;
        return mol.numAtoms > 0;
    }
    static orBlank(mol) { return mol == null ? new _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule() : mol; }
    static hasAnyAbbrev(mol) {
        for (let n = 1; n <= mol.numAtoms; n++)
            if (MolUtil.hasAbbrev(mol, n))
                return true;
        return false;
    }
    static hasAbbrev(mol, atom) {
        let extra = mol.atomExtra(atom);
        for (let n = 0; n < (extra == null ? 0 : extra.length); n++)
            if (extra[n].startsWith('a'))
                return true;
        return false;
    }
    static getAbbrev(mol, atom) {
        let extra = mol.atomExtra(atom);
        for (let n = 0; n < (extra != null ? extra.length : 0); n++)
            if (extra[n].startsWith('a')) {
                return _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.fromString(extra[n].substring(1));
            }
        return null;
    }
    static setAbbrev(mol, atom, frag) {
        let attidx = 0;
        for (let n = 1; n <= frag.numAtoms; n++)
            if (frag.atomElement(n) == MolUtil.ABBREV_ATTACHMENT) {
                attidx = n;
                break;
            }
        if (attidx == 0)
            throw 'No attachment points indicated.';
        if (attidx >= 2) {
            frag = frag.clone();
            frag.swapAtoms(attidx, 1);
        }
        let adj = mol.atomAdjList(atom);
        if (adj.length > 1)
            throw 'Setting abbreviation for non-terminal atom.';
        if (frag.atomAdjCount(1) == 1 && mol.atomAdjCount(atom) > 0) {
            let b1 = mol.findBond(atom, mol.atomAdjList(atom)[0]);
            let b2 = frag.findBond(1, frag.atomAdjList(1)[0]);
            mol.setBondOrder(b1, frag.bondOrder(b2));
        }
        let extra = mol.atomExtra(atom);
        let idx = -1;
        for (let n = 0; n < (extra != null ? extra.length : 0); n++)
            if (extra[n].startsWith('a')) {
                idx = n;
                break;
            }
        if (idx < 0)
            idx = extra.push(null) - 1;
        extra[idx] = 'a' + frag.toString();
        mol.setAtomExtra(atom, extra);
    }
    static validateAbbrevs(mol) {
        for (let n = 1; n <= mol.numAtoms; n++)
            if (MolUtil.hasAbbrev(mol, n)) {
                if (mol.atomAdjCount(n) > 1)
                    MolUtil.clearAbbrev(mol, n);
                if (mol.atomCharge(n) != 0)
                    mol.setAtomCharge(n, 0);
                if (mol.atomUnpaired(n) != 0)
                    mol.setAtomUnpaired(n, 0);
                if (mol.atomIsotope(n) != 0)
                    mol.setAtomIsotope(n, _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.ISOTOPE_NATURAL);
                if (mol.atomHExplicit(n) != _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.HEXPLICIT_UNKNOWN)
                    mol.setAtomHExplicit(n, _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.HEXPLICIT_UNKNOWN);
            }
    }
    static convertToAbbrev(mol, srcmask, abbrevName) {
        let molidx = this.convertToAbbrevIndex(mol, srcmask, abbrevName);
        return molidx ? molidx[0] : null;
    }
    static convertToAbbrevIndex(mol, srcmask, abbrevName) {
        let junction = 0;
        let polymerExtra = null;
        for (let n = 1; n <= mol.numBonds; n++) {
            let b1 = mol.bondFrom(n), b2 = mol.bondTo(n), atom = 0;
            if (srcmask[b1 - 1] && !srcmask[b2 - 1]) {
                atom = b1;
                polymerExtra = _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__.PolymerBlock.getPolymerExtensions(mol, b2);
            }
            else if (!srcmask[b1 - 1] && srcmask[b2 - 1]) {
                atom = b2;
                polymerExtra = _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__.PolymerBlock.getPolymerExtensions(mol, b1);
            }
            if (atom == 0)
                continue;
            if (junction > 0 && atom != junction)
                return [null, null];
            junction = atom;
        }
        if (junction == 0)
            return [null, null];
        let na = mol.numAtoms, molidx = 0, fragidx = 0;
        let maskmol = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, na), maskfrag = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, na);
        for (let n = 0; n < na; n++) {
            maskmol[n] = srcmask[n];
            maskfrag[n] = !srcmask[n] || n + 1 == junction;
            if (maskmol[n] && n + 1 <= junction)
                molidx++;
            if (maskfrag[n] && n + 1 <= junction)
                fragidx++;
        }
        let bondType = _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_NORMAL, nadj = 0;
        for (let a of mol.atomAdjList(junction))
            if (!srcmask[a - 1]) {
                if (nadj != 0) {
                    bondType = _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_NORMAL;
                    break;
                }
                let b = mol.findBond(junction, a);
                if (mol.bondFrom(b) == junction)
                    bondType = mol.bondType(b);
                nadj++;
            }
        let frag = MolUtil.subgraphMask(mol, maskfrag);
        frag.setAtomElement(fragidx, MolUtil.ABBREV_ATTACHMENT);
        frag.setAtomCharge(fragidx, 0);
        frag.setAtomUnpaired(fragidx, 0);
        frag.setAtomHExplicit(fragidx, _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.HEXPLICIT_UNKNOWN);
        for (let n = 1; n <= frag.numAtoms; n++)
            frag.setAtomMapNum(n, 0);
        frag.setAtomExtra(fragidx, []);
        frag.setAtomTransient(fragidx, []);
        let adj = frag.atomAdjList(fragidx);
        let x = 0, y = 0, inv = 1.0 / adj.length;
        let bondOrder = 1;
        for (let n = 0; n < adj.length; n++) {
            x += frag.atomX(adj[n]);
            y += frag.atomY(adj[n]);
            let b = frag.findBond(fragidx, adj[n]);
            if (n == 0)
                bondOrder = frag.bondOrder(b);
            else if (bondOrder != frag.bondOrder(b))
                bondOrder = 1;
        }
        x *= inv;
        y *= inv;
        if (fragidx > 1)
            frag.swapAtoms(fragidx, 1);
        let newmol = MolUtil.subgraphMask(mol, maskmol);
        let newatom = newmol.addAtom(abbrevName, x, y);
        newmol.addBond(molidx, newatom, bondOrder, bondType);
        MolUtil.setAbbrev(newmol, newatom, frag);
        if (polymerExtra != null)
            newmol.setAtomExtra(newatom, _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.concat(newmol.atomExtra(newatom), polymerExtra));
        return [newmol, newatom];
    }
    static expandAbbrevs(mol, alignCoords) {
        while (true) {
            let anything = false;
            for (let n = 1; n <= mol.numAtoms; n++)
                if (MolUtil.hasAbbrev(mol, n)) {
                    if (MolUtil.expandOneAbbrev(mol, n, alignCoords))
                        anything = true;
                    n--;
                }
            if (!anything)
                break;
        }
    }
    static expandedAbbrevs(mol) {
        if (!this.hasAnyAbbrev(mol))
            return mol;
        mol = mol.clone();
        this.expandAbbrevs(mol, true);
        return mol;
    }
    static expandOneAbbrev(mol, atom, alignCoords) {
        let frag = MolUtil.getAbbrev(mol, atom);
        if (frag == null)
            return null;
        if (mol.atomAdjCount(atom) != 1 || frag.numAtoms == 0) {
            MolUtil.clearAbbrev(mol, atom);
            return null;
        }
        let m = mol.atomMapNum(atom);
        for (let n = 1; n <= frag.numAtoms; n++)
            frag.setAtomMapNum(n, 0);
        if (m > 0)
            for (let n of frag.atomAdjList(1))
                frag.setAtomMapNum(n, m);
        return MolUtil.expandOneAbbrevFrag(mol, atom, frag, alignCoords);
    }
    static expandOneAbbrevFrag(mol, atom, frag, alignCoords) {
        let polymerExtra = _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__.PolymerBlock.getPolymerExtensions(mol, atom);
        let nbr = mol.atomAdjCount(atom) == 1 ? mol.atomAdjList(atom)[0] : 0;
        let connBond = mol.findBond(atom, nbr), connType = _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_NORMAL;
        if (connBond > 0) {
            connType = mol.bondType(connBond);
            if (mol.bondFrom(connBond) != nbr && (connType == _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_INCLINED || connType == _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_DECLINED))
                connType = _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_NORMAL;
        }
        if (alignCoords) {
            let vx1 = mol.atomX(atom) - mol.atomX(nbr), vy1 = mol.atomY(atom) - mol.atomY(nbr);
            let adj = frag.atomAdjList(1);
            let vx2 = 0, vy2 = 0, inv = 1.0 / adj.length;
            for (let n = 0; n < adj.length; n++) {
                vx2 += frag.atomX(adj[n]) - frag.atomX(1);
                vy2 += frag.atomY(adj[n]) - frag.atomY(1);
            }
            vx2 *= inv;
            vy2 *= inv;
            let th1 = Math.atan2(vy1, vx1), th2 = Math.atan2(vy2, vx2);
            _CoordUtil__WEBPACK_IMPORTED_MODULE_2__.CoordUtil.rotateMolecule(frag, th1 - th2);
            _CoordUtil__WEBPACK_IMPORTED_MODULE_2__.CoordUtil.translateMolecule(frag, mol.atomX(nbr) - frag.atomX(1), mol.atomY(nbr) - frag.atomY(1));
        }
        if (polymerExtra != null) {
            for (let n = 1; n <= frag.numAtoms; n++) {
                let extra = frag.atomExtra(n);
                for (let i = extra.length - 1; i >= 0; i--)
                    if (polymerExtra.indexOf(extra[i]) >= 0)
                        extra.splice(i, 1);
                frag.setAtomExtra(n, _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.concat(extra, polymerExtra));
            }
        }
        let join = mol.numAtoms + 1;
        mol.append(frag);
        for (let n = 1; n <= mol.numBonds; n++) {
            if (mol.bondFrom(n) == join) {
                mol.setBondFrom(n, nbr);
                mol.setBondType(n, connType);
            }
            else if (mol.bondTo(n) == join) {
                mol.setBondFromTo(n, nbr, mol.bondFrom(n));
                mol.setBondType(n, connType);
            }
        }
        let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, mol.numAtoms);
        for (let n = mask.length - frag.numAtoms; n < mask.length; n++)
            mask[n] = true;
        mol.deleteAtomAndBonds(join);
        mol.deleteAtomAndBonds(atom);
        mask.splice(join - 1, 1);
        mask.splice(atom - 1, 1);
        return mask;
    }
    static clearAbbrev(mol, atom) {
        let extra = mol.atomExtra(atom);
        for (let n = 0; n < (extra != null ? extra.length : 0); n++)
            if (extra[n].startsWith('a')) {
                extra.splice(n, 1);
                mol.setAtomExtra(atom, extra);
                mol.setAtomElement(atom, 'C');
                return;
            }
    }
    static setAtomElement(mol, atom, el) {
        if (mol.atomElement(atom) == el)
            return;
        this.clearAbbrev(mol, atom);
        mol.setAtomElement(atom, el);
    }
    static addBond(mol, bfr, bto, order, type) {
        if (type == null)
            type = _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_NORMAL;
        if (mol.atomAdjCount(bfr) >= 1)
            this.clearAbbrev(mol, bfr);
        if (mol.atomAdjCount(bto) >= 1)
            this.clearAbbrev(mol, bto);
        let b = mol.findBond(bfr, bto);
        if (b > 0)
            mol.deleteBond(b);
        return mol.addBond(bfr, bto, order, type);
    }
    static subgraphMask(mol, mask) {
        let invidx = [];
        let sum = 0;
        for (let n = 0; n < mol.numAtoms; n++) {
            if (mask[n])
                invidx.push(++sum);
            else
                invidx.push(0);
        }
        if (sum == 0)
            return new _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule();
        if (sum == mol.numAtoms)
            return mol.clone();
        let frag = new _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule();
        frag.keepTransient = true;
        for (let n = 1; n <= mol.numAtoms; n++)
            if (mask[n - 1]) {
                let num = frag.addAtom(mol.atomElement(n), mol.atomX(n), mol.atomY(n), mol.atomCharge(n), mol.atomUnpaired(n));
                frag.setAtomIsotope(num, mol.atomIsotope(n));
                frag.setAtomHExplicit(num, mol.atomHExplicit(n));
                frag.setAtomMapNum(num, mol.atomMapNum(n));
                frag.setAtomExtra(num, mol.atomExtra(n));
                frag.setAtomTransient(num, mol.atomTransient(n));
            }
        for (let n = 1; n <= mol.numBonds; n++) {
            let bfr = invidx[mol.bondFrom(n) - 1], bto = invidx[mol.bondTo(n) - 1];
            if (bfr > 0 && bto > 0) {
                let num = frag.addBond(bfr, bto, mol.bondOrder(n), mol.bondType(n));
                frag.setBondExtra(num, mol.bondExtra(n));
                frag.setBondTransient(num, mol.bondTransient(n));
            }
        }
        frag.keepTransient = mol.keepTransient;
        return frag;
    }
    static subgraphIndex(mol, idx) {
        let invidx = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(0, mol.numAtoms);
        for (let n = 0; n < invidx.length; n++)
            invidx[n] = 0;
        for (let n = 0; n < idx.length; n++)
            invidx[idx[n] - 1] = n + 1;
        let frag = new _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule();
        frag.keepTransient = true;
        for (let n = 0; n < idx.length; n++) {
            let num = frag.addAtom(mol.atomElement(idx[n]), mol.atomX(idx[n]), mol.atomY(idx[n]), mol.atomCharge(idx[n]), mol.atomUnpaired(idx[n]));
            frag.setAtomIsotope(num, mol.atomIsotope(idx[n]));
            frag.setAtomHExplicit(num, mol.atomHExplicit(idx[n]));
            frag.setAtomMapNum(num, mol.atomMapNum(idx[n]));
            frag.setAtomExtra(num, mol.atomExtra(idx[n]));
            frag.setAtomTransient(num, mol.atomTransient(idx[n]));
        }
        for (let n = 1; n <= mol.numBonds; n++) {
            let bfr = invidx[mol.bondFrom(n) - 1], bto = invidx[mol.bondTo(n) - 1];
            if (bfr > 0 && bto > 0) {
                let num = frag.addBond(bfr, bto, mol.bondOrder(n), mol.bondType(n));
                frag.setBondExtra(num, mol.bondExtra(n));
                frag.setBondTransient(num, mol.bondTransient(n));
            }
        }
        frag.keepTransient = mol.keepTransient;
        return frag;
    }
    static subgraphWithAttachments(mol, mask) {
        let xmask = mask.slice(0);
        for (let n = 1; n <= mol.numBonds; n++) {
            let bfr = mol.bondFrom(n) - 1, bto = mol.bondTo(n) - 1;
            if (mask[bfr] && !mask[bto])
                xmask[bto] = true;
            else if (mask[bto] && !mask[bfr])
                xmask[bfr] = true;
        }
        let xmol = mol.clone();
        for (let n = 1; n <= xmol.numAtoms; n++)
            if (xmask[n - 1] && !mask[n - 1]) {
                xmol.setAtomElement(n, 'X');
                xmol.setAtomCharge(n, 0);
                xmol.setAtomUnpaired(n, 0);
                xmol.setAtomHExplicit(n, _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.HEXPLICIT_UNKNOWN);
                xmol.setAtomExtra(n, []);
            }
        return MolUtil.subgraphMask(xmol, xmask);
    }
    static append(mol, frag) {
        let boxm = mol.boundary(), boxf = frag.boundary();
        let dx = boxm.maxX() + _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.IDEALBOND - boxf.minX();
        let dy = 0.5 * (boxm.minY() + boxm.maxY() - boxf.minY() - boxf.maxY());
        let top = mol.numAtoms;
        mol.append(frag);
        for (let n = top + 1; n <= mol.numAtoms; n++)
            mol.setAtomPos(n, mol.atomX(n) + dx, mol.atomY(n) + dy);
    }
    static deleteAtoms(mol, idx) {
        let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(true, mol.numAtoms);
        for (let n = 0; n < idx.length; n++)
            mask[idx[n] - 1] = false;
        return MolUtil.subgraphMask(mol, mask);
    }
    static componentList(mol) {
        let sz = mol.numAtoms;
        if (sz == 0)
            return null;
        let g = _Graph__WEBPACK_IMPORTED_MODULE_3__.Graph.fromMolecule(mol);
        let groups = g.calculateComponentGroups();
        for (let grp of groups)
            _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.addTo(grp, 1);
        return groups;
    }
    static getAtomSides(mol, atom) {
        let g = _Graph__WEBPACK_IMPORTED_MODULE_3__.Graph.fromMolecule(mol);
        let cc = g.calculateComponents();
        let mask = [];
        for (let n = 0; n < cc.length; n++)
            mask.push(cc[n] == cc[atom - 1]);
        mask[atom - 1] = false;
        let oldmap = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskIdx(mask);
        g.keepNodesMask(mask);
        cc = g.calculateComponents();
        let ccmax = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.max(cc);
        let grps = [];
        for (let n = 0; n < ccmax; n++)
            grps.push([atom]);
        for (let n = 0; n < cc.length; n++)
            grps[cc[n] - 1].push(oldmap[n] + 1);
        return grps;
    }
    static getBondSides(mol, bond) {
        let bf = mol.bondFrom(bond), bt = mol.bondTo(bond);
        let inRing = mol.bondInRing(bond);
        let g = _Graph__WEBPACK_IMPORTED_MODULE_3__.Graph.fromMolecule(mol);
        let cc = g.calculateComponents();
        let mask = [];
        for (let n = 0; n < cc.length; n++)
            mask.push(cc[n] == cc[bf - 1]);
        if (!inRing)
            g.removeEdge(bf - 1, bt - 1);
        else {
            mask[bf - 1] = false;
            mask[bt - 1] = false;
        }
        let oldmap = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.maskIdx(mask);
        g.keepNodesMask(mask);
        cc = g.calculateComponents();
        let ccmax = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.max(cc);
        let grps = [];
        for (let n = 0; n < ccmax; n++) {
            grps[n] = [];
            if (inRing) {
                grps[n].push(bf);
                grps[n].push(bt);
            }
        }
        for (let n = 0; n < cc.length; n++)
            grps[cc[n] - 1].push(oldmap[n] + 1);
        return grps;
    }
    static arrayAtomX(mol) {
        let x = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(0, mol.numAtoms);
        for (let n = x.length - 1; n >= 0; n--)
            x[n] = mol.atomX(n + 1);
        return x;
    }
    static arrayAtomY(mol) {
        let y = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(0, mol.numAtoms);
        for (let n = y.length - 1; n >= 0; n--)
            y[n] = mol.atomY(n + 1);
        return y;
    }
    static arrayAtomMapNum(mol) {
        let mapnum = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(0, mol.numAtoms);
        for (let n = mapnum.length - 1; n >= 0; n--)
            mapnum[n] = mol.atomMapNum(n + 1);
        return mapnum;
    }
    static molecularFormula(mol, punctuation) {
        let puncEnter = '', puncExit = '', puncEnterSuper = '', puncExitSuper = '';
        if (punctuation == true)
            [puncEnter, puncExit] = ['{', '}', '{^', '}'];
        else if (punctuation instanceof Array) {
            puncEnter = punctuation[0];
            puncExit = punctuation[1];
            puncEnterSuper = punctuation[2];
            puncExitSuper = punctuation[3];
        }
        for (let n = 1; n <= mol.numAtoms; n++)
            if (MolUtil.hasAbbrev(mol, n)) {
                mol = mol.clone();
                MolUtil.expandAbbrevs(mol, false);
                break;
            }
        let countC = 0, countH = 0;
        let elements = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.stringArray('', mol.numAtoms);
        for (let n = 1; n <= mol.numAtoms; n++) {
            countH += mol.atomHydrogens(n);
            let el = mol.atomElement(n);
            if (mol.atomIsotope(n) != _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.ISOTOPE_NATURAL)
                el = puncEnterSuper + mol.atomIsotope(n) + puncExitSuper + el;
            if (el == 'C')
                countC++;
            else if (el == 'H')
                countH++;
            else
                elements[n - 1] = el;
        }
        elements.sort();
        let formula = '';
        if (countC > 0)
            formula += 'C';
        if (countC > 1) {
            if (punctuation)
                formula += puncEnter;
            formula += countC;
            if (punctuation)
                formula += puncExit;
        }
        if (countH > 0)
            formula += 'H';
        if (countH > 1) {
            if (punctuation)
                formula += puncEnter;
            formula += countH;
            if (punctuation)
                formula += puncExit;
        }
        for (let n = 0; n < elements.length; n++)
            if (elements[n].length > 0) {
                let count = 1;
                for (; n + 1 < elements.length && elements[n] == elements[n + 1]; n++)
                    count++;
                formula += elements[n];
                if (count > 1) {
                    if (punctuation)
                        formula += puncEnter;
                    formula += count;
                    if (punctuation)
                        formula += puncExit;
                }
            }
        return formula.toString();
    }
    static molecularWeight(mol) {
        for (let n = 1; n <= mol.numAtoms; n++)
            if (MolUtil.hasAbbrev(mol, n)) {
                mol = mol.clone();
                MolUtil.expandAbbrevs(mol, false);
                break;
            }
        let mw = 0;
        for (let n = 1; n <= mol.numAtoms; n++) {
            mw += mol.atomHydrogens(n) * _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.NATURAL_ATOMIC_WEIGHTS[1];
            let iso = mol.atomIsotope(n);
            if (iso != _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.ISOTOPE_NATURAL) {
                mw += iso;
                continue;
            }
            let an = _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.elementAtomicNumber(mol.atomElement(n));
            if (an > 0 && an < _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.NATURAL_ATOMIC_WEIGHTS.length)
                mw += _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.NATURAL_ATOMIC_WEIGHTS[an];
        }
        return mw;
    }
    static removeDuplicateBonds(mol) {
        let bpri = [];
        for (let n = 1; n <= mol.numBonds; n++) {
            let p = Math.min(mol.bondFrom(n), mol.bondTo(n)) * mol.numAtoms + Math.max(mol.bondFrom(n), mol.bondTo(n));
            bpri.push(p);
        }
        let bidx = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.idxSort(bpri);
        let keepmask = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, bidx.length);
        let p = 0;
        while (p < bidx.length) {
            let sz = 1;
            while (p + sz < bidx.length && bpri[bidx[p]] == bpri[bidx[p + sz]])
                sz++;
            let best = p;
            for (let n = p + 1; n < p + sz; n++) {
                let b1 = bidx[best] + 1, b2 = bidx[n] + 1;
                let a1 = mol.bondFrom(b1), a2 = mol.bondTo(b1);
                let el1 = mol.atomElement(a1), el2 = mol.atomElement(a2);
                let limit1 = 0, limit2 = 0;
                if (el1 == 'C' || el1 == 'N')
                    limit1 = 4;
                else if (el1 == 'O')
                    limit1 = 3;
                if (el2 == 'C' || el2 == 'N')
                    limit2 = 4;
                else if (el2 == 'O')
                    limit2 = 3;
                if (limit1 > 0 || limit2 > 0) {
                    let boB1A1 = 0, boB1A2 = 0, boB2A1 = 0, boB2A2 = 0;
                    for (let i = 1; i <= mol.numBonds; i++) {
                        if (i != b2 && (mol.bondFrom(i) == a1 || mol.bondTo(i) == a1))
                            boB1A1 += mol.bondOrder(i);
                        if (i != b2 && (mol.bondFrom(i) == a2 || mol.bondTo(i) == a2))
                            boB1A2 += mol.bondOrder(i);
                        if (i != b1 && (mol.bondFrom(i) == a1 || mol.bondTo(i) == a1))
                            boB2A1 += mol.bondOrder(i);
                        if (i != b1 && (mol.bondFrom(i) == a2 || mol.bondTo(i) == a2))
                            boB2A2 += mol.bondOrder(i);
                    }
                    let bad1 = 0, bad2 = 0;
                    if (limit1 > 0 && boB1A1 > limit1)
                        bad1++;
                    if (limit2 > 0 && boB1A2 > limit2)
                        bad1++;
                    if (limit1 > 0 && boB2A1 > limit1)
                        bad2++;
                    if (limit2 > 0 && boB2A2 > limit2)
                        bad2++;
                    if (bad1 < bad2)
                        continue;
                    if (bad1 > bad2) {
                        best = n;
                        continue;
                    }
                }
                let exotic1 = 2 * mol.bondOrder(b1), exotic2 = 2 * mol.bondOrder(b2);
                exotic1 += (exotic1 == 0 ? 4 : 0) + (mol.bondType(b1) != _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_NORMAL ? 1 : 0);
                exotic2 += (exotic2 == 0 ? 4 : 0) + (mol.bondType(b2) != _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_NORMAL ? 1 : 0);
                if (exotic2 > exotic1)
                    best = n;
            }
            keepmask[bidx[best]] = true;
            p += sz;
        }
        for (let n = mol.numBonds; n >= 1; n--)
            if (!keepmask[n - 1] || mol.bondFrom(n) == mol.bondTo(n))
                mol.deleteBond(n);
    }
    static calculateWalkWeight(mol, atom) {
        let ccsz = 0, cc = _Graph__WEBPACK_IMPORTED_MODULE_3__.Graph.fromMolecule(mol).calculateComponents();
        for (let n = 0; n < cc.length; n++)
            if (cc[n] == cc[atom - 1])
                ccsz++;
        let w = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(1, mol.numAtoms), wn = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(0, mol.numAtoms);
        w[atom - 1] = 0;
        for (; ccsz > 0; ccsz--) {
            for (let n = 0; n < mol.numAtoms; n++)
                wn[n] = w[n];
            for (let n = 1; n <= mol.numBonds; n++) {
                let a1 = mol.bondFrom(n) - 1, a2 = mol.bondTo(n) - 1;
                w[a1] += wn[a2] * 0.1;
                w[a2] += wn[a1] * 0.1;
            }
            w[atom - 1] = 0;
        }
        return w;
    }
    static totalHydrogens(mol, atom) {
        let hc = mol.atomHydrogens(atom);
        let adj = mol.atomAdjList(atom);
        for (let n = 0; n < adj.length; n++)
            if (mol.atomElement(adj[n]) == 'H')
                hc++;
        return hc;
    }
    static stripHydrogens(mol, force = false) {
        for (let n = mol.numAtoms; n >= 1; n--)
            if ((force && mol.atomElement(n) == 'H') || this.boringHydrogen(mol, n))
                mol.deleteAtomAndBonds(n);
    }
    static boringHydrogen(mol, atom) {
        if (mol.atomElement(atom) != 'H')
            return false;
        if (mol.atomCharge(atom) != 0 || mol.atomUnpaired(atom) != 0)
            return false;
        if (mol.atomIsotope(atom) != _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.ISOTOPE_NATURAL)
            return false;
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.notBlank(mol.atomExtra(atom)) || _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.notBlank(mol.atomTransient(atom)))
            return false;
        if (mol.atomAdjCount(atom) != 1)
            return false;
        let other = mol.atomAdjList(atom)[0];
        if (mol.atomElement(other) == 'H')
            return false;
        let bond = mol.atomAdjBonds(atom)[0];
        if (mol.bondOrder(bond) != 1 || mol.bondType(bond) != _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_NORMAL)
            return false;
        if (mol.atomHExplicit(other) != _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.HEXPLICIT_UNKNOWN)
            return false;
        if (_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.HYVALENCE_EL.indexOf(mol.atomElement(other)) < 0)
            return false;
        return true;
    }
    static createHydrogens(mol, position) {
        if (position == null)
            position = false;
        let na = mol.numAtoms;
        for (let n = 1; n <= na; n++) {
            let hc = mol.atomHydrogens(n);
            if (hc == 0)
                continue;
            if (mol.atomHExplicit(n) != _Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.HEXPLICIT_UNKNOWN)
                mol.setAtomHExplicit(n, 0);
            if (!position) {
                for (; hc > 0; hc--) {
                    let a = mol.addAtom('H', mol.atomX(n), mol.atomY(n));
                    mol.addBond(n, a, 1);
                }
            }
            else
                _SketchUtil__WEBPACK_IMPORTED_MODULE_6__.SketchUtil.placeAdditionalHydrogens(mol, n, hc);
        }
        return mol.numAtoms - na;
    }
    static atomVec3(mol, atom) {
        if (mol.is3D())
            return [mol.atomX(atom), mol.atomY(atom), mol.atomZ(atom)];
        else
            return [mol.atomX(atom), mol.atomY(atom), 0];
    }
    static atomOxidationState(mol, atom) {
        if (mol.atomAdjCount(atom) == 0)
            return null;
        if (this.hasAbbrev(mol, atom))
            return null;
        let atno = mol.atomicNumber(atom);
        if (atno == 0)
            return null;
        let nonMetal = atno == _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_H || _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_BLOCKS[atno] == 2;
        let oxstate = mol.atomHydrogens(atom) + (nonMetal ? -mol.atomCharge(atom) : mol.atomCharge(atom));
        for (let b of mol.atomAdjBonds(atom)) {
            let bo = mol.bondOrder(b), other = mol.bondOther(b, atom);
            let chalco = ['O', 'S', 'Se', 'Te'].includes(mol.atomElement(other));
            if (nonMetal || chalco)
                oxstate += bo;
            else
                oxstate += bo % 2;
        }
        if (atno == _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_H && oxstate == 1)
            return null;
        if (atno == _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_B && oxstate == 3)
            return null;
        if (atno == _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_C && oxstate == 4)
            return null;
        if (atno == _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_N && oxstate == 3)
            return null;
        if (atno == _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_O && oxstate == 2)
            return null;
        if (atno == _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_S && (oxstate == 2 || oxstate == 4 || oxstate == 6))
            return null;
        if (atno == _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_P && (oxstate == 3 || oxstate == 5))
            return null;
        if ((atno == _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_F || atno == _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_Cl ||
            atno == _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_Br || atno == _Chemistry__WEBPACK_IMPORTED_MODULE_1__.Chemistry.ELEMENT_I) && oxstate == 1)
            return null;
        return oxstate;
    }
    static oxidationStateText(oxstate) {
        if (oxstate == 0)
            return '0';
        let str = oxstate < 0 ? '-' : '';
        let absox = Math.abs(oxstate);
        if (absox == 1)
            str += 'I';
        else if (absox == 2)
            str += 'II';
        else if (absox == 3)
            str += 'III';
        else if (absox == 4)
            str += 'IV';
        else if (absox == 5)
            str += 'V';
        else if (absox == 6)
            str += 'VI';
        else if (absox == 7)
            str += 'VII';
        else if (absox == 8)
            str += 'VIII';
        else if (absox == 9)
            str += 'IX';
        else if (absox == 10)
            str += 'X';
        else if (absox == 11)
            str += 'XI';
        else if (absox == 12)
            str += 'XII';
        else
            str = (oxstate > 0 ? '+' : '') + oxstate;
        return str;
    }
}
MolUtil.TEMPLATE_ATTACHMENT = 'X';
MolUtil.ABBREV_ATTACHMENT = '*';


/***/ }),

/***/ "./src/mol/Molecule.ts":
/*!*****************************!*\
  !*** ./src/mol/Molecule.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Atom: () => (/* binding */ Atom),
/* harmony export */   Bond: () => (/* binding */ Bond),
/* harmony export */   Molecule: () => (/* binding */ Molecule)
/* harmony export */ });
/* harmony import */ var _util_Geom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Geom */ "./src/util/Geom.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _Chemistry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Chemistry */ "./src/mol/Chemistry.ts");
/* harmony import */ var _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../io/MoleculeStream */ "./src/io/MoleculeStream.ts");





class Atom {
}
class Bond {
}
class Molecule {
    constructor() {
        this.atoms = [];
        this.bonds = [];
        this.hasZCoord = false;
        this.keepTransient = false;
        this.hasTransient = false;
        this.graph = null;
        this.graphBond = null;
        this.ringID = null;
        this.compID = null;
        this.ring3 = null;
        this.ring4 = null;
        this.ring5 = null;
        this.ring6 = null;
        this.ring7 = null;
    }
    clone() {
        let dup = new Molecule();
        dup.atoms = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.deepClone)(this.atoms);
        dup.bonds = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.deepClone)(this.bonds);
        dup.hasZCoord = this.hasZCoord;
        dup.keepTransient = this.keepTransient;
        dup.hasTransient = this.hasTransient;
        dup.graph = this.graph;
        dup.graphBond = this.graphBond;
        dup.ringID = this.ringID;
        dup.compID = this.compID;
        dup.ring3 = this.ring3;
        dup.ring4 = this.ring4;
        dup.ring5 = this.ring5;
        dup.ring6 = this.ring6;
        dup.ring7 = this.ring7;
        return dup;
    }
    static fromString(strData) { return _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_4__.MoleculeStream.readNative(strData); }
    toString() { return _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_4__.MoleculeStream.writeNative(this); }
    append(frag) {
        let base = this.atoms.length;
        for (let n = 1; n <= frag.numAtoms; n++) {
            let num = this.addAtom(frag.atomElement(n), frag.atomX(n), frag.atomY(n), frag.atomCharge(n), frag.atomUnpaired(n));
            this.setAtomIsotope(num, frag.atomIsotope(n));
            this.setAtomHExplicit(num, frag.atomHExplicit(n));
            this.setAtomMapNum(num, frag.atomMapNum(n));
            this.setAtomExtra(num, frag.atomExtra(n));
            this.setAtomTransient(num, frag.atomTransient(n));
        }
        for (let n = 1; n <= frag.numBonds; n++) {
            let num = this.addBond(frag.bondFrom(n) + base, frag.bondTo(n) + base, frag.bondOrder(n), frag.bondType(n));
            this.setBondExtra(num, frag.bondExtra(n));
            this.setBondTransient(num, frag.bondTransient(n));
        }
        this.trashTransient();
    }
    get numAtoms() { return this.atoms.length; }
    getAtom(idx) {
        if (idx < 1 || idx > this.atoms.length)
            throw new Error(`Molecule.getAtom: index ${idx} out of range (#atoms=${this.atoms.length})`);
        return this.atoms[idx - 1];
    }
    atomElement(idx) { return this.getAtom(idx).element; }
    atomX(idx) { return this.getAtom(idx).x; }
    atomY(idx) { return this.getAtom(idx).y; }
    atomCharge(idx) { return this.getAtom(idx).charge; }
    atomUnpaired(idx) { return this.getAtom(idx).unpaired; }
    atomIsotope(idx) { return this.getAtom(idx).isotope; }
    atomHExplicit(idx) { return this.getAtom(idx).hExplicit; }
    atomMapNum(idx) { return this.getAtom(idx).mapNum; }
    atomExtra(idx) { return this.getAtom(idx).extra.slice(0); }
    atomTransient(idx) { return this.getAtom(idx).transient.slice(0); }
    get numBonds() { return this.bonds.length; }
    getBond(idx) {
        if (idx < 1 || idx > this.bonds.length)
            throw new Error(`Molecule.getBond: index ${idx} out of range (#bonds=${this.bonds.length})`);
        return this.bonds[idx - 1];
    }
    bondFrom(idx) { return this.getBond(idx).from; }
    bondTo(idx) { return this.getBond(idx).to; }
    bondOrder(idx) { return this.getBond(idx).order; }
    bondType(idx) { return this.getBond(idx).type; }
    bondExtra(idx) { return this.getBond(idx).extra.slice(0); }
    bondTransient(idx) { return this.getBond(idx).transient.slice(0); }
    bondFromTo(idx) { let b = this.getBond(idx); return [b.from, b.to]; }
    addAtom(element, x, y, charge = 0, unpaired = 0) {
        let a = new Atom();
        a.element = element;
        a.x = x;
        a.y = y;
        a.charge = charge;
        a.unpaired = unpaired;
        a.isotope = Molecule.ISOTOPE_NATURAL;
        a.hExplicit = Molecule.HEXPLICIT_UNKNOWN;
        a.mapNum = 0;
        a.extra = [];
        a.transient = [];
        this.atoms.push(a);
        this.trashTransient();
        this.trashGraph();
        return this.atoms.length;
    }
    setAtomElement(idx, element) {
        this.getAtom(idx).element = element;
        this.trashTransient();
    }
    setAtomPos(idx, x, y, z) {
        let a = this.getAtom(idx);
        a.x = x;
        a.y = y;
        a.z = z == null ? 0 : z;
        this.trashTransient();
    }
    setAtomX(idx, x) {
        this.getAtom(idx).x = x;
        this.trashTransient();
    }
    setAtomY(idx, y) {
        this.getAtom(idx).y = y;
        this.trashTransient();
    }
    setAtomCharge(idx, charge) {
        this.getAtom(idx).charge = charge;
        this.trashTransient();
    }
    setAtomUnpaired(idx, unpaired) {
        this.getAtom(idx).unpaired = unpaired;
        this.trashTransient();
    }
    setAtomIsotope(idx, isotope) {
        this.getAtom(idx).isotope = isotope;
        this.trashTransient();
    }
    setAtomHExplicit(idx, hExplicit) {
        this.getAtom(idx).hExplicit = hExplicit;
        this.trashTransient();
    }
    setAtomMapNum(idx, mapNum) {
        this.getAtom(idx).mapNum = mapNum;
        this.trashTransient();
    }
    setAtomExtra(idx, extra) {
        this.getAtom(idx).extra = extra.slice(0);
    }
    setAtomTransient(idx, transi) {
        this.getAtom(idx).transient = transi.slice(0);
        if (transi.length > 0)
            this.hasTransient = true;
    }
    swapAtoms(a1, a2) {
        let a = this.atoms[a1 - 1];
        this.atoms[a1 - 1] = this.atoms[a2 - 1];
        this.atoms[a2 - 1] = a;
        for (let n = 0; n < this.bonds.length; n++) {
            let b = this.bonds[n];
            if (b.from == a2)
                b.from = a1;
            else if (b.from == a1)
                b.from = a2;
            if (b.to == a2)
                b.to = a1;
            else if (b.to == a1)
                b.to = a2;
        }
        this.trashGraph();
    }
    addBond(from, to, order, type = Molecule.BONDTYPE_NORMAL) {
        let b = new Bond();
        b.from = from;
        b.to = to;
        b.order = order;
        b.type = type;
        b.extra = [];
        b.transient = [];
        this.bonds.push(b);
        this.trashTransient();
        this.trashGraph();
        return this.bonds.length;
    }
    setBondFrom(idx, bfr) {
        this.getBond(idx).from = bfr;
        this.trashTransient();
        this.trashGraph();
    }
    setBondTo(idx, to) {
        this.getBond(idx).to = to;
        this.trashTransient();
        this.trashGraph();
    }
    setBondFromTo(idx, bfr, bto) {
        this.getBond(idx).from = bfr;
        this.getBond(idx).to = bto;
        this.trashTransient();
        this.trashGraph();
    }
    setBondOrder(idx, order) {
        this.getBond(idx).order = order;
        this.trashTransient();
    }
    setBondType(idx, type) {
        this.getBond(idx).type = type;
        this.trashTransient();
    }
    setBondExtra(idx, extra) {
        this.getBond(idx).extra = extra.slice(0);
    }
    setBondTransient(idx, transi) {
        this.getBond(idx).transient = transi.slice(0);
        if (transi.length > 0)
            this.hasTransient = true;
    }
    deleteAtomAndBonds(idx) {
        for (let n = this.numBonds; n >= 1; n--) {
            if (this.bondFrom(n) == idx || this.bondTo(n) == idx)
                this.deleteBond(n);
            else {
                if (this.bondFrom(n) > idx)
                    this.setBondFrom(n, this.bondFrom(n) - 1);
                if (this.bondTo(n) > idx)
                    this.setBondTo(n, this.bondTo(n) - 1);
            }
        }
        this.atoms.splice(idx - 1, 1);
        this.trashTransient();
        this.trashGraph();
    }
    deleteBond(idx) {
        this.bonds.splice(idx - 1, 1);
        this.trashTransient();
        this.trashGraph();
    }
    atomHydrogens(idx) {
        let hy = this.atomHExplicit(idx);
        if (hy != Molecule.HEXPLICIT_UNKNOWN)
            return hy;
        for (let n = 0; n < Molecule.HYVALENCE_EL.length; n++)
            if (Molecule.HYVALENCE_EL[n] == this.atomElement(idx)) {
                hy = Molecule.HYVALENCE_VAL[n];
                break;
            }
        if (hy == Molecule.HEXPLICIT_UNKNOWN)
            return 0;
        let ch = this.atomCharge(idx);
        if (this.atomElement(idx) == 'C')
            ch = -Math.abs(ch);
        hy += ch - this.atomUnpaired(idx);
        let adjBonds = this.atomAdjBonds(idx);
        for (let n = 0; n < adjBonds.length; n++)
            hy -= this.bondOrder(adjBonds[n]);
        return hy < 0 ? 0 : hy;
    }
    findBond(a1, a2) {
        for (let n = 1; n <= this.numBonds; n++) {
            let b1 = this.bondFrom(n), b2 = this.bondTo(n);
            if ((a1 == b1 && a2 == b2) || (a1 == b2 && a2 == b1))
                return n;
        }
        return 0;
    }
    bondOther(idx, ref) {
        let b1 = this.bondFrom(idx), b2 = this.bondTo(idx);
        if (b1 == ref)
            return b2;
        if (b2 == ref)
            return b1;
        return 0;
    }
    atomExplicit(idx) {
        let a = this.atoms[idx - 1];
        if (a.isotope != Molecule.ISOTOPE_NATURAL)
            return true;
        if (a.element != 'C' || a.charge != 0 || a.unpaired != 0)
            return true;
        if (this.atomAdjCount(idx) == 0)
            return true;
        return false;
    }
    atomRingBlock(idx) {
        if (this.graph == null)
            this.buildGraph();
        if (this.ringID == null)
            this.buildRingID();
        return this.ringID[idx - 1];
    }
    bondInRing(idx) {
        let r1 = this.atomRingBlock(this.bondFrom(idx)), r2 = this.atomRingBlock(this.bondTo(idx));
        return r1 > 0 && r1 == r2;
    }
    atomConnComp(idx) {
        if (this.graph == null)
            this.buildGraph();
        if (this.compID == null)
            this.buildConnComp();
        return this.compID[idx - 1];
    }
    atomAdjCount(idx) {
        this.buildGraph();
        return this.graph[idx - 1].length;
    }
    atomAdjList(idx) {
        this.buildGraph();
        let adj = this.graph[idx - 1].slice(0);
        for (let n = adj.length - 1; n >= 0; n--)
            adj[n]++;
        return adj;
    }
    atomAdjBonds(idx) {
        this.buildGraph();
        return this.graphBond[idx - 1].slice(0);
    }
    findRingsOfSize(size) {
        let rings = null;
        if (size == 3 && this.ring3 != null)
            rings = this.ring3;
        if (size == 4 && this.ring4 != null)
            rings = this.ring4;
        if (size == 5 && this.ring5 != null)
            rings = this.ring5;
        if (size == 6 && this.ring6 != null)
            rings = this.ring6;
        if (size == 7 && this.ring7 != null)
            rings = this.ring7;
        if (rings == null) {
            if (this.graph == null)
                this.buildGraph();
            if (this.ringID == null)
                this.buildRingID();
            rings = [];
            for (let n = 1; n <= this.atoms.length; n++) {
                if (this.ringID[n - 1] > 0) {
                    let path = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, size);
                    path[0] = n;
                    this.recursiveRingFind(path, 1, size, this.ringID[n - 1], rings);
                }
            }
            if (size == 3)
                this.ring3 = rings;
            if (size == 4)
                this.ring4 = rings;
            if (size == 5)
                this.ring5 = rings;
            if (size == 6)
                this.ring6 = rings;
            if (size == 7)
                this.ring7 = rings;
        }
        let ret = [];
        for (let n = 0; n < rings.length; n++)
            ret.push(rings[n].slice(0));
        return ret;
    }
    boundary() {
        if (this.atoms.length == 0)
            return _util_Geom__WEBPACK_IMPORTED_MODULE_0__.Box.zero();
        let x1 = this.atoms[0].x, x2 = x1;
        let y1 = this.atoms[0].y, y2 = y1;
        for (let n = 1; n < this.atoms.length; n++) {
            x1 = Math.min(x1, this.atoms[n].x);
            y1 = Math.min(y1, this.atoms[n].y);
            x2 = Math.max(x2, this.atoms[n].x);
            y2 = Math.max(y2, this.atoms[n].y);
        }
        return new _util_Geom__WEBPACK_IMPORTED_MODULE_0__.Box(x1, y1, x2 - x1, y2 - y1);
    }
    atomicNumber(idx) {
        return Molecule.elementAtomicNumber(this.atomElement(idx));
    }
    static elementAtomicNumber(element) {
        return Math.max(0, _Chemistry__WEBPACK_IMPORTED_MODULE_3__.Chemistry.ELEMENTS.indexOf(element));
    }
    is3D() { return this.hasZCoord; }
    setIs3D(v) { this.hasZCoord = v; }
    atomZ(idx) { return this.getAtom(idx).z; }
    setAtomZ(idx, z) { this.getAtom(idx).z = z; }
    compareTo(other) {
        if (other == null || other.numAtoms == 0)
            return this.numAtoms == 0 ? 0 : 1;
        if (this.numAtoms < other.numAtoms)
            return -1;
        if (this.numAtoms > other.numAtoms)
            return 1;
        if (this.numBonds < other.numBonds)
            return -1;
        if (this.numBonds > other.numBonds)
            return 1;
        for (let n = 1; n <= this.numAtoms; n++) {
            if (this.atomElement(n) < other.atomElement(n))
                return -1;
            if (this.atomElement(n) > other.atomElement(n))
                return 1;
            if (this.atomX(n) < other.atomX(n))
                return -1;
            if (this.atomX(n) > other.atomX(n))
                return 1;
            if (this.atomY(n) < other.atomY(n))
                return -1;
            if (this.atomY(n) > other.atomY(n))
                return 1;
            if (this.atomCharge(n) < other.atomCharge(n))
                return -1;
            if (this.atomCharge(n) > other.atomCharge(n))
                return 1;
            if (this.atomUnpaired(n) < other.atomUnpaired(n))
                return -1;
            if (this.atomUnpaired(n) > other.atomUnpaired(n))
                return 1;
            if (this.atomHExplicit(n) < other.atomHExplicit(n))
                return -1;
            if (this.atomHExplicit(n) > other.atomHExplicit(n))
                return 1;
            if (this.atomIsotope(n) < other.atomIsotope(n))
                return -1;
            if (this.atomIsotope(n) > other.atomIsotope(n))
                return 1;
            if (this.atomMapNum(n) < other.atomMapNum(n))
                return -1;
            if (this.atomMapNum(n) > other.atomMapNum(n))
                return 1;
            let tx1 = this.atomExtra(n).map((v) => v.trimEnd()), tx2 = other.atomExtra(n).map((v) => v.trimEnd());
            if (tx1.length < tx2.length)
                return -1;
            if (tx1.length > tx2.length)
                return 1;
            for (let i = 0; i < tx1.length; i++)
                if (tx1[i] < tx2[i])
                    return -1;
                else if (tx1[i] > tx2[i])
                    return 1;
            tx1 = this.atomTransient(n).map((v) => v.trimEnd());
            tx2 = other.atomTransient(n).map((v) => v.trimEnd());
            if (tx1.length < tx2.length)
                return -1;
            if (tx1.length > tx2.length)
                return 1;
            for (let i = 0; i < tx1.length; i++)
                if (tx1[i] < tx2[i])
                    return -1;
                else if (tx1[i] > tx2[i])
                    return 1;
        }
        for (let n = 1; n <= this.numBonds; n++) {
            if (this.bondFrom(n) < other.bondFrom(n))
                return -1;
            if (this.bondFrom(n) > other.bondFrom(n))
                return 1;
            if (this.bondTo(n) < other.bondTo(n))
                return -1;
            if (this.bondTo(n) > other.bondTo(n))
                return 1;
            if (this.bondOrder(n) < other.bondOrder(n))
                return -1;
            if (this.bondOrder(n) > other.bondOrder(n))
                return 1;
            if (this.bondType(n) < other.bondType(n))
                return -1;
            if (this.bondType(n) > other.bondType(n))
                return 1;
            let tx1 = this.bondExtra(n), tx2 = other.bondExtra(n);
            if (tx1.length < tx2.length)
                return -1;
            if (tx1.length > tx2.length)
                return 1;
            for (let i = 0; i < tx1.length; i++)
                if (tx1[i] < tx2[i])
                    return -1;
                else if (tx1[i] > tx2[i])
                    return 1;
            tx1 = this.bondTransient(n);
            tx2 = other.bondTransient(n);
            if (tx1.length < tx2.length)
                return -1;
            if (tx1.length > tx2.length)
                return 1;
            for (let i = 0; i < tx1.length; i++)
                if (tx1[i] < tx2[i])
                    return -1;
                else if (tx1[i] > tx2[i])
                    return 1;
        }
        return 0;
    }
    trashTransient() {
        if (this.keepTransient || !this.hasTransient)
            return;
        for (let a of this.atoms)
            a.transient = [];
        for (let b of this.bonds)
            b.transient = [];
        this.hasTransient = false;
    }
    appendAtomExtra(atom, extra) {
        this.getAtom(atom).extra.push(extra);
    }
    appendAtomTransient(atom, trans) {
        this.getAtom(atom).transient.push(trans);
    }
    appendBondExtra(bond, extra) {
        this.getBond(bond).extra.push(extra);
    }
    appendBondTransient(bond, trans) {
        this.getBond(bond).transient.push(trans);
    }
    getAtomCloned(idx) { return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.deepClone)(this.getAtom(idx)); }
    getBondCloned(idx) { return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.deepClone)(this.getBond(idx)); }
    setAtom(idx, atom) {
        if (!atom)
            return;
        let curr = this.getAtom(idx);
        if (atom.element != curr.element)
            this.setAtomElement(idx, atom.element);
        if (atom.x != curr.x)
            this.setAtomX(idx, atom.x);
        if (atom.y != curr.y)
            this.setAtomY(idx, atom.y);
        if (atom.z != curr.z)
            this.setAtomZ(idx, atom.z);
        if (atom.charge != curr.charge)
            this.setAtomCharge(idx, atom.charge);
        if (atom.unpaired != curr.unpaired)
            this.setAtomUnpaired(idx, atom.unpaired);
        if (atom.isotope != curr.isotope)
            this.setAtomIsotope(idx, atom.isotope);
        if (atom.hExplicit != curr.hExplicit)
            this.setAtomHExplicit(idx, atom.hExplicit);
        if (atom.mapNum != curr.mapNum)
            this.setAtomMapNum(idx, atom.mapNum);
        if (!_util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.equals(atom.extra, curr.extra))
            this.setAtomExtra(idx, atom.extra);
        if (!_util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.equals(atom.transient, curr.transient))
            this.setAtomTransient(idx, atom.transient);
    }
    setBond(idx, bond) {
        if (bond == null)
            return;
        let curr = this.getBond(idx);
        if (bond.from != curr.from)
            this.setBondFrom(idx, bond.from);
        if (bond.to != curr.to)
            this.setBondTo(idx, bond.to);
        if (bond.order != curr.order)
            this.setBondOrder(idx, bond.order);
        if (bond.type != curr.type)
            this.setBondType(idx, bond.type);
        if (!_util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.equals(bond.extra, curr.extra))
            this.setBondExtra(idx, bond.extra);
        if (!_util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.equals(bond.transient, curr.transient))
            this.setBondTransient(idx, bond.transient);
    }
    modifyAtoms(lambda) {
        for (let n = 1; n <= this.numAtoms; n++) {
            var mod = lambda(n, this.getAtomCloned(n));
            if (mod != null)
                this.setAtom(n, mod);
        }
    }
    modifyAtomsIndices(atomIndices, lambda) {
        for (let n of atomIndices) {
            var mod = lambda(n, this.getAtomCloned(n));
            if (mod != null)
                this.setAtom(n, mod);
        }
    }
    modifyBonds(lambda) {
        for (let n = 1; n <= this.numBonds; n++) {
            var mod = lambda(n, this.getBondCloned(n));
            if (mod != null)
                this.setBond(n, mod);
        }
    }
    modifyBondsIndices(bondIndices, lambda) {
        for (let n of bondIndices) {
            var mod = lambda(n, this.getBondCloned(n));
            if (mod != null)
                this.setBond(n, mod);
        }
    }
    findAtomMatch(lambda) {
        for (let n = 1; n <= this.numAtoms; n++)
            if (lambda(this.getAtom(n)))
                return n;
        return 0;
    }
    findBondMatch(lambda) {
        for (let n = 1; n <= this.numBonds; n++)
            if (lambda(this.getBond(n)))
                return n;
        return 0;
    }
    findAllAtoms(lambda) {
        let indices = [];
        for (let n = 1; n <= this.numAtoms; n++)
            if (lambda(this.getAtom(n)))
                indices.push(n);
        return indices;
    }
    findAllBonds(lambda) {
        let indices = [];
        for (let n = 1; n <= this.numBonds; n++)
            if (lambda(this.getBond(n)))
                indices.push(n);
        return indices;
    }
    mapAtoms(lambda) {
        let ret = new Array(this.numAtoms);
        for (let n = 1; n <= this.numAtoms; n++)
            ret[n - 1] = lambda(this.getAtom(n));
        return ret;
    }
    mapBonds(lambda) {
        let ret = new Array(this.numBonds);
        for (let n = 1; n <= this.numBonds; n++)
            ret[n - 1] = lambda(this.getBond(n));
        return ret;
    }
    mapAtomsIndices(atomIndices, lambda) {
        let ret = new Array(atomIndices.length);
        let pos = 0;
        for (let n of atomIndices)
            ret[pos++] = lambda(this.getAtom(n));
        return ret;
    }
    mapBondsIndices(bondIndices, lambda) {
        let ret = new Array(bondIndices.length);
        let pos = 0;
        for (let n of bondIndices)
            ret[pos++] = lambda(this.getBond(n));
        return ret;
    }
    trashGraph() {
        this.graph = null;
        this.graphBond = null;
        this.ringID = null;
        this.compID = null;
        this.ring3 = null;
        this.ring4 = null;
        this.ring5 = null;
        this.ring6 = null;
        this.ring7 = null;
    }
    buildGraph() {
        if (this.graph != null && this.graphBond != null)
            return;
        let graph = [], graphBond = [];
        let na = this.numAtoms, nb = this.numBonds;
        for (let n = 0; n < na; n++) {
            graph.push([]);
            graphBond.push([]);
        }
        for (let n = 1; n <= nb; n++) {
            let b = this.getBond(n);
            graph[b.from - 1].push(b.to - 1);
            graph[b.to - 1].push(b.from - 1);
            graphBond[b.from - 1].push(n);
            graphBond[b.to - 1].push(n);
        }
        this.graph = graph;
        this.graphBond = graphBond;
    }
    buildConnComp() {
        const numAtoms = this.atoms.length;
        this.compID = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, numAtoms);
        for (let n = 0; n < numAtoms; n++)
            this.compID[n] = 0;
        let comp = 1;
        this.compID[0] = comp;
        while (true) {
            let anything = false;
            for (let n = 0; n < numAtoms; n++)
                if (this.compID[n] == comp) {
                    for (let i = 0; i < this.graph[n].length; i++) {
                        if (this.compID[this.graph[n][i]] == 0) {
                            this.compID[this.graph[n][i]] = comp;
                            anything = true;
                        }
                    }
                }
            if (!anything) {
                for (let n = 0; n < numAtoms; n++) {
                    if (this.compID[n] == 0) {
                        this.compID[n] = ++comp;
                        anything = true;
                        break;
                    }
                }
                if (!anything)
                    break;
            }
        }
    }
    buildRingID() {
        const numAtoms = this.atoms.length;
        this.ringID = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, numAtoms);
        if (numAtoms == 0)
            return;
        let visited = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.booleanArray(false, numAtoms);
        for (let n = 0; n < numAtoms; n++) {
            this.ringID[n] = 0;
            visited[n] = false;
        }
        let path = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, numAtoms + 1), plen = 0, numVisited = 0;
        while (true) {
            let last, current;
            if (plen == 0) {
                last = -1;
                for (current = 0; visited[current]; current++) { }
            }
            else {
                last = path[plen - 1];
                current = -1;
                for (let n = 0; n < this.graph[last].length; n++) {
                    if (!visited[this.graph[last][n]]) {
                        current = this.graph[last][n];
                        break;
                    }
                }
            }
            if (current >= 0 && plen >= 2) {
                let back = path[plen - 1];
                for (let n = 0; n < this.graph[current].length; n++) {
                    let join = this.graph[current][n];
                    if (join != back && visited[join]) {
                        path[plen] = current;
                        for (let i = plen; i == plen || path[i + 1] != join; i--) {
                            let id = this.ringID[path[i]];
                            if (id == 0)
                                this.ringID[path[i]] = last;
                            else if (id != last) {
                                for (let j = 0; j < numAtoms; j++)
                                    if (this.ringID[j] == id)
                                        this.ringID[j] = last;
                            }
                        }
                    }
                }
            }
            if (current >= 0) {
                visited[current] = true;
                path[plen++] = current;
                numVisited++;
            }
            else {
                plen--;
            }
            if (numVisited == numAtoms)
                break;
        }
        let nextID = 0;
        for (let i = 0; i < numAtoms; i++) {
            if (this.ringID[i] > 0) {
                nextID--;
                for (let j = numAtoms - 1; j >= i; j--)
                    if (this.ringID[j] == this.ringID[i])
                        this.ringID[j] = nextID;
            }
        }
        for (let i = 0; i < numAtoms; i++)
            this.ringID[i] = -this.ringID[i];
    }
    recursiveRingFind(path, psize, capacity, rblk, rings) {
        const { graph } = this;
        if (psize < capacity) {
            let last = path[psize - 1];
            for (let n = 0; n < graph[last - 1].length; n++) {
                let adj = graph[last - 1][n] + 1;
                if (this.ringID[adj - 1] != rblk)
                    continue;
                let fnd = false;
                for (let i = 0; i < psize; i++) {
                    if (path[i] == adj) {
                        fnd = true;
                        break;
                    }
                }
                if (!fnd) {
                    let newPath = path.slice(0);
                    newPath[psize] = adj;
                    this.recursiveRingFind(newPath, psize + 1, capacity, rblk, rings);
                }
            }
            return;
        }
        let last = path[psize - 1];
        let fnd = false;
        for (let n = 0; n < graph[last - 1].length; n++) {
            if (graph[last - 1][n] + 1 == path[0]) {
                fnd = true;
                break;
            }
        }
        if (!fnd)
            return;
        for (let n = 0; n < path.length; n++) {
            let count = 0, p = path[n] - 1;
            for (let i = 0; i < graph[p].length; i++)
                if (path.indexOf(graph[p][i] + 1) >= 0)
                    count++;
            if (count != 2)
                return;
        }
        let first = 0;
        for (let n = 1; n < psize; n++)
            if (path[n] < path[first])
                first = n;
        let fm = (first - 1 + psize) % psize, fp = (first + 1) % psize;
        let flip = path[fm] < path[fp];
        if (first != 0 || flip) {
            let newPath = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, psize);
            for (let n = 0; n < psize; n++)
                newPath[n] = path[(first + (flip ? psize - n : n)) % psize];
            path = newPath;
        }
        for (let n = 0; n < rings.length; n++) {
            let look = rings[n];
            let same = true;
            for (let i = 0; i < psize; i++) {
                if (look[i] != path[i]) {
                    same = false;
                    break;
                }
            }
            if (same)
                return;
        }
        rings.push(path);
    }
}
Molecule.IDEALBOND = 1.5;
Molecule.HEXPLICIT_UNKNOWN = -1;
Molecule.ISOTOPE_NATURAL = 0;
Molecule.BONDTYPE_NORMAL = 0;
Molecule.BONDTYPE_INCLINED = 1;
Molecule.BONDTYPE_DECLINED = 2;
Molecule.BONDTYPE_UNKNOWN = 3;
Molecule.HYVALENCE_EL = ['C', 'N', 'O', 'S', 'P'];
Molecule.HYVALENCE_VAL = [4, 3, 2, 2, 3];
Molecule.PREFIX_EXTRA = 'x';
Molecule.PREFIX_TRANSIENT = 'y';


/***/ }),

/***/ "./src/mol/PolymerBlock.ts":
/*!*********************************!*\
  !*** ./src/mol/PolymerBlock.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   POLYMERBLOCK_EXTRA_POLYMER: () => (/* binding */ POLYMERBLOCK_EXTRA_POLYMER),
/* harmony export */   POLYMERBLOCK_SPECIAL_UNCAPPED: () => (/* binding */ POLYMERBLOCK_SPECIAL_UNCAPPED),
/* harmony export */   PolymerBlock: () => (/* binding */ PolymerBlock),
/* harmony export */   PolymerBlockConnectivity: () => (/* binding */ PolymerBlockConnectivity),
/* harmony export */   PolymerBlockUnit: () => (/* binding */ PolymerBlockUnit)
/* harmony export */ });
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");

const POLYMERBLOCK_EXTRA_POLYMER = 'xPOLYMER:';
const POLYMERBLOCK_SPECIAL_UNCAPPED = '*';
var PolymerBlockConnectivity;
(function (PolymerBlockConnectivity) {
    PolymerBlockConnectivity["HeadToTail"] = "ht";
    PolymerBlockConnectivity["HeadToHead"] = "hh";
    PolymerBlockConnectivity["Random"] = "rnd";
})(PolymerBlockConnectivity || (PolymerBlockConnectivity = {}));
class PolymerBlockUnit {
    constructor(atoms) {
        this.atoms = atoms;
        this.connect = null;
        this.bondConn = null;
        this.atomName = new Map();
        this.bondIncl = new Map();
        this.bondExcl = new Map();
    }
    clone() {
        let dup = new PolymerBlockUnit(this.atoms.slice(0));
        dup.connect = this.connect;
        if (this.bondConn)
            dup.bondConn = this.bondConn.slice(0);
        for (let [k, v] of this.atomName.entries())
            dup.atomName.set(k, v.slice(0));
        for (let [k, v] of this.bondIncl.entries())
            dup.bondIncl.set(k, v.slice(0));
        for (let [k, v] of this.bondExcl.entries())
            dup.bondExcl.set(k, v.slice(0));
        return dup;
    }
}
class PolymerBlock {
    constructor(mol) {
        this.mol = mol;
        this.units = new Map();
        let blockAtoms = new Map();
        for (let n = 1; n <= mol.numAtoms; n++) {
            let extra = mol.atomExtra(n);
            for (let str of extra)
                if (str.startsWith(POLYMERBLOCK_EXTRA_POLYMER)) {
                    let bits = str.substring(POLYMERBLOCK_EXTRA_POLYMER.length).split(':');
                    let id = parseInt(bits[0]);
                    if (id > 0) {
                        let atoms = blockAtoms.get(id);
                        if (atoms)
                            atoms.push(n);
                        else
                            atoms = [n];
                        blockAtoms.set(id, atoms);
                    }
                }
        }
        for (let key of _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.sorted(Array.from(blockAtoms.keys())))
            this.appendBlock(key, blockAtoms.get(key));
    }
    getIDList() { return _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.sorted(Array.from(this.units.keys())); }
    getUnit(id) { return this.units.get(id); }
    getUnits() { return Array.from(this.units.values()); }
    rewriteMolecule() {
        this.purgeExtraFields();
        for (let key of _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.sorted(Array.from(this.units.keys())))
            this.writeUnit(key, this.units.get(key));
    }
    harmoniseNumbering(other) {
        let allKeys = other.getIDList();
        for (let key of this.getIDList())
            if (allKeys.includes(key)) {
                let unit = this.units.get(key);
                this.units.delete(key);
                key = this.nextIdentifier(allKeys);
                this.units.set(key, unit);
                allKeys.push(key);
            }
    }
    removeUnit(id) {
        let unit = this.units.get(id);
        if (unit == null)
            return;
        this.units.delete(id);
        let pfx = POLYMERBLOCK_EXTRA_POLYMER + id + ':';
        for (let a of unit.atoms) {
            let extra = this.mol.atomExtra(a);
            for (let i = extra.length - 1; i >= 0; i--)
                if (extra[i].startsWith(pfx))
                    extra = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.remove(extra, i);
            this.mol.setAtomExtra(a, extra);
        }
        for (let b = 1; b <= this.mol.numBonds; b++) {
            let extra = this.mol.bondExtra(b);
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.isBlank(extra))
                continue;
            for (let i = extra.length - 1; i >= 0; i--)
                if (extra[i].startsWith(pfx))
                    extra = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.remove(extra, i);
            this.mol.setBondExtra(b, extra);
        }
    }
    removeAll() {
        this.units.clear();
        this.purgeExtraFields();
    }
    createUnit(unit) {
        let id = this.nextIdentifier();
        this.units.set(id, unit.clone());
        this.writeUnit(id, unit);
        return id;
    }
    static hasPolymerExtensions(mol) {
        for (let n = 1; n <= mol.numAtoms; n++) {
            let extra = mol.atomExtra(n);
            if (extra != null)
                for (let str of extra)
                    if (str.startsWith(POLYMERBLOCK_EXTRA_POLYMER))
                        return true;
        }
        return false;
    }
    static getPolymerExtensions(mol, atom) {
        let extra = mol.atomExtra(atom), polext = null;
        if (extra == null)
            return null;
        for (let str of extra)
            if (str.startsWith(POLYMERBLOCK_EXTRA_POLYMER))
                polext = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.append(polext, str);
        return polext;
    }
    static removePolymerExtensions(mol, atom) {
        let extra = mol.atomExtra(atom);
        if (extra == null)
            return;
        let modified = false;
        for (let i = extra.length - 1; i >= 0; i--)
            if (extra[i].startsWith(POLYMERBLOCK_EXTRA_POLYMER)) {
                extra = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.remove(extra, i);
                modified = true;
            }
        if (modified)
            mol.setAtomExtra(atom, extra);
    }
    appendBlock(id, atoms) {
        const { mol } = this;
        let nattach = 0;
        let unit = new PolymerBlockUnit(atoms);
        for (let atom of atoms)
            for (let extra of mol.atomExtra(atom))
                if (extra.startsWith(POLYMERBLOCK_EXTRA_POLYMER)) {
                    let bits = extra.substring(POLYMERBLOCK_EXTRA_POLYMER.length).split(':');
                    if (bits.length < 2 || parseInt(bits[0]) != id)
                        continue;
                    nattach = parseInt(bits[1]);
                    for (let n = 2; n < bits.length; n++) {
                        if (bits[n] == PolymerBlockConnectivity.HeadToTail)
                            unit.connect = PolymerBlockConnectivity.HeadToTail;
                        else if (bits[n] == PolymerBlockConnectivity.HeadToHead)
                            unit.connect = PolymerBlockConnectivity.HeadToHead;
                        else if (bits[n] == PolymerBlockConnectivity.Random)
                            unit.connect = PolymerBlockConnectivity.Random;
                        else if (bits[n].startsWith('n')) {
                            let hasOuter = false;
                            for (let adj of mol.atomAdjList(atom))
                                if (!atoms.includes(adj)) {
                                    hasOuter = true;
                                    break;
                                }
                            if (hasOuter) {
                                let subBits = bits[n].substring(1).split(',');
                                unit.atomName.set(atom, subBits.map((str) => parseInt(str)));
                            }
                        }
                    }
                }
        if (nattach < 0)
            return;
        for (let n = 1; n <= mol.numBonds; n++) {
            let in1 = atoms.indexOf(mol.bondFrom(n)) >= 0, in2 = atoms.indexOf(mol.bondTo(n)) >= 0;
            if ((in1 && !in2) || (!in1 && in2))
                nattach--;
        }
        if (nattach != 0)
            return;
        let bonds = null, order = null;
        for (let n = 1; n <= mol.numBonds; n++) {
            for (let extra of mol.bondExtra(n))
                if (extra.startsWith(POLYMERBLOCK_EXTRA_POLYMER)) {
                    let bits = extra.substring(POLYMERBLOCK_EXTRA_POLYMER.length).split(':');
                    if (bits.length < 2 || parseInt(bits[0]) != id)
                        continue;
                    for (let i = 1; i < bits.length; i++) {
                        if (bits[i].startsWith('i')) {
                            let subBits = bits[i].substring(1).split(',');
                            unit.bondIncl.set(n, subBits.map((str) => parseInt(str)));
                        }
                        else if (bits[i].startsWith('e')) {
                            let subBits = bits[i].substring(1).split(',');
                            unit.bondExcl.set(n, subBits.map((str) => parseInt(str)));
                        }
                        else {
                            let o = parseInt(bits[i]);
                            if (o > 0) {
                                bonds = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.append(bonds, n);
                                order = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.append(order, o);
                            }
                        }
                    }
                }
        }
        if (bonds != null) {
            if (bonds.length % 2 == 1)
                return;
            unit.bondConn = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.idxGet(bonds, _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.idxSort(order));
        }
        this.units.set(id, unit);
    }
    formatBlockAtom(id, unit, atom) {
        let nbonds = 0;
        for (let n = 1; n <= this.mol.numBonds; n++) {
            let in1 = unit.atoms.indexOf(this.mol.bondFrom(n)) >= 0, in2 = unit.atoms.indexOf(this.mol.bondTo(n)) >= 0;
            if ((in1 && !in2) || (!in1 && in2))
                nbonds++;
        }
        let str = POLYMERBLOCK_EXTRA_POLYMER + id + ':' + nbonds;
        if (unit.connect != null)
            str += ':' + unit.connect;
        let names = unit.atomName.get(atom);
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.notBlank(names))
            str += ':n' + names.join(',');
        return str;
    }
    formatBlockBond(id, unit, bond) {
        let in1 = unit.atoms.includes(this.mol.bondFrom(bond)), in2 = unit.atoms.includes(this.mol.bondTo(bond));
        let isBoundary = (in1 && !in2) || (in2 && !in1);
        if (!isBoundary)
            return null;
        let idxConn = unit.bondConn ? unit.bondConn.indexOf(bond) : -1;
        let incl = unit.bondIncl.get(bond), excl = unit.bondExcl.get(bond);
        if (idxConn < 0 && _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.isBlank(incl) && _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.isBlank(excl))
            return null;
        let str = POLYMERBLOCK_EXTRA_POLYMER + id;
        if (idxConn >= 0)
            str += ':' + (idxConn + 1);
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.notBlank(incl))
            str += ':i' + incl.join(',');
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.notBlank(excl))
            str += ':e' + excl.join(',');
        return str;
    }
    purgeExtraFields() {
        for (let n = 1; n <= this.mol.numAtoms; n++) {
            let extra = this.mol.atomExtra(n);
            let modified = false;
            for (let i = extra.length - 1; i >= 0; i--)
                if (extra[i].startsWith(POLYMERBLOCK_EXTRA_POLYMER)) {
                    extra = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.remove(extra, i);
                    modified = true;
                }
            if (modified)
                this.mol.setAtomExtra(n, extra);
        }
        for (let n = 1; n <= this.mol.numBonds; n++) {
            let extra = this.mol.bondExtra(n);
            let modified = false;
            for (let i = extra.length - 1; i >= 0; i--)
                if (extra[i].startsWith(POLYMERBLOCK_EXTRA_POLYMER)) {
                    extra = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.remove(extra, i);
                    modified = true;
                }
            if (modified)
                this.mol.setBondExtra(n, extra);
        }
    }
    writeUnit(id, unit) {
        const { mol } = this;
        for (let a of unit.atoms) {
            let codeAtom = this.formatBlockAtom(id, unit, a);
            mol.setAtomExtra(a, _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.append(mol.atomExtra(a), codeAtom));
        }
        for (let b = 1; b <= mol.numBonds; b++) {
            let codeBond = this.formatBlockBond(id, unit, b);
            if (codeBond)
                mol.setBondExtra(b, _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.append(mol.bondExtra(b), codeBond));
        }
    }
    nextIdentifier(keys) {
        if (!keys)
            keys = this.getIDList();
        if (keys.length == 0)
            return 1;
        for (let n = 0; n < keys.length - 1; n++)
            if (keys[n + 1] != keys[n] + 1)
                return keys[n] + 1;
        return keys[keys.length - 1] + 1;
    }
}


/***/ }),

/***/ "./src/mol/PseudoEmbedding.ts":
/*!************************************!*\
  !*** ./src/mol/PseudoEmbedding.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PseudoEmbedding: () => (/* binding */ PseudoEmbedding)
/* harmony export */ });
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _Molecule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _Graph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Graph */ "./src/mol/Graph.ts");
/* harmony import */ var _util_Geom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/Geom */ "./src/util/Geom.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");





class PseudoEmbedding {
    constructor(mol) {
        this.mol = mol;
        this.bondMask = null;
        this.crossings = [];
    }
    calculateCrossings() {
        const { mol, bondMask, crossings } = this;
        let na = mol.numAtoms, nb = mol.numBonds;
        let maskCross = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, na);
        for (let i = 1; i < nb; i++) {
            if (bondMask && !bondMask[i - 1])
                continue;
            let x1 = mol.atomX(mol.bondFrom(i)), y1 = mol.atomY(mol.bondFrom(i));
            let x2 = mol.atomX(mol.bondTo(i)), y2 = mol.atomY(mol.bondTo(i));
            let dx = x2 - x1, dy = y2 - y1;
            x1 += dx * 0.001;
            y1 += dy * 0.001;
            x2 -= dx * 0.001;
            y2 -= dy * 0.001;
            for (let j = i + 1; j <= nb; j++) {
                if (bondMask && !bondMask[j - 1])
                    continue;
                let x3 = mol.atomX(mol.bondFrom(j)), y3 = mol.atomY(mol.bondFrom(j));
                let x4 = mol.atomX(mol.bondTo(j)), y4 = mol.atomY(mol.bondTo(j));
                dx = x4 - x3;
                dy = y4 - y3;
                x3 += dx * 0.001;
                y3 += dy * 0.001;
                x4 -= dx * 0.001;
                y4 -= dy * 0.001;
                if (_util_Geom__WEBPACK_IMPORTED_MODULE_3__.GeomUtil.doLineSegsIntersect(x1, y1, x2, y2, x3, y3, x4, y4)) {
                    crossings.push({ bond1: i, bond2: j, higher: 0 });
                    maskCross[mol.bondFrom(i) - 1] = true;
                    maskCross[mol.bondTo(i) - 1] = true;
                    maskCross[mol.bondFrom(j) - 1] = true;
                    maskCross[mol.bondTo(j) - 1] = true;
                }
            }
        }
        if (crossings.length == 0)
            return;
        let crossRblk = new Set();
        for (let n = 1; n <= na; n++) {
            let rblk = mol.atomRingBlock(n);
            if (rblk > 0)
                crossRblk.add(rblk);
        }
        for (let n = 1; n <= na; n++)
            if (!maskCross[n - 1]) {
                let rblk = mol.atomRingBlock(n);
                if (rblk > 0 && crossRblk.has(rblk))
                    maskCross[n - 1] = true;
            }
        let maskComp = this.connectMaskedComponents(maskCross);
        let g = _Graph__WEBPACK_IMPORTED_MODULE_2__.Graph.fromMoleculeMask(mol, maskComp);
        let ccgrp = g.calculateComponentGroups();
        for (let n = 0; n < ccgrp.length; n++) {
            for (let i = 0; i < ccgrp[n].length; i++)
                ccgrp[n][i] = g.getIndex(ccgrp[n][i]);
            this.embedComponent(ccgrp[n]);
        }
    }
    connectMaskedComponents(imask) {
        const { mol } = this;
        let omask = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.duplicate(imask);
        let gmol = _Graph__WEBPACK_IMPORTED_MODULE_2__.Graph.fromMolecule(mol);
        let na = mol.numAtoms, nb = mol.numBonds;
        let maskNever = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, na);
        while (true) {
            let anything = false;
            for (let n = 1; n <= nb; n++) {
                let bfr = mol.bondFrom(n), bto = mol.bondTo(n);
                let aidx = 0;
                if (omask[bfr - 1] && !omask[bto - 1])
                    aidx = bto;
                else if (omask[bto - 1] && !omask[bfr - 1])
                    aidx = bfr;
                else
                    continue;
                if (maskNever[aidx - 1])
                    continue;
                let g = gmol.clone();
                g.removeEdge(bfr - 1, bto - 1);
                let cc = g.calculateComponents();
                let hit = false;
                for (let i = 0; i < na; i++)
                    if (omask[i] && cc[i] == cc[aidx - 1]) {
                        hit = true;
                        break;
                    }
                if (hit) {
                    omask[aidx - 1] = true;
                    anything = true;
                }
                else
                    maskNever[aidx - 1] = true;
            }
            if (!anything)
                break;
        }
        return omask;
    }
    embedComponent(atoms) {
        const { mol, crossings } = this;
        let na = mol.numAtoms, gsz = atoms.length;
        let amask = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.booleanArray(false, na);
        for (let n = 0; n < gsz; n++)
            amask[atoms[n] - 1] = true;
        let z = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(0, gsz), newZ = new Array(gsz);
        if (this.seedFromInternalWedges(atoms, amask, z)) { }
        else if (this.seedFromExternalWedges(atoms, amask, z)) { }
        else if (this.seedFromPerspective(atoms, amask, z)) { }
        else if (this.seedFromDensity(atoms, amask, z)) { }
        else
            return;
        let ucount = this.normaliseHeights(z);
        while (ucount < gsz) {
            this.expandOutward(z, newZ, atoms, amask);
            let ncount = this.normaliseHeights(newZ);
            if (ncount == ucount)
                break;
            for (let n = 0; n < gsz; n++)
                z[n] = newZ[n];
            ucount = ncount;
        }
        for (let cross of crossings) {
            if (amask[mol.bondFrom(cross.bond1) - 1])
                this.updateCrossing(cross, atoms, z);
        }
    }
    seedFromInternalWedges(atoms, amask, z) {
        const { mol } = this;
        let nb = mol.numBonds;
        let success = false;
        for (let n = 1; n <= nb; n++) {
            let bt = mol.bondType(n);
            if (bt != _Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.BONDTYPE_INCLINED && bt != _Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.BONDTYPE_DECLINED)
                continue;
            let bfr = mol.bondFrom(n), bto = mol.bondTo(n);
            if (!amask[bfr - 1] || !amask[bto - 1])
                continue;
            if (bt == _Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.BONDTYPE_INCLINED) {
                z[atoms.indexOf(bfr)] -= 0.5;
                z[atoms.indexOf(bto)] += 0.5;
            }
            else {
                z[atoms.indexOf(bfr)] += 0.5;
                z[atoms.indexOf(bto)] -= 0.5;
            }
            success = true;
        }
        return success;
    }
    seedFromExternalWedges(atoms, amask, z) {
        const { mol } = this;
        let nb = mol.numBonds;
        let success = false;
        for (let n = 1; n <= nb; n++) {
            let bt = mol.bondType(n);
            if (bt != _Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.BONDTYPE_INCLINED && bt != _Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.BONDTYPE_DECLINED)
                continue;
            let bfr = mol.bondFrom(n), bto = mol.bondTo(n);
            if (amask[bfr - 1]) {
                z[atoms.indexOf(bfr)] += bt == _Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.BONDTYPE_INCLINED ? 1 : -1;
                success = true;
            }
            else if (amask[bto - 1]) {
                z[atoms.indexOf(bto)] += bt == _Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.BONDTYPE_INCLINED ? -1 : 1;
                success = true;
            }
        }
        return success;
    }
    seedFromPerspective(atoms, amask, z) {
        const { mol } = this;
        let nb = mol.numBonds;
        let avgdist = 0, maxdist = 0;
        let count = 0, bidx = 0;
        for (let n = 1; n <= nb; n++) {
            let bfr = mol.bondFrom(n), bto = mol.bondTo(n);
            if (!amask[bfr - 1] || !amask[bto - 1])
                continue;
            let d = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.norm_xy)(mol.atomX(bfr) - mol.atomX(bto), mol.atomY(bfr) - mol.atomY(bto));
            avgdist += d;
            count++;
            if (d > maxdist) {
                maxdist = d;
                bidx = n;
            }
        }
        if (count == 0 || bidx == 0)
            return false;
        avgdist /= count;
        if (maxdist < avgdist * 1.02)
            return false;
        z[atoms.indexOf(mol.bondFrom(bidx))] = 1;
        z[atoms.indexOf(mol.bondTo(bidx))] = 1;
        return true;
    }
    seedFromDensity(atoms, amask, z) {
        const { mol } = this;
        let highIdx = 0;
        let highCongest = 0;
        for (let i = 0; i < atoms.length; i++) {
            let x1 = mol.atomX(atoms[i]), y1 = mol.atomY(atoms[i]);
            let congest = 0;
            for (let j = 0; j < atoms.length; j++)
                if (i != j)
                    congest += 1.0 / (0.001 + (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.norm2_xy)(mol.atomX(atoms[j]) - x1, mol.atomY(atoms[j]) - y1));
            if (congest > highCongest) {
                highIdx = atoms[i];
                highCongest = congest;
            }
        }
        if (highIdx == 0)
            return false;
        z[atoms.indexOf(highIdx)] = 1;
        return true;
    }
    normaliseHeights(z) {
        _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.addTo(z, -_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.min(z));
        let eps = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.max(z) * 1E-6;
        let idx = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.idxSort(z);
        let prevZ = -1;
        let mark = 0;
        for (let n = 0; n < idx.length; n++) {
            if (prevZ < 0 || Math.abs(prevZ - z[idx[n]]) > eps)
                mark++;
            prevZ = z[idx[n]];
            z[idx[n]] = mark;
        }
        _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.addTo(z, -0.5 * (1 + _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.max(z)));
        return mark;
    }
    expandOutward(z, newZ, atoms, amask) {
        const { mol } = this;
        let gsz = atoms.length;
        for (let n = 0; n < gsz; n++)
            newZ[n] = z[n];
        for (let n = 0; n < gsz; n++) {
            let adj = mol.atomAdjList(atoms[n]);
            for (let i = 0; i < adj.length; i++)
                if (amask[adj[i] - 1])
                    newZ[atoms.indexOf(adj[i])] += 0.1 * z[n];
        }
    }
    updateCrossing(cross, atoms, z) {
        const { mol } = this;
        let bfr1 = mol.bondFrom(cross.bond1), bto1 = mol.bondTo(cross.bond1);
        let bfr2 = mol.bondFrom(cross.bond2), bto2 = mol.bondTo(cross.bond2);
        let idx1 = atoms.indexOf(bfr1), idx2 = atoms.indexOf(bto1);
        let idx3 = atoms.indexOf(bfr2), idx4 = atoms.indexOf(bto2);
        if (idx1 < 0 || idx2 < 0 || idx3 < 0 || idx4 < 0)
            return;
        let x1a = mol.atomX(bfr1), y1a = mol.atomY(bfr1), x1b = mol.atomX(bto1), y1b = mol.atomY(bto1);
        let x2a = mol.atomX(bfr2), y2a = mol.atomY(bfr2), x2b = mol.atomX(bto2), y2b = mol.atomY(bto2);
        let xy = _util_Geom__WEBPACK_IMPORTED_MODULE_3__.GeomUtil.lineIntersect(x1a, y1a, x1b, y1b, x2a, y2a, x2b, y2b);
        let dx1 = x1b - x1a, dy1 = y1b - y1a, dx2 = x2b - x2a, dy2 = y2b - y2a;
        let ext1 = Math.abs(dx1) > Math.abs(dy1) ? (xy[0] - x1a) / dx1 : (xy[1] - y1a) / dy1;
        let ext2 = Math.abs(dx2) > Math.abs(dy2) ? (xy[0] - x2a) / dx2 : (xy[1] - y2a) / dy2;
        if (ext1 < 0 || ext1 > 1 || ext2 < 0 || ext2 > 1)
            return;
        let z1a = z[idx1], z1b = z[idx2], z2a = z[idx3], z2b = z[idx4];
        let z1 = z1a + ext1 * (z1b - z1a), z2 = z2a + ext2 * (z2b - z2a);
        cross.higher = z1 > z2 ? 1 : 2;
    }
}


/***/ }),

/***/ "./src/mol/QueryUtil.ts":
/*!******************************!*\
  !*** ./src/mol/QueryUtil.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   QueryTypeAtom: () => (/* binding */ QueryTypeAtom),
/* harmony export */   QueryTypeBond: () => (/* binding */ QueryTypeBond),
/* harmony export */   QueryUtil: () => (/* binding */ QueryUtil)
/* harmony export */ });
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _Molecule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");



var QueryTypeAtom;
(function (QueryTypeAtom) {
    QueryTypeAtom["Charges"] = "qC:";
    QueryTypeAtom["Aromatic"] = "qA:";
    QueryTypeAtom["Unsaturated"] = "qU:";
    QueryTypeAtom["Elements"] = "qE:";
    QueryTypeAtom["ElementsNot"] = "qE!";
    QueryTypeAtom["RingSizes"] = "qR:";
    QueryTypeAtom["RingSizesNot"] = "qR!";
    QueryTypeAtom["RingBlock"] = "qB:";
    QueryTypeAtom["NumRings"] = "qN:";
    QueryTypeAtom["RingBonds"] = "qG:";
    QueryTypeAtom["Adjacency"] = "qJ:";
    QueryTypeAtom["BondSums"] = "qO:";
    QueryTypeAtom["Valences"] = "qV:";
    QueryTypeAtom["Hydrogens"] = "qH:";
    QueryTypeAtom["Isotopes"] = "qI:";
    QueryTypeAtom["SubFrags"] = "qX:";
    QueryTypeAtom["SubFragsNot"] = "qX!";
})(QueryTypeAtom || (QueryTypeAtom = {}));
var QueryTypeBond;
(function (QueryTypeBond) {
    QueryTypeBond["RingSizes"] = "qR:";
    QueryTypeBond["RingSizesNot"] = "qR!";
    QueryTypeBond["RingBlock"] = "qB:";
    QueryTypeBond["NumRings"] = "qN:";
    QueryTypeBond["Orders"] = "qO:";
})(QueryTypeBond || (QueryTypeBond = {}));
class QueryUtil {
    static hasAnyQueryAtom(mol, atom) {
        let extra = mol.atomExtra(atom);
        for (let n = extra.length - 1; n >= 0; n--)
            if (extra[n].startsWith('q'))
                return true;
        return false;
    }
    static hasAnyQueryBond(mol, bond) {
        let extra = mol.bondExtra(bond);
        for (let n = extra.length - 1; n >= 0; n--)
            if (extra[n].startsWith('q'))
                return true;
        return false;
    }
    static hasQueryAtom(mol, atom, type) {
        let extra = mol.atomExtra(atom);
        for (let n = extra.length - 1; n >= 0; n--)
            if (extra[n].startsWith(type))
                return true;
        return false;
    }
    static hasQueryBond(mol, bond, type) {
        let extra = mol.bondExtra(bond);
        for (let n = extra.length - 1; n >= 0; n--)
            if (extra[n].startsWith(type))
                return true;
        return false;
    }
    static deleteQueryAtom(mol, atom, type) {
        let extra = mol.atomExtra(atom);
        let modified = false;
        for (let n = extra.length - 1; n >= 0; n--)
            if (extra[n].startsWith(type)) {
                extra.splice(n, 1);
                modified = true;
            }
        if (modified)
            mol.setAtomExtra(atom, extra);
    }
    static deleteQueryBond(mol, bond, type) {
        let extra = mol.bondExtra(bond);
        let modified = false;
        for (let n = extra.length - 1; n >= 0; n--)
            if (extra[n].startsWith(type)) {
                extra.splice(n, 1);
                modified = true;
            }
        if (modified)
            mol.setBondExtra(bond, extra);
    }
    static deleteQueryAtomAll(mol, atom) {
        mol.setAtomExtra(atom, mol.atomExtra(atom).filter((xtra) => !xtra.startsWith('q')));
    }
    static deleteQueryBondAll(mol, bond) {
        mol.setBondExtra(bond, mol.bondExtra(bond).filter((xtra) => !xtra.startsWith('q')));
    }
    static queryAtomString(mol, atom, type) {
        let extra = mol.atomExtra(atom);
        for (let n = extra.length - 1; n >= 0; n--)
            if (extra[n].startsWith(type))
                return extra[n].substring(type.length);
        return null;
    }
    static queryAtomStringList(mol, atom, type) {
        let extra = mol.atomExtra(atom), list = null;
        if (extra != null)
            for (let str of extra)
                if (str.startsWith(type))
                    list = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.append(list, str.substring(type.length));
        return list;
    }
    static queryBondString(mol, bond, type) {
        let extra = mol.bondExtra(bond);
        for (let n = extra.length - 1; n >= 0; n--)
            if (extra[n].startsWith(type))
                return extra[n].substring(type.length);
        return null;
    }
    static setQueryAtom(mol, atom, type, str) {
        if (!str) {
            this.deleteQueryAtom(mol, atom, type);
            return;
        }
        let value = type + str;
        let extra = mol.atomExtra(atom);
        for (let n = extra.length - 1; n >= 0; n--) {
            if (extra[n].startsWith(type)) {
                if (value != null) {
                    extra[n] = value;
                    value = null;
                }
                else
                    extra.splice(n, 1);
            }
        }
        if (value != null)
            extra.push(value);
        mol.setAtomExtra(atom, extra);
    }
    static setQueryAtomList(mol, atom, type, list) {
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.isBlank(list)) {
            this.deleteQueryAtom(mol, atom, type);
            return;
        }
        let extra = mol.atomExtra(atom);
        for (let n = extra.length - 1; n >= 0; n--)
            if (extra[n].startsWith(type))
                extra.splice(n, 1);
        for (let str of list)
            extra.push(type + str);
        mol.setAtomExtra(atom, extra);
    }
    static setQueryBond(mol, bond, type, str) {
        if (!str) {
            this.deleteQueryBond(mol, bond, type);
            return;
        }
        let value = type + str;
        let extra = mol.bondExtra(bond);
        for (let n = extra.length - 1; n >= 0; n--) {
            if (extra[n].startsWith(type)) {
                if (value != null) {
                    extra[n] = value;
                    value = null;
                }
                else
                    extra.splice(n, 1);
            }
        }
        if (value != null)
            extra.push(value);
        mol.setBondExtra(bond, extra);
    }
    static queryAtomCharges(mol, atom) { return this.parseIntegers(this.queryAtomString(mol, atom, QueryTypeAtom.Charges)); }
    static queryAtomAromatic(mol, atom) { return this.parseBoolean(this.queryAtomString(mol, atom, QueryTypeAtom.Aromatic)); }
    static queryAtomUnsaturated(mol, atom) { return this.parseBoolean(this.queryAtomString(mol, atom, QueryTypeAtom.Unsaturated)); }
    static queryAtomElements(mol, atom) { return this.parseStrings(this.queryAtomString(mol, atom, QueryTypeAtom.Elements)); }
    static queryAtomElementsNot(mol, atom) { return this.parseStrings(this.queryAtomString(mol, atom, QueryTypeAtom.ElementsNot)); }
    static queryAtomRingSizes(mol, atom) { return this.parseIntegers(this.queryAtomString(mol, atom, QueryTypeAtom.RingSizes)); }
    static queryAtomRingSizesNot(mol, atom) { return this.parseIntegers(this.queryAtomString(mol, atom, QueryTypeAtom.RingSizesNot)); }
    static queryAtomRingBlock(mol, atom) { return this.parseBoolean(this.queryAtomString(mol, atom, QueryTypeAtom.RingBlock)); }
    static queryAtomNumRings(mol, atom) { return this.parseIntegers(this.queryAtomString(mol, atom, QueryTypeAtom.NumRings)); }
    static queryAtomRingBonds(mol, atom) { return this.parseIntegers(this.queryAtomString(mol, atom, QueryTypeAtom.RingBonds)); }
    static queryAtomAdjacency(mol, atom) { return this.parseIntegers(this.queryAtomString(mol, atom, QueryTypeAtom.Adjacency)); }
    static queryAtomBondSums(mol, atom) { return this.parseIntegers(this.queryAtomString(mol, atom, QueryTypeAtom.BondSums)); }
    static queryAtomValences(mol, atom) { return this.parseIntegers(this.queryAtomString(mol, atom, QueryTypeAtom.Valences)); }
    static queryAtomHydrogens(mol, atom) { return this.parseIntegers(this.queryAtomString(mol, atom, QueryTypeAtom.Hydrogens)); }
    static queryAtomIsotope(mol, atom) { return this.parseIntegers(this.queryAtomString(mol, atom, QueryTypeAtom.Isotopes)); }
    static queryAtomSubFrags(mol, atom) { return this.parseMolecules(this.queryAtomStringList(mol, atom, QueryTypeAtom.SubFrags)); }
    static queryAtomSubFragsNot(mol, atom) { return this.parseMolecules(this.queryAtomStringList(mol, atom, QueryTypeAtom.SubFragsNot)); }
    static queryBondRingSizes(mol, bond) { return this.parseIntegers(this.queryBondString(mol, bond, QueryTypeBond.RingSizes)); }
    static queryBondRingSizesNot(mol, bond) { return this.parseIntegers(this.queryBondString(mol, bond, QueryTypeBond.RingSizesNot)); }
    static queryBondRingBlock(mol, bond) { return this.parseBoolean(this.queryBondString(mol, bond, QueryTypeBond.RingBlock)); }
    static queryBondNumRings(mol, bond) { return this.parseIntegers(this.queryBondString(mol, bond, QueryTypeBond.NumRings)); }
    static queryBondOrders(mol, bond) { return this.parseIntegers(this.queryBondString(mol, bond, QueryTypeBond.Orders)); }
    static setQueryAtomCharges(mol, atom, value) { this.setQueryAtom(mol, atom, QueryTypeAtom.Charges, this.formatIntegers(value)); }
    static setQueryAtomAromatic(mol, atom, value) { this.setQueryAtom(mol, atom, QueryTypeAtom.Aromatic, this.formatBoolean(value)); }
    static setQueryAtomUnsaturated(mol, atom, value) { this.setQueryAtom(mol, atom, QueryTypeAtom.Unsaturated, this.formatBoolean(value)); }
    static setQueryAtomElements(mol, atom, value) { this.setQueryAtom(mol, atom, QueryTypeAtom.Elements, this.formatStrings(value)); }
    static setQueryAtomElementsNot(mol, atom, value) { this.setQueryAtom(mol, atom, QueryTypeAtom.ElementsNot, this.formatStrings(value)); }
    static setQueryAtomRingSizes(mol, atom, value) { this.setQueryAtom(mol, atom, QueryTypeAtom.RingSizes, this.formatIntegers(value)); }
    static setQueryAtomRingSizesNot(mol, atom, value) { this.setQueryAtom(mol, atom, QueryTypeAtom.RingSizesNot, this.formatIntegers(value)); }
    static setQueryAtomRingBlock(mol, atom, value) { this.setQueryAtom(mol, atom, QueryTypeAtom.RingBlock, this.formatBoolean(value)); }
    static setQueryAtomNumRings(mol, atom, value) { this.setQueryAtom(mol, atom, QueryTypeAtom.NumRings, this.formatIntegers(value)); }
    static setQueryAtomRingBonds(mol, atom, value) { this.setQueryAtom(mol, atom, QueryTypeAtom.RingBonds, this.formatIntegers(value)); }
    static setQueryAtomAdjacency(mol, atom, value) { this.setQueryAtom(mol, atom, QueryTypeAtom.Adjacency, this.formatIntegers(value)); }
    static setQueryAtomBondSums(mol, atom, value) { this.setQueryAtom(mol, atom, QueryTypeAtom.BondSums, this.formatIntegers(value)); }
    static setQueryAtomValences(mol, atom, value) { this.setQueryAtom(mol, atom, QueryTypeAtom.Valences, this.formatIntegers(value)); }
    static setQueryAtomHydrogens(mol, atom, value) { this.setQueryAtom(mol, atom, QueryTypeAtom.Hydrogens, this.formatIntegers(value)); }
    static setQueryAtomIsotope(mol, atom, value) { this.setQueryAtom(mol, atom, QueryTypeAtom.Isotopes, this.formatIntegers(value)); }
    static setQueryAtomSubFrags(mol, atom, value) { this.setQueryAtomList(mol, atom, QueryTypeAtom.SubFrags, this.formatMolecules(value)); }
    static setQueryAtomSubFragsNot(mol, atom, value) { this.setQueryAtomList(mol, atom, QueryTypeAtom.SubFragsNot, this.formatMolecules(value)); }
    static setQueryBondRingSizes(mol, bond, value) { this.setQueryBond(mol, bond, QueryTypeBond.RingSizes, this.formatIntegers(value)); }
    static setQueryBondRingSizesNot(mol, bond, value) { this.setQueryBond(mol, bond, QueryTypeBond.RingSizesNot, this.formatIntegers(value)); }
    static setQueryBondRingBlock(mol, bond, value) { this.setQueryBond(mol, bond, QueryTypeBond.RingBlock, this.formatBoolean(value)); }
    static setQueryBondNumRings(mol, bond, value) { this.setQueryBond(mol, bond, QueryTypeBond.NumRings, this.formatIntegers(value)); }
    static setQueryBondOrders(mol, bond, value) { this.setQueryBond(mol, bond, QueryTypeBond.Orders, this.formatIntegers(value)); }
    static parseIntegers(str) {
        if (!str)
            return null;
        let strlist = str.split(',');
        let intlist = new Array(strlist.length);
        for (let n = 0; n < strlist.length; n++)
            intlist[n] = parseInt(strlist[n]);
        return intlist;
    }
    static parseStrings(str) {
        if (!str)
            return null;
        return str.split(',');
    }
    static parseBoolean(str) {
        return !str ? null : str == 'yes';
    }
    static parseMolecules(list) {
        if (!list)
            return null;
        let mols = [];
        for (let molstr of list) {
            let mol = _Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.fromString(molstr);
            if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.notBlank(mol))
                mols.push(mol);
        }
        return mols;
    }
    static formatIntegers(list) {
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.isBlank(list))
            return null;
        let str = '';
        for (let n = 0; n < list.length; n++) {
            if (n > 0)
                str += ',';
            str += list[n];
        }
        return str;
    }
    static formatStrings(list) {
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.isBlank(list))
            return null;
        let str = '';
        for (let n = 0; n < list.length; n++) {
            if (n > 0)
                str += ',';
            str += list[n];
        }
        return str;
    }
    static formatBoolean(value) {
        return value ? 'yes' : 'no';
    }
    static formatMolecules(mols) {
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.isBlank(mols))
            return null;
        let list = [];
        for (let mol of mols)
            if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.notBlank(mol))
                list.push(mol.toString());
        return list;
    }
}


/***/ }),

/***/ "./src/mol/SketchUtil.ts":
/*!*******************************!*\
  !*** ./src/mol/SketchUtil.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Geometry: () => (/* binding */ Geometry),
/* harmony export */   SketchUtil: () => (/* binding */ SketchUtil)
/* harmony export */ });
/* harmony import */ var _util_Geom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Geom */ "./src/util/Geom.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _Chemistry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Chemistry */ "./src/mol/Chemistry.ts");
/* harmony import */ var _CoordUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CoordUtil */ "./src/mol/CoordUtil.ts");
/* harmony import */ var _Molecule__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");







var Geometry;
(function (Geometry) {
    Geometry[Geometry["Linear"] = 0] = "Linear";
    Geometry[Geometry["Bent"] = 1] = "Bent";
    Geometry[Geometry["Trigonal"] = 2] = "Trigonal";
    Geometry[Geometry["Tetra1"] = 3] = "Tetra1";
    Geometry[Geometry["Tetra2"] = 4] = "Tetra2";
    Geometry[Geometry["SqPlan"] = 5] = "SqPlan";
    Geometry[Geometry["BasePyram"] = 6] = "BasePyram";
    Geometry[Geometry["TrigBip"] = 7] = "TrigBip";
    Geometry[Geometry["Octa1"] = 8] = "Octa1";
    Geometry[Geometry["Octa2"] = 9] = "Octa2";
})(Geometry || (Geometry = {}));
class SketchUtil {
    static placeNewAtom(mol, el) {
        let box = mol.boundary();
        let x = box.maxX() + _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND, y = box.maxY();
        return mol.addAtom(el, x, y);
    }
    static placeNewFragment(mol, frag) {
        if (frag.numAtoms == 0)
            return;
        let dirX = [1, 0, -1, 1, -1, 1, 0, -1], dirY = [1, 1, 1, 0, 0, -1, -1, -1];
        let dx = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, 8), dy = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, 8), score = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, 8);
        let mbox = mol.boundary(), fbox = frag.boundary();
        for (let n = 0; n < 8; n++) {
            let vx = dirX[n], vy = dirY[n];
            if (n == 0 || n == 3 || n == 5)
                dx[n] = mbox.minX() - fbox.maxX();
            else if (n == 2 || n == 4 || n == 7)
                dx[n] = mbox.maxX() - fbox.minX();
            else
                dx[n] = 0.5 * (mbox.minX() + mbox.maxX() - fbox.minX() - fbox.maxX());
            if (n == 5 || n == 6 || n == 7)
                dy[n] = mbox.minY() - fbox.maxY();
            else if (n == 0 || n == 1 || n == 2)
                dy[n] = mbox.maxY() - fbox.minY();
            else
                dy[n] = 0.5 * (mbox.minY() + mbox.maxY() - fbox.minY() - fbox.maxY());
            dx[n] -= vx;
            dy[n] -= vy;
            score[n] = SketchUtil.fragPosScore(mol, frag, dx[n], dy[n]);
            vx *= 0.25;
            vy *= 0.25;
            for (let iter = 100; iter > 0; iter--) {
                let iscore = SketchUtil.fragPosScore(mol, frag, dx[n] + vx, dy[n] + vy);
                if (iscore <= score[n])
                    break;
                score[n] = iscore;
                dx[n] += vx;
                dy[n] += vy;
            }
            for (let iter = 100; iter > 0; iter--)
                for (let d = 0; d < 8; d++) {
                    vx = dirX[d] * 0.1;
                    vy = dirY[d] * 0.1;
                    let iscore = SketchUtil.fragPosScore(mol, frag, dx[n] + vx, dy[n] + vy);
                    if (iscore <= score[n])
                        break;
                    score[n] = iscore;
                    dx[n] += vx;
                    dy[n] += vy;
                }
        }
        let best = 0;
        for (let n = 1; n < 8; n++)
            if (score[n] > score[best])
                best = n;
        frag = frag.clone();
        for (let n = 1; n <= frag.numAtoms; n++)
            frag.setAtomPos(n, frag.atomX(n) + dx[best], frag.atomY(n) + dy[best]);
        mol.append(frag);
    }
    static fragPosScore(mol, frag, dx, dy) {
        let score = 0;
        for (let i = 1; i <= mol.numAtoms; i++)
            for (let j = 1; j <= frag.numAtoms; j++) {
                let ox = frag.atomX(j) + dx - mol.atomX(i), oy = frag.atomY(j) + dy - mol.atomY(i);
                let dist2 = ox * ox + oy * oy;
                if (dist2 < 1)
                    return 0;
                score += 1 / dist2;
            }
        let mbox = mol.boundary(), fbox = frag.boundary();
        let minX = Math.min(fbox.minX() + dx, mbox.minX()), maxX = Math.max(fbox.maxX() + dx, mbox.maxX());
        let minY = Math.min(fbox.minY() + dy, mbox.minY()), maxY = Math.max(fbox.maxY() + dy, mbox.maxY());
        let rangeX = Math.max(1, maxX - minX), rangeY = Math.max(1, maxY - minY);
        let ratio = Math.max(rangeX / rangeY, rangeY / rangeX);
        return score / ratio;
    }
    static mergeOverlappingAtoms(mol) {
        return SketchUtil.mergeFragmentsDiv(mol, 0);
    }
    static mergeFragmentsDiv(mol, div) {
        const na = mol.numAtoms;
        let omask = _CoordUtil__WEBPACK_IMPORTED_MODULE_4__.CoordUtil.overlappingAtomMask(mol);
        let chopmask = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.booleanArray(false, na);
        let mx = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.arrayAtomX(mol), my = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.arrayAtomY(mol);
        let remap = [];
        for (let n = 0; n < na; n++)
            remap.push(n + 1);
        let div1 = div, div2 = div + 1;
        if (div == 0)
            div1 = na;
        for (let i = 1; i <= div1; i++)
            if (omask[i - 1] && !chopmask[i - 1]) {
                if (div == 0)
                    div2 = i + 1;
                for (let j = div2; j <= na; j++)
                    if (omask[j - 1] && !chopmask[j - 1]) {
                        if ((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.norm2_xy)(mx[i - 1] - mx[j - 1], my[i - 1] - my[j - 1]) > _CoordUtil__WEBPACK_IMPORTED_MODULE_4__.CoordUtil.OVERLAP_THRESHOLD_SQ)
                            continue;
                        let oldN = j, newN = i;
                        let exotic = [0, 0];
                        for (let k = 0; k < 2; k++) {
                            let a = k == 0 ? i : j;
                            exotic[k] = (mol.atomElement(a) == 'C' ? 0 : 1)
                                + (mol.atomElement(a) == 'X' ? -100 : 0)
                                + (mol.atomCharge(a) != 0 ? 1 : 0)
                                + (mol.atomUnpaired(a) != 0 ? 1 : 0)
                                + (mol.atomIsotope(a) != _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.ISOTOPE_NATURAL ? 1 : 0)
                                + (mol.atomHExplicit(a) != _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.HEXPLICIT_UNKNOWN ? 1 : 0)
                                + (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.hasAbbrev(mol, a) ? 1000 : 0);
                        }
                        if (exotic[1] > exotic[0]) {
                            oldN = i;
                            newN = j;
                        }
                        for (let n = 1; n <= mol.numBonds; n++) {
                            if (mol.bondFrom(n) == oldN)
                                mol.setBondFrom(n, newN);
                            if (mol.bondTo(n) == oldN)
                                mol.setBondTo(n, newN);
                        }
                        chopmask[oldN - 1] = true;
                        remap[oldN - 1] = newN;
                    }
            }
        for (let n = na; n >= 1; n--)
            if (chopmask[n - 1]) {
                if (n <= div)
                    div--;
                mol.deleteAtomAndBonds(n);
                for (let i = 0; i < na; i++)
                    if (remap[i] > n)
                        remap[i]--;
            }
        for (let n = mol.numAtoms; n > div; n--)
            if (mol.atomElement(n) == 'X') {
                mol.deleteAtomAndBonds(n);
                for (let i = 0; i < na; i++)
                    if (remap[i] > n)
                        remap[i]--;
            }
        _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.removeDuplicateBonds(mol);
        return remap;
    }
    static mergeFragmentsMask(mol, mask) {
        let chopmask = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.booleanArray(false, mol.numAtoms);
        let na = mol.numAtoms;
        let mx = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.arrayAtomX(mol), my = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.arrayAtomY(mol);
        for (let i = 1; i <= na; i++)
            if (mask[i - 1])
                for (let j = 1; j <= na; j++)
                    if (!mask[j - 1] && !chopmask[j - 1])
                        if ((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.norm2_xy)(mx[i - 1] - mx[j - 1], my[i - 1] - my[j - 1]) < _CoordUtil__WEBPACK_IMPORTED_MODULE_4__.CoordUtil.OVERLAP_THRESHOLD_SQ) {
                            let oldN = j, newN = i;
                            if (mol.atomElement(i) == 'C' && mol.atomElement(j) != 'C' && mol.atomElement(j) != 'X')
                                [oldN, newN] = [i, j];
                            if (mol.atomHExplicit(newN) == _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.HEXPLICIT_UNKNOWN)
                                mol.setAtomHExplicit(newN, mol.atomHExplicit(oldN));
                            mol.setAtomUnpaired(newN, mol.atomUnpaired(newN) + mol.atomUnpaired(oldN));
                            mol.setAtomCharge(newN, mol.atomCharge(newN) + mol.atomCharge(oldN));
                            mol.setAtomExtra(newN, _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.concat(mol.atomExtra(oldN), mol.atomExtra(newN)));
                            for (let n = 1; n <= mol.numBonds; n++) {
                                if (mol.bondFrom(n) == oldN)
                                    mol.setBondFrom(n, newN);
                                if (mol.bondTo(n) == oldN)
                                    mol.setBondTo(n, newN);
                            }
                            chopmask[oldN - 1] = true;
                        }
        for (let n = chopmask.length; n >= 1; n--)
            if (chopmask[n - 1])
                mol.deleteAtomAndBonds(n);
        _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.removeDuplicateBonds(mol);
    }
    static matchAngleGeometry(geom, theta) {
        if (theta.length <= 1)
            return true;
        let match = SketchUtil.GEOM_ANGLES[geom], mtheta = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, theta.length);
        let hit = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.booleanArray(false, match.length);
        for (let n = 0; n < theta.length; n++)
            for (let s = 1; s >= -1; s -= 2) {
                for (let i = 0; i < theta.length; i++)
                    mtheta[i] = (theta[i] - theta[0]) * s;
                _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.setTo(hit, false);
                let gotall = true;
                for (let i = 0; i < mtheta.length; i++) {
                    let got = false;
                    for (let j = 0; j < match.length; j++)
                        if (!hit[j] && Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleDiff)(mtheta[i], match[j])) < 3 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD) {
                            hit[j] = true;
                            got = true;
                            break;
                        }
                    if (!got) {
                        gotall = false;
                        break;
                    }
                }
                if (gotall)
                    return true;
            }
        return false;
    }
    static primeDirections(mol, atom) {
        let angles = SketchUtil.calculateNewBondAngles(mol, atom, 1);
        let exits = SketchUtil.exitVectors(mol, atom);
        return _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.uniqueAngles(angles.concat(exits), 2 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD);
    }
    static exitVectors(mol, atom) {
        let adj = mol.atomAdjList(atom), sz = adj.length;
        if (sz == 0)
            return [0, 90 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 180 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, -90 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD];
        if (sz == 1)
            return [];
        let ret = [];
        let ang = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.sortAngles(_CoordUtil__WEBPACK_IMPORTED_MODULE_4__.CoordUtil.atomBondAngles(mol, atom, adj));
        for (let n = 0; n < sz; n++) {
            let nn = n < sz - 1 ? n + 1 : 0;
            ret.push((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleNorm)(ang[n] + 0.5 * (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleDiffPos)(ang[nn], ang[n])));
        }
        return ret;
    }
    static calculateNewBondAngles(mol, atom, order) {
        let adj = mol.atomAdjList(atom);
        const sz = adj.length;
        if (sz == 0) {
            let atno = mol.atomicNumber(atom), atblk = _Chemistry__WEBPACK_IMPORTED_MODULE_3__.Chemistry.ELEMENT_BLOCKS[atno];
            if (atblk <= 2)
                return [0, 90 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 180 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, -90 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD];
            else
                return [90 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, -90 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 30 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 150 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 210 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, -30 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 180 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 0 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD];
        }
        let geom = SketchUtil.guessAtomGeometry(mol, atom, order);
        let ang = _CoordUtil__WEBPACK_IMPORTED_MODULE_4__.CoordUtil.atomBondAngles(mol, atom, adj);
        for (let n = 0; n < geom.length; n++) {
            let ret = SketchUtil.mapAngleSubstituent(geom[n], ang);
            if (ret != null)
                return ret;
        }
        return [];
    }
    static guessAtomGeometry(mol, atom, order) {
        let adj = mol.atomAdjList(atom);
        let sz = adj.length, atno = mol.atomicNumber(atom);
        let atblk = _Chemistry__WEBPACK_IMPORTED_MODULE_3__.Chemistry.ELEMENT_BLOCKS[atno], elrow = _Chemistry__WEBPACK_IMPORTED_MODULE_3__.Chemistry.ELEMENT_ROWS[atno];
        let el = mol.atomElement(atom);
        let adjBO = [], adjAN = [], pri = [];
        let allSingle = true;
        for (let n = 0; n < sz; n++) {
            adjBO.push(mol.bondOrder(mol.findBond(atom, adj[n])));
            adjAN.push(mol.atomicNumber(adj[n]));
            pri.push(adjBO[n] * 200 + adjAN[n]);
            if (adjBO[n] != 1)
                allSingle = true;
        }
        for (let p = 0; p < sz - 1;) {
            if (pri[p] > pri[p + 1]) {
                _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.swap(adj, p, p + 1);
                _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.swap(adjBO, p, p + 1);
                _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.swap(adjAN, p, p + 1);
                _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.swap(pri, p, p + 1);
                if (p > 0)
                    p--;
            }
            else
                p++;
        }
        let ang = _CoordUtil__WEBPACK_IMPORTED_MODULE_4__.CoordUtil.atomBondAngles(mol, atom, adj);
        if (sz == 1) {
            if (el == 'C' || el == 'N') {
                if (adjBO[0] == 2 && order == 2)
                    return [Geometry.Linear];
                if ((adjBO[0] == 3 && order == 1) || (adjBO[0] == 1 && order == 3))
                    return [Geometry.Linear];
            }
            if (atblk > 2)
                return [Geometry.Octa1, Geometry.Octa2];
            if (order != 0 && (el == 'C' || el == 'N' || el == 'O'))
                return [Geometry.Trigonal];
            return [Geometry.Trigonal, Geometry.Linear];
        }
        if (sz == 2 && Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleDiff)(ang[0], ang[1])) >= 175 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD) {
            if (atblk <= 2)
                return [Geometry.SqPlan];
            else
                return [Geometry.Octa1, Geometry.Octa2];
        }
        let geom = [];
        if (atblk == 0)
            geom = [Geometry.Trigonal, Geometry.SqPlan];
        else if (atblk == 1)
            geom = [Geometry.Trigonal, Geometry.SqPlan, Geometry.Octa1, Geometry.Octa2];
        else if (atblk == 2) {
            geom.push(Geometry.Trigonal);
            if (el == 'C' && allSingle) {
                geom.push(Geometry.Tetra1);
                geom.push(Geometry.Tetra2);
                geom.push(Geometry.SqPlan);
            }
            else if (el == 'C' && !allSingle) {
            }
            else if (elrow <= 3) {
                geom.push(Geometry.Tetra1);
                geom.push(Geometry.Tetra2);
                geom.push(Geometry.SqPlan);
            }
            else {
                geom.push(Geometry.Tetra1);
                geom.push(Geometry.Tetra2);
                geom.push(Geometry.SqPlan);
                geom.push(Geometry.Octa1);
                geom.push(Geometry.Octa2);
            }
        }
        else {
            geom.push(Geometry.Octa1);
            geom.push(Geometry.Octa2);
        }
        for (let n = geom.length - 1; n >= 0; n--) {
            if (!SketchUtil.matchAngleGeometry(geom[n], ang))
                geom.splice(n, 1);
        }
        return geom;
    }
    static mapAngleSubstituent(geom, ang) {
        let gtheta = SketchUtil.GEOM_ANGLES[geom];
        const asz = ang.length, gsz = gtheta.length;
        if (asz >= gsz)
            return null;
        if (asz == 0)
            return gtheta.slice(0);
        let vac = [];
        for (let n = 0; n < asz; n++)
            for (let k = 0; k < gsz; k++)
                for (let s = 1; s >= -1; s -= 2) {
                    let gang = [];
                    for (let i = 0; i < gsz; i++)
                        gang.push((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleNorm)(ang[n] + s * (gtheta[i] - gtheta[k])));
                    let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.booleanArray(false, gsz);
                    let mcount = 0;
                    for (let i = 0; i < gsz; i++)
                        if (!mask[i])
                            for (let j = 0; j < asz; j++)
                                if (Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleDiff)(gang[i], ang[j])) < 3 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD) {
                                    mask[i] = true;
                                    mcount++;
                                    break;
                                }
                    if (mcount != asz)
                        continue;
                    for (let i = 0; i < gsz; i++)
                        if (!mask[i])
                            vac.push(gang[i]);
                }
        if (vac.length == 0)
            return null;
        vac = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.sortAngles(vac);
        for (let n = 0; n < vac.length - 1; n++) {
            let th1 = vac[n], th2 = vac[n + 1], dth = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleDiff)(th2, th1);
            if (Math.abs(dth) < 5 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD) {
                vac[n] = th1 + 0.5 * dth;
                vac.splice(n + 1, 1);
                n--;
            }
        }
        return vac;
    }
    static refitAtomGeometry(mol, atom, geom) {
        let gtheta = SketchUtil.GEOM_ANGLES[geom];
        let gsz = gtheta.length;
        let adj = mol.atomAdjList(atom);
        let asz = adj.length;
        if (asz <= 1 || asz > gsz)
            return null;
        let ang = _CoordUtil__WEBPACK_IMPORTED_MODULE_4__.CoordUtil.atomBondAngles(mol, atom, adj);
        let inRing = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.booleanArray(false, asz);
        let allInRing = true;
        for (let n = 0; n < asz; n++) {
            inRing[n] = mol.bondInRing(mol.findBond(atom, adj[n]));
            if (!inRing[n])
                allInRing = false;
        }
        if (allInRing)
            return null;
        let bestAng = null;
        let bestScore = 0;
        let ww = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.calculateWalkWeight(mol, atom);
        for (let i = 0; i < gsz; i++)
            for (let j = 0; j < asz; j++)
                for (let s = 1; s >= -1; s -= 2) {
                    let newAng = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, asz);
                    let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.booleanArray(false, gsz);
                    for (let n1 = 0; n1 < asz; n1++) {
                        let best = -1;
                        let bdiff = 0;
                        for (let n2 = 0; n2 < gsz; n2++)
                            if (!mask[n2]) {
                                let th = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleNorm)(gtheta[n2] * s - gtheta[i] + ang[j]);
                                let diff = Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleDiff)(th, ang[n1]));
                                if (best < 0 || diff < bdiff) {
                                    best = n2;
                                    bdiff = diff;
                                    newAng[n1] = th;
                                }
                            }
                        mask[best] = true;
                    }
                    let ringClash = false;
                    for (let n = 0; n < asz; n++)
                        if (inRing[n] && Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleDiff)(newAng[n], ang[n])) > 2 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD) {
                            ringClash = true;
                            break;
                        }
                    if (ringClash)
                        continue;
                    let score = 0;
                    for (let n = 0; n < asz; n++)
                        score += ww[adj[n] - 1] * Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleDiff)(newAng[n], ang[n]));
                    if (bestAng == null || score < bestScore) {
                        bestAng = newAng;
                        bestScore = score;
                    }
                }
        if (bestAng == null)
            return null;
        let same = true;
        for (let n = 0; n < asz; n++)
            if (Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleDiff)(bestAng[n], ang[n])) > 2 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD) {
                same = false;
                break;
            }
        if (same)
            return null;
        mol = mol.clone();
        for (let n = 0; n < asz; n++)
            if (!inRing[n])
                _CoordUtil__WEBPACK_IMPORTED_MODULE_4__.CoordUtil.rotateBond(mol, atom, adj[n], bestAng[n] - ang[n]);
        return mol;
    }
    static switchAtomGeometry(mol, src, dst, geoms) {
        let bestAtom = 0;
        let bestAng = 0, bestX = 0, bestY = 0;
        let adj = mol.atomAdjList(src);
        let ang = _CoordUtil__WEBPACK_IMPORTED_MODULE_4__.CoordUtil.atomBondAngles(mol, src, adj), theta = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, ang.length - 1);
        let cx = mol.atomX(src), cy = mol.atomY(src);
        for (let i = 0; i < dst.length; i++) {
            let a = adj.indexOf(dst[i]);
            let curth = ang[a];
            for (let n = 0, p = 0; n < adj.length; n++)
                if (n != a)
                    theta[p++] = ang[n];
            let r = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.norm_xy)(mol.atomX(dst[i]) - cx, mol.atomY(dst[i]) - cy);
            for (let j = 0; j < geoms.length; j++) {
                if (adj.length >= SketchUtil.GEOM_ANGLES[geoms[j]].length)
                    continue;
                let newAng = SketchUtil.mapAngleSubstituent(geoms[j], theta);
                if (newAng != null)
                    for (let n = 0; n < newAng.length; n++) {
                        let dth = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleDiff)(newAng[n], curth);
                        if (Math.abs(dth) < 3 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD)
                            continue;
                        if (dth < 0)
                            dth += _util_util__WEBPACK_IMPORTED_MODULE_1__.TWOPI;
                        if (bestAtom == 0 || dth < bestAng - 2 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD || (dth < bestAng + 2 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD && dst[i] < bestAtom)) {
                            let x = cx + r * Math.cos(newAng[n]);
                            let y = cy + r * Math.sin(newAng[n]);
                            if (_CoordUtil__WEBPACK_IMPORTED_MODULE_4__.CoordUtil.atomAtPoint(mol, x, y) != 0)
                                continue;
                            bestAtom = dst[i];
                            bestAng = dth;
                            bestX = x;
                            bestY = y;
                        }
                    }
                break;
            }
        }
        if (bestAtom == 0)
            return null;
        mol = mol.clone();
        mol.setAtomPos(bestAtom, bestX, bestY);
        return mol;
    }
    static pickAtomsToConnect(mol, aidx) {
        if (aidx.length < 2)
            return null;
        if (aidx.length == 2) {
            if (mol.findBond(aidx[0], aidx[1]) > 0)
                return null;
            return aidx;
        }
        const AUTO_DSQ = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.sqr)(_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND + 0.1);
        let bestDSQ = Number.MAX_VALUE;
        let bestA1 = 0, bestA2 = 0;
        let conn = [];
        for (let i = 0; i < aidx.length - 1; i++)
            for (let j = i + 1; j < aidx.length; j++) {
                if (mol.findBond(aidx[i], aidx[j]) > 0)
                    continue;
                let dsq = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.norm2_xy)(mol.atomX(aidx[i]) - mol.atomX(aidx[j]), mol.atomY(aidx[i]) - mol.atomY(aidx[j]));
                if (dsq < AUTO_DSQ) {
                    conn.push(aidx[i]);
                    conn.push(aidx[j]);
                }
                else if (dsq < bestDSQ) {
                    bestDSQ = dsq;
                    bestA1 = aidx[i];
                    bestA2 = aidx[j];
                }
            }
        if (conn.length == 0 && bestA1 != 0) {
            conn.push(bestA1);
            conn.push(bestA2);
        }
        return conn.length == 0 ? null : conn;
    }
    static pickNewAtomDirection(mol, atom, theta) {
        if (theta.length == 1)
            return theta[0];
        let bestTheta = theta[0], bestScore = Number.MAX_VALUE;
        for (let n = 0; n < theta.length; n++) {
            let px = mol.atomX(atom) + _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.cos(theta[n]);
            let py = mol.atomY(atom) + _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.sin(theta[n]);
            let score = _CoordUtil__WEBPACK_IMPORTED_MODULE_4__.CoordUtil.congestionPoint(mol, px, py);
            if (score > bestScore)
                continue;
            if (_CoordUtil__WEBPACK_IMPORTED_MODULE_4__.CoordUtil.overlapsAtom(mol, px, py, 0.2))
                score += 1E5;
            if (score < bestScore) {
                bestTheta = theta[n];
                bestScore = score;
            }
        }
        return bestTheta;
    }
    static joinOverlappingAtoms(mol, mask) {
        mol = mol.clone();
        mask = mask.slice(0);
        const na = mol.numAtoms;
        let mx = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.arrayAtomX(mol), my = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.arrayAtomY(mol);
        let groups = [];
        let groupX = [], groupY = [];
        for (let i = 0; i < na - 1; i++)
            if (mask[i]) {
                let g = [i + 1];
                let x = mx[i], y = my[i];
                for (let j = i + 1; j < na; j++)
                    if (mask[j]) {
                        if ((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.norm2_xy)(mx[j] - mx[i], my[j] - my[i]) > _CoordUtil__WEBPACK_IMPORTED_MODULE_4__.CoordUtil.OVERLAP_THRESHOLD_SQ)
                            continue;
                        g.push(j + 1);
                        x += mx[j];
                        y += my[j];
                        let adjb = mol.atomAdjBonds(j + 1);
                        for (let n = 0; n < adjb.length; n++) {
                            if (mol.bondFrom(adjb[n]) == j + 1)
                                mol.setBondFrom(adjb[n], i + 1);
                            else if (mol.bondTo(adjb[n]) == j + 1)
                                mol.setBondTo(adjb[n], i + 1);
                        }
                    }
                if (g.length == 1)
                    continue;
                groups.push(g);
                groupX.push(x / g.length);
                groupY.push(y / g.length);
            }
        if (groups.length == 0)
            return null;
        let keepmask = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.booleanArray(true, na);
        for (let n = 0; n < groups.length; n++) {
            let g = groups[n];
            mol.setAtomPos(g[0], groupX[n], groupY[n]);
            for (let i = 1; i < g.length; i++)
                keepmask[g[i] - 1] = false;
        }
        mol = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.subgraphMask(mol, keepmask);
        _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.removeDuplicateBonds(mol);
        return mol;
    }
    static moveToEdge(mol, mask, dx, dy) {
        let gotS = false, gotN = false;
        let sx1 = 0, sy1 = 0, sx2 = 0, sy2 = 0;
        let nx1 = 0, ny1 = 0, nx2 = 0, ny2 = 0;
        for (let n = 1; n <= mol.numAtoms; n++) {
            let x = mol.atomX(n), y = mol.atomY(n);
            if (mask[n - 1]) {
                if (!gotS || x < sx1)
                    sx1 = x;
                if (!gotS || y < sy1)
                    sy1 = y;
                if (!gotS || x > sx2)
                    sx2 = x;
                if (!gotS || y > sy2)
                    sy2 = y;
                gotS = true;
            }
            else {
                if (!gotN || x < nx1)
                    nx1 = x;
                if (!gotN || y < ny1)
                    ny1 = y;
                if (!gotN || x > nx2)
                    nx2 = x;
                if (!gotN || y > ny2)
                    ny2 = y;
                gotN = true;
            }
        }
        const SEPARATE = 1.0, SEPTEST = 0.9;
        if ((dx < 0 && dy == 0 && sx2 <= nx1 - SEPTEST) ||
            (dx > 0 && dy == 0 && sx1 >= nx2 + SEPTEST) ||
            (dx == 0 && dy < 0 && sy2 <= ny1 - SEPTEST) ||
            (dx == 0 && dy > 0 && sy1 >= ny2 + SEPTEST)) {
            return null;
        }
        mol = mol.clone();
        let ox = 0, oy = 0;
        if (dx < 0)
            ox = nx1 - sx2 - SEPARATE;
        if (dx > 0)
            ox = nx2 - sx1 + SEPARATE;
        if (dy < 0)
            oy = ny1 - sy2 - SEPARATE;
        if (dy > 0)
            oy = ny2 - sy1 + SEPARATE;
        for (let n = 1; n <= mol.numAtoms; n++)
            if (mask[n - 1])
                mol.setAtomPos(n, mol.atomX(n) + ox, mol.atomY(n) + oy);
        return mol;
    }
    static placeAdditionalHydrogens(mol, atom, numH) {
        let base = mol.numAtoms;
        const x0 = mol.atomX(atom), y0 = mol.atomY(atom);
        let adj = mol.atomAdjList(atom);
        if (adj.length == 2 && numH == 2) {
            const th1 = Math.atan2(mol.atomY(adj[0]) - y0, mol.atomX(adj[0]) - x0);
            const th2 = Math.atan2(mol.atomY(adj[1]) - y0, mol.atomX(adj[1]) - x0);
            if (Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleDiff)(th1, th2)) < 170 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD) {
                let theta = 0.5 * (th1 + th2) + Math.PI;
                let th3 = theta - 30 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, th4 = theta + 30 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD;
                mol.addAtom('H', x0 + _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.cos(th3), y0 + _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.sin(th3));
                mol.addAtom('H', x0 + _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.cos(th4), y0 + _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.sin(th4));
                mol.addBond(atom, base + 1, 1);
                mol.addBond(atom, base + 2, 1);
                return;
            }
        }
        if (adj.length == 1 && numH == 3) {
            let th1 = Math.atan2(mol.atomY(adj[0]) - y0, mol.atomX(adj[0]) - x0);
            let th2 = th1 + 90 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, th3 = th1 + 180 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, th4 = th1 + 270 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD;
            mol.addAtom('H', x0 + _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.cos(th2), y0 + _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.sin(th2));
            mol.addAtom('H', x0 + _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.cos(th3), y0 + _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.sin(th3));
            mol.addAtom('H', x0 + _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.cos(th4), y0 + _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.sin(th4));
            mol.addBond(atom, base + 1, 1);
            mol.addBond(atom, base + 2, 1);
            mol.addBond(atom, base + 3, 1);
            return;
        }
        let theta = SketchUtil.pickNewAtomDirection(mol, atom, SketchUtil.primeDirections(mol, atom));
        mol.addAtom('H', x0 + _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.cos(theta), y0 + _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.sin(theta));
        mol.addBond(atom, base + 1, 1);
        if (numH > 1)
            SketchUtil.placeAdditionalHydrogens(mol, atom, numH - 1);
    }
    static allViableDirections(mol, atom, order) {
        if (mol.atomAdjCount(atom) == 0) {
            let angles = [];
            for (let n = 0; n < 12; n++)
                angles.push(30 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD);
            return angles;
        }
        let adj = mol.atomAdjList(atom);
        let angles = SketchUtil.exitVectors(mol, atom);
        let geom = SketchUtil.guessAtomGeometry(mol, atom, order);
        if (adj.length == 1 && geom.indexOf(Geometry.Linear) < 0)
            geom.push(Geometry.Linear);
        let bndang = _CoordUtil__WEBPACK_IMPORTED_MODULE_4__.CoordUtil.atomBondAngles(mol, atom, adj);
        for (let g of geom) {
            let map = SketchUtil.mapAngleSubstituent(g, bndang);
            if (map != null)
                for (let th of map)
                    angles.push(th);
        }
        return _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.uniqueAngles(angles, 2 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD);
    }
    static proposeNewRing(mol, rsz, x, y, dx, dy, snap) {
        let theta = dy == 0 && dx == 0 ? 0.5 * Math.PI : Math.atan2(dy, dx);
        if (snap) {
            const chunk = 30 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD;
            theta = Math.round(theta / chunk) * chunk;
        }
        return SketchUtil.positionSimpleRing(mol, rsz, x, y, theta);
    }
    static proposeAtomRing(mol, rsz, atom, dx, dy) {
        let thsnap = [];
        let cx = mol.atomX(atom), cy = mol.atomY(atom);
        if (mol.atomAdjCount(atom) == 0) {
            for (let n = 0; n < 12; n++)
                thsnap.push(_util_util__WEBPACK_IMPORTED_MODULE_1__.TWOPI * n / 12);
        }
        else if (mol.atomAdjCount(atom) == 1) {
            let nbr = mol.atomAdjList(atom)[0];
            thsnap.push((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleNorm)(Math.atan2(mol.atomY(nbr) - cy, mol.atomX(nbr) - cx) + Math.PI));
        }
        else {
            let angs = [];
            for (let nbr of mol.atomAdjList(atom))
                angs.push(Math.atan2(mol.atomY(nbr) - cy, mol.atomX(nbr) - cx));
            angs = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.sortAngles)(angs);
            for (let n = 0; n < angs.length; n++) {
                let th1 = angs[n], th2 = angs[n < angs.length - 1 ? n + 1 : 0];
                thsnap.push(th1 + 0.5 * (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleDiffPos)(th2, th1));
            }
        }
        let theta = Math.atan2(dy, dx);
        let bestTheta = 0, bestDelta = Number.MAX_VALUE;
        for (let th of thsnap) {
            let delta = Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleDiff)(th, theta));
            if (delta < bestDelta) {
                bestTheta = th;
                bestDelta = delta;
            }
        }
        return SketchUtil.positionSimpleRing(mol, rsz, mol.atomX(atom), mol.atomY(atom), bestTheta);
    }
    static proposeBondRing(mol, rsz, bond, dx, dy) {
        let bfr = mol.bondFrom(bond), bto = mol.bondTo(bond);
        let bx = mol.atomX(bto) - mol.atomX(bfr), by = mol.atomY(bto) - mol.atomY(bfr);
        let sign = dx * by - dy * bx;
        let delta = sign > 0 ? -90 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD : 90 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD;
        let theta = Math.atan2(by, bx) + delta;
        let dth = _util_util__WEBPACK_IMPORTED_MODULE_1__.TWOPI / rsz;
        let rad = _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND / (2.0 * Math.sin(0.5 * dth)), brad = rad * Math.cos(0.5 * dth);
        let cx = 0.5 * (mol.atomX(bfr) + mol.atomX(bto)) + brad * Math.cos(theta);
        let cy = 0.5 * (mol.atomY(bfr) + mol.atomY(bto)) + brad * Math.sin(theta);
        let rx = [], ry = [];
        for (let n = 0; n < rsz; n++) {
            let th = theta - Math.PI + (n - 0.5) * dth;
            rx.push(cx + Math.cos(th) * rad);
            ry.push(cy + Math.sin(th) * rad);
        }
        let [i1, i2] = sign < 0 ? [bfr, bto] : [bto, bfr];
        rx[0] = mol.atomX(i1);
        ry[0] = mol.atomY(i1);
        rx[1] = mol.atomX(i2);
        ry[1] = mol.atomY(i2);
        return [rx, ry];
    }
    static positionSimpleRing(mol, rsz, x, y, theta) {
        let dth = _util_util__WEBPACK_IMPORTED_MODULE_1__.TWOPI / rsz;
        let rad = _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND / (2 * Math.sin(0.5 * dth));
        let cx = x + rad * Math.cos(theta), cy = y + rad * Math.sin(theta);
        let rx = [], ry = [];
        for (let n = 0; n < rsz; n++) {
            let th = theta - Math.PI + n * dth;
            rx.push(cx + Math.cos(th) * rad);
            ry.push(cy + Math.sin(th) * rad);
        }
        return [rx, ry];
    }
    static guidelineSprouts(mol, atom) {
        let sprouts = [];
        let angs = [], ords = [];
        for (let n = 0; n < 3; n++) {
            angs.push(SketchUtil.allViableDirections(mol, atom, n + 1));
            ords.push([n + 1]);
            for (let i = 0; i < n; i++)
                if (angs[i] != null && _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.equals(angs[n], angs[i])) {
                    angs[n] = null;
                    ords[i].push(n + 1);
                }
        }
        const cx = mol.atomX(atom), cy = mol.atomY(atom);
        for (let n = 0; n < 3; n++)
            if (angs[n] != null) {
                let sprout = {
                    atom: atom,
                    orders: ords[n],
                    x: [],
                    y: [],
                };
                for (let i = 0; i < angs[n].length; i++) {
                    sprout.x[i] = cx + Math.cos(angs[n][i]) * _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND;
                    sprout.y[i] = cy + Math.sin(angs[n][i]) * _Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND;
                }
                sprouts.push(sprout);
            }
        return sprouts;
    }
}
SketchUtil.GEOM_ANGLES = [
    [0, 180 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD],
    [0, 120 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD],
    [0, 120 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 240 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD],
    [0, 90 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 150 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 240 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD],
    [0, 120 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 180 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 240 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD],
    [0, 90 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 180 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 270 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD],
    [0, 90 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 150 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 210 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 270 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD],
    [0, 60 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 90 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 180 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 210 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD],
    [0, 60 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 120 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 180 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 240 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 300 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD],
    [0, 45 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 90 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 180 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 225 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD, 270 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD]
];


/***/ }),

/***/ "./src/mol/StereoGroup.ts":
/*!********************************!*\
  !*** ./src/mol/StereoGroup.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   STEREOGROUP_EXTRA_RACEMIC: () => (/* binding */ STEREOGROUP_EXTRA_RACEMIC),
/* harmony export */   STEREOGROUP_EXTRA_RELATIVE: () => (/* binding */ STEREOGROUP_EXTRA_RELATIVE),
/* harmony export */   StereoGroup: () => (/* binding */ StereoGroup)
/* harmony export */ });
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _Molecule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Molecule */ "./src/mol/Molecule.ts");


const STEREOGROUP_EXTRA_RACEMIC = 'xCHIRAC:';
const STEREOGROUP_EXTRA_RELATIVE = 'xCHIREL:';
class StereoGroup {
    static hasStereoGroups(mol) {
        for (let n = 1; n <= mol.numAtoms; n++) {
            let extra = mol.atomExtra(n);
            if (extra != null)
                for (let str of extra)
                    if (str.startsWith(STEREOGROUP_EXTRA_RACEMIC) || str.startsWith(STEREOGROUP_EXTRA_RELATIVE))
                        return true;
        }
        return false;
    }
    constructor(mol) {
        this.mol = mol;
        this.chiRac = new Map();
        this.chiRel = new Map();
        this.mol = mol;
        for (let n = 1; n <= mol.numAtoms; n++) {
            let extra = mol.atomExtra(n);
            if (extra != null)
                for (let str of extra) {
                    if (str.startsWith(STEREOGROUP_EXTRA_RACEMIC)) {
                        let grp = parseInt(str.substring(STEREOGROUP_EXTRA_RACEMIC.length));
                        if (grp > 0)
                            this.chiRac.set(grp, _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.append(this.chiRac.get(grp), n));
                    }
                    else if (str.startsWith(STEREOGROUP_EXTRA_RELATIVE)) {
                        let grp = parseInt(str.substring(STEREOGROUP_EXTRA_RELATIVE.length));
                        if (grp > 0)
                            this.chiRel.set(grp, _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.append(this.chiRel.get(grp), n));
                    }
                }
        }
        for (let [grp, atoms] of this.chiRac.entries()) {
            for (let n = atoms.length - 1; n >= 0; n--)
                if (!this.atomHasWedge(atoms[n]))
                    atoms.splice(n, 1);
            if (atoms.length > 0)
                this.chiRac.set(grp, atoms);
            else
                this.chiRac.delete(grp);
        }
        for (let [grp, atoms] of this.chiRel.entries()) {
            for (let n = atoms.length - 1; n >= 0; n--)
                if (!this.atomHasWedge(atoms[n]))
                    atoms.splice(n, 1);
            if (atoms.length > 0)
                this.chiRel.set(grp, atoms);
            else
                this.chiRel.delete(grp);
        }
    }
    getRacemicGroups() { return Array.from(this.chiRac.keys()); }
    getRelativeGroups() { return Array.from(this.chiRel.keys()); }
    getRacemicAtoms() { return Array.from(this.chiRac.values()); }
    getRelativeAtoms() { return Array.from(this.chiRel.values()); }
    getRacemicGroupAtoms(grp) { return this.chiRac.get(grp); }
    getRelativeGroupAtoms(grp) { return this.chiRel.get(grp); }
    rewriteMolecule() {
        for (let n = 1; n <= this.mol.numAtoms; n++) {
            let extra = this.mol.atomExtra(n);
            let modified = false;
            for (let i = extra.length - 1; i >= 0; i--) {
                if (extra[i].startsWith(STEREOGROUP_EXTRA_RACEMIC) || extra[i].startsWith(STEREOGROUP_EXTRA_RELATIVE)) {
                    extra.splice(i, 1);
                    modified = true;
                }
            }
            if (modified)
                this.mol.setAtomExtra(n, extra);
        }
        for (let [grp, atoms] of this.chiRac.entries()) {
            for (let a of atoms)
                this.mol.setAtomExtra(a, [...this.mol.atomExtra(a), STEREOGROUP_EXTRA_RACEMIC + grp]);
        }
        for (let [grp, atoms] of this.chiRel.entries()) {
            for (let a of atoms)
                this.mol.setAtomExtra(a, [...this.mol.atomExtra(a), STEREOGROUP_EXTRA_RELATIVE + grp]);
        }
    }
    harmoniseNumbering(other) {
        let groups = other.getRacemicGroups();
        let stash = this.getRacemicAtoms();
        this.chiRac.clear();
        for (let atoms of stash) {
            let grp = this.nextIdentifier(groups);
            this.chiRac.set(grp, atoms);
            groups.push(grp);
        }
        groups = other.getRelativeGroups();
        stash = this.getRelativeAtoms();
        this.chiRel.clear();
        for (let atoms of stash) {
            let grp = this.nextIdentifier(groups);
            this.chiRel.set(grp, atoms);
            groups.push(grp);
        }
    }
    createRacemic(atoms) {
        let grp = this.nextIdentifier(this.getRacemicGroups());
        this.chiRac.set(grp, atoms);
        return grp;
    }
    createRelative(atoms) {
        let grp = this.nextIdentifier(this.getRelativeGroups());
        this.chiRel.set(grp, atoms);
        return grp;
    }
    removeRacemic(grp) {
        this.chiRac.delete(grp);
    }
    removeRelative(grp) {
        this.chiRel.delete(grp);
    }
    static removeAll(mol) {
        for (let n = 1; n <= mol.numAtoms; n++) {
            let extra = mol.atomExtra(n);
            let modified = false;
            for (let i = extra.length - 1; i >= 0; i--) {
                if (!extra[i].startsWith(STEREOGROUP_EXTRA_RACEMIC) && !extra[i].startsWith(STEREOGROUP_EXTRA_RELATIVE))
                    continue;
                extra.splice(i, 1);
                modified = true;
            }
            if (modified)
                mol.setAtomExtra(n, extra);
        }
    }
    atomHasWedge(atom) {
        if (this.mol.is3D())
            return true;
        let hasWedge = false;
        for (let b of this.mol.atomAdjBonds(atom)) {
            let bt = this.mol.bondType(b);
            if (bt == _Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.BONDTYPE_UNKNOWN)
                return false;
            if (this.mol.bondFrom(b) != atom)
                continue;
            if (bt == _Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.BONDTYPE_INCLINED || bt == _Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.BONDTYPE_DECLINED)
                hasWedge = true;
        }
        return hasWedge;
    }
    nextIdentifier(inkeys) {
        if (inkeys.length == 0)
            return 1;
        let keys = _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.sorted(inkeys);
        for (let n = 0; n < keys.length - 1; n++)
            if (keys[n + 1] != keys[n] + 1)
                return keys[n] + 1;
        return keys[keys.length - 1] + 1;
    }
}


/***/ }),

/***/ "./src/mol/Stereochemistry.ts":
/*!************************************!*\
  !*** ./src/mol/Stereochemistry.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Stereochemistry: () => (/* binding */ Stereochemistry)
/* harmony export */ });
/* harmony import */ var _util_Geom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Geom */ "./src/util/Geom.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _Chemistry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Chemistry */ "./src/mol/Chemistry.ts");
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");






class Stereochemistry {
    constructor(meta) {
        this.meta = meta;
        this.mol = meta.mol;
        this.priority = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, this.mol.numAtoms);
        this.chiralTetra = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(Stereochemistry.STEREO_NONE, this.mol.numAtoms);
        this.cistransBond = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(Stereochemistry.STEREO_NONE, this.mol.numBonds);
        this.squarePlanar = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(Stereochemistry.STEREO_NONE, this.mol.numAtoms);
    }
    calculate() {
        this.isH = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.booleanArray(false, this.mol.numAtoms);
        for (let n = this.mol.numAtoms; n >= 1; n--)
            this.isH[n - 1] = this.mol.atomElement(n) == 'H';
        this.buildPriority();
        this.buildTetraChirality();
        this.buildBondCisTrans();
        this.buildPlanarCisTrans();
        this.buildOctaChirality();
    }
    atomPriority(atom) { return this.priority[atom - 1]; }
    atomTetraChirality(atom) { return this.chiralTetra[atom - 1]; }
    bondSideStereo(bond) { return this.cistransBond[bond - 1]; }
    atomPlanarStereo(atom) { return this.squarePlanar[atom - 1]; }
    getPriorities() { return this.priority.slice(0); }
    getAtomTetraChiral() { return this.chiralTetra.slice(0); }
    getBondSideStereo() { return this.cistransBond.slice(0); }
    static create(meta) {
        let stereo = new Stereochemistry(meta);
        stereo.calculate();
        return stereo;
    }
    static rubricTetrahedral(mol, atom) {
        if (mol.atomAdjCount(atom) < 3 || mol.atomAdjCount(atom) + mol.atomHydrogens(atom) != 4)
            return null;
        let adjBonds = mol.atomAdjBonds(atom);
        let hasWedge = false;
        for (let n = 0; n < adjBonds.length; n++) {
            let bt = mol.bondType(adjBonds[n]);
            if (bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_UNKNOWN)
                return null;
            if (mol.bondFrom(adjBonds[n]) != atom)
                continue;
            if (bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_INCLINED || bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_DECLINED)
                hasWedge = true;
        }
        if (!hasWedge && !mol.is3D())
            return null;
        let adj = mol.atomAdjList(atom);
        let x = [0, 0, 0, 0];
        let y = [0, 0, 0, 0];
        let z = [0, 0, 0, 0];
        let numShort = 0, numWedges = 0;
        for (let n = 0; n < adjBonds.length; n++) {
            const bfr = mol.bondFrom(adjBonds[n]), bt = mol.bondType(adjBonds[n]);
            x[n] = mol.atomX(adj[n]) - mol.atomX(atom);
            y[n] = mol.atomY(adj[n]) - mol.atomY(atom);
            if (mol.is3D()) {
                z[n] = mol.atomZ(adj[n]) - mol.atomZ(atom);
            }
            else if (bfr == atom) {
                if (bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_INCLINED) {
                    z[n] = 1;
                    numWedges++;
                }
                else if (bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_DECLINED) {
                    z[n] = -1;
                    numWedges++;
                }
            }
            let dsq = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.norm_xyz)(x[n], y[n], z[n]);
            if (dsq < 0.01 * 0.01) {
                numShort++;
                if (numShort > 1)
                    return null;
            }
        }
        if (adjBonds.length == 3) {
            adj.push(0);
            if (!mol.is3D() && numWedges == 1) {
                let th0 = Math.atan2(y[0], x[0]), th1 = Math.atan2(y[1], x[1]), th2 = Math.atan2(y[2], x[2]);
                let i1 = 1, i2 = 2;
                if ((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleDiffPos)(th1, th0) > (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleDiffPos)(th2, th0)) {
                    i2 = 1;
                    i1 = 2;
                }
                x[0] = 1.5;
                y[0] = 0;
                x[1] = -0.75;
                y[i1] = 1.3;
                x[2] = -0.75;
                y[i2] = -1.3;
            }
            else {
                x[3] = -(x[0] + x[1] + x[2]);
                y[3] = -(y[0] + y[1] + y[2]);
                z[3] = -(z[0] + z[1] + z[2]);
                let dsq = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.norm2_xyz)(x[3], y[3], z[3]);
                if (dsq < 0.01 * 0.01)
                    return null;
                let inv = 1.0 / Math.sqrt(dsq);
                x[3] *= inv;
                y[3] *= inv;
                z[3] *= inv;
            }
        }
        let one = 0, two = 0;
        for (let i = 1; i <= 6; i++) {
            let a = 0, b = 0;
            if (i == 1) {
                a = 1;
                b = 2;
            }
            else if (i == 2) {
                a = 2;
                b = 3;
            }
            else if (i == 3) {
                a = 3;
                b = 1;
            }
            else if (i == 4) {
                a = 2;
                b = 1;
            }
            else if (i == 5) {
                a = 3;
                b = 2;
            }
            else if (i == 6) {
                a = 1;
                b = 3;
            }
            let xx = y[a] * z[b] - y[b] * z[a] - x[0];
            let yy = z[a] * x[b] - z[b] * x[a] - y[0];
            let zz = x[a] * y[b] - x[b] * y[a] - z[0];
            if (i <= 3)
                one += xx * xx + yy * yy + zz * zz;
            else
                two += xx * xx + yy * yy + zz * zz;
        }
        if (two > one)
            _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.swap(adj, 2, 3);
        return adj;
    }
    static rubricSquarePlanar(mol, atom) {
        if (mol.atomAdjCount(atom) != 4)
            return null;
        if (!mol.is3D()) {
            let ninc = 0, ndec = 0;
            for (let b of mol.atomAdjBonds(atom)) {
                let bt = mol.bondType(b);
                if (bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_INCLINED)
                    ninc++;
                else if (bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_DECLINED)
                    ndec++;
            }
            if (ninc == 2 && ndec == 2) { }
            else if (ninc == 2 && ndec == 0) { }
            else if (ninc == 0 && ndec == 2) { }
            else
                return null;
        }
        let adj = mol.atomAdjList(atom);
        let v0 = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.atomVec3(mol, atom);
        let v1 = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sub(_mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.atomVec3(mol, adj[0]), v0);
        let v2 = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sub(_mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.atomVec3(mol, adj[1]), v0);
        let v3 = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sub(_mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.atomVec3(mol, adj[2]), v0);
        let v4 = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sub(_mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.atomVec3(mol, adj[3]), v0);
        for (let v of [v1, v2, v3, v4]) {
            let dsq = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.norm2_xyz)(v[0], v[1], v[2]);
            if (dsq < 0.01 * 0.01)
                continue;
            let inv = 1.0 / Math.sqrt(dsq);
            v[0] *= inv;
            v[1] *= inv;
            v[2] *= inv;
        }
        let d2 = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.dist2(v1, v2), d3 = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.dist2(v1, v3), d4 = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.dist2(v1, v4);
        if (d2 > d3 && d2 >= d4) {
            _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.swap(adj, 1, 2);
            [v2, v3] = [v3, v2];
        }
        else if (d4 > d3) {
            _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.swap(adj, 3, 2);
            [v3, v4] = [v4, v3];
        }
        const MIN_ANGLE = (mol.is3D() ? 80 : 45) * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD;
        const MAX_ANGLE = (mol.is3D() ? 100 : 135) * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD;
        const th12 = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.acuteAngle(v1, v2);
        if (th12 < MIN_ANGLE || th12 > MAX_ANGLE)
            return null;
        const th23 = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.acuteAngle(v2, v3);
        if (th23 < MIN_ANGLE || th23 > MAX_ANGLE)
            return null;
        const th34 = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.acuteAngle(v3, v4);
        if (th34 < MIN_ANGLE || th34 > MAX_ANGLE)
            return null;
        const th41 = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.acuteAngle(v4, v1);
        if (th41 < MIN_ANGLE || th41 > MAX_ANGLE)
            return null;
        return adj;
    }
    static rubricBipyrimidal(mol, atom) {
        const nadj = mol.atomAdjCount(atom);
        if (nadj != 4 && nadj != 5)
            return null;
        let atom2 = 0, atom3 = 0;
        let adj = mol.atomAdjList(atom), bonds = mol.atomAdjBonds(atom);
        if (!mol.is3D()) {
            for (let n = 0; n < adj.length; n++) {
                if (mol.bondType(bonds[n]) == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_INCLINED) {
                    if (atom2 > 0)
                        return null;
                    atom2 = adj[n];
                }
                else if (mol.bondType(bonds[n]) == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_DECLINED) {
                    if (atom3 > 0)
                        return null;
                    atom3 = adj[n];
                }
            }
            if (atom2 == 0 || atom3 == 0)
                return null;
            let th1 = Math.atan2(mol.atomY(atom2) - mol.atomY(atom), mol.atomX(atom2) - mol.atomX(atom));
            let th2 = Math.atan2(mol.atomY(atom3) - mol.atomY(atom), mol.atomX(atom3) - mol.atomX(atom));
            if (Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_1__.angleDiff)(th1, th2)) > 160 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD)
                return null;
        }
        let v0 = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.atomVec3(mol, atom);
        let v = [[], [], [], [], []];
        const THRESH = 0.1;
        for (let n = 0; n < nadj; n++) {
            v[n] = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sub(_mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.atomVec3(mol, adj[n]), v0);
            const mag = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.magnitude(v[n]);
            if (mag < THRESH)
                return null;
            _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.mulBy(v[n], 1.0 / mag);
            if (adj[n] == atom2)
                v[n][2] += 1;
            else if (adj[n] == atom3)
                v[n][2] -= 1;
        }
        let atom4 = 0, atom5 = 0;
        const ANGLE_OPPOSITE = 175 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD;
        for (let i = 0; i < nadj - 1; i++)
            if (adj[i] != atom2 && adj[i] != atom3) {
                for (let j = i + 1; j < nadj; j++)
                    if (adj[j] != atom2 && adj[j] != atom3) {
                        let theta = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.acuteAngle(v[i], v[j]);
                        if (theta > ANGLE_OPPOSITE) {
                            if (atom4 != 0)
                                return null;
                            atom4 = adj[i];
                            atom5 = adj[j];
                        }
                    }
            }
        if (mol.is3D()) {
            for (let a of adj)
                if (a != atom4 && a != atom5) {
                    if (atom2 == 0)
                        atom2 = a;
                    else if (atom3 == 0)
                        atom3 = a;
                }
        }
        if (!atom4 || !atom5)
            return null;
        let v1 = null;
        let v2 = v[adj.indexOf(atom2)];
        let v3 = v[adj.indexOf(atom3)];
        let v4 = v[adj.indexOf(atom4)];
        let v5 = v[adj.indexOf(atom5)];
        let atom1 = 0;
        if (nadj == 5) {
            for (let n = 0; n < nadj; n++)
                if (adj[n] != atom2 && adj[n] != atom3 && adj[n] != atom4 && adj[n] != atom5) {
                    atom1 = adj[n];
                    v1 = v[n];
                    break;
                }
        }
        else {
            v1 = [0, 0, 0];
            v1 = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sub(v1, v2);
            v1 = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sub(v1, v3);
            const mag = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.magnitude(v1);
            if (mag < THRESH)
                return null;
            _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.mulBy(v1, 1.0 / mag);
        }
        let v45 = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sub(v5, v4);
        let cross = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.crossProduct(v45, v1);
        let dsq2 = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.dist2(cross, v2), dsq3 = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.dist2(cross, v3);
        if (dsq2 < dsq3)
            return [atom1, atom2, atom3, atom4, atom5];
        else
            return [atom1, atom2, atom3, atom5, atom4];
    }
    static rubricOctahedral(mol, atom) {
        const nadj = mol.atomAdjCount(atom);
        if (nadj != 5 && nadj != 6)
            return null;
        let adj = mol.atomAdjList(atom), bonds = mol.atomAdjBonds(atom);
        if (nadj == 5) {
            adj.push(0);
            bonds.push(0);
        }
        if (!mol.is3D()) {
            let numWedges = 0;
            for (let b of bonds)
                if (b > 0) {
                    const bt = mol.bondType(b);
                    if (bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_INCLINED || bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_DECLINED)
                        numWedges++;
                }
            if ((nadj == 5 && numWedges < 1) || (nadj == 6 && numWedges < 2))
                return null;
        }
        const THRESH = 0.1;
        let v0 = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.atomVec3(mol, atom);
        let v = [[], [], [], [], [], []];
        for (let n = 0; n < nadj; n++) {
            v[n] = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.atomVec3(mol, adj[n]);
            _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.subFromArray(v[n], v0);
            let mag = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.magnitude(v[n]);
            if (mag < THRESH)
                return null;
            _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.mulBy(v[n], 1 / mag);
            let bt = mol.bondType(bonds[n]);
            if (bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_INCLINED) {
                if (mol.bondFrom(bonds[n]) == atom)
                    v[n][2] += 1;
                else
                    v[n][2] -= 1;
            }
            else if (bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_DECLINED) {
                if (mol.bondFrom(bonds[n]) == atom)
                    v[n][2] -= 1;
                else
                    v[n][2] += 1;
            }
        }
        if (nadj == 5) {
            v[5] = [0, 0, 0];
            for (let n = 0; n < 5; n++)
                _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.subFromArray(v[5], v[n]);
            let mag = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.magnitude(v[5]);
            if (mag < THRESH)
                return null;
            _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.mulBy(v[5], 1 / mag);
        }
        let slots = [-1, -1, -1, -1, 0, 1];
        let bestOpposite = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.acuteAngle(v[0], v[1]);
        for (let i = 0; i < 5; i++)
            for (let j = (i == 0 ? 2 : i + 1); j < 6; j++) {
                let theta = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.acuteAngle(v[i], v[j]);
                if (theta > bestOpposite) {
                    slots[4] = i;
                    slots[5] = j;
                    bestOpposite = theta;
                }
            }
        let axial = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sub(v[slots[5]], v[slots[4]]);
        let bestOrthogonal = Number.POSITIVE_INFINITY;
        for (let n = 0; n < 6; n++)
            if (n != slots[4] && n != slots[5]) {
                let delta = Math.abs((90 * _util_util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD) - _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.acuteAngle(v[n], axial));
                if (delta < bestOrthogonal) {
                    slots[0] = n;
                    bestOrthogonal = delta;
                }
            }
        for (let s = 1; s <= 2; s++) {
            let cross = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.crossProduct(axial, v[slots[s - 1]]);
            let bestOrient = Number.POSITIVE_INFINITY;
            for (let n = 0; n < 6; n++) {
                if (n == slots[4] || n == slots[5] || n == slots[0] || n == slots[1])
                    continue;
                let delta = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.acuteAngle(v[n], cross);
                if (delta < bestOrient) {
                    slots[s] = n;
                    bestOrient = delta;
                }
            }
        }
        for (let n = 0; n < 6; n++)
            if (slots.indexOf(n) < 0) {
                slots[3] = n;
                break;
            }
        let rubric = [0, 0, 0, 0, 0, 0];
        for (let n = 0; n < 6; n++)
            rubric[n] = slots[n] < 0 ? 0 : adj[slots[n]];
        return rubric;
    }
    static rubricBondSides(mol, bond) {
        const bfr = mol.bondFrom(bond), bto = mol.bondTo(bond);
        const nfr = mol.atomAdjCount(bfr), nto = mol.atomAdjCount(bto);
        if (nfr < 2 || nfr > 3 || nto < 2 || nto > 3)
            return null;
        let adj1 = mol.atomAdjList(bfr), adj2 = mol.atomAdjList(bto);
        let f1 = 0, f2 = 0, t1 = 0, t2 = 0;
        for (let i = 0; i < adj1.length; i++) {
            if (adj1[i] != bto) {
                if (f1 == 0)
                    f1 = adj1[i];
                else
                    f2 = adj1[i];
            }
        }
        for (let i = 0; i < adj2.length; i++) {
            if (adj2[i] != bfr) {
                if (t1 == 0)
                    t1 = adj2[i];
                else
                    t2 = adj2[i];
            }
        }
        if (f1 > 0 && f2 > 0 && mol.atomElement(f1) == 'H') {
            let f = f1;
            f1 = f2;
            f2 = f;
        }
        if (t1 > 0 && t2 > 0 && mol.atomElement(t1) == 'H') {
            let t = t1;
            t1 = t2;
            t2 = t;
        }
        let vfr = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.atomVec3(mol, bfr), vto = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.atomVec3(mol, bto);
        let vbond = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sub(vto, vfr);
        let vf1 = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sub(_mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.atomVec3(mol, f1), vfr), vt1 = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sub(_mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.atomVec3(mol, t1), vto);
        const THRESHSQ = 0.1 * 0.1;
        let xf1 = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.crossProduct(vf1, vbond);
        if (_util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.magnitude2(xf1) < THRESHSQ)
            return null;
        let xt1 = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.crossProduct(vt1, vbond);
        if (_util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.magnitude2(xt1) < THRESHSQ)
            return null;
        let xf1N = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.neg(xf1);
        let keepF1T1 = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.dist2(xf1, xt1) < _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.dist2(xf1N, xt1);
        let keepF2T1 = keepF1T1, keepF1T2 = keepF1T1, keepF2T2 = keepF1T1;
        let vf2 = null, vt2 = null, xf2 = null, xt2 = null, xf2N = null;
        if (f2 > 0) {
            vf2 = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sub(_mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.atomVec3(mol, f2), vfr);
            if (_util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.magnitude2(vf2) < THRESHSQ) {
                if (mol.atomElement(f2) != 'H')
                    return null;
            }
            else {
                xf2 = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.crossProduct(vf2, vbond);
                if (_util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.magnitude2(xf2) < THRESHSQ)
                    return null;
                xf2N = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.neg(xf2);
                keepF2T1 = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.dist2(xf2, xt1) > _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.dist2(xf2N, xt1);
            }
        }
        if (t2 > 0) {
            vt2 = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sub(_mol_MolUtil__WEBPACK_IMPORTED_MODULE_5__.MolUtil.atomVec3(mol, t2), vto);
            if (_util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.magnitude2(vt2) < THRESHSQ) {
                if (mol.atomElement(t2) != 'H')
                    return null;
            }
            else {
                xt2 = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.crossProduct(vt2, vbond);
                if (_util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.magnitude2(xt2) < THRESHSQ)
                    return null;
                keepF1T2 = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.dist2(xf1, xt2) > _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.dist2(xf1N, xt2);
            }
        }
        if (xf2 != null && xt2 != null) {
            keepF2T2 = _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.dist2(xf2, xt2) < _util_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.dist2(xf2N, xt2);
        }
        if (keepF1T1 && keepF2T1 && keepF1T2 && keepF2T2)
            return [f1, f2, t1, t2];
        if (!keepF1T1 && !keepF2T1 && !keepF1T2 && !keepF2T2)
            return [f1, f2, t2, t1];
        return null;
    }
    buildTetraChirality() {
        const mol = this.mol, na = mol.numAtoms, nb = mol.numBonds;
        let haswedge = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.booleanArray(false, na);
        for (let n = 1; n <= nb; n++) {
            if (mol.bondType(n) == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_INCLINED || mol.bondType(n) == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_DECLINED)
                haswedge[mol.bondFrom(n) - 1] = true;
        }
        skip_atom: for (let n = 1; n <= na; n++) {
            this.chiralTetra[n - 1] = Stereochemistry.STEREO_NONE;
            let adj = mol.atomAdjList(n);
            if (!(adj.length == 4 || (adj.length == 3 && mol.atomHydrogens(n) == 1)))
                continue;
            if (adj.length == 3 && (this.isH[adj[0] - 1] || this.isH[adj[1] - 1] || this.isH[adj[2] - 1]))
                continue;
            for (let i = 0; i < adj.length - 1; i++) {
                for (let j = i + 1; j < adj.length; j++) {
                    if (this.priority[adj[i] - 1] == this.priority[adj[j] - 1])
                        continue skip_atom;
                }
            }
            if (!haswedge[n - 1] && !mol.is3D()) {
                this.chiralTetra[n - 1] = Stereochemistry.STEREO_UNKNOWN;
                continue;
            }
            let rubric = Stereochemistry.rubricTetrahedral(mol, n);
            if (rubric == null)
                continue;
            let pri = [
                rubric[0] == 0 ? 0 : this.priority[rubric[0] - 1],
                rubric[1] == 0 ? 0 : this.priority[rubric[1] - 1],
                rubric[2] == 0 ? 0 : this.priority[rubric[2] - 1],
                rubric[3] == 0 ? 0 : this.priority[rubric[3] - 1]
            ];
            pri = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.idxSort(pri);
            let parity = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Permutation.parityIdentity(pri);
            this.chiralTetra[n - 1] = (parity & 1) == 0 ? Stereochemistry.STEREO_POS : Stereochemistry.STEREO_NEG;
        }
    }
    buildBondCisTrans() {
        const mol = this.mol, na = mol.numAtoms, nb = mol.numBonds;
        let sf = [0, 0], st = [0, 0];
        let ringMask = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.booleanArray(false, nb);
        for (let rsz = 3; rsz <= 7; rsz++) {
            for (let r of mol.findRingsOfSize(rsz)) {
                for (let n = 0; n < r.length; n++) {
                    let b = mol.findBond(r[n], r[n < r.length - 1 ? n + 1 : 0]);
                    ringMask[b - 1] = true;
                }
            }
        }
        skip_bond: for (let n = 1; n <= nb; n++) {
            this.cistransBond[n - 1] = Stereochemistry.STEREO_NONE;
            if (mol.bondOrder(n) != 2 || this.meta.isBondAromatic(n) || ringMask[n - 1])
                continue;
            let bfr = mol.bondFrom(n), bto = mol.bondTo(n);
            let adj1 = mol.atomAdjList(bfr), adj2 = mol.atomAdjList(bto);
            if (adj1.length <= 1 || adj2.length <= 1 || adj1.length > 3 || adj2.length > 3)
                continue;
            if (adj1.length == 2 && (this.isH[adj1[0] - 1] || this.isH[adj1[1] - 1]))
                continue;
            if (adj2.length == 2 && (this.isH[adj2[0] - 1] || this.isH[adj2[1] - 1]))
                continue;
            for (let i = 0; i < adj1.length - 1; i++)
                if (adj1[i] != bfr)
                    for (let j = i + 1; j < adj1.length; j++)
                        if (adj1[j] != bfr)
                            if (this.priority[adj1[i] - 1] == this.priority[adj1[j] - 1])
                                continue skip_bond;
            for (let i = 0; i < adj2.length - 1; i++)
                if (adj2[i] != bto)
                    for (let j = i + 1; j < adj2.length; j++)
                        if (adj2[j] != bto)
                            if (this.priority[adj2[i] - 1] == this.priority[adj2[j] - 1])
                                continue skip_bond;
            if (mol.bondType(n) == _mol_Molecule__WEBPACK_IMPORTED_MODULE_4__.Molecule.BONDTYPE_UNKNOWN) {
                this.cistransBond[n - 1] = Stereochemistry.STEREO_UNKNOWN;
                continue;
            }
            let rubric = Stereochemistry.rubricBondSides(mol, n);
            if (rubric == null)
                continue;
            let pf1 = rubric[0] == 0 ? 0 : this.priority[rubric[0] - 1];
            let pf2 = rubric[1] == 0 ? 0 : this.priority[rubric[1] - 1];
            let pt1 = rubric[2] == 0 ? 0 : this.priority[rubric[2] - 1];
            let pt2 = rubric[3] == 0 ? 0 : this.priority[rubric[3] - 1];
            this.cistransBond[n - 1] = ((pf1 < pf2) == (pt1 < pt2)) ? Stereochemistry.STEREO_POS : Stereochemistry.STEREO_NEG;
        }
    }
    buildPlanarCisTrans() {
        const mol = this.mol, na = mol.numAtoms, nb = mol.numBonds;
        skip_atom: for (let n = 1; n <= na; n++) {
            this.squarePlanar[n - 1] = Stereochemistry.STEREO_NONE;
            if (mol.atomAdjCount(n) != 4)
                continue;
            if (_Chemistry__WEBPACK_IMPORTED_MODULE_3__.Chemistry.ELEMENT_BLOCKS[mol.atomicNumber(n)] < 3)
                continue;
            let adj = mol.atomAdjList(n);
            for (let i = 0; i < adj.length; i++) {
                let count = 0;
                for (let j = 0; j < adj.length; j++) {
                    if (this.priority[adj[i] - 1] == this.priority[adj[j] - 1])
                        count++;
                }
                if (count >= 3)
                    continue skip_atom;
            }
            let rubric = Stereochemistry.rubricSquarePlanar(mol, n);
            if (rubric == null)
                continue;
            let pri = [
                rubric[0] == 0 ? 0 : this.priority[rubric[0] - 1],
                rubric[1] == 0 ? 0 : this.priority[rubric[1] - 1],
                rubric[2] == 0 ? 0 : this.priority[rubric[2] - 1],
                rubric[3] == 0 ? 0 : this.priority[rubric[3] - 1]
            ];
            let parity = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Permutation.parityOrder(pri);
            this.squarePlanar[n - 1] = (parity & 1) == 0 ? Stereochemistry.STEREO_POS : Stereochemistry.STEREO_NEG;
        }
    }
    buildOctaChirality() {
    }
    buildPriority() {
        const mol = this.mol, na = mol.numAtoms, nb = mol.numBonds;
        let cipgr = [];
        for (let n = 0; n < na; n++)
            cipgr.push(_util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(-1, mol.atomHydrogens(n + 1)));
        for (let n = 1; n <= nb; n++) {
            let bf = mol.bondFrom(n) - 1, bt = mol.bondTo(n) - 1, bo = mol.bondOrder(n);
            if (this.meta.isBondAromatic(n))
                bo = 2;
            if (bf != bt)
                for (let i = 0; i < bo; i++) {
                    cipgr[bf].push(bt);
                    cipgr[bt].push(bf);
                }
        }
        this.priority = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, na);
        let anyActualH = false;
        for (let n = 0; n < na; n++) {
            this.priority[n] = mol.atomicNumber(n + 1);
            if (this.priority[n] == 1)
                anyActualH = true;
        }
        let prigr = [];
        for (let n = 0; n < na; n++)
            prigr.push([]);
        while (true) {
            for (let n = 0; n < na; n++) {
                let cip = cipgr[n], pri = [];
                for (let i = 0; i < cip.length; i++)
                    pri.push(cip[i] < 0 ? 1 : this.priority[cip[i]]);
                _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sort(pri);
                prigr[n] = pri;
            }
            let groups = this.sortAndGroup(this.priority);
            let nextpri = anyActualH ? 0 : 1;
            let repartitioned = false;
            for (let n = 0; n < groups.length; n++) {
                let g = groups[n];
                for (let p = 0; p < g.length - 1;) {
                    const i1 = g[p], i2 = g[p + 1];
                    let cmp = 0, sz = Math.max(prigr[i1].length, prigr[i2].length);
                    for (let i = 0; i < sz; i++) {
                        let v1 = i < prigr[i1].length ? prigr[i1][i] : 0, v2 = i < prigr[i2].length ? prigr[i2][i] : 0;
                        if (v1 < v2) {
                            cmp = -1;
                            break;
                        }
                        if (v1 > v2) {
                            cmp = 1;
                            break;
                        }
                    }
                    if (cmp > 0) {
                        g[p] = i2;
                        g[p + 1] = i1;
                        if (p > 0)
                            p--;
                    }
                    else
                        p++;
                }
                for (let i = 0; i < g.length; i++) {
                    if (i == 0)
                        nextpri++;
                    else if (prigr[g[i]].length != prigr[g[i - 1]].length) {
                        nextpri++;
                        repartitioned = true;
                    }
                    else {
                        for (let j = 0; j < prigr[g[i]].length; j++)
                            if (prigr[g[i]][j] != prigr[g[i - 1]][j]) {
                                nextpri++;
                                repartitioned = true;
                                break;
                            }
                    }
                    this.priority[g[i]] = nextpri;
                }
            }
            if (!repartitioned)
                break;
        }
    }
    sortAndGroup(val) {
        let uset = new Set();
        for (let v of val)
            uset.add(v);
        let unique = Array.from(uset);
        _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sort(unique);
        let ret = [];
        for (let n = 0; n < unique.length; n++)
            ret.push([]);
        for (let n = 0; n < val.length; n++) {
            let grp = unique.indexOf(val[n]);
            ret[grp].push(n);
        }
        return ret;
    }
}
Stereochemistry.STEREO_NONE = 0;
Stereochemistry.STEREO_POS = 1;
Stereochemistry.STEREO_NEG = 2;
Stereochemistry.STEREO_UNKNOWN = 3;
Stereochemistry.STEREO_BROKEN = 4;
Stereochemistry.RUBRIC_EQUIV_TETRA = [
    [0, 1, 2, 3], [0, 2, 3, 1], [0, 3, 1, 2], [1, 0, 3, 2], [1, 2, 0, 3], [1, 3, 2, 0],
    [2, 0, 1, 3], [2, 1, 3, 0], [2, 3, 0, 1], [3, 0, 2, 1], [3, 1, 0, 2], [3, 2, 1, 0]
];
Stereochemistry.RUBRIC_EQUIV_SIDES = [
    [0, 1, 2, 3], [1, 0, 3, 2], [2, 3, 0, 1], [3, 2, 1, 0]
];
Stereochemistry.RUBRIC_EQUIV_SQUARE = [
    [0, 1, 2, 3], [0, 3, 2, 1], [1, 2, 3, 0], [1, 0, 3, 2],
    [2, 1, 0, 3], [2, 3, 0, 1], [3, 2, 1, 0], [3, 0, 1, 2]
];
Stereochemistry.RUBRIC_EQUIV_BIPY = [
    [0, 1, 2, 3, 4], [1, 2, 0, 3, 4], [2, 0, 1, 3, 4],
    [0, 2, 1, 4, 3], [1, 0, 2, 4, 3], [2, 1, 0, 4, 3],
];
Stereochemistry.RUBRIC_EQUIV_OCTA = [
    [0, 1, 2, 3, 4, 5], [0, 3, 2, 1, 5, 4], [0, 4, 2, 5, 3, 1], [0, 5, 2, 4, 1, 3],
    [1, 0, 3, 2, 5, 4], [1, 2, 3, 0, 4, 5], [1, 4, 3, 5, 0, 2], [1, 5, 3, 4, 2, 0],
    [2, 1, 0, 3, 5, 4], [2, 3, 0, 1, 4, 5], [2, 4, 0, 5, 1, 3], [2, 5, 0, 4, 3, 1],
    [3, 0, 1, 2, 4, 5], [3, 2, 1, 0, 5, 4], [3, 4, 1, 5, 2, 0], [3, 5, 1, 4, 0, 2],
    [4, 0, 5, 2, 1, 3], [4, 1, 5, 3, 2, 0], [4, 2, 5, 0, 3, 1], [4, 3, 5, 1, 0, 2],
    [5, 0, 4, 2, 3, 1], [5, 1, 4, 3, 0, 2], [5, 2, 4, 0, 1, 3], [5, 3, 4, 1, 2, 0]
];


/***/ }),

/***/ "./src/rxn/ExperimentMeta.ts":
/*!***********************************!*\
  !*** ./src/rxn/ExperimentMeta.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExperimentMeta: () => (/* binding */ ExperimentMeta),
/* harmony export */   ExperimentMetaApplic: () => (/* binding */ ExperimentMetaApplic),
/* harmony export */   ExperimentMetaRoleType: () => (/* binding */ ExperimentMetaRoleType),
/* harmony export */   ExperimentMetaType: () => (/* binding */ ExperimentMetaType),
/* harmony export */   ExperimentMetaValue: () => (/* binding */ ExperimentMetaValue)
/* harmony export */ });
/* harmony import */ var _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../io/MoleculeStream */ "./src/io/MoleculeStream.ts");

var ExperimentMetaType;
(function (ExperimentMetaType) {
    ExperimentMetaType["Role"] = "role";
    ExperimentMetaType["Pressure"] = "pressure";
    ExperimentMetaType["TurnoverNumber"] = "turnover_number";
    ExperimentMetaType["EnantiomericExcess"] = "enantiomeric_excess";
    ExperimentMetaType["Time"] = "time";
    ExperimentMetaType["Heat"] = "heat";
    ExperimentMetaType["Light"] = "light";
})(ExperimentMetaType || (ExperimentMetaType = {}));
var ExperimentMetaApplic;
(function (ExperimentMetaApplic) {
    ExperimentMetaApplic[ExperimentMetaApplic["Experiment"] = 0] = "Experiment";
    ExperimentMetaApplic[ExperimentMetaApplic["Step"] = 1] = "Step";
    ExperimentMetaApplic[ExperimentMetaApplic["Reactant"] = 2] = "Reactant";
    ExperimentMetaApplic[ExperimentMetaApplic["Reagent"] = 3] = "Reagent";
    ExperimentMetaApplic[ExperimentMetaApplic["Product"] = 4] = "Product";
})(ExperimentMetaApplic || (ExperimentMetaApplic = {}));
var ExperimentMetaValue;
(function (ExperimentMetaValue) {
    ExperimentMetaValue[ExperimentMetaValue["Boolean"] = 0] = "Boolean";
    ExperimentMetaValue[ExperimentMetaValue["Number"] = 1] = "Number";
    ExperimentMetaValue[ExperimentMetaValue["Optional"] = 2] = "Optional";
    ExperimentMetaValue[ExperimentMetaValue["String"] = 3] = "String";
})(ExperimentMetaValue || (ExperimentMetaValue = {}));
var ExperimentMetaRoleType;
(function (ExperimentMetaRoleType) {
    ExperimentMetaRoleType["Reagent"] = "reagent";
    ExperimentMetaRoleType["Catalyst"] = "catalyst";
    ExperimentMetaRoleType["Solvent"] = "solvent";
    ExperimentMetaRoleType["Adjunct"] = "adjunct";
})(ExperimentMetaRoleType || (ExperimentMetaRoleType = {}));
class ExperimentMeta {
    static unpackMeta(str) {
        if (!str)
            return [];
        let list = [];
        for (let line of str.split('\n'))
            if (line) {
                let eq = line.indexOf('=');
                let type = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(eq < 0 ? line : line.substring(0, eq));
                let value = eq < 0 ? null : _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skUnescape(line.substring(eq + 1));
                let vtype = this.VALUES[type];
                if (value != null && (vtype == ExperimentMetaValue.Number || vtype == ExperimentMetaValue.Optional))
                    value = parseFloat(value);
                list.push([type, value]);
            }
        list.sort((l1, l2) => l1[0].localeCompare(l2[0]));
        return list;
    }
    static packMeta(list) {
        let lines = [];
        for (let [type, value] of list) {
            if (value == null)
                lines.push(_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(type));
            else
                lines.push(_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(type) + '=' + _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream.skEscape(value.toString()));
        }
        return lines.join('\n');
    }
    static withMetaKey(metastr, type, value) {
        let list = this.unpackMeta(metastr);
        let item = list.find((look) => look[0] == type);
        if (value != null) {
            if (item)
                item[1] = value;
            else
                list.push([type, value]);
        }
        else {
            list = list.filter((look) => look[0] != type);
        }
        return this.packMeta(list);
    }
    static describeMeta(type, value) {
        let formatFloat = (val, maxSigFig) => {
            if (val == null)
                return '';
            if (val == 0)
                return '0';
            let digits = Math.ceil(-Math.log10(Math.abs(val)));
            digits = Math.max(0, Math.max(digits, maxSigFig));
            let str = val.toFixed(digits);
            if (str.indexOf('.') < 0)
                return str;
            while (str.endsWith('0'))
                str = str.substring(0, str.length - 1);
            if (str.endsWith('.'))
                str = str.substring(0, str.length - 1);
            return str;
        };
        if (type == ExperimentMetaType.Role) {
            if (!value)
                return null;
            return `role: ${value}`;
        }
        else if (type == ExperimentMetaType.Pressure) {
            if (value == null)
                return null;
            return `${formatFloat(value, 2)} atm`;
        }
        else if (type == ExperimentMetaType.TurnoverNumber) {
            if (value == null)
                return null;
            return `${formatFloat(value, 2)} turnover${value == 1 ? '' : 's'}`;
        }
        else if (type == ExperimentMetaType.EnantiomericExcess) {
            if (value == null)
                return null;
            return `${formatFloat(value, 2)}% ee`;
        }
        else if (type == ExperimentMetaType.Time) {
            if (value == null)
                return null;
            if (value < 1) {
                let mins = value * 60;
                return `${formatFloat(mins, 2)} min${mins == 1 ? '' : 's'}`;
            }
            else
                return `${formatFloat(value, 2)} hour${value == 1 ? '' : 's'}`;
        }
        else if (type == ExperimentMetaType.Heat) {
            if (value == null)
                return '\u{0394}';
            return `${formatFloat(value, 2)} \u{00B0}C`;
        }
        else if (type == ExperimentMetaType.Light) {
            if (value == null)
                return 'h\u{03BD}';
            return `${formatFloat(value, 2)} nm`;
        }
        return null;
    }
}
ExperimentMeta.APPLICABILITY = {
    [ExperimentMetaType.Role]: [ExperimentMetaApplic.Reagent],
    [ExperimentMetaType.Pressure]: [ExperimentMetaApplic.Reactant, ExperimentMetaApplic.Reagent],
    [ExperimentMetaType.TurnoverNumber]: [ExperimentMetaApplic.Reagent],
    [ExperimentMetaType.EnantiomericExcess]: [ExperimentMetaApplic.Product],
    [ExperimentMetaType.Time]: [ExperimentMetaApplic.Step],
    [ExperimentMetaType.Heat]: [ExperimentMetaApplic.Step],
    [ExperimentMetaType.Light]: [ExperimentMetaApplic.Step],
};
ExperimentMeta.NAMES = {
    [ExperimentMetaType.Role]: 'Role',
    [ExperimentMetaType.Pressure]: 'Pressure',
    [ExperimentMetaType.TurnoverNumber]: 'Turnover Number',
    [ExperimentMetaType.EnantiomericExcess]: 'Enantiomeric Excess',
    [ExperimentMetaType.Time]: 'Time',
    [ExperimentMetaType.Heat]: 'Heat',
    [ExperimentMetaType.Light]: 'Light',
};
ExperimentMeta.UNITS = {
    [ExperimentMetaType.Pressure]: 'atm',
    [ExperimentMetaType.TurnoverNumber]: null,
    [ExperimentMetaType.EnantiomericExcess]: '%',
    [ExperimentMetaType.Time]: 'hr',
    [ExperimentMetaType.Heat]: '\u{00B0}C',
    [ExperimentMetaType.Light]: 'nm',
};
ExperimentMeta.VALUES = {
    [ExperimentMetaType.Role]: ExperimentMetaValue.String,
    [ExperimentMetaType.Pressure]: ExperimentMetaValue.Number,
    [ExperimentMetaType.TurnoverNumber]: ExperimentMetaValue.Number,
    [ExperimentMetaType.EnantiomericExcess]: ExperimentMetaValue.Number,
    [ExperimentMetaType.Time]: ExperimentMetaValue.Number,
    [ExperimentMetaType.Heat]: ExperimentMetaValue.Optional,
    [ExperimentMetaType.Light]: ExperimentMetaValue.Optional,
};


/***/ }),

/***/ "./src/rxn/QuantityCalc.ts":
/*!*********************************!*\
  !*** ./src/rxn/QuantityCalc.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GreenMetrics: () => (/* binding */ GreenMetrics),
/* harmony export */   QuantityCalc: () => (/* binding */ QuantityCalc),
/* harmony export */   QuantityCalcComp: () => (/* binding */ QuantityCalcComp),
/* harmony export */   QuantityCalcRole: () => (/* binding */ QuantityCalcRole),
/* harmony export */   QuantityCalcStat: () => (/* binding */ QuantityCalcStat)
/* harmony export */ });
/* harmony import */ var _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../aspect/Experiment */ "./src/aspect/Experiment.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");




var QuantityCalcRole;
(function (QuantityCalcRole) {
    QuantityCalcRole[QuantityCalcRole["Primary"] = 1] = "Primary";
    QuantityCalcRole[QuantityCalcRole["Secondary"] = 2] = "Secondary";
    QuantityCalcRole[QuantityCalcRole["Product"] = 3] = "Product";
    QuantityCalcRole[QuantityCalcRole["Independent"] = 4] = "Independent";
})(QuantityCalcRole || (QuantityCalcRole = {}));
var QuantityCalcStat;
(function (QuantityCalcStat) {
    QuantityCalcStat[QuantityCalcStat["Unknown"] = 0] = "Unknown";
    QuantityCalcStat[QuantityCalcStat["Actual"] = 1] = "Actual";
    QuantityCalcStat[QuantityCalcStat["Virtual"] = 2] = "Virtual";
    QuantityCalcStat[QuantityCalcStat["Conflict"] = 3] = "Conflict";
})(QuantityCalcStat || (QuantityCalcStat = {}));
class QuantityCalcComp {
    constructor(comp, step, type, idx) {
        this.comp = comp;
        this.step = step;
        this.type = type;
        this.idx = idx;
        this.role = 0;
        this.molw = 0;
        this.valueEquiv = 0;
        this.statEquiv = 0;
        this.valueMass = QuantityCalc.UNSPECIFIED;
        this.statMass = 0;
        this.valueVolume = QuantityCalc.UNSPECIFIED;
        this.statVolume = 0;
        this.valueMoles = QuantityCalc.UNSPECIFIED;
        this.statMoles = 0;
        this.valueDensity = QuantityCalc.UNSPECIFIED;
        this.statDensity = 0;
        this.valueConc = QuantityCalc.UNSPECIFIED;
        this.statConc = 0;
        this.valueYield = QuantityCalc.UNSPECIFIED;
        this.statYield = 0;
    }
}
class GreenMetrics {
    constructor() {
        this.step = 0;
        this.idx = 0;
        this.massReact = [];
        this.massProd = [];
        this.massWaste = [];
        this.massProdWaste = [];
        this.molwReact = [];
        this.molwProd = [];
        this.impliedWaste = 0;
        this.isBlank = false;
    }
}
class QuantityCalc {
    static isStoichZero(stoich) {
        if (this.isStoichUnity(stoich))
            return false;
        if (parseFloat(stoich) == 0)
            return true;
        return false;
    }
    static isStoichUnity(stoich) {
        if (!stoich || stoich == '1')
            return true;
        let [numer, denom] = this.extractStoichFraction(stoich);
        return numer != 0 && numer == denom;
    }
    static extractStoichFraction(stoich) {
        if (!stoich)
            return [1, 1];
        let numer = 1, denom = 1;
        let i = stoich.indexOf('/');
        if (i < 0) {
            let v = parseFloat(stoich);
            if (v >= 0)
                numer = v;
        }
        else {
            let v1 = parseFloat(stoich.substring(0, i)), v2 = parseFloat(stoich.substring(i + 1));
            if (v1 >= 0)
                numer = v1;
            if (v2 >= 0)
                denom = v2;
        }
        return [numer, denom];
    }
    static extractStoichValue(stoich) {
        let [numer, denom] = this.extractStoichFraction(stoich);
        return denom <= 1 ? numer : numer / denom;
    }
    static stoichAsRatio(stoich) {
        let [numer, denom] = this.extractStoichFraction(stoich);
        if (numer == Math.floor(numer))
            return [numer, denom];
        return this.stoichFractAsRatio(numer);
    }
    static stoichFractAsRatio(fract) {
        if (fract == Math.floor(fract))
            return [fract, 1];
        const MAX_DENOM = QuantityCalc.MAX_DENOM;
        if (QuantityCalc.RATIO_FRACT == null) {
            QuantityCalc.RATIO_FRACT = [];
            for (let p = 0, j = 2; j <= MAX_DENOM; j++)
                for (let i = 1; i < j && i < MAX_DENOM - 1; i++)
                    QuantityCalc.RATIO_FRACT.push(i * 1.0 / j);
        }
        let whole = Math.floor(fract);
        let resid = fract - whole;
        let bestDiff = Number.MAX_VALUE;
        let bestOver = 1, bestUnder = 1;
        for (let p = 0, j = 2; j <= MAX_DENOM; j++)
            for (let i = 1; i < j && i < MAX_DENOM - 1; i++) {
                let diff = Math.abs(QuantityCalc.RATIO_FRACT[p++] - resid);
                if (diff < bestDiff) {
                    bestDiff = diff;
                    bestOver = i;
                    bestUnder = j;
                }
            }
        return [bestOver + (whole * bestUnder), bestUnder];
    }
    static impliedReagentStoich(reagent, products) {
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_3__.MolUtil.isBlank(reagent.mol) || products.length == 0)
            return 0;
        let pstoich = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(-1, products.length);
        let rmol = reagent.mol;
        let highest = 0;
        for (let n = 1; n <= rmol.numAtoms; n++) {
            let m = rmol.atomMapNum(n);
            if (m == 0)
                continue;
            let total = 0;
            for (let i = 0; i < products.length; i++) {
                let pmol = products[i].mol;
                if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_3__.MolUtil.isBlank(pmol))
                    continue;
                let pcount = 0;
                for (let j = 1; j <= pmol.numAtoms; j++)
                    if (pmol.atomMapNum(j) == m)
                        pcount++;
                if (pcount > 0) {
                    let rcount = 0;
                    for (let k = 1; k <= rmol.numAtoms; k++)
                        if (rmol.atomMapNum(k) == m)
                            rcount++;
                    if (pstoich[i] < 0)
                        pstoich[i] = QuantityCalc.extractStoichValue(products[i].stoich);
                    total += pcount * pstoich[i] / rcount;
                }
            }
            highest = Math.max(highest, total);
        }
        return highest;
    }
    static componentRatio(entry, step) {
        let numer = [], denom = [];
        let reactants = step == 0 ? entry.steps[0].reactants : entry.steps[step - 1].products;
        for (let comp of reactants) {
            let [num, den] = this.stoichAsRatio(comp.stoich);
            numer.push(num);
            denom.push(den);
        }
        for (let comp of entry.steps[step].reagents) {
            let fract = this.impliedReagentStoich(comp, entry.steps[step].products);
            let [num, den] = fract == 0 ? [0, 1] : this.stoichFractAsRatio(fract);
            numer.push(num == 0 ? 1 : num);
            denom.push(den);
        }
        for (let comp of entry.steps[step].products) {
            let [num, den] = this.stoichAsRatio(comp.stoich);
            numer.push(num == 0 ? 1 : num);
            denom.push(den);
        }
        let bigDenom = 1;
        for (let n = 0; n < numer.length; n++)
            if (denom[n] > 1 && bigDenom % denom[n] != 0)
                bigDenom *= denom[n];
        let ratioReactants = [], ratioReagents = [], ratioProducts = [];
        let p = 0;
        for (let n = 0; n < reactants.length; n++, p++)
            ratioReactants.push(numer[p] * bigDenom / denom[p]);
        for (let n = 0; n < entry.steps[step].reagents.length; n++, p++)
            ratioReagents.push(numer[p] * bigDenom / denom[p]);
        for (let n = 0; n < entry.steps[step].products.length; n++, p++)
            ratioProducts.push(numer[p] * bigDenom / denom[p]);
        return [ratioReactants, ratioReagents, ratioProducts];
    }
    constructor(entry) {
        this.entry = entry;
        this.quantities = [];
        this.primaryMoles = [];
        this.idxPrimary = [];
        this.idxYield = [];
        this.allMassReact = [];
        this.allMassProd = [];
        this.allMassWaste = [];
        this.greenMetrics = [];
    }
    calculate() {
        this.classifyTypes();
        while (this.calculateSomething()) { }
        this.allMassReact = [];
        this.allMassProd = [];
        this.allMassWaste = [];
        for (let n = 0; n < this.quantities.length; n++) {
            let qc = this.quantities[n];
            if (qc.type == _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Reactant || qc.type == _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Reagent) {
                if (qc.valueEquiv == 0 && qc.type == _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Reagent)
                    continue;
                this.allMassReact.push(qc.valueMass);
            }
            else if (qc.type == _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Product) {
                if (!qc.comp.waste) {
                    this.allMassProd.push(qc.valueMass);
                    this.calculateGreenMetrics(n);
                }
                else {
                    this.allMassWaste.push(qc.valueMass);
                }
            }
        }
    }
    get numQuantities() { return this.quantities.length; }
    getQuantity(idx) { return this.quantities[idx]; }
    getAllQuantities() { return this.quantities.slice(0); }
    get numGreenMetrics() { return this.greenMetrics.length; }
    getGreenMetrics(idx) { return this.greenMetrics[idx]; }
    getAllGreenMetrics() { return this.greenMetrics.slice(0); }
    getAllMassReact() { return this.allMassReact.slice(0); }
    getAllMassProd() { return this.allMassProd.slice(0); }
    getAllMassWaste() { return this.allMassWaste.slice(0); }
    findComponent(step, type, idx) {
        for (let qc of this.quantities)
            if (qc.step == step && qc.type == type && qc.idx == idx)
                return qc;
        return null;
    }
    static formatMolWeight(value) {
        if (value == QuantityCalc.UNSPECIFIED)
            return '';
        return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value, 6) + ' g/mol';
    }
    static formatMass(value) {
        if (value == QuantityCalc.UNSPECIFIED)
            return '';
        if (value <= 1E-6)
            return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value * 1E6, 6) + ' \u03BCg';
        if (value <= 1E-3)
            return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value * 1E3, 6) + ' mg';
        if (value >= 1E3)
            return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value * 1E-3, 6) + ' kg';
        return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value, 6) + ' g';
    }
    static formatVolume(value) {
        if (value == QuantityCalc.UNSPECIFIED)
            return '';
        if (value <= 1E-6)
            return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value * 1E6, 6) + ' nL';
        if (value <= 1E-3)
            return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value * 1E3, 6) + ' \u03BCL';
        if (value >= 1E3)
            return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value * 1E-3, 6) + ' L';
        return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value, 6) + ' mL';
    }
    static formatMoles(value) {
        if (value == QuantityCalc.UNSPECIFIED)
            return '';
        if (value <= 1E-9)
            return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value * 1E9, 6) + ' nmol';
        if (value <= 1E-6)
            return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value * 1E6, 6) + ' \u03BCmol';
        if (value <= 1E-3)
            return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value * 1E3, 6) + ' mmol';
        return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value, 6) + ' mol';
    }
    static formatDensity(value) {
        if (value == QuantityCalc.UNSPECIFIED)
            return '';
        return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value, 6) + ' g/mL';
    }
    static formatConc(value) {
        if (value == QuantityCalc.UNSPECIFIED)
            return '';
        if (value <= 1E-9)
            return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value * 1E9, 6) + ' nmol/L';
        if (value <= 1E-6)
            return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value * 1E6, 6) + ' \u03BCmol/L';
        if (value <= 1E-3)
            return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value * 1E3, 6) + ' mmol/L';
        return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value, 6) + ' mol/L';
    }
    static formatPercent(value) {
        if (value == QuantityCalc.UNSPECIFIED)
            return '';
        return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value, 6) + '%';
    }
    static formatEquiv(value) {
        if (value == QuantityCalc.UNSPECIFIED)
            return '';
        return (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.formatDouble)(value, 4) + ' equiv';
    }
    classifyTypes() {
        for (let s = 0; s < this.entry.steps.length; s++) {
            let step = this.entry.steps[s];
            for (let n = 0; n < step.reactants.length; n++)
                this.quantities.push(new QuantityCalcComp(step.reactants[n], s, _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Reactant, n));
            for (let n = 0; n < step.reagents.length; n++)
                this.quantities.push(new QuantityCalcComp(step.reagents[n], s, _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Reagent, n));
            for (let n = 0; n < step.products.length; n++)
                this.quantities.push(new QuantityCalcComp(step.products[n], s, _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Product, n));
        }
        for (let n = 0; n < this.quantities.length; n++) {
            let qc = this.quantities[n];
            if (qc.type == _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Reagent) {
                if (qc.comp.equiv != null)
                    qc.valueEquiv = qc.comp.equiv;
                else {
                    let eq = QuantityCalc.impliedReagentStoich(qc.comp, this.entry.steps[qc.step].products);
                    if (eq > 0)
                        qc.valueEquiv = eq;
                }
            }
            else {
                qc.valueEquiv = QuantityCalc.extractStoichValue(qc.comp.stoich);
            }
            if (qc.comp.mol != null)
                qc.molw = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_3__.MolUtil.molecularWeight(qc.comp.mol);
            qc.role = 4;
            if (qc.step == 0 && qc.type == _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Reactant) {
                if (qc.comp.primary) {
                    qc.role = 1;
                    this.idxPrimary.push(n);
                }
                else
                    qc.role = 2;
            }
            else if (qc.type == _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Reagent) {
                if (qc.valueEquiv > 0)
                    qc.role = 2;
            }
            else if (qc.type == _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Product && !qc.comp.waste) {
                qc.role = 3;
                this.idxYield.push(n);
            }
            else if (qc.valueEquiv > 0) {
                qc.role = 2;
            }
            if (qc.comp.mass != null)
                qc.valueMass = qc.comp.mass;
            if (qc.comp.volume != null)
                qc.valueVolume = qc.comp.volume;
            if (qc.comp.moles != null)
                qc.valueMoles = qc.comp.moles;
            if (qc.comp.density != null)
                qc.valueDensity = qc.comp.density;
            if (qc.comp.conc != null)
                qc.valueConc = qc.comp.conc;
            if (qc.comp.yield != null)
                qc.valueYield = qc.comp.yield;
            qc.statEquiv = qc.valueEquiv == QuantityCalc.UNSPECIFIED ? 0 : 1;
            qc.statMass = qc.valueMass == QuantityCalc.UNSPECIFIED ? 0 : 1;
            qc.statVolume = qc.valueVolume == QuantityCalc.UNSPECIFIED ? 0 : 1;
            qc.statMoles = qc.valueMoles == QuantityCalc.UNSPECIFIED ? 0 : 1;
            qc.statDensity = qc.valueDensity == QuantityCalc.UNSPECIFIED ? 0 : 1;
            qc.statConc = qc.valueConc == QuantityCalc.UNSPECIFIED ? 0 : 1;
            qc.statYield = qc.valueYield == QuantityCalc.UNSPECIFIED ? 0 : 1;
        }
        if (this.idxPrimary.length == 0) {
            for (let n = 0; n < this.quantities.length; n++) {
                let qc = this.quantities[n];
                if (qc.type == _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Reactant && qc.step == 0) {
                    qc.role = 1;
                    this.idxPrimary.push(n);
                }
            }
        }
    }
    calculateSomething() {
        let anything = false;
        for (let qc of this.quantities) {
            if (qc.molw > 0 && qc.valueMass == QuantityCalc.UNSPECIFIED && qc.statMoles == 1) {
                qc.valueMass = qc.valueMoles * qc.molw;
                qc.statMass = 2;
                anything = true;
            }
            if (qc.molw > 0 && qc.valueMass != QuantityCalc.UNSPECIFIED && qc.valueMoles == QuantityCalc.UNSPECIFIED) {
                qc.valueMoles = qc.valueMass / qc.molw;
                qc.statMoles = 2;
                anything = true;
            }
            if (qc.molw > 0 && qc.statMass == 1 && qc.statMoles == 1) {
                let calcMoles = qc.valueMass / qc.molw;
                if (!this.closeEnough(qc.valueMoles, calcMoles)) {
                    qc.statMass = 3;
                    qc.statMoles = 3;
                }
            }
            let isSoln = qc.statConc == 1 ||
                (qc.statVolume == 1 && (qc.statMass == 1 || qc.statMoles == 1));
            if (!isSoln) {
                if (qc.valueDensity > 0 && qc.valueMass == QuantityCalc.UNSPECIFIED && qc.valueVolume != QuantityCalc.UNSPECIFIED) {
                    qc.valueMass = qc.valueVolume * qc.valueDensity;
                    qc.statMass = 2;
                    anything = true;
                }
                if (qc.valueDensity > 0 && qc.valueMass != QuantityCalc.UNSPECIFIED && qc.valueVolume == QuantityCalc.UNSPECIFIED) {
                    qc.valueVolume = qc.valueMass / qc.valueDensity;
                    qc.statVolume = 2;
                    anything = true;
                }
                if (qc.valueDensity == QuantityCalc.UNSPECIFIED && qc.valueMass != QuantityCalc.UNSPECIFIED &&
                    qc.valueVolume != QuantityCalc.UNSPECIFIED && qc.valueConc == QuantityCalc.UNSPECIFIED) {
                    if (qc.statMass == 1 || qc.statMoles == 1) {
                        qc.valueDensity = qc.valueMass / qc.valueVolume;
                        qc.statDensity = 2;
                        anything = true;
                    }
                }
            }
            if (isSoln) {
                if (qc.valueConc > 0 && qc.valueMoles == QuantityCalc.UNSPECIFIED && qc.valueVolume != QuantityCalc.UNSPECIFIED) {
                    qc.valueMoles = 0.001 * qc.valueVolume * qc.valueConc;
                    qc.statMoles = 2;
                    anything = true;
                }
                if (qc.valueConc > 0 && qc.valueMoles != QuantityCalc.UNSPECIFIED && qc.valueVolume == QuantityCalc.UNSPECIFIED) {
                    qc.valueVolume = 1000 * qc.valueMoles / qc.valueConc;
                    qc.statVolume = 2;
                    anything = true;
                }
                if (qc.valueConc == QuantityCalc.UNSPECIFIED && qc.valueMass != QuantityCalc.UNSPECIFIED && qc.valueVolume != QuantityCalc.UNSPECIFIED) {
                    qc.valueConc = 1000 * qc.valueMoles / qc.valueVolume;
                    qc.statConc = 2;
                    anything = true;
                }
                if (qc.statConc == 1 && qc.valueMoles > 0 && qc.statVolume == 1) {
                    let calcVolume = 1000 * qc.valueMoles / qc.valueConc;
                    if (!this.closeEnough(qc.valueVolume, calcVolume)) {
                        qc.statConc = 3;
                        if (qc.statMass == 1)
                            qc.statMass = 3;
                        if (qc.statMoles == 1)
                            qc.statMoles = 3;
                        qc.statVolume = 3;
                    }
                }
            }
            if (qc.molw > 0 && qc.valueMass == QuantityCalc.UNSPECIFIED && qc.valueMoles != QuantityCalc.UNSPECIFIED) {
                qc.valueMass = qc.valueMoles * qc.molw;
                qc.statMass = 2;
                anything = true;
            }
            if (qc.statDensity == 1 && qc.statConc == 1) {
                qc.statDensity = 3;
                qc.statConc = 3;
            }
        }
        if (anything)
            return true;
        let hasRef = false;
        let numSteps = this.entry.steps.length;
        let primaryCounts = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, numSteps);
        let primaryEquivs = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, numSteps);
        let primaryMoles = this.primaryMoles = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, numSteps);
        for (let qc of this.quantities) {
            let ref = -1;
            if (qc.step == 0 && qc.type == _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Reactant && qc.comp.primary)
                ref = qc.step;
            else if (qc.step < numSteps - 1 && qc.type == _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Product && !qc.comp.waste)
                ref = qc.step + 1;
            else
                continue;
            if (primaryEquivs[ref] < 0)
                continue;
            if (qc.statMoles == 1) {
                primaryEquivs[ref] = -1;
                continue;
            }
            primaryCounts[ref]++;
            primaryEquivs[ref] += qc.valueEquiv;
            primaryMoles[ref] += qc.valueMoles;
        }
        if (primaryEquivs[0] <= 0) {
            primaryCounts[0] = 0;
            primaryEquivs[0] = 0;
            primaryMoles[0] = 0;
            for (let i of this.idxPrimary) {
                let qc = this.quantities[i];
                if (qc.statMoles == 0) {
                    primaryCounts[0] = 0;
                    primaryEquivs[0] = -1;
                    primaryMoles[0] = 0;
                    break;
                }
                primaryCounts[0]++;
                primaryEquivs[0] += qc.valueEquiv;
                primaryMoles[0] += qc.valueMoles;
            }
        }
        let refMoles = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, numSteps);
        for (let n = 0; n < numSteps; n++) {
            refMoles[n] = primaryCounts[n] == 0 || primaryEquivs[n] <= 0 ? 0 : primaryMoles[n] / primaryEquivs[n];
            if (refMoles[n] > 0)
                hasRef = true;
        }
        if (!hasRef) {
            for (let n = 0; n < numSteps; n++) {
                let prodMolar = [];
                for (let qc of this.quantities) {
                    if (qc.step != n || qc.role != 3)
                        continue;
                    if (qc.statMoles == 0 || qc.valueMoles <= 0 || qc.valueEquiv <= 0)
                        continue;
                    let yld = qc.valueYield > 0 ? qc.valueYield * 0.01 : 1;
                    prodMolar.push(qc.valueMoles / (qc.valueEquiv * yld));
                }
                if (prodMolar.length > 0) {
                    refMoles[n] = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sum(prodMolar) / prodMolar.length;
                    hasRef = true;
                }
            }
        }
        if (!hasRef)
            return false;
        for (let qc of this.quantities) {
            if (qc.type != _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Product)
                continue;
            if (refMoles[qc.step] == 0)
                continue;
            if (qc.valueYield == QuantityCalc.UNSPECIFIED && qc.valueMoles != QuantityCalc.UNSPECIFIED) {
                qc.valueYield = 100 * qc.valueMoles / (refMoles[qc.step] * qc.valueEquiv);
                qc.statYield = 2;
                anything = true;
            }
            if (qc.valueYield != QuantityCalc.UNSPECIFIED && qc.valueMoles == QuantityCalc.UNSPECIFIED) {
                qc.valueMoles = qc.valueYield * 0.01 * (refMoles[qc.step] * qc.valueEquiv);
                qc.statMoles = 2;
                anything = true;
            }
            if (qc.valueMoles > 0 && qc.statYield == 1) {
                let calcYield = 100 * qc.valueMoles / (refMoles[qc.step] * qc.valueEquiv);
                if (!this.closeEnough(qc.valueYield, calcYield)) {
                    if (qc.statMass == 1)
                        qc.statMass = 3;
                    if (qc.statMoles == 1)
                        qc.statMoles = 3;
                    qc.statYield = 3;
                }
            }
        }
        if (anything)
            return true;
        for (let qc of this.quantities) {
            if (refMoles[qc.step] == 0)
                continue;
            if (qc.valueMass == QuantityCalc.UNSPECIFIED && qc.valueMoles == QuantityCalc.UNSPECIFIED && qc.valueEquiv > 0) {
                qc.valueMoles = refMoles[qc.step] * qc.valueEquiv;
                qc.statMoles = 2;
                anything = true;
            }
            if (qc.valueMoles != QuantityCalc.UNSPECIFIED && qc.valueEquiv == QuantityCalc.UNSPECIFIED) {
                qc.valueEquiv = qc.valueMoles / refMoles[qc.step];
                qc.statEquiv = 2;
                anything = true;
            }
        }
        return anything;
    }
    calculateGreenMetrics(idx) {
        let qc = this.quantities[idx];
        let gm = new GreenMetrics();
        gm.step = qc.step;
        gm.idx = qc.idx;
        gm.isBlank = true;
        for (let n = 0; n < this.quantities.length; n++) {
            let sub = this.quantities[n];
            if (sub.step > gm.step)
                continue;
            let eq = sub.valueEquiv;
            if (eq == 0 && sub.type == _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Reagent)
                continue;
            if (sub.valueMass != QuantityCalc.UNSPECIFIED)
                gm.isBlank = false;
            if (sub.type == _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Reactant || sub.type == _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Reagent) {
                gm.massReact.push(sub.valueMass);
                if (sub.step == gm.step && eq > 0 && sub.molw > 0)
                    gm.molwReact.push(eq * sub.molw);
            }
            else if (sub.type == _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType.Product) {
                if (!sub.comp.waste) {
                    if (sub.step == gm.step)
                        gm.massProd.push(sub.valueMass);
                    if (eq > 0 && sub.molw > 0) {
                        if (sub.step == gm.step)
                            gm.molwProd.push(eq * sub.molw);
                        else if (sub.step == gm.step - 1)
                            gm.molwReact.push(eq * sub.molw);
                    }
                }
                else {
                    gm.massWaste.push(sub.valueMass);
                }
                if (sub.step == gm.step)
                    gm.massProdWaste.push(sub.valueMass);
            }
        }
        gm.impliedWaste = _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sum(gm.massReact) - _util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sum(gm.massProdWaste);
        if (Math.abs(gm.impliedWaste) > 1E-3)
            gm.impliedWaste = 0;
        this.greenMetrics.push(gm);
    }
    closeEnough(value1, value2) {
        if (value1 <= 0 || value2 <= 0)
            return true;
        let ratio = value1 / value2;
        return ratio >= 0.99 && ratio <= 1.01;
    }
}
QuantityCalc.UNSPECIFIED = -1;
QuantityCalc.MAX_DENOM = 16;
QuantityCalc.RATIO_FRACT = null;


/***/ }),

/***/ "./src/sketcher/CommandBank.ts":
/*!*************************************!*\
  !*** ./src/sketcher/CommandBank.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CommandBank: () => (/* binding */ CommandBank)
/* harmony export */ });
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mol/SketchUtil */ "./src/mol/SketchUtil.ts");
/* harmony import */ var _ui_ButtonBank__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ui/ButtonBank */ "./src/ui/ButtonBank.ts");
/* harmony import */ var _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MoleculeActivity */ "./src/sketcher/MoleculeActivity.ts");
/* harmony import */ var _reswmk_img_actions_MainUndo_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @reswmk/img/actions/MainUndo.svg */ "./res/img/actions/MainUndo.svg");
/* harmony import */ var _reswmk_img_actions_MainRedo_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @reswmk/img/actions/MainRedo.svg */ "./res/img/actions/MainRedo.svg");
/* harmony import */ var _reswmk_img_actions_MainZoomIn_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @reswmk/img/actions/MainZoomIn.svg */ "./res/img/actions/MainZoomIn.svg");
/* harmony import */ var _reswmk_img_actions_MainZoomOut_svg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @reswmk/img/actions/MainZoomOut.svg */ "./res/img/actions/MainZoomOut.svg");
/* harmony import */ var _reswmk_img_actions_MainZoomFit_svg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @reswmk/img/actions/MainZoomFit.svg */ "./res/img/actions/MainZoomFit.svg");
/* harmony import */ var _reswmk_img_actions_MainSelSide_svg__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @reswmk/img/actions/MainSelSide.svg */ "./res/img/actions/MainSelSide.svg");
/* harmony import */ var _reswmk_img_actions_MainSelAll_svg__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @reswmk/img/actions/MainSelAll.svg */ "./res/img/actions/MainSelAll.svg");
/* harmony import */ var _reswmk_img_actions_MainSelNone_svg__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @reswmk/img/actions/MainSelNone.svg */ "./res/img/actions/MainSelNone.svg");
/* harmony import */ var _reswmk_img_actions_MainDelete_svg__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @reswmk/img/actions/MainDelete.svg */ "./res/img/actions/MainDelete.svg");
/* harmony import */ var _reswmk_img_actions_MainCut_svg__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @reswmk/img/actions/MainCut.svg */ "./res/img/actions/MainCut.svg");
/* harmony import */ var _reswmk_img_actions_MainCopy_svg__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @reswmk/img/actions/MainCopy.svg */ "./res/img/actions/MainCopy.svg");
/* harmony import */ var _reswmk_img_actions_MainPaste_svg__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @reswmk/img/actions/MainPaste.svg */ "./res/img/actions/MainPaste.svg");
/* harmony import */ var _reswmk_img_actions_MainAtom_svg__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @reswmk/img/actions/MainAtom.svg */ "./res/img/actions/MainAtom.svg");
/* harmony import */ var _reswmk_img_actions_MainBond_svg__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @reswmk/img/actions/MainBond.svg */ "./res/img/actions/MainBond.svg");
/* harmony import */ var _reswmk_img_actions_MainSelect_svg__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @reswmk/img/actions/MainSelect.svg */ "./res/img/actions/MainSelect.svg");
/* harmony import */ var _reswmk_img_actions_MainMove_svg__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @reswmk/img/actions/MainMove.svg */ "./res/img/actions/MainMove.svg");
/* harmony import */ var _reswmk_img_actions_AtomPlus_svg__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @reswmk/img/actions/AtomPlus.svg */ "./res/img/actions/AtomPlus.svg");
/* harmony import */ var _reswmk_img_actions_AtomMinus_svg__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @reswmk/img/actions/AtomMinus.svg */ "./res/img/actions/AtomMinus.svg");
/* harmony import */ var _reswmk_img_actions_AtomAbbrev_svg__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @reswmk/img/actions/AtomAbbrev.svg */ "./res/img/actions/AtomAbbrev.svg");
/* harmony import */ var _reswmk_img_actions_AtomSBlock_svg__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @reswmk/img/actions/AtomSBlock.svg */ "./res/img/actions/AtomSBlock.svg");
/* harmony import */ var _reswmk_img_actions_AtomPBlock_svg__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @reswmk/img/actions/AtomPBlock.svg */ "./res/img/actions/AtomPBlock.svg");
/* harmony import */ var _reswmk_img_actions_AtomDBlock_svg__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @reswmk/img/actions/AtomDBlock.svg */ "./res/img/actions/AtomDBlock.svg");
/* harmony import */ var _reswmk_img_actions_AtomFBlock_svg__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @reswmk/img/actions/AtomFBlock.svg */ "./res/img/actions/AtomFBlock.svg");
/* harmony import */ var _reswmk_img_actions_AtomNoble_svg__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @reswmk/img/actions/AtomNoble.svg */ "./res/img/actions/AtomNoble.svg");
/* harmony import */ var _reswmk_img_actions_BondOne_svg__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @reswmk/img/actions/BondOne.svg */ "./res/img/actions/BondOne.svg");
/* harmony import */ var _reswmk_img_actions_BondTwo_svg__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @reswmk/img/actions/BondTwo.svg */ "./res/img/actions/BondTwo.svg");
/* harmony import */ var _reswmk_img_actions_BondThree_svg__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @reswmk/img/actions/BondThree.svg */ "./res/img/actions/BondThree.svg");
/* harmony import */ var _reswmk_img_actions_BondFour_svg__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @reswmk/img/actions/BondFour.svg */ "./res/img/actions/BondFour.svg");
/* harmony import */ var _reswmk_img_actions_BondZero_svg__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @reswmk/img/actions/BondZero.svg */ "./res/img/actions/BondZero.svg");
/* harmony import */ var _reswmk_img_actions_BondUp_svg__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @reswmk/img/actions/BondUp.svg */ "./res/img/actions/BondUp.svg");
/* harmony import */ var _reswmk_img_actions_BondDown_svg__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @reswmk/img/actions/BondDown.svg */ "./res/img/actions/BondDown.svg");
/* harmony import */ var _reswmk_img_actions_BondSquig_svg__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @reswmk/img/actions/BondSquig.svg */ "./res/img/actions/BondSquig.svg");
/* harmony import */ var _reswmk_img_actions_BondQAny_svg__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @reswmk/img/actions/BondQAny.svg */ "./res/img/actions/BondQAny.svg");
/* harmony import */ var _reswmk_img_actions_BondAddTwo_svg__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @reswmk/img/actions/BondAddTwo.svg */ "./res/img/actions/BondAddTwo.svg");
/* harmony import */ var _reswmk_img_actions_BondInsert_svg__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @reswmk/img/actions/BondInsert.svg */ "./res/img/actions/BondInsert.svg");
/* harmony import */ var _reswmk_img_actions_BondSwitch_svg__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @reswmk/img/actions/BondSwitch.svg */ "./res/img/actions/BondSwitch.svg");
/* harmony import */ var _reswmk_img_actions_BondRotate_svg__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @reswmk/img/actions/BondRotate.svg */ "./res/img/actions/BondRotate.svg");
/* harmony import */ var _reswmk_img_actions_BondLinear_svg__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @reswmk/img/actions/BondLinear.svg */ "./res/img/actions/BondLinear.svg");
/* harmony import */ var _reswmk_img_actions_BondTrigonal_svg__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! @reswmk/img/actions/BondTrigonal.svg */ "./res/img/actions/BondTrigonal.svg");
/* harmony import */ var _reswmk_img_actions_BondTetra1_svg__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! @reswmk/img/actions/BondTetra1.svg */ "./res/img/actions/BondTetra1.svg");
/* harmony import */ var _reswmk_img_actions_BondTetra2_svg__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! @reswmk/img/actions/BondTetra2.svg */ "./res/img/actions/BondTetra2.svg");
/* harmony import */ var _reswmk_img_actions_BondSqPlan_svg__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! @reswmk/img/actions/BondSqPlan.svg */ "./res/img/actions/BondSqPlan.svg");
/* harmony import */ var _reswmk_img_actions_BondOcta1_svg__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! @reswmk/img/actions/BondOcta1.svg */ "./res/img/actions/BondOcta1.svg");
/* harmony import */ var _reswmk_img_actions_BondOcta2_svg__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! @reswmk/img/actions/BondOcta2.svg */ "./res/img/actions/BondOcta2.svg");
/* harmony import */ var _reswmk_img_actions_BondMetalLigate_svg__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! @reswmk/img/actions/BondMetalLigate.svg */ "./res/img/actions/BondMetalLigate.svg");
/* harmony import */ var _reswmk_img_actions_BondArtifactPath_svg__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! @reswmk/img/actions/BondArtifactPath.svg */ "./res/img/actions/BondArtifactPath.svg");
/* harmony import */ var _reswmk_img_actions_BondArtifactRing_svg__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! @reswmk/img/actions/BondArtifactRing.svg */ "./res/img/actions/BondArtifactRing.svg");
/* harmony import */ var _reswmk_img_actions_BondArtifactArene_svg__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! @reswmk/img/actions/BondArtifactArene.svg */ "./res/img/actions/BondArtifactArene.svg");
/* harmony import */ var _reswmk_img_actions_BondArtifactClear_svg__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! @reswmk/img/actions/BondArtifactClear.svg */ "./res/img/actions/BondArtifactClear.svg");
/* harmony import */ var _reswmk_img_actions_BondPolymer_svg__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! @reswmk/img/actions/BondPolymer.svg */ "./res/img/actions/BondPolymer.svg");
/* harmony import */ var _reswmk_img_actions_SelectionGrow_svg__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! @reswmk/img/actions/SelectionGrow.svg */ "./res/img/actions/SelectionGrow.svg");
/* harmony import */ var _reswmk_img_actions_SelectionShrink_svg__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! @reswmk/img/actions/SelectionShrink.svg */ "./res/img/actions/SelectionShrink.svg");
/* harmony import */ var _reswmk_img_actions_SelectionChain_svg__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! @reswmk/img/actions/SelectionChain.svg */ "./res/img/actions/SelectionChain.svg");
/* harmony import */ var _reswmk_img_actions_SelectionSmRing_svg__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! @reswmk/img/actions/SelectionSmRing.svg */ "./res/img/actions/SelectionSmRing.svg");
/* harmony import */ var _reswmk_img_actions_SelectionRingBlk_svg__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! @reswmk/img/actions/SelectionRingBlk.svg */ "./res/img/actions/SelectionRingBlk.svg");
/* harmony import */ var _reswmk_img_actions_SelectionCurElement_svg__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! @reswmk/img/actions/SelectionCurElement.svg */ "./res/img/actions/SelectionCurElement.svg");
/* harmony import */ var _reswmk_img_actions_MainSelPrev_svg__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! @reswmk/img/actions/MainSelPrev.svg */ "./res/img/actions/MainSelPrev.svg");
/* harmony import */ var _reswmk_img_actions_MainSelNext_svg__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! @reswmk/img/actions/MainSelNext.svg */ "./res/img/actions/MainSelNext.svg");
/* harmony import */ var _reswmk_img_actions_SelectionToggle_svg__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! @reswmk/img/actions/SelectionToggle.svg */ "./res/img/actions/SelectionToggle.svg");
/* harmony import */ var _reswmk_img_actions_SelectionUncurrent_svg__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! @reswmk/img/actions/SelectionUncurrent.svg */ "./res/img/actions/SelectionUncurrent.svg");
/* harmony import */ var _reswmk_img_actions_MoveJoin_svg__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! @reswmk/img/actions/MoveJoin.svg */ "./res/img/actions/MoveJoin.svg");
/* harmony import */ var _reswmk_img_actions_MainNew_svg__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! @reswmk/img/actions/MainNew.svg */ "./res/img/actions/MainNew.svg");
/* harmony import */ var _reswmk_img_actions_AtomInline_svg__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! @reswmk/img/actions/AtomInline.svg */ "./res/img/actions/AtomInline.svg");
/* harmony import */ var _reswmk_img_actions_AtomFormula_svg__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! @reswmk/img/actions/AtomFormula.svg */ "./res/img/actions/AtomFormula.svg");
/* harmony import */ var _reswmk_img_actions_AtomExpandAbbrev_svg__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! @reswmk/img/actions/AtomExpandAbbrev.svg */ "./res/img/actions/AtomExpandAbbrev.svg");
/* harmony import */ var _reswmk_img_actions_AtomClearAbbrev_svg__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! @reswmk/img/actions/AtomClearAbbrev.svg */ "./res/img/actions/AtomClearAbbrev.svg");
/* harmony import */ var _reswmk_img_actions_MoveUp_svg__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! @reswmk/img/actions/MoveUp.svg */ "./res/img/actions/MoveUp.svg");
/* harmony import */ var _reswmk_img_actions_MoveDown_svg__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! @reswmk/img/actions/MoveDown.svg */ "./res/img/actions/MoveDown.svg");
/* harmony import */ var _reswmk_img_actions_MoveLeft_svg__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! @reswmk/img/actions/MoveLeft.svg */ "./res/img/actions/MoveLeft.svg");
/* harmony import */ var _reswmk_img_actions_MoveRight_svg__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! @reswmk/img/actions/MoveRight.svg */ "./res/img/actions/MoveRight.svg");
/* harmony import */ var _reswmk_img_actions_MoveUpLots_svg__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! @reswmk/img/actions/MoveUpLots.svg */ "./res/img/actions/MoveUpLots.svg");
/* harmony import */ var _reswmk_img_actions_MoveDownLots_svg__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! @reswmk/img/actions/MoveDownLots.svg */ "./res/img/actions/MoveDownLots.svg");
/* harmony import */ var _reswmk_img_actions_MoveLeftLots_svg__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! @reswmk/img/actions/MoveLeftLots.svg */ "./res/img/actions/MoveLeftLots.svg");
/* harmony import */ var _reswmk_img_actions_MoveRightLots_svg__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! @reswmk/img/actions/MoveRightLots.svg */ "./res/img/actions/MoveRightLots.svg");
/* harmony import */ var _reswmk_img_actions_MoveUpFar_svg__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! @reswmk/img/actions/MoveUpFar.svg */ "./res/img/actions/MoveUpFar.svg");
/* harmony import */ var _reswmk_img_actions_MoveDownFar_svg__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! @reswmk/img/actions/MoveDownFar.svg */ "./res/img/actions/MoveDownFar.svg");
/* harmony import */ var _reswmk_img_actions_MoveLeftFar_svg__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! @reswmk/img/actions/MoveLeftFar.svg */ "./res/img/actions/MoveLeftFar.svg");
/* harmony import */ var _reswmk_img_actions_MoveRightFar_svg__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! @reswmk/img/actions/MoveRightFar.svg */ "./res/img/actions/MoveRightFar.svg");
/* harmony import */ var _reswmk_img_actions_MoveRotP01_svg__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! @reswmk/img/actions/MoveRotP01.svg */ "./res/img/actions/MoveRotP01.svg");
/* harmony import */ var _reswmk_img_actions_MoveRotM01_svg__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! @reswmk/img/actions/MoveRotM01.svg */ "./res/img/actions/MoveRotM01.svg");
/* harmony import */ var _reswmk_img_actions_MoveRotP05_svg__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! @reswmk/img/actions/MoveRotP05.svg */ "./res/img/actions/MoveRotP05.svg");
/* harmony import */ var _reswmk_img_actions_MoveRotM05_svg__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! @reswmk/img/actions/MoveRotM05.svg */ "./res/img/actions/MoveRotM05.svg");
/* harmony import */ var _reswmk_img_actions_MoveRotP15_svg__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! @reswmk/img/actions/MoveRotP15.svg */ "./res/img/actions/MoveRotP15.svg");
/* harmony import */ var _reswmk_img_actions_MoveRotM15_svg__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! @reswmk/img/actions/MoveRotM15.svg */ "./res/img/actions/MoveRotM15.svg");
/* harmony import */ var _reswmk_img_actions_MoveRotP30_svg__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! @reswmk/img/actions/MoveRotP30.svg */ "./res/img/actions/MoveRotP30.svg");
/* harmony import */ var _reswmk_img_actions_MoveRotM30_svg__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! @reswmk/img/actions/MoveRotM30.svg */ "./res/img/actions/MoveRotM30.svg");
/* harmony import */ var _reswmk_img_actions_MoveHFlip_svg__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! @reswmk/img/actions/MoveHFlip.svg */ "./res/img/actions/MoveHFlip.svg");
/* harmony import */ var _reswmk_img_actions_MoveVFlip_svg__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! @reswmk/img/actions/MoveVFlip.svg */ "./res/img/actions/MoveVFlip.svg");
/* harmony import */ var _reswmk_img_actions_MoveShrink_svg__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! @reswmk/img/actions/MoveShrink.svg */ "./res/img/actions/MoveShrink.svg");
/* harmony import */ var _reswmk_img_actions_MoveGrow_svg__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! @reswmk/img/actions/MoveGrow.svg */ "./res/img/actions/MoveGrow.svg");




const ELEMENTS_NOBLE = [
    'He', 'Ar', 'Kr', 'Xe', 'Rn'
];
const ELEMENTS_S_BLOCK = [
    'Li', 'Na', 'K', 'Rb', 'Cs', 'Fr', 'Sc',
    'Be', 'Mg', 'Ca', 'Sr', 'Ba', 'Ra', 'Y'
];
const ELEMENTS_P_BLOCK = [
    'B', 'Al', 'Si', 'Ga', 'Ge', 'As', 'Se',
    'In', 'Sn', 'Sb', 'Te', 'Tl', 'Pb', 'Bi', 'Po', 'At'
];
const ELEMENTS_D_BLOCK = [
    'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn',
    'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd',
    'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg'
];
const ELEMENTS_F_BLOCK = [
    'La', 'Ce', 'Pr', 'Nd', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy',
    'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Ac', 'Th', 'Pa', 'U'
];
const ELEMENTS_ABBREV = [
    '*', 'A', 'X', 'Y', 'Z', 'Q', 'M', 'T', 'E', 'L', 'R',
    'R0', 'R1', 'R2', 'R3', 'R4', 'R5', 'R6', 'R7', 'R8'
];
var CommandType;
(function (CommandType) {
    CommandType[CommandType["Main"] = 0] = "Main";
    CommandType[CommandType["Atom"] = 1] = "Atom";
    CommandType[CommandType["Bond"] = 2] = "Bond";
    CommandType[CommandType["Select"] = 3] = "Select";
    CommandType[CommandType["Move"] = 4] = "Move";
    CommandType[CommandType["Abbrev"] = 5] = "Abbrev";
    CommandType[CommandType["SBlock"] = 6] = "SBlock";
    CommandType[CommandType["PBlock"] = 7] = "PBlock";
    CommandType[CommandType["DBlock"] = 8] = "DBlock";
    CommandType[CommandType["FBlock"] = 9] = "FBlock";
    CommandType[CommandType["Noble"] = 10] = "Noble";
})(CommandType || (CommandType = {}));
















const COMMANDS_MAIN = [
    { id: 'undo', svg: _reswmk_img_actions_MainUndo_svg__WEBPACK_IMPORTED_MODULE_4__["default"], helpText: 'Undo last change.', mnemonic: 'CmdOrCtrl+Z' },
    { id: 'redo', svg: _reswmk_img_actions_MainRedo_svg__WEBPACK_IMPORTED_MODULE_5__["default"], helpText: 'Cancel last undo.', mnemonic: 'CmdOrCtrl+Shift+Z' },
    { id: 'zoomin', svg: _reswmk_img_actions_MainZoomIn_svg__WEBPACK_IMPORTED_MODULE_6__["default"], helpText: 'Zoom in.', mnemonic: '=' },
    { id: 'zoomout', svg: _reswmk_img_actions_MainZoomOut_svg__WEBPACK_IMPORTED_MODULE_7__["default"], helpText: 'Zoom out.', mnemonic: '-' },
    { id: 'zoomfit', svg: _reswmk_img_actions_MainZoomFit_svg__WEBPACK_IMPORTED_MODULE_8__["default"], helpText: 'Show whole diagram onscreen.', mnemonic: '' },
    { id: 'selside', svg: _reswmk_img_actions_MainSelSide_svg__WEBPACK_IMPORTED_MODULE_9__["default"], helpText: 'Select alternate side of current atom or bond.', mnemonic: 'E' },
    { id: 'selall', svg: _reswmk_img_actions_MainSelAll_svg__WEBPACK_IMPORTED_MODULE_10__["default"], helpText: 'Select all atoms.', mnemonic: 'Shift+A' },
    { id: 'selnone', svg: _reswmk_img_actions_MainSelNone_svg__WEBPACK_IMPORTED_MODULE_11__["default"], helpText: 'Clear selection.', mnemonic: 'Shift+Q' },
    { id: 'delete', svg: _reswmk_img_actions_MainDelete_svg__WEBPACK_IMPORTED_MODULE_12__["default"], helpText: 'Delete selected atoms and bonds.', mnemonic: 'D' },
    { id: 'cut', svg: _reswmk_img_actions_MainCut_svg__WEBPACK_IMPORTED_MODULE_13__["default"], helpText: 'Copy selection to clipboard, and remove.', mnemonic: 'CmdOrCtrl+X' },
    { id: 'copy', svg: _reswmk_img_actions_MainCopy_svg__WEBPACK_IMPORTED_MODULE_14__["default"], helpText: 'Copy selection to clipboard.', mnemonic: 'CmdOrCtrl+C' },
    { id: 'paste', svg: _reswmk_img_actions_MainPaste_svg__WEBPACK_IMPORTED_MODULE_15__["default"], helpText: 'Paste clipboard contents.' },
    { id: 'atom', svg: _reswmk_img_actions_MainAtom_svg__WEBPACK_IMPORTED_MODULE_16__["default"], helpText: 'Open the Atom submenu.', isSubMenu: true, mnemonic: 'A' },
    { id: 'bond', svg: _reswmk_img_actions_MainBond_svg__WEBPACK_IMPORTED_MODULE_17__["default"], helpText: 'Open the Bond submenu.', isSubMenu: true, mnemonic: 'B' },
    { id: 'select', svg: _reswmk_img_actions_MainSelect_svg__WEBPACK_IMPORTED_MODULE_18__["default"], helpText: 'Open the Selection submenu.', isSubMenu: true, mnemonic: 'S' },
    { id: 'move', svg: _reswmk_img_actions_MainMove_svg__WEBPACK_IMPORTED_MODULE_19__["default"], helpText: 'Open the Move submenu.', isSubMenu: true, mnemonic: 'M' },
];








const COMMANDS_ATOM = [
    { id: 'element:C', text: 'C', helpText: 'Change elements to Carbon.', mnemonic: 'Shift+C' },
    { id: 'element:N', text: 'N', helpText: 'Change elements to Nitrogen.', mnemonic: 'Shift+N' },
    { id: 'element:O', text: 'O', helpText: 'Change elements to Oxygen.', mnemonic: 'Shift+O' },
    { id: 'element:S', text: 'S', helpText: 'Change elements to Sulfur.', mnemonic: 'Shift+S' },
    { id: 'element:P', text: 'P', helpText: 'Change elements to Phosphorus.', mnemonic: 'Shift+P' },
    { id: 'element:H', text: 'H', helpText: 'Change elements to Hydrogen.', mnemonic: 'Shift+H' },
    { id: 'element:F', text: 'F', helpText: 'Change elements to Fluorine.', mnemonic: 'Shift+F' },
    { id: 'element:Cl', text: 'Cl', helpText: 'Change elements to Chlorine.', mnemonic: 'Shift+L' },
    { id: 'element:Br', text: 'Br', helpText: 'Change elements to Bromine.', mnemonic: 'Shift+B' },
    { id: 'element:I', text: 'I', helpText: 'Change elements to Iodine.', mnemonic: 'Shift+I' },
    { id: 'plus', svg: _reswmk_img_actions_AtomPlus_svg__WEBPACK_IMPORTED_MODULE_20__["default"], helpText: 'Increase the atom charge.', mnemonic: 'Shift+=', key: '+' },
    { id: 'minus', svg: _reswmk_img_actions_AtomMinus_svg__WEBPACK_IMPORTED_MODULE_21__["default"], helpText: 'Decrease the atom charge.', mnemonic: 'Shift+-', key: '_' },
    { id: 'abbrev', svg: _reswmk_img_actions_AtomAbbrev_svg__WEBPACK_IMPORTED_MODULE_22__["default"], helpText: 'Open list of common labels.', isSubMenu: true, mnemonic: '' },
    { id: 'sblock', svg: _reswmk_img_actions_AtomSBlock_svg__WEBPACK_IMPORTED_MODULE_23__["default"], helpText: 'Open list of s-block elements.', isSubMenu: true, mnemonic: '' },
    { id: 'pblock', svg: _reswmk_img_actions_AtomPBlock_svg__WEBPACK_IMPORTED_MODULE_24__["default"], helpText: 'Open list of p-block elements.', isSubMenu: true, mnemonic: '' },
    { id: 'dblock', svg: _reswmk_img_actions_AtomDBlock_svg__WEBPACK_IMPORTED_MODULE_25__["default"], helpText: 'Open list of d-block elements.', isSubMenu: true, mnemonic: '' },
    { id: 'fblock', svg: _reswmk_img_actions_AtomFBlock_svg__WEBPACK_IMPORTED_MODULE_26__["default"], helpText: 'Open list of f-block elements.', isSubMenu: true, mnemonic: '' },
    { id: 'noble', svg: _reswmk_img_actions_AtomNoble_svg__WEBPACK_IMPORTED_MODULE_27__["default"], helpText: 'Open list of noble elements.', isSubMenu: true, mnemonic: '' },
];


























const COMMANDS_BOND = [
    { id: 'one', svg: _reswmk_img_actions_BondOne_svg__WEBPACK_IMPORTED_MODULE_28__["default"], helpText: 'Create or set bonds to single.', mnemonic: '1' },
    { id: 'two', svg: _reswmk_img_actions_BondTwo_svg__WEBPACK_IMPORTED_MODULE_29__["default"], helpText: 'Create or set bonds to double.', mnemonic: '2' },
    { id: 'three', svg: _reswmk_img_actions_BondThree_svg__WEBPACK_IMPORTED_MODULE_30__["default"], helpText: 'Create or set bonds to triple.', mnemonic: '3' },
    { id: 'four', svg: _reswmk_img_actions_BondFour_svg__WEBPACK_IMPORTED_MODULE_31__["default"], helpText: 'Create or set bonds to quadruple.', mnemonic: '' },
    { id: 'zero', svg: _reswmk_img_actions_BondZero_svg__WEBPACK_IMPORTED_MODULE_32__["default"], helpText: 'Create or set bonds to zero-order.', mnemonic: '0' },
    { id: 'inclined', svg: _reswmk_img_actions_BondUp_svg__WEBPACK_IMPORTED_MODULE_33__["default"], helpText: 'Create or set bonds to inclined.', mnemonic: '5' },
    { id: 'declined', svg: _reswmk_img_actions_BondDown_svg__WEBPACK_IMPORTED_MODULE_34__["default"], helpText: 'Create or set bonds to declined.', mnemonic: '6' },
    { id: 'squig', svg: _reswmk_img_actions_BondSquig_svg__WEBPACK_IMPORTED_MODULE_35__["default"], helpText: 'Create or set bonds to unknown stereochemistry.', mnemonic: '4' },
    { id: 'bondQAny', svg: _reswmk_img_actions_BondQAny_svg__WEBPACK_IMPORTED_MODULE_36__["default"], helpText: 'Query bond that matches anything.' },
    { id: 'addtwo', svg: _reswmk_img_actions_BondAddTwo_svg__WEBPACK_IMPORTED_MODULE_37__["default"], helpText: 'Add two new bonds to the subject atom.', mnemonic: 'Shift+D' },
    { id: 'insert', svg: _reswmk_img_actions_BondInsert_svg__WEBPACK_IMPORTED_MODULE_38__["default"], helpText: 'Insert a methylene into the subject bond.', mnemonic: '' },
    { id: 'switch', svg: _reswmk_img_actions_BondSwitch_svg__WEBPACK_IMPORTED_MODULE_39__["default"], helpText: 'Cycle through likely bond geometries.', mnemonic: '\'' },
    { id: 'rotate', svg: _reswmk_img_actions_BondRotate_svg__WEBPACK_IMPORTED_MODULE_40__["default"], helpText: 'Rotate bond to invert substituent orientation.', mnemonic: '' },
    { id: 'linear', svg: _reswmk_img_actions_BondLinear_svg__WEBPACK_IMPORTED_MODULE_41__["default"], helpText: 'Apply linear geometry.', mnemonic: 'Shift+V' },
    { id: 'trigonal', svg: _reswmk_img_actions_BondTrigonal_svg__WEBPACK_IMPORTED_MODULE_42__["default"], helpText: 'Apply trigonal geometry.', mnemonic: 'Shift+W' },
    { id: 'tetra1', svg: _reswmk_img_actions_BondTetra1_svg__WEBPACK_IMPORTED_MODULE_43__["default"], helpText: 'Apply tetrahedral geometry #1.', mnemonic: 'Shift+E' },
    { id: 'tetra2', svg: _reswmk_img_actions_BondTetra2_svg__WEBPACK_IMPORTED_MODULE_44__["default"], helpText: 'Apply tetrahedral geometry #2.', mnemonic: 'Shift+R' },
    { id: 'sqplan', svg: _reswmk_img_actions_BondSqPlan_svg__WEBPACK_IMPORTED_MODULE_45__["default"], helpText: 'Apply square planar geometry.', mnemonic: 'Shift+T' },
    { id: 'octa1', svg: _reswmk_img_actions_BondOcta1_svg__WEBPACK_IMPORTED_MODULE_46__["default"], helpText: 'Apply octahedral geometry #1.', mnemonic: 'Shift+Y' },
    { id: 'octa2', svg: _reswmk_img_actions_BondOcta2_svg__WEBPACK_IMPORTED_MODULE_47__["default"], helpText: 'Apply octahedral geometry #2.', mnemonic: 'Shift+U' },
    { id: 'metalligate', svg: _reswmk_img_actions_BondMetalLigate_svg__WEBPACK_IMPORTED_MODULE_48__["default"], helpText: 'Arrange ligands around metal centre.', mnemonic: '' },
    { id: 'artifactpath', svg: _reswmk_img_actions_BondArtifactPath_svg__WEBPACK_IMPORTED_MODULE_49__["default"], helpText: 'Add a path bond artifact.', mnemonic: '' },
    { id: 'artifactring', svg: _reswmk_img_actions_BondArtifactRing_svg__WEBPACK_IMPORTED_MODULE_50__["default"], helpText: 'Add a ring bond artifact.', mnemonic: '' },
    { id: 'artifactarene', svg: _reswmk_img_actions_BondArtifactArene_svg__WEBPACK_IMPORTED_MODULE_51__["default"], helpText: 'Add an arene bond artifact.', mnemonic: '' },
    { id: 'artifactclear', svg: _reswmk_img_actions_BondArtifactClear_svg__WEBPACK_IMPORTED_MODULE_52__["default"], helpText: 'Remove a bond artifact.', mnemonic: '' },
    { id: 'polymer', svg: _reswmk_img_actions_BondPolymer_svg__WEBPACK_IMPORTED_MODULE_53__["default"], helpText: 'Create a polymer block.', mnemonic: '' },
];
















const COMMANDS_SELECT = [
    { id: 'selgrow', svg: _reswmk_img_actions_SelectionGrow_svg__WEBPACK_IMPORTED_MODULE_54__["default"], helpText: 'Add adjacent atoms to selection.', mnemonic: '' },
    { id: 'selshrink', svg: _reswmk_img_actions_SelectionShrink_svg__WEBPACK_IMPORTED_MODULE_55__["default"], helpText: 'Unselect exterior atoms.', mnemonic: '' },
    { id: 'selchain', svg: _reswmk_img_actions_SelectionChain_svg__WEBPACK_IMPORTED_MODULE_56__["default"], helpText: 'Extend selection to non-ring atoms.', mnemonic: '' },
    { id: 'smallring', svg: _reswmk_img_actions_SelectionSmRing_svg__WEBPACK_IMPORTED_MODULE_57__["default"], helpText: 'Extend selection to small rings.', mnemonic: '' },
    { id: 'ringblock', svg: _reswmk_img_actions_SelectionRingBlk_svg__WEBPACK_IMPORTED_MODULE_58__["default"], helpText: 'Extend selection to ring blocks.', mnemonic: '' },
    { id: 'curelement', svg: _reswmk_img_actions_SelectionCurElement_svg__WEBPACK_IMPORTED_MODULE_59__["default"], helpText: 'Select all atoms of current element type.', mnemonic: '' },
    { id: 'selprev', svg: _reswmk_img_actions_MainSelPrev_svg__WEBPACK_IMPORTED_MODULE_60__["default"], helpText: 'Select previous connected component.', mnemonic: '[' },
    { id: 'selnext', svg: _reswmk_img_actions_MainSelNext_svg__WEBPACK_IMPORTED_MODULE_61__["default"], helpText: 'Select next connected component.', mnemonic: ']' },
    { id: 'toggle', svg: _reswmk_img_actions_SelectionToggle_svg__WEBPACK_IMPORTED_MODULE_62__["default"], helpText: 'Toggle selection of current.', mnemonic: ',' },
    { id: 'uncurrent', svg: _reswmk_img_actions_SelectionUncurrent_svg__WEBPACK_IMPORTED_MODULE_63__["default"], helpText: 'Undefine current object.', mnemonic: '.' },
    { id: 'join', svg: _reswmk_img_actions_MoveJoin_svg__WEBPACK_IMPORTED_MODULE_64__["default"], helpText: 'Overlapping atoms will be joined as one.', mnemonic: '' },
    { id: 'new', svg: _reswmk_img_actions_MainNew_svg__WEBPACK_IMPORTED_MODULE_65__["default"], helpText: 'Clear the molecular structure.', mnemonic: '' },
    { id: 'inline', svg: _reswmk_img_actions_AtomInline_svg__WEBPACK_IMPORTED_MODULE_66__["default"], helpText: 'Make selected atoms into an inline abbreviation.', mnemonic: '/' },
    { id: 'formula', svg: _reswmk_img_actions_AtomFormula_svg__WEBPACK_IMPORTED_MODULE_67__["default"], helpText: 'Make selected atoms into their molecule formula.', mnemonic: '\\' },
    { id: 'expandabbrev', svg: _reswmk_img_actions_AtomExpandAbbrev_svg__WEBPACK_IMPORTED_MODULE_68__["default"], helpText: 'Expand out the inline abbreviation.', mnemonic: 'Shift+/', key: '?' },
    { id: 'clearabbrev', svg: _reswmk_img_actions_AtomClearAbbrev_svg__WEBPACK_IMPORTED_MODULE_69__["default"], helpText: 'Remove inline abbreviation.', mnemonic: 'Shift+\\', key: '|' },
];
























const COMMANDS_MOVE = [
    { id: 'up', svg: _reswmk_img_actions_MoveUp_svg__WEBPACK_IMPORTED_MODULE_70__["default"], helpText: 'Move subject atoms up slightly.', mnemonic: 'Shift+Up', key: "ArrowUp" },
    { id: 'down', svg: _reswmk_img_actions_MoveDown_svg__WEBPACK_IMPORTED_MODULE_71__["default"], helpText: 'Move subject atoms down slightly.', mnemonic: 'Shift+Down', key: "ArrowDown" },
    { id: 'left', svg: _reswmk_img_actions_MoveLeft_svg__WEBPACK_IMPORTED_MODULE_72__["default"], helpText: 'Move subject atoms slightly to the left.', mnemonic: 'Shift+Left', key: "ArrowLeft" },
    { id: 'right', svg: _reswmk_img_actions_MoveRight_svg__WEBPACK_IMPORTED_MODULE_73__["default"], helpText: 'Move subject atoms slightly to the right.', mnemonic: 'Shift+Right', key: "ArrowRight" },
    { id: 'uplots', svg: _reswmk_img_actions_MoveUpLots_svg__WEBPACK_IMPORTED_MODULE_74__["default"], helpText: 'Move subject atoms up somewhat.', mnemonic: '' },
    { id: 'downlots', svg: _reswmk_img_actions_MoveDownLots_svg__WEBPACK_IMPORTED_MODULE_75__["default"], helpText: 'Move subject atoms down somewhat.', mnemonic: '' },
    { id: 'leftlots', svg: _reswmk_img_actions_MoveLeftLots_svg__WEBPACK_IMPORTED_MODULE_76__["default"], helpText: 'Move subject atoms somewhat to the left.', mnemonic: '' },
    { id: 'rightlots', svg: _reswmk_img_actions_MoveRightLots_svg__WEBPACK_IMPORTED_MODULE_77__["default"], helpText: 'Move subject atoms somewhat to the right.', mnemonic: '' },
    { id: 'upfar', svg: _reswmk_img_actions_MoveUpFar_svg__WEBPACK_IMPORTED_MODULE_78__["default"], helpText: 'Move subject atoms far up.', mnemonic: '' },
    { id: 'downfar', svg: _reswmk_img_actions_MoveDownFar_svg__WEBPACK_IMPORTED_MODULE_79__["default"], helpText: 'Move subject atoms far down.', mnemonic: '' },
    { id: 'leftfar', svg: _reswmk_img_actions_MoveLeftFar_svg__WEBPACK_IMPORTED_MODULE_80__["default"], helpText: 'Move subject atoms far to the left.', mnemonic: '' },
    { id: 'rightfar', svg: _reswmk_img_actions_MoveRightFar_svg__WEBPACK_IMPORTED_MODULE_81__["default"], helpText: 'Move subject atoms far to the right.', mnemonic: '' },
    { id: 'rotp01', svg: _reswmk_img_actions_MoveRotP01_svg__WEBPACK_IMPORTED_MODULE_82__["default"], helpText: 'Rotate 1\u00B0 counter-clockwise.', mnemonic: '' },
    { id: 'rotm01', svg: _reswmk_img_actions_MoveRotM01_svg__WEBPACK_IMPORTED_MODULE_83__["default"], helpText: 'Rotate 1\u00B0 clockwise.', mnemonic: '' },
    { id: 'rotp05', svg: _reswmk_img_actions_MoveRotP05_svg__WEBPACK_IMPORTED_MODULE_84__["default"], helpText: 'Rotate 5\u00B0 counter-clockwise.', mnemonic: '' },
    { id: 'rotm05', svg: _reswmk_img_actions_MoveRotM05_svg__WEBPACK_IMPORTED_MODULE_85__["default"], helpText: 'Rotate 5\u00B0 clockwise.', mnemonic: '' },
    { id: 'rotp15', svg: _reswmk_img_actions_MoveRotP15_svg__WEBPACK_IMPORTED_MODULE_86__["default"], helpText: 'Rotate 15\u00B0 counter-clockwise.', mnemonic: '' },
    { id: 'rotm15', svg: _reswmk_img_actions_MoveRotM15_svg__WEBPACK_IMPORTED_MODULE_87__["default"], helpText: 'Rotate 15\u00B0 clockwise.', mnemonic: '' },
    { id: 'rotp30', svg: _reswmk_img_actions_MoveRotP30_svg__WEBPACK_IMPORTED_MODULE_88__["default"], helpText: 'Rotate 30\u00B0 counter-clockwise.', mnemonic: 'Shift+[', key: '{' },
    { id: 'rotm30', svg: _reswmk_img_actions_MoveRotM30_svg__WEBPACK_IMPORTED_MODULE_89__["default"], helpText: 'Rotate 30\u00B0 clockwise.', mnemonic: 'Shift+]', key: '}' },
    { id: 'hflip', svg: _reswmk_img_actions_MoveHFlip_svg__WEBPACK_IMPORTED_MODULE_90__["default"], helpText: 'Flip subject atoms horizontally.', mnemonic: 'Shift+,', key: '<' },
    { id: 'vflip', svg: _reswmk_img_actions_MoveVFlip_svg__WEBPACK_IMPORTED_MODULE_91__["default"], helpText: 'Flip subject atoms vertically.', mnemonic: 'Shift+.', key: '>' },
    { id: 'shrink', svg: _reswmk_img_actions_MoveShrink_svg__WEBPACK_IMPORTED_MODULE_92__["default"], helpText: 'Decrease subject bond distances.', mnemonic: 'Shift+Z' },
    { id: 'grow', svg: _reswmk_img_actions_MoveGrow_svg__WEBPACK_IMPORTED_MODULE_93__["default"], helpText: 'Increase subject bond distances.', mnemonic: 'Shift+X' },
];
class CommandBank extends _ui_ButtonBank__WEBPACK_IMPORTED_MODULE_2__.ButtonBank {
    constructor(owner, cmdType = CommandType.Main) {
        super();
        this.owner = owner;
        this.cmdType = cmdType;
    }
    update() {
        if (this.cmdType == CommandType.Main)
            for (let btn of COMMANDS_MAIN)
                this.buttons.push(btn);
        else if (this.cmdType == CommandType.Atom)
            for (let btn of COMMANDS_ATOM)
                this.buttons.push(btn);
        else if (this.cmdType == CommandType.Bond)
            for (let btn of COMMANDS_BOND)
                this.buttons.push(btn);
        else if (this.cmdType == CommandType.Select)
            for (let btn of COMMANDS_SELECT)
                this.buttons.push(btn);
        else if (this.cmdType == CommandType.Move)
            for (let btn of COMMANDS_MOVE)
                this.buttons.push(btn);
        else if (this.cmdType == CommandType.Abbrev)
            this.populateElements(ELEMENTS_ABBREV);
        else if (this.cmdType == CommandType.SBlock)
            this.populateElements(ELEMENTS_S_BLOCK);
        else if (this.cmdType == CommandType.PBlock)
            this.populateElements(ELEMENTS_P_BLOCK);
        else if (this.cmdType == CommandType.DBlock)
            this.populateElements(ELEMENTS_D_BLOCK);
        else if (this.cmdType == CommandType.FBlock)
            this.populateElements(ELEMENTS_F_BLOCK);
        else if (this.cmdType == CommandType.Noble)
            this.populateElements(ELEMENTS_NOBLE);
    }
    populateElements(elements) {
        for (let el of elements) {
            this.buttons.push({ id: `element:${el}`, text: el, helpText: `Change elements to ${el}.` });
        }
    }
    hitButton(id) {
        let actv = 0, param = null;
        if (id.startsWith('element:')) {
            let el = id.substring(8);
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Element;
            param = { element: el };
        }
        else if (id == 'delete')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Delete;
        else if (id == 'undo') {
            if (this.owner.canUndo())
                this.owner.performUndo();
            else
                this.owner.showMessage('Nothing to undo.');
        }
        else if (id == 'redo') {
            if (this.owner.canRedo())
                this.owner.performRedo();
            else
                this.owner.showMessage('Nothing to redo.');
        }
        else if (id == 'cut')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Cut;
        else if (id == 'copy')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Copy;
        else if (id == 'paste')
            this.owner.performPaste();
        else if (id == 'new')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Clear;
        else if (id == 'zoomfit')
            this.owner.autoScale();
        else if (id == 'zoomout')
            this.owner.zoom(0.8);
        else if (id == 'zoomin')
            this.owner.zoom(1.25);
        else if (id == 'selall')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.SelectAll;
        else if (id == 'selnone')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.SelectNone;
        else if (id == 'selprev')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.SelectPrevComp;
        else if (id == 'selnext')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.SelectNextComp;
        else if (id == 'selside')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.SelectSide;
        else if (id == 'plus') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Charge;
            param = { delta: 1 };
        }
        else if (id == 'minus') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Charge;
            param = { delta: -1 };
        }
        else if (id == 'one') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondOrder;
            param = { order: 1 };
        }
        else if (id == 'two') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondOrder;
            param = { order: 2 };
        }
        else if (id == 'three') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondOrder;
            param = { order: 3 };
        }
        else if (id == 'four') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondOrder;
            param = { order: 4 };
        }
        else if (id == 'zero') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondOrder;
            param = { order: 0 };
        }
        else if (id == 'inclined') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondType;
            param = { type: _mol_Molecule__WEBPACK_IMPORTED_MODULE_0__.Molecule.BONDTYPE_INCLINED };
        }
        else if (id == 'declined') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondType;
            param = { type: _mol_Molecule__WEBPACK_IMPORTED_MODULE_0__.Molecule.BONDTYPE_DECLINED };
        }
        else if (id == 'squig') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondType;
            param = { type: _mol_Molecule__WEBPACK_IMPORTED_MODULE_0__.Molecule.BONDTYPE_UNKNOWN };
        }
        else if (id == 'linear') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondGeom;
            param = { geom: _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_1__.Geometry.Linear };
        }
        else if (id == 'trigonal') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondGeom;
            param = { geom: _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_1__.Geometry.Trigonal };
        }
        else if (id == 'tetra1') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondGeom;
            param = { geom: _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_1__.Geometry.Tetra1 };
        }
        else if (id == 'tetra2') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondGeom;
            param = { geom: _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_1__.Geometry.Tetra2 };
        }
        else if (id == 'sqplan') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondGeom;
            param = { geom: _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_1__.Geometry.SqPlan };
        }
        else if (id == 'octa1') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondGeom;
            param = { geom: _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_1__.Geometry.Octa1 };
        }
        else if (id == 'octa2') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondGeom;
            param = { geom: _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_1__.Geometry.Octa2 };
        }
        else if (id == 'switch')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondSwitch;
        else if (id == 'rotate')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondRotate;
        else if (id == 'connect')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Connect;
        else if (id == 'disconnect')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Disconnect;
        else if (id == 'metalligate')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.MetalLigate;
        else if (id == 'artifactpath')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondArtifactPath;
        else if (id == 'artifactring')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondArtifactRing;
        else if (id == 'artifactarene')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondArtifactArene;
        else if (id == 'artifactclear')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondArtifactClear;
        else if (id == 'polymer')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.PolymerBlock;
        else if (id == 'addtwo')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondAddTwo;
        else if (id == 'insert')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondInsert;
        else if (id == 'curelement')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.SelectCurElement;
        else if (id == 'selgrow')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.SelectGrow;
        else if (id == 'selshrink')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.SelectShrink;
        else if (id == 'selprev')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.SelectPrevComp;
        else if (id == 'selnext')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.SelectNextComp;
        else if (id == 'selchain')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.SelectChain;
        else if (id == 'smallring')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.SelectSmRing;
        else if (id == 'ringblock')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.SelectRingBlk;
        else if (id == 'toggle')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.SelectToggle;
        else if (id == 'uncurrent')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.SelectUnCurrent;
        else if (id == 'join')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Join;
        else if (id == 'inline')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.AbbrevGroup;
        else if (id == 'formula')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.AbbrevFormula;
        else if (id == 'clearabbrev')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.AbbrevClear;
        else if (id == 'expandabbrev')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.AbbrevExpand;
        else if (id == 'up') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Nudge;
            param = { dir: 'up' };
        }
        else if (id == 'down') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Nudge;
            param = { dir: 'down' };
        }
        else if (id == 'left') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Nudge;
            param = { dir: 'left' };
        }
        else if (id == 'right') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Nudge;
            param = { dir: 'right' };
        }
        else if (id == 'uplots') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.NudgeLots;
            param = { dir: 'up' };
        }
        else if (id == 'downlots') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.NudgeLots;
            param = { dir: 'down' };
        }
        else if (id == 'leftlots') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.NudgeLots;
            param = { dir: 'left' };
        }
        else if (id == 'rightlots') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.NudgeLots;
            param = { dir: 'right' };
        }
        else if (id == 'upfar') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.NudgeFar;
            param = { dir: 'up' };
        }
        else if (id == 'downfar') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.NudgeFar;
            param = { dir: 'down' };
        }
        else if (id == 'leftfar') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.NudgeFar;
            param = { dir: 'left' };
        }
        else if (id == 'rightfar') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.NudgeFar;
            param = { dir: 'right' };
        }
        else if (id == 'rotp01') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Rotate;
            param = { theta: 1 };
        }
        else if (id == 'rotm01') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Rotate;
            param = { theta: -1 };
        }
        else if (id == 'rotp05') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Rotate;
            param = { theta: 5 };
        }
        else if (id == 'rotm05') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Rotate;
            param = { theta: -5 };
        }
        else if (id == 'rotp15') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Rotate;
            param = { theta: 15 };
        }
        else if (id == 'rotm15') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Rotate;
            param = { theta: -15 };
        }
        else if (id == 'rotp30') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Rotate;
            param = { theta: 30 };
        }
        else if (id == 'rotm30') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Rotate;
            param = { theta: -30 };
        }
        else if (id == 'hflip') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Flip;
            param = { axis: 'hor' };
        }
        else if (id == 'vflip') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Flip;
            param = { axis: 'ver' };
        }
        else if (id == 'shrink') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Scale;
            param = { mag: 1 / 1.1 };
        }
        else if (id == 'grow') {
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Scale;
            param = { mag: 1.1 };
        }
        else if (id == 'bondQAny')
            actv = _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.QueryBondAny;
        else if (id == 'atom')
            this.buttonView.pushBank(new CommandBank(this.owner, CommandType.Atom));
        else if (id == 'bond')
            this.buttonView.pushBank(new CommandBank(this.owner, CommandType.Bond));
        else if (id == 'select')
            this.buttonView.pushBank(new CommandBank(this.owner, CommandType.Select));
        else if (id == 'move')
            this.buttonView.pushBank(new CommandBank(this.owner, CommandType.Move));
        else if (id == 'abbrev')
            this.buttonView.pushBank(new CommandBank(this.owner, CommandType.Abbrev));
        else if (id == 'sblock')
            this.buttonView.pushBank(new CommandBank(this.owner, CommandType.SBlock));
        else if (id == 'pblock')
            this.buttonView.pushBank(new CommandBank(this.owner, CommandType.PBlock));
        else if (id == 'dblock')
            this.buttonView.pushBank(new CommandBank(this.owner, CommandType.DBlock));
        else if (id == 'fblock')
            this.buttonView.pushBank(new CommandBank(this.owner, CommandType.FBlock));
        else if (id == 'noble')
            this.buttonView.pushBank(new CommandBank(this.owner, CommandType.Noble));
        else
            alert('Unhandled command: "' + id + '"');
        if (actv > 0) {
            new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.MoleculeActivity(this.owner.getState(), actv, param, this.owner).execute();
        }
    }
    claimKey(event) {
        for (let listItems of [COMMANDS_MAIN, COMMANDS_ATOM, COMMANDS_BOND, COMMANDS_SELECT, COMMANDS_MOVE])
            for (let item of listItems) {
                if (_ui_ButtonBank__WEBPACK_IMPORTED_MODULE_2__.ButtonBank.matchKey(event, item.mnemonic, item.key)) {
                    this.hitButton(item.id);
                    return true;
                }
            }
        return false;
    }
}


/***/ }),

/***/ "./src/sketcher/ContextSketch.ts":
/*!***************************************!*\
  !*** ./src/sketcher/ContextSketch.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ContextSketch: () => (/* binding */ ContextSketch)
/* harmony export */ });
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mol/PolymerBlock */ "./src/mol/PolymerBlock.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MoleculeActivity */ "./src/sketcher/MoleculeActivity.ts");




class ContextSketch {
    constructor(state, sketcher, proxyClip) {
        this.state = state;
        this.sketcher = sketcher;
        this.proxyClip = proxyClip;
    }
    populate() {
        const { state, sketcher } = this;
        let menu = [];
        if (sketcher.canUndo() || sketcher.canRedo()) {
            if (sketcher.canUndo())
                menu.push({ label: 'Undo', accelerator: 'CmdOrCtrl+Z', click: () => sketcher.performUndo() });
            if (sketcher.canRedo())
                menu.push({ label: 'Redo', accelerator: 'CmdOrCtrl+Shift+Z', click: () => sketcher.performRedo() });
            menu.push(null);
        }
        if (state.currentAtom > 0 || state.currentBond > 0)
            menu.push({ label: 'Edit', 'accelerator': 'Enter', click: () => sketcher.editCurrent() });
        this.maybeAppend(menu, 'Delete', 'D', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Delete);
        this.maybeAppend(menu, 'Cut', 'CmdOrCtrl+X', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Cut);
        this.maybeAppend(menu, 'Copy', 'CmdOrCtrl+C', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Copy);
        if (this.proxyClip.canAlwaysGet())
            menu.push({ label: 'Paste', 'accelerator': 'CmdOrCtrl+V', click: () => sketcher.performPaste() });
        this.maybeAppend(menu, 'Charge +', 'Shift+=', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Charge, { delta: 1 });
        this.maybeAppend(menu, 'Charge -', 'Shift+-', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Charge, { delta: -1 });
        this.maybeAppend(menu, 'Bond Order 0', '0', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondOrder, { order: 0 });
        this.maybeAppend(menu, 'Bond Order 1', '1', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondOrder, { order: 1 });
        this.maybeAppend(menu, 'Bond Order 2', '2', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondOrder, { order: 2 });
        this.maybeAppend(menu, 'Bond Order 3', '3', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondOrder, { order: 3 });
        this.maybeAppend(menu, 'Bond Order 4', null, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondOrder, { order: 4 });
        this.maybeAppend(menu, 'Unknown Stereochemistry', '4', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondType, { type: _mol_Molecule__WEBPACK_IMPORTED_MODULE_0__.Molecule.BONDTYPE_UNKNOWN });
        this.maybeAppend(menu, 'Bond Wedge Up', '5', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondType, { type: _mol_Molecule__WEBPACK_IMPORTED_MODULE_0__.Molecule.BONDTYPE_INCLINED });
        this.maybeAppend(menu, 'Bond Wedge Down', '6', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondType, { type: _mol_Molecule__WEBPACK_IMPORTED_MODULE_0__.Molecule.BONDTYPE_DECLINED });
        this.maybeAppend(menu, 'Switch Geometry', null, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondSwitch);
        this.maybeAppend(menu, 'Add Two Bonds', 'Shift+D', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondAddTwo);
        this.maybeAppend(menu, 'Insert Atom', null, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondInsert);
        this.maybeAppend(menu, 'Join Atoms', null, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Join);
        this.maybeAppend(menu, 'Abbreviate Group', '/', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.AbbrevGroup);
        this.maybeAppend(menu, 'Abbreviate Formula', '\\', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.AbbrevFormula);
        this.maybeAppend(menu, 'Clear Abbreviation', 'Shift+\\', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.AbbrevClear);
        this.maybeAppend(menu, 'Expand Abbreviation', 'Shift+/', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.AbbrevExpand);
        let rotateSub = this.rotateSubMenu();
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.notBlank(rotateSub))
            menu.push({ label: 'Rotate', subMenu: rotateSub });
        let querySub = this.querySubMenu();
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.notBlank(querySub))
            menu.push({ label: 'Query', subMenu: querySub });
        let poly = new _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_1__.PolymerBlock(state.mol);
        for (let units of poly.getUnits()) {
            let a1 = state.currentAtom, a2 = 0;
            if (state.currentBond > 0)
                [a1, a2] = state.mol.bondFromTo(state.currentBond);
            if (units.atoms.includes(a1) || units.atoms.includes(a2)) {
                let label = 'Polymer Block (' + units.atoms.length + ' atom' + (units.atoms.length == 1 ? '' : 's') + ')';
                menu.push({ label: label, click: () => sketcher.performPolymerBlock(units.atoms) });
            }
        }
        if (menu.length > 0)
            menu.push(null);
        menu.push({ label: 'Scale to Fit', click: () => sketcher.autoScale() });
        menu.push({ label: 'Zoom In', 'accelerator': '=', click: () => sketcher.zoom(1.25) });
        menu.push({ label: 'Zoom Out', 'accelerator': '-', click: () => sketcher.zoom(0.8) });
        return menu;
    }
    maybeAppend(menu, title, accelerator, activ, param = null) {
        let molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.MoleculeActivity(this.state, activ, param);
        molact.execute();
        if (!molact.output.mol && !molact.toClipboard)
            return;
        menu.push({ label: title, 'accelerator': accelerator, click: () => {
                this.sketcher.setState(molact.output, true);
                if (molact.toClipboard)
                    this.proxyClip.setString(molact.toClipboard);
            } });
    }
    rotateSubMenu() {
        let menu = [];
        this.maybeAppend(menu, 'Bond', null, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.BondRotate);
        this.maybeAppend(menu, '+1 \u{00B0}', null, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Rotate, { theta: 1 });
        this.maybeAppend(menu, '-1 \u{00B0}', null, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Rotate, { theta: -1 });
        this.maybeAppend(menu, '+5 \u{00B0}', null, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Rotate, { theta: 5 });
        this.maybeAppend(menu, '-5 \u{00B0}', null, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Rotate, { theta: -5 });
        this.maybeAppend(menu, '+15 \u{00B0}', null, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Rotate, { theta: 15 });
        this.maybeAppend(menu, '-15 \u{00B0}', null, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Rotate, { theta: -15 });
        this.maybeAppend(menu, '+30 \u{00B0}', 'Shift+[', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Rotate, { theta: 30 });
        this.maybeAppend(menu, '-30 \u{00B0}', 'Shift+]', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Rotate, { theta: -30 });
        this.maybeAppend(menu, 'H-Flip', 'Shift+,', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Flip, { axis: 'hor' });
        this.maybeAppend(menu, 'V-Flip', 'Shift+.', _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.Flip, { axis: 'ver' });
        this.maybeAppend(menu, 'Align', null, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.AlignRegular);
        return menu;
    }
    querySubMenu() {
        let menu = [];
        this.maybeAppend(menu, 'Clear', null, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.QueryClear);
        this.maybeAppend(menu, 'Copy', null, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_3__.ActivityType.QueryCopy);
        return menu;
    }
}


/***/ }),

/***/ "./src/sketcher/DrawCanvas.ts":
/*!************************************!*\
  !*** ./src/sketcher/DrawCanvas.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DraggingTool: () => (/* binding */ DraggingTool),
/* harmony export */   DrawCanvas: () => (/* binding */ DrawCanvas),
/* harmony export */   DrawCanvasDecoration: () => (/* binding */ DrawCanvasDecoration)
/* harmony export */ });
/* harmony import */ var _mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/Chemistry */ "./src/mol/Chemistry.ts");
/* harmony import */ var _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mol/CoordUtil */ "./src/mol/CoordUtil.ts");
/* harmony import */ var _mol_MetaMolecule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/MetaMolecule */ "./src/mol/MetaMolecule.ts");
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mol/PolymerBlock */ "./src/mol/PolymerBlock.ts");
/* harmony import */ var _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../mol/QueryUtil */ "./src/mol/QueryUtil.ts");
/* harmony import */ var _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../mol/SketchUtil */ "./src/mol/SketchUtil.ts");
/* harmony import */ var _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../mol/Stereochemistry */ "./src/mol/Stereochemistry.ts");
/* harmony import */ var _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../gfx/ArrangeMolecule */ "./src/gfx/ArrangeMolecule.ts");
/* harmony import */ var _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../gfx/DrawMolecule */ "./src/gfx/DrawMolecule.ts");
/* harmony import */ var _gfx_FontData__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../gfx/FontData */ "./src/gfx/FontData.ts");
/* harmony import */ var _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../gfx/MetaVector */ "./src/gfx/MetaVector.ts");
/* harmony import */ var _gfx_Rendering__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../gfx/Rendering */ "./src/gfx/Rendering.ts");
/* harmony import */ var _ui_Widget__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../ui/Widget */ "./src/ui/Widget.ts");
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _util_Geom__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../util/Geom */ "./src/util/Geom.ts");
/* harmony import */ var _util_Theme__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../util/Theme */ "./src/util/Theme.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");




















var DraggingTool;
(function (DraggingTool) {
    DraggingTool[DraggingTool["None"] = 0] = "None";
    DraggingTool[DraggingTool["Press"] = 1] = "Press";
    DraggingTool[DraggingTool["Lasso"] = 2] = "Lasso";
    DraggingTool[DraggingTool["Pan"] = 3] = "Pan";
    DraggingTool[DraggingTool["Zoom"] = 4] = "Zoom";
    DraggingTool[DraggingTool["Rotate"] = 5] = "Rotate";
    DraggingTool[DraggingTool["Move"] = 6] = "Move";
    DraggingTool[DraggingTool["Erasor"] = 7] = "Erasor";
    DraggingTool[DraggingTool["Atom"] = 8] = "Atom";
    DraggingTool[DraggingTool["Bond"] = 9] = "Bond";
    DraggingTool[DraggingTool["Charge"] = 10] = "Charge";
    DraggingTool[DraggingTool["Ring"] = 11] = "Ring";
})(DraggingTool || (DraggingTool = {}));
var DrawCanvasDecoration;
(function (DrawCanvasDecoration) {
    DrawCanvasDecoration[DrawCanvasDecoration["None"] = 0] = "None";
    DrawCanvasDecoration[DrawCanvasDecoration["Stereochemistry"] = 1] = "Stereochemistry";
    DrawCanvasDecoration[DrawCanvasDecoration["MappingNumber"] = 2] = "MappingNumber";
    DrawCanvasDecoration[DrawCanvasDecoration["AtomIndex"] = 3] = "AtomIndex";
})(DrawCanvasDecoration || (DrawCanvasDecoration = {}));
class DrawCanvas extends _ui_Widget__WEBPACK_IMPORTED_MODULE_14__.Widget {
    constructor() {
        super();
        this.mol = null;
        this.policy = null;
        this.offsetX = 0;
        this.offsetY = 0;
        this.pointScale = 1;
        this.viewOpt = {
            decoration: DrawCanvasDecoration.Stereochemistry,
            showOxState: true,
            showQuery: true,
            showArtifacts: true,
        };
        this.width = 0;
        this.height = 0;
        this.border = 0x808080;
        this.borderRadius = 4;
        this.background = 0xF8F8F8;
        this.canvasUnder = null;
        this.canvasMolecule = null;
        this.canvasOver = null;
        this.divMessage = null;
        this.layout = null;
        this.metavec = null;
        this.stereo = null;
        this.guidelines = null;
        this.filthy = false;
        this.dragType = DraggingTool.None;
        this.currentAtom = 0;
        this.currentBond = 0;
        this.hoverAtom = 0;
        this.hoverBond = 0;
        this.selectedMask = null;
        this.opAtom = 0;
        this.opBond = 0;
        this.opBudged = false;
        this.opShift = false;
        this.opCtrl = false;
        this.opAlt = false;
        this.lassoX = null;
        this.lassoY = null;
        this.lassoMask = null;
        this.clickX = 0;
        this.clickY = 0;
        this.mouseX = 0;
        this.mouseY = 0;
        this.dragGuides = null;
        this.templatePerms = null;
        this.currentPerm = 0;
        this.fusionBank = null;
        this.cursorWatermark = 0;
        this.cursorDX = 0;
        this.cursorDY = 0;
        this.toolAtomSymbol = '';
        this.toolBondOrder = 0;
        this.toolBondType = 0;
        this.toolChargeDelta = 0;
        this.toolRingArom = false;
        this.toolRingFreeform = false;
        this.toolRotateIncr = 0;
        this.redrawCacheKey = '';
        this.abbrevPolicy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_13__.RenderPolicy.defaultBlackOnWhite();
        this.abbrevPolicy.data.foreground = 0xD0D0D0;
        this.abbrevPolicy.data.atomCols = _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.numberArray(0xD0D0D0, this.abbrevPolicy.data.atomCols.length);
    }
    render(parent) {
        if (!this.width || !this.height)
            throw 'Sketcher.render called without width and height';
        super.render(parent);
        this.container = (0,_util_dom__WEBPACK_IMPORTED_MODULE_15__.dom)('<div/>').appendTo(this.contentDOM);
        this.container.css({ 'position': 'relative', 'width': this.width + 'px', 'height': this.height + 'px' });
        this.container.css({ 'background-color': (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.colourCanvas)(this.background) });
        if (this.border != _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_12__.MetaVector.NOCOLOUR) {
            this.container.css({ 'border': '1px solid ' + (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.colourCanvas)(this.border) });
            this.container.css({ 'border-radius': this.borderRadius + 'px' });
        }
        this.container.css({ 'outline': 'none' });
        this.container.attr({ 'tabindex': '0' });
        let canvasStyle = { 'position': 'absolute', 'left': '0', 'top': '0', 'width': `${this.width}px`, 'height': `${this.height}`, 'pointer-events': 'none' };
        this.divInfo = (0,_util_dom__WEBPACK_IMPORTED_MODULE_15__.dom)('<div/>').appendTo(this.container).css({ 'position': 'absolute', 'left': '0', 'top': '0', 'pointer-events': 'none' });
        this.canvasUnder = (0,_util_dom__WEBPACK_IMPORTED_MODULE_15__.dom)('<canvas/>').appendTo(this.container).css(canvasStyle);
        this.canvasMolecule = (0,_util_dom__WEBPACK_IMPORTED_MODULE_15__.dom)('<canvas/>').appendTo(this.container).css(canvasStyle);
        this.canvasOver = (0,_util_dom__WEBPACK_IMPORTED_MODULE_15__.dom)('<canvas/>').appendTo(this.container).css(canvasStyle);
        this.divMessage = (0,_util_dom__WEBPACK_IMPORTED_MODULE_15__.dom)('<div/>').appendTo(this.container).css(canvasStyle);
        this.divMessage.css({ 'text-align': 'center', 'vertical-align': 'middle', 'font-weight': 'bold', 'font-size': '120%' });
    }
    getState() {
        let state = {
            mol: this.mol.clone(),
            currentAtom: this.currentAtom,
            currentBond: this.currentBond,
            selectedMask: this.selectedMask == null ? null : this.selectedMask.slice(0)
        };
        return state;
    }
    getSelected(atom) {
        if (this.selectedMask == null || atom > this.selectedMask.length)
            return false;
        return this.selectedMask[atom - 1];
    }
    getLassoed(atom) {
        if (this.lassoMask == null || atom > this.lassoMask.length)
            return false;
        return this.lassoMask[atom - 1];
    }
    scale() { return this.pointScale; }
    angToX(ax) {
        return ax * this.pointScale + this.offsetX;
    }
    angToY(ay) {
        return ay * -this.pointScale + this.offsetY;
    }
    xToAng(px) {
        return (px - this.offsetX) / this.pointScale;
    }
    yToAng(py) {
        return (py - this.offsetY) / -this.pointScale;
    }
    scaleToAng(scale) { return scale / this.pointScale; }
    angToScale(ang) { return ang * this.pointScale; }
    yIsUp() { return false; }
    measureText(str, fontSize) { return _gfx_FontData__WEBPACK_IMPORTED_MODULE_11__.FontData.main.measureText(str, fontSize); }
    delayedRedraw() {
        if (this.canvasMolecule == null)
            return;
        this.filthy = true;
        window.setTimeout(() => { if (this.filthy)
            this.redraw(); }, 10);
    }
    layoutMolecule() {
        let mol = this.mol;
        if (this.hoverAtom > 0 && _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.hasAbbrev(mol, this.hoverAtom)) {
            mol = mol.clone();
            mol.setAtomElement(this.hoverAtom, '');
            mol.setAtomCharge(this.hoverAtom, 0);
            mol.setAtomUnpaired(this.hoverAtom, 0);
            _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.clearAbbrev(mol, this.hoverAtom);
        }
        let effects = this.sketchEffects(mol);
        this.layout = new _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_9__.ArrangeMolecule(mol, this, this.policy, effects);
        this.layout.setWantArtifacts(this.viewOpt.showArtifacts);
        this.layout.arrange();
    }
    redrawMetaVector() {
        this.metavec = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_12__.MetaVector();
        new _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_10__.DrawMolecule(this.layout, this.metavec).draw();
        if (this.hoverAtom > 0 && _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.hasAbbrev(this.mol, this.hoverAtom)) {
            let abbrevMol = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.getAbbrev(this.mol, this.hoverAtom);
            this.orientAbbreviation(this.hoverAtom, abbrevMol);
            this.abbrevPolicy.data.pointScale = this.policy.data.pointScale;
            let layout = new _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_9__.ArrangeMolecule(abbrevMol, this, this.abbrevPolicy, new _gfx_Rendering__WEBPACK_IMPORTED_MODULE_13__.RenderEffects());
            layout.arrange();
            new _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_10__.DrawMolecule(layout, this.metavec).draw();
        }
    }
    redraw() {
        this.filthy = false;
        this.redrawInfo();
        this.redrawUnder();
        this.redrawMolecule();
        this.redrawOver();
    }
    redrawInfo() {
        let cacheKey = JSON.stringify([this.width, this.height, this.mol.toString()]);
        if (cacheKey == this.redrawCacheKey)
            return;
        this.redrawCacheKey = cacheKey;
        this.divInfo.empty();
        this.divInfo.css({ 'visibility': 'hidden', 'left': '0', 'top': '0' });
        if (this.mol.numAtoms == 0)
            return;
        let divText = (0,_util_dom__WEBPACK_IMPORTED_MODULE_15__.dom)('<div/>').appendTo(this.divInfo);
        divText.css({ 'display': 'inline-block', 'text-align': 'right', 'font-family': 'sans-serif', 'font-size': '80%', 'color': '#C0C0C0' });
        let html = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.molecularFormula(this.mol, ['<sub>', '</sub>', '<sup>', '</sup>']);
        let chg = 0;
        for (let n = 1; n <= this.mol.numAtoms; n++)
            chg += this.mol.atomCharge(n);
        if (chg == -1)
            html += '<sup>-</sup>';
        else if (chg < -1)
            html += `<sup>${chg}</sup>`;
        else if (chg == 1)
            html += '<sup>+</sup>';
        else if (chg > 1)
            html += `<sup>+${chg}</sup>`;
        html += '<br>' + _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.molecularWeight(this.mol).toFixed(2);
        divText.setHTML(html);
        setTimeout(() => {
            let w = divText.width(), h = divText.height();
            (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.setBoundaryPixels)(this.divInfo, this.width - w - 1, 1, w, h);
            this.divInfo.css({ 'visibility': 'visible' });
        }, 1);
    }
    redrawUnder() {
        let HOVER_COL = 0xE0E0E0;
        let CURRENT_COL = 0xA0A0A0, CURRENT_BORD = 0x808080;
        let SELECT_COL = 0xC0C0C0;
        let LASSO_COL = 0xD0D0D0;
        let density = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.pixelDensity)();
        this.canvasUnder.elCanvas.width = this.width * density;
        this.canvasUnder.elCanvas.height = this.height * density;
        this.canvasUnder.css({ 'width': `${this.width}px`, 'height': `${this.height}px` });
        let ctx = this.canvasUnder.elCanvas.getContext('2d');
        ctx.save();
        ctx.scale(density, density);
        ctx.clearRect(0, 0, this.width, this.height);
        if (this.hoverAtom > 0) {
            let units = new _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__.PolymerBlock(this.mol).getUnits();
            for (let unit of units)
                if (unit.atoms.includes(this.hoverAtom))
                    this.drawPolymerUnit(ctx, unit, units);
            let sz = 0;
            if (this.hoverAtom == this.currentAtom)
                sz += 0.1;
            if (this.getSelected(this.hoverAtom))
                sz += 0.1;
            if (this.currentBond > 0 && (this.mol.bondFrom(this.currentBond) == this.hoverAtom || this.mol.bondTo(this.currentBond) == this.hoverAtom))
                sz += 0.1;
            this.drawAtomShade(ctx, this.hoverAtom, HOVER_COL, -1, sz);
        }
        if (this.hoverBond > 0) {
            let bfr = this.mol.bondFrom(this.hoverBond), bto = this.mol.bondTo(this.hoverBond);
            let units = new _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__.PolymerBlock(this.mol).getUnits();
            for (let unit of units)
                if (unit.atoms.includes(bfr) && unit.atoms.includes(bto))
                    this.drawPolymerUnit(ctx, unit, units);
            let sz = 0;
            if (this.hoverBond == this.currentBond)
                sz += 0.1;
            if (this.getSelected(bfr) && this.getSelected(bto))
                sz += 0.1;
            this.drawBondShade(ctx, this.hoverBond, HOVER_COL, -1, sz);
        }
        for (let n = 1; n <= this.mol.numBonds; n++) {
            let sz = n == this.currentBond ? 0.1 : 0;
            let bfr = this.mol.bondFrom(n), bto = this.mol.bondTo(n);
            let sfr = this.getSelected(bfr), sto = this.getSelected(bto), lfr = this.getLassoed(bfr), lto = this.getLassoed(bto);
            if (sfr && sto)
                this.drawBondShade(ctx, n, SELECT_COL, -1, sz);
            else if ((sfr || lfr) && (sto || lto))
                this.drawBondShade(ctx, n, LASSO_COL, -1, sz);
        }
        for (let n = 1; n <= this.mol.numAtoms; n++) {
            let sz = this.currentAtom == n ? 0.1 : 0;
            if (this.getSelected(n))
                this.drawAtomShade(ctx, n, SELECT_COL, -1, sz);
            else if (this.getLassoed(n))
                this.drawAtomShade(ctx, n, LASSO_COL, -1, sz);
        }
        if (this.currentAtom > 0) {
            this.drawAtomShade(ctx, this.currentAtom, CURRENT_COL, CURRENT_BORD, 0);
        }
        if (this.currentBond > 0) {
            this.drawBondShade(ctx, this.currentBond, CURRENT_COL, CURRENT_BORD, 0);
        }
        if (this.dragType == DraggingTool.Move || (this.dragType == DraggingTool.Atom && this.opAtom > 0) || this.dragType == DraggingTool.Bond) {
            if (this.dragGuides != null && this.dragGuides.length > 0) {
                for (let g of this.dragGuides)
                    for (let n = 0; n < g.x.length; n++) {
                        let lw = this.policy.data.lineSize * this.pointScale;
                        ctx.strokeStyle = '#C0C0C0';
                        ctx.lineWidth = lw;
                        (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.drawLine)(ctx, g.sourceX, g.sourceY, g.destX[n], g.destY[n]);
                        ctx.beginPath();
                        ctx.ellipse(g.destX[n], g.destY[n], 2 * lw, 2 * lw, 0, 0, _util_util__WEBPACK_IMPORTED_MODULE_18__.TWOPI, false);
                        ctx.fillStyle = '#C0C0C0';
                        ctx.fill();
                    }
            }
        }
        if (this.dragType == DraggingTool.Ring) {
            let [ringX, ringY] = this.determineFauxRing();
            let rsz = ringX == null ? 0 : ringX.length;
            if (rsz > 0) {
                let scale = this.pointScale;
                let lw = this.policy.data.lineSize * scale;
                ctx.strokeStyle = '#C0C0C0';
                ctx.lineWidth = lw;
                for (let n = 0; n < rsz; n++) {
                    let nn = n < rsz - 1 ? n + 1 : 0;
                    let x1 = this.angToX(ringX[n]), y1 = this.angToY(ringY[n]);
                    let x2 = this.angToX(ringX[nn]), y2 = this.angToY(ringY[nn]);
                    (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.drawLine)(ctx, x1, y1, x2, y2);
                }
                if (this.toolRingArom) {
                    let cx = 0, cy = 0;
                    for (let n = 0; n < rsz; n++) {
                        cx += ringX[n];
                        cy += ringY[n];
                    }
                    cx /= rsz;
                    cy /= rsz;
                    let rad = 0;
                    for (let n = 0; n < rsz; n++)
                        rad += (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.norm_xy)(ringX[n] - cx, ringY[n] - cy);
                    rad = this.angToScale(rad * 0.5 / rsz);
                    ctx.beginPath();
                    ctx.ellipse(this.angToX(cx), this.angToY(cy), rad, rad, 0, 0, _util_util__WEBPACK_IMPORTED_MODULE_18__.TWOPI, false);
                    ctx.stroke();
                }
            }
        }
        ctx.restore();
    }
    redrawMolecule() {
        let density = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.pixelDensity)();
        this.canvasMolecule.elCanvas.width = this.width * density;
        this.canvasMolecule.elCanvas.height = this.height * density;
        this.canvasMolecule.css({ 'width': `${this.width}px`, 'height': `${this.height}px` });
        let ctx = this.canvasMolecule.elCanvas.getContext('2d');
        ctx.save();
        ctx.scale(density, density);
        ctx.clearRect(0, 0, this.width, this.height);
        if (this.metavec != null)
            this.metavec.renderContext(ctx);
        if (this.templatePerms != null) {
            let perm = this.templatePerms[this.currentPerm];
            if (perm.metavec != null)
                perm.metavec.renderContext(ctx);
        }
        ctx.restore();
    }
    redrawOver() {
        let density = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.pixelDensity)();
        this.canvasOver.elCanvas.width = this.width * density;
        this.canvasOver.elCanvas.height = this.height * density;
        this.canvasOver.css({ 'width': `${this.width}px`, 'height': `${this.height}px` });
        let ctx = this.canvasOver.elCanvas.getContext('2d');
        ctx.save();
        ctx.scale(density, density);
        ctx.clearRect(0, 0, this.width, this.height);
        if ((this.dragType == DraggingTool.Lasso || this.dragType == DraggingTool.Erasor) && this.lassoX.length > 1) {
            let erasing = this.dragType == DraggingTool.Erasor;
            let path = new Path2D();
            path.moveTo(this.lassoX[0], this.lassoY[0]);
            for (let n = 1; n < this.lassoX.length; n++)
                path.lineTo(this.lassoX[n], this.lassoY[n]);
            path.closePath();
            ctx.fillStyle = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.colourCanvas)(erasing ? 0xD0FF0000 : 0xF0000000);
            ctx.fill(path);
            ctx.strokeStyle = erasing ? '#804040' : '#808080';
            ctx.lineWidth = 0.5;
            ctx.stroke(path);
        }
        if (this.dragType == DraggingTool.Rotate) {
            let [x0, y0, theta, magnitude] = this.determineDragTheta();
            let scale = this.pointScale;
            let lw = this.policy.data.lineSize * scale;
            ctx.strokeStyle = '#E0E0E0';
            ctx.lineWidth = 0.5 * lw;
            (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.drawLine)(ctx, x0, y0, x0 + magnitude, y0);
            ctx.strokeStyle = '#808080';
            ctx.lineWidth = lw;
            (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.drawLine)(ctx, x0, y0, x0 + magnitude * Math.cos(theta), y0 + magnitude * Math.sin(theta));
            ctx.beginPath();
            ctx.ellipse(x0, y0, 2 * lw, 2 * lw, 0, 0, _util_util__WEBPACK_IMPORTED_MODULE_18__.TWOPI, false);
            ctx.fillStyle = '#808080';
            ctx.fill();
            for (let atom of this.subjectAtoms(true, false)) {
                let ax = this.angToX(this.mol.atomX(atom)), ay = this.angToY(this.mol.atomY(atom));
                let ang = Math.atan2(ay - y0, ax - x0), dist = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.norm_xy)(ax - x0, ay - y0);
                let nx = x0 + dist * Math.cos(ang + theta), ny = y0 + dist * Math.sin(ang + theta);
                ctx.beginPath();
                ctx.ellipse(nx, ny, 2 * lw, 2 * lw, 0, 0, _util_util__WEBPACK_IMPORTED_MODULE_18__.TWOPI, false);
                ctx.strokeStyle = 'black';
                ctx.lineWidth = 0.5;
                ctx.stroke();
            }
        }
        if (this.dragType == DraggingTool.Move) {
            let [dx, dy] = this.determineMoveDelta();
            let scale = this.pointScale;
            let lw = this.policy.data.lineSize * scale;
            for (let atom of this.subjectAtoms(false, true)) {
                let ax = this.angToX(this.mol.atomX(atom)), ay = this.angToY(this.mol.atomY(atom));
                ctx.beginPath();
                ctx.ellipse(ax + dx, ay + dy, 2 * lw, 2 * lw, 0, 0, _util_util__WEBPACK_IMPORTED_MODULE_18__.TWOPI, false);
                ctx.strokeStyle = 'black';
                ctx.lineWidth = 0.5;
                ctx.stroke();
            }
        }
        if ((this.dragType == DraggingTool.Atom && this.opAtom > 0) || this.dragType == DraggingTool.Bond) {
            let element = this.dragType == DraggingTool.Atom ? this.toolAtomSymbol : 'C';
            let order = this.dragType == DraggingTool.Bond ? this.toolBondOrder : 1;
            let type = this.dragType == DraggingTool.Bond ? this.toolBondType : _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.BONDTYPE_NORMAL;
            this.drawOriginatingBond(ctx, element, order, type);
        }
        if (this.viewOpt.showQuery)
            this.drawQueryFeatures(ctx);
        ctx.restore();
    }
    subjectAtoms(allIfNone = false, useOpAtom = false) {
        let atoms = [];
        if (this.selectedMask != null) {
            for (let n = 0; n < this.selectedMask.length; n++)
                if (this.selectedMask[n])
                    atoms.push(n + 1);
            if (atoms.length > 0)
                return atoms;
        }
        if (this.currentAtom > 0)
            atoms.push(this.currentAtom);
        else if (this.currentBond > 0) {
            atoms.push(this.mol.bondFrom(this.currentBond));
            atoms.push(this.mol.bondTo(this.currentBond));
        }
        if (useOpAtom && atoms.length == 0 && this.opAtom > 0)
            atoms.push(this.opAtom);
        if (allIfNone && atoms.length == 0) {
            for (let n = 1; n <= this.mol.numAtoms; n++)
                atoms.push(n);
        }
        return atoms;
    }
    updateLasso(x, y) {
        if (this.dragType != DraggingTool.Lasso && this.dragType != DraggingTool.Erasor)
            return;
        if (x < 0 || y < 0 || x > this.width || y > this.height) {
            this.dragType = DraggingTool.None;
            this.lassoX = null;
            this.lassoY = null;
            this.lassoMask = null;
            this.delayedRedraw();
        }
        let len = _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.len(this.lassoX);
        if (len > 0 && this.lassoX[len - 1] == x && this.lassoY[len - 1] == y)
            return;
        this.lassoX.push(x);
        this.lassoY.push(y);
        this.calculateLassoMask();
        this.delayedRedraw();
    }
    calculateLassoMask() {
        this.lassoMask = new Array(this.mol.numAtoms);
        for (let n = 0; n < this.mol.numAtoms; n++)
            this.lassoMask[n] = false;
        for (let n = 0; n < this.layout.numPoints(); n++) {
            let p = this.layout.getPoint(n);
            if (p.anum == 0)
                continue;
            this.lassoMask[p.anum - 1] = _util_Geom__WEBPACK_IMPORTED_MODULE_16__.GeomUtil.pointInPolygon(p.oval.cx, p.oval.cy, this.lassoX, this.lassoY);
        }
    }
    drawAtomShade(ctx, atom, fillCol, borderCol, anghalo) {
        if (this.layout == null)
            return;
        let p = null;
        for (let n = 0; n < this.layout.numPoints(); n++)
            if (this.layout.getPoint(n).anum == atom) {
                p = this.layout.getPoint(n);
                break;
            }
        if (p == null)
            return;
        let minRad = 0.2 * this.pointScale, minRadSq = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.sqr)(minRad);
        let cx = p.oval.cx, cy = p.oval.cy;
        let rad = Math.max(minRad, Math.max(p.oval.rw, p.oval.rh)) + (0.1 + anghalo) * this.pointScale;
        if (fillCol != -1) {
            ctx.beginPath();
            ctx.ellipse(cx, cy, rad, rad, 0, 0, _util_util__WEBPACK_IMPORTED_MODULE_18__.TWOPI, true);
            ctx.fillStyle = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.colourCanvas)(fillCol);
            ctx.fill();
        }
        if (borderCol != -1) {
            ctx.beginPath();
            ctx.ellipse(cx, cy, rad, rad, 0, 0, _util_util__WEBPACK_IMPORTED_MODULE_18__.TWOPI, true);
            ctx.strokeStyle = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.colourCanvas)(borderCol);
            ctx.lineWidth = 1;
            ctx.stroke();
        }
    }
    drawBondShade(ctx, bond, fillCol, borderCol, anghalo) {
        var _a;
        if (this.layout == null)
            return;
        let x1 = 0, y1 = 0, x2 = 0, y2 = 0, nb = 0, sz = 0;
        for (let l of (_a = this.layout.getUnsplitLines()) !== null && _a !== void 0 ? _a : this.layout.getLines()) {
            if (l.bnum != bond)
                continue;
            x1 += l.line.x1;
            y1 += l.line.y1;
            x2 += l.line.x2;
            y2 += l.line.y2;
            nb++;
            sz += l.size + (0.2 + anghalo) * this.pointScale;
        }
        if (nb == 0)
            return;
        let invNB = 1 / nb;
        sz *= invNB;
        x1 *= invNB;
        y1 *= invNB;
        x2 *= invNB;
        y2 *= invNB;
        let dx = x2 - x1, dy = y2 - y1, invDist = 1 / (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.norm_xy)(dx, dy);
        dx *= invDist;
        dy *= invDist;
        let ox = dy, oy = -dx;
        let path = new Path2D(), mx, my, CIRC = 0.8;
        path.moveTo(x1 + ox * sz, y1 + oy * sz);
        mx = x1 + (ox * sz - dx * sz) * CIRC;
        my = y1 + (oy * sz - dy * sz) * CIRC;
        path.quadraticCurveTo(mx, my, x1 - dx * sz, y1 - dy * sz);
        mx = x1 + (-ox * sz - dx * sz) * CIRC;
        my = y1 + (-oy * sz - dy * sz) * CIRC;
        path.quadraticCurveTo(mx, my, x1 - ox * sz, y1 - oy * sz);
        path.lineTo(x2 - ox * sz, y2 - oy * sz);
        mx = x2 + (-ox * sz + dx * sz) * CIRC;
        my = y2 + (-oy * sz + dy * sz) * CIRC;
        path.quadraticCurveTo(mx, my, x2 + dx * sz, y2 + dy * sz);
        mx = x2 + (ox * sz + dx * sz) * CIRC;
        my = y2 + (oy * sz + dy * sz) * CIRC;
        path.quadraticCurveTo(mx, my, x2 + ox * sz, y2 + oy * sz);
        path.closePath();
        if (fillCol != -1) {
            ctx.beginPath();
            ctx.fillStyle = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.colourCanvas)(fillCol);
            ctx.fill(path);
        }
        if (borderCol != -1) {
            ctx.beginPath();
            ctx.strokeStyle = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.colourCanvas)(borderCol);
            ctx.lineWidth = 1;
            ctx.stroke(path);
        }
    }
    drawOriginatingBond(ctx, element, order, type) {
        let x1 = this.clickX, y1 = this.clickY;
        if (this.opAtom > 0) {
            x1 = this.angToX(this.mol.atomX(this.opAtom));
            y1 = this.angToY(this.mol.atomY(this.opAtom));
        }
        else if (this.opBond > 0) {
            let [bfr, bto] = this.mol.bondFromTo(this.opBond);
            x1 = this.angToX(0.5 * (this.mol.atomX(bfr) + this.mol.atomX(bto)));
            y1 = this.angToY(0.5 * (this.mol.atomY(bfr) + this.mol.atomY(bto)));
        }
        let x2 = this.mouseX, y2 = this.mouseY;
        let snapTo = this.snapToGuide(x2, y2), snapAtom = false;
        if (snapTo)
            [x2, y2, snapAtom] = snapTo;
        let scale = this.pointScale;
        ctx.strokeStyle = snapAtom ? '#4040FF' : '#808080';
        ctx.lineWidth = this.policy.data.lineSize * scale * (snapAtom ? 1.5 : 1);
        (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.drawLine)(ctx, x1, y1, x2, y2);
        if (element != 'C') {
            let fh = this.policy.data.fontSize * scale;
            ctx.font = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.fontSansSerif)(fh);
            let metrics = ctx.measureText(element);
            ctx.fillStyle = '#808080';
            ctx.fillText(element, x2 - 0.5 * metrics.width, y2 + 0.5 * fh);
        }
    }
    drawQueryFeatures(ctx) {
        const { layout, mol } = this;
        let annots = [];
        for (let n = 1; n <= mol.numAtoms; n++)
            if (_mol_QueryUtil__WEBPACK_IMPORTED_MODULE_6__.QueryUtil.hasAnyQueryAtom(mol, n)) {
                let bits = [];
                for (let xtra of mol.atomExtra(n))
                    if (xtra.startsWith('q'))
                        bits.push(xtra);
                let ap = layout.getPoint(n - 1);
                annots.push({ txt: bits.join(','), x: ap.oval.cx + ap.oval.rw, y: ap.oval.cy });
            }
        for (let n = 1; n <= mol.numBonds; n++)
            if (_mol_QueryUtil__WEBPACK_IMPORTED_MODULE_6__.QueryUtil.hasAnyQueryBond(mol, n)) {
                let bits = [];
                for (let xtra of mol.bondExtra(n))
                    if (xtra.startsWith('q') && !xtra.startsWith(_mol_QueryUtil__WEBPACK_IMPORTED_MODULE_6__.QueryTypeBond.Orders))
                        bits.push(xtra);
                let num = 0, cx = 0, cy = 0;
                for (let bl of layout.getLines())
                    if (bl.bnum == n) {
                        num += 2;
                        cx += bl.line.x1 + bl.line.x2;
                        cy += bl.line.y1 + bl.line.y2;
                    }
                annots.push({ txt: bits.join(','), x: cx / num, y: cy / num });
            }
        let fh = 0.7 * this.policy.data.fontSize * this.pointScale;
        for (let annot of annots) {
            ctx.font = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.fontSansSerif)(fh);
            ctx.fillStyle = '#FF40C0';
            ctx.fillText(annot.txt, annot.x, annot.y);
        }
    }
    drawPolymerUnit(ctx, unit, allUnits) {
        const { mol, layout } = this;
        let x = [], y = [];
        let scale = this.pointScale;
        for (let a of unit.atoms) {
            let pt = layout.getPoint(a - 1);
            let rad = Math.max(0.5 * scale, Math.max(pt.oval.rw, pt.oval.rh));
            const NPT = 36, THPT = _util_util__WEBPACK_IMPORTED_MODULE_18__.TWOPI / NPT;
            for (let n = 0; n < NPT; n++) {
                let th = n * THPT;
                x.push(pt.oval.cx + rad * Math.cos(th));
                y.push(pt.oval.cy + rad * Math.sin(th));
            }
        }
        let extBonds = [], inAtoms = [], outAtoms = [];
        for (let n = 1; n <= mol.numBonds; n++) {
            let bfr = mol.bondFrom(n), bto = mol.bondTo(n);
            let flag1 = unit.atoms.includes(bfr), flag2 = unit.atoms.includes(bto);
            if (!flag1 && !flag2)
                continue;
            if (!flag2) {
                extBonds.push(n);
                inAtoms.push(bfr);
                outAtoms.push(bto);
            }
            else if (!flag1) {
                extBonds.push(n);
                inAtoms.push(bto);
                outAtoms.push(bfr);
            }
            let pt1 = layout.getPoint(bfr - 1), pt2 = layout.getPoint(bto - 1);
            let x1 = pt1.oval.cx, y1 = pt1.oval.cy, x2 = pt2.oval.cx, y2 = pt2.oval.cy;
            if (!flag1)
                [x1, y1] = [0.5 * (x1 + x2), 0.5 * (y1 + y2)];
            else if (!flag2)
                [x2, y2] = [0.5 * (x1 + x2), 0.5 * (y1 + y2)];
            let dx = x2 - x1, dy = y2 - y1, d = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.norm_xy)(dx, dy), invD = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.invZ)(d);
            let ox = dy * invD * 0.3 * scale, oy = -dx * invD * 0.3 * scale;
            let npWidth = Math.ceil(2 * d / scale) + 1, npHeight = Math.ceil(2 * (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.norm_xy)(ox, oy) / scale) + 1;
            for (let n = 0; n <= npWidth; n++) {
                x.push(x1 - ox + dx * n / npWidth);
                y.push(y1 - oy + dy * n / npWidth);
                x.push(x1 + ox + dx * n / npWidth);
                y.push(y1 + oy + dy * n / npWidth);
            }
            for (let n = 1; n < npHeight; n++) {
                x.push(x1 - ox + 2 * ox * n / npHeight);
                y.push(y1 - oy + 2 * oy * n / npHeight);
                x.push(x2 - ox + 2 * ox * n / npHeight);
                y.push(y2 - oy + 2 * oy * n / npHeight);
            }
        }
        let [px, py] = _util_Geom__WEBPACK_IMPORTED_MODULE_16__.GeomUtil.outlinePolygon(x, y, 0.5 * scale);
        let path = new Path2D();
        path.moveTo(px[0], py[0]);
        for (let n = 1; n < px.length; n++)
            path.lineTo(px[n], py[n]);
        path.closePath();
        ctx.save();
        ctx.fillStyle = '#F9EFFF';
        ctx.fill(path);
        ctx.strokeStyle = '#C0C0C0';
        ctx.lineWidth = 1;
        ctx.stroke(path);
        ctx.restore();
        let selfLinks = [];
        let innerLinks = [];
        let outerLinks = [];
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.len(unit.bondConn) == 4) {
            innerLinks.push([inAtoms[extBonds.indexOf(unit.bondConn[0])], inAtoms[extBonds.indexOf(unit.bondConn[2])]]);
            innerLinks.push([inAtoms[extBonds.indexOf(unit.bondConn[1])], inAtoms[extBonds.indexOf(unit.bondConn[3])]]);
        }
        else if (_util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.len(extBonds) == 2 && unit.connect != null) {
            if (unit.connect == _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__.PolymerBlockConnectivity.HeadToTail || unit.connect == _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__.PolymerBlockConnectivity.Random) {
                innerLinks.push([inAtoms[0], inAtoms[1]]);
            }
            if (unit.connect == _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__.PolymerBlockConnectivity.HeadToHead || unit.connect == _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__.PolymerBlockConnectivity.Random) {
                selfLinks.push(inAtoms[0]);
                selfLinks.push(inAtoms[1]);
            }
        }
        else {
            for (let b of extBonds) {
                let a1 = mol.bondFrom(b), a2 = mol.bondTo(b);
                if (unit.atoms.includes(a2))
                    [a1, a2] = [a2, a1];
                let incl = unit.bondIncl.get(b), excl = unit.bondExcl.get(b);
                let isCapped = mol.atomElement(a2) != _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__.POLYMERBLOCK_SPECIAL_UNCAPPED;
                for (let look of (isCapped ? [unit] : allUnits))
                    for (let a of look.atoms) {
                        let isExt = false;
                        for (let adj of mol.atomAdjList(a))
                            if (!look.atoms.includes(adj)) {
                                isExt = true;
                                break;
                            }
                        if (!isExt)
                            continue;
                        if (_util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.notBlank(incl)) {
                            let anames = look.atomName.get(a), any = false;
                            if (anames)
                                for (let an of anames)
                                    any = any || incl.includes(an);
                            if (!any)
                                continue;
                        }
                        if (_util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.notBlank(excl)) {
                            let anames = look.atomName.get(a), any = false;
                            if (anames)
                                for (let an of anames)
                                    any = any || excl.includes(an);
                            if (any)
                                continue;
                        }
                        if (a == a1)
                            selfLinks.push(a1);
                        else if (unit === look)
                            innerLinks.push([a1, a]);
                        else
                            outerLinks.push([a1, a]);
                    }
            }
        }
        selfLinks = _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.uniqueStable(selfLinks);
        innerLinks = _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.maskGet(innerLinks, _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.maskUnique(innerLinks.map((pair) => _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.min(pair) * mol.numAtoms + _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.max(pair))));
        outerLinks = _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.maskGet(outerLinks, _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.maskUnique(outerLinks.map((pair) => _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.min(pair) * mol.numAtoms + _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.max(pair))));
        ctx.save();
        ctx.strokeStyle = '#6329C1';
        ctx.lineWidth = 2;
        ctx.setLineDash([1, 1]);
        ctx.beginPath();
        for (let a of selfLinks) {
            let p1 = layout.getPoint(a - 1), x1 = p1.oval.cx, y1 = p1.oval.cy;
            let x2 = 0, y2 = 0, num = 0;
            for (let n = 0; n < extBonds.length; n++)
                if (inAtoms[n] == a) {
                    let p2 = layout.getPoint(outAtoms[n] - 1);
                    x2 += p2.oval.cx;
                    y2 += p2.oval.cy;
                    num++;
                }
            if (num > 1) {
                x2 /= num;
                y2 /= num;
            }
            x2 = x1 + 0.5 * (x2 - x1);
            y2 = y1 + 0.5 * (y2 - y1);
            let dx = x2 - x1, dy = y2 - y1, invD = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.invZ)((0,_util_util__WEBPACK_IMPORTED_MODULE_18__.norm_xy)(dx, dy)), ox = dy * invD, oy = -dx * invD;
            let cx = 0.5 * (x1 + x2), cy = 0.5 * (y1 + y2);
            const EXT = 2 * scale;
            ctx.moveTo(x1, y1);
            ctx.quadraticCurveTo(cx + ox * EXT, cy + oy * EXT, x2, y2);
            ctx.quadraticCurveTo(cx - ox * EXT, cy - oy * EXT, x1, y1);
        }
        for (let [a1, a2] of innerLinks) {
            let x1 = mol.atomX(a1), y1 = mol.atomY(a1), x2 = mol.atomX(a2), y2 = mol.atomY(a2);
            let dx = x2 - x1, dy = y2 - y1, invD = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.invZ)((0,_util_util__WEBPACK_IMPORTED_MODULE_18__.norm_xy)(dx, dy)), ox = dy * invD, oy = -dx * invD;
            let cx = 0.5 * (x1 + x2), cy = 0.5 * (y1 + y2);
            const EXT = 5;
            let px1 = cx + ox * EXT, py1 = cy + oy * EXT, px2 = cx - ox * EXT, py2 = cy - oy * EXT;
            let [px, py] = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.congestionPoint(mol, px1, py1) < _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.congestionPoint(mol, px2, py2) ? [px1, py1] : [px2, py2];
            ctx.moveTo(this.angToX(x1), this.angToY(y1));
            ctx.quadraticCurveTo(this.angToX(px), this.angToY(py), this.angToX(x2), this.angToY(y2));
        }
        for (let [a1, a2] of outerLinks) {
            let p1 = layout.getPoint(a1 - 1), p2 = layout.getPoint(a2 - 1);
            ctx.moveTo(p1.oval.cx, p1.oval.cy);
            ctx.lineTo(p2.oval.cx, p2.oval.cy);
        }
        ctx.stroke();
        ctx.restore();
    }
    determineFauxRing() {
        let atom = this.opAtom, bond = this.opBond, mol = this.mol;
        let x1 = atom > 0 ? mol.atomX(atom) : bond > 0 ? 0.5 * (mol.atomX(mol.bondFrom(bond)) + mol.atomX(mol.bondTo(bond))) : this.xToAng(this.clickX);
        let y1 = atom > 0 ? mol.atomY(atom) : bond > 0 ? 0.5 * (mol.atomY(mol.bondFrom(bond)) + mol.atomY(mol.bondTo(bond))) : this.yToAng(this.clickY);
        let x2 = this.xToAng(this.mouseX), y2 = this.yToAng(this.mouseY), dx = x2 - x1, dy = y2 - y1;
        let rsz = Math.min(9, Math.round((0,_util_util__WEBPACK_IMPORTED_MODULE_18__.norm_xy)(dx, dy) * 2 / _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.IDEALBOND) + 2);
        if (rsz < 3) { }
        else if (bond > 0)
            return _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_7__.SketchUtil.proposeBondRing(mol, rsz, bond, dx, dy);
        else if (atom > 0 && mol.atomAdjCount(atom) > 0 && !this.toolRingFreeform)
            return _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_7__.SketchUtil.proposeAtomRing(mol, rsz, atom, dx, dy);
        else
            return _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_7__.SketchUtil.proposeNewRing(mol, rsz, x1, y1, dx, dy, !this.toolRingFreeform);
        return [null, null];
    }
    determineDragTheta() {
        let x0 = this.clickX, y0 = this.clickY;
        let snap = this.snapToGuide(x0, y0);
        if (snap != null) {
            x0 = snap[0];
            y0 = snap[1];
        }
        let theta = Math.atan2(this.mouseY - y0, this.mouseX - x0), magnitude = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.norm_xy)(this.mouseX - x0, this.mouseY - y0);
        if (this.toolRotateIncr > 0)
            theta = Math.round(theta / this.toolRotateIncr) * this.toolRotateIncr;
        return [x0, y0, theta, magnitude];
    }
    determineMoveDelta() {
        let x1 = this.clickX, y1 = this.clickY, x2 = this.mouseX, y2 = this.mouseY;
        if (this.opAtom > 0) {
            x1 = this.angToX(this.mol.atomX(this.opAtom));
            y1 = this.angToY(this.mol.atomY(this.opAtom));
            let snap = this.snapToGuide(x2, y2);
            if (snap != null) {
                x2 = snap[0];
                y2 = snap[1];
            }
        }
        return [x2 - x1, y2 - y1];
    }
    snapToGuide(x, y) {
        if (this.opBond > 0) {
            let obj = this.pickObject(x, y);
            if (obj < 0) {
                let [bfr, bto] = this.mol.bondFromTo(-obj);
                let px = this.angToX(0.5 * (this.mol.atomX(bfr) + this.mol.atomX(bto)));
                let py = this.angToY(0.5 * (this.mol.atomY(bfr) + this.mol.atomY(bto)));
                return [px, py, false];
            }
            return null;
        }
        let bestDSQ = Number.POSITIVE_INFINITY, bestX = 0, bestY = 0, bestAtom = false;
        const APPROACH = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.sqr)(0.5 * this.pointScale);
        if (this.dragGuides != null)
            for (let i = 0; i < this.dragGuides.length; i++)
                for (let j = 0; j < this.dragGuides[i].x.length; j++) {
                    let px = this.dragGuides[i].destX[j], py = this.dragGuides[i].destY[j];
                    let dsq = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.norm2_xy)(px - x, py - y);
                    if (dsq < APPROACH && dsq < bestDSQ)
                        [bestDSQ, bestX, bestY, bestAtom] = [dsq, px, py, false];
                }
        for (let n = 1; n <= this.mol.numAtoms; n++) {
            let px = this.angToX(this.mol.atomX(n)), py = this.angToY(this.mol.atomY(n));
            let dsq = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.norm2_xy)(px - x, py - y);
            if (dsq < APPROACH && dsq < bestDSQ)
                [bestDSQ, bestX, bestY, bestAtom] = [dsq, px, py, true];
        }
        if (isFinite(bestDSQ))
            return [bestX, bestY, bestAtom];
        return null;
    }
    pickObjectCanvas(x, y, opt = {}) {
        let limitDist = 0.5 * this.pointScale;
        let bestItem = 0, bestScore = Number.POSITIVE_INFINITY;
        if (!opt.noAtoms)
            for (let n = 0; n < this.layout.numPoints(); n++) {
                let p = this.layout.getPoint(n);
                if (p.anum == 0)
                    continue;
                let dx = Math.abs(x - p.oval.cx), dy = Math.abs(y - p.oval.cy);
                let dsq = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.norm2_xy)(dx, dy);
                let limitDSQ = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.sqr)(Math.max(limitDist, Math.max(p.oval.rw, p.oval.rh)));
                if (dsq > limitDSQ)
                    continue;
                if (dsq < bestScore) {
                    bestItem = p.anum;
                    bestScore = dsq;
                }
            }
        if (bestItem != 0)
            return bestItem;
        if (!opt.noBonds)
            for (let n = 0; n < this.layout.numLines(); n++) {
                let l = this.layout.getLine(n);
                if (l.bnum == 0)
                    continue;
                let x1 = l.line.x1, y1 = l.line.y1;
                let x2 = l.line.x2, y2 = l.line.y2;
                if (x < Math.min(x1, x2) - limitDist || y < Math.min(y1, y2) - limitDist ||
                    x > Math.max(x1, x2) + limitDist || y > Math.max(y1, y2) + limitDist)
                    continue;
                let dist = _util_Geom__WEBPACK_IMPORTED_MODULE_16__.GeomUtil.pointLineSegDistance(x, y, x1, y1, x2, y2);
                if (dist > limitDist)
                    continue;
                if (dist < bestScore) {
                    bestItem = -l.bnum;
                    bestScore = dist;
                }
            }
        return bestItem;
    }
    pickObject(x, y, opt = {}) {
        return this.pickObjectCanvas(x, y, opt) || 0;
    }
    sketchEffects(mol) {
        let effects = new _gfx_Rendering__WEBPACK_IMPORTED_MODULE_13__.RenderEffects();
        for (let n = 1; n <= mol.numAtoms; n++)
            if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.hasAbbrev(mol, n) && n != this.hoverAtom)
                effects.dottedRectOutline[n] = 0x808080;
        effects.overlapAtoms = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.overlappingAtomList(mol, 0.2);
        effects.atomDecoText = _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.stringArray('', mol.numAtoms);
        effects.atomDecoCol = _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.numberArray(_util_Theme__WEBPACK_IMPORTED_MODULE_17__.Theme.foreground, mol.numAtoms);
        effects.atomDecoSize = _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.numberArray(0.3, mol.numAtoms);
        effects.bondDecoText = _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.stringArray('', mol.numBonds);
        effects.bondDecoCol = _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.numberArray(_util_Theme__WEBPACK_IMPORTED_MODULE_17__.Theme.foreground, mol.numBonds);
        effects.bondDecoSize = _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.numberArray(0.3, mol.numBonds);
        if (this.viewOpt.showOxState) {
            for (let n = 1; n <= mol.numAtoms; n++) {
                let ox = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.atomOxidationState(mol, n);
                if (ox != null) {
                    effects.atomDecoText[n - 1] = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.oxidationStateText(ox);
                    effects.atomDecoCol[n - 1] = 0xFF8080;
                }
            }
        }
        if (this.viewOpt.decoration == DrawCanvasDecoration.Stereochemistry) {
            if (!this.stereo)
                this.stereo = _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_8__.Stereochemistry.create(_mol_MetaMolecule__WEBPACK_IMPORTED_MODULE_2__.MetaMolecule.createStrict(mol));
            skip: for (let n = 1; n <= mol.numAtoms; n++) {
                let chi = this.stereo.atomTetraChirality(n);
                if (chi == _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_8__.Stereochemistry.STEREO_NONE)
                    continue;
                for (let adjb of mol.atomAdjBonds(n))
                    if (mol.bondOrder(adjb) != 1)
                        continue skip;
                if (chi == _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_8__.Stereochemistry.STEREO_UNKNOWN) {
                    for (let adj of mol.atomAdjList(n))
                        if (_mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__.Chemistry.ELEMENT_BLOCKS[mol.atomicNumber(adj)] >= 3)
                            continue skip;
                }
                effects.atomDecoText[n - 1] = chi == _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_8__.Stereochemistry.STEREO_POS ? 'R' :
                    chi == _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_8__.Stereochemistry.STEREO_NEG ? 'S' :
                        chi == _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_8__.Stereochemistry.STEREO_UNKNOWN ? 'R/S' : '?';
                effects.atomDecoCol[n - 1] = 0x00A000;
            }
            for (let n = 1; n <= mol.numBonds; n++) {
                let side = this.stereo.bondSideStereo(n);
                if (side == _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_8__.Stereochemistry.STEREO_NONE)
                    continue;
                effects.bondDecoText[n - 1] = side == _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_8__.Stereochemistry.STEREO_POS ? 'Z' :
                    side == _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_8__.Stereochemistry.STEREO_NEG ? 'E' :
                        side == _mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_8__.Stereochemistry.STEREO_UNKNOWN ? 'Z/E' : '?';
                effects.bondDecoCol[n - 1] = 0x00A000;
            }
        }
        else if (this.viewOpt.decoration == DrawCanvasDecoration.MappingNumber) {
            effects.atomDecoText = _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.stringArray('', mol.numAtoms);
            effects.atomDecoCol = _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.numberArray(0x8000FF, mol.numAtoms);
            effects.atomDecoSize = _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.numberArray(0.3, mol.numAtoms);
            for (let n = 1; n <= mol.numAtoms; n++)
                if (mol.atomMapNum(n) > 0)
                    effects.atomDecoText[n - 1] = mol.atomMapNum(n).toString();
        }
        else if (this.viewOpt.decoration == DrawCanvasDecoration.AtomIndex) {
            effects.atomDecoText = _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.stringArray('', mol.numAtoms);
            effects.atomDecoCol = _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.numberArray(0x8000FF, mol.numAtoms);
            effects.atomDecoSize = _util_Vec__WEBPACK_IMPORTED_MODULE_19__.Vec.numberArray(0.3, mol.numAtoms);
            for (let n = 1; n <= mol.numAtoms; n++)
                effects.atomDecoText[n - 1] = n.toString();
        }
        return effects;
    }
    orientAbbreviation(abbrevAtom, abbrevMol) {
        const { mol } = this;
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.isBlank(abbrevMol))
            return;
        if (this.mol.atomAdjCount(abbrevAtom) != 1)
            return;
        let nbr = mol.atomAdjList(abbrevAtom)[0];
        let vx1 = mol.atomX(abbrevAtom) - mol.atomX(nbr), vy1 = mol.atomY(abbrevAtom) - mol.atomY(nbr);
        let adj = abbrevMol.atomAdjList(1);
        let vx2 = 0, vy2 = 0, inv = (0,_util_util__WEBPACK_IMPORTED_MODULE_18__.invZ)(adj.length);
        for (let a of adj) {
            vx2 += abbrevMol.atomX(a) - abbrevMol.atomX(1);
            vy2 += abbrevMol.atomY(a) - abbrevMol.atomY(1);
        }
        vx2 *= inv;
        vy2 *= inv;
        let th1 = Math.atan2(vy1, vx1), th2 = Math.atan2(vy2, vx2);
        _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.rotateMolecule(abbrevMol, th1 - th2);
        if (adj.length == 1) {
            _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.translateMolecule(abbrevMol, mol.atomX(abbrevAtom) - abbrevMol.atomX(adj[0]), mol.atomY(abbrevAtom) - abbrevMol.atomY(adj[0]));
            abbrevMol.setAtomPos(1, mol.atomX(nbr), mol.atomY(nbr));
        }
        else {
            _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.translateMolecule(abbrevMol, mol.atomX(nbr) - abbrevMol.atomX(1), mol.atomY(nbr) - abbrevMol.atomY(1));
        }
        for (let b of abbrevMol.atomAdjBonds(1)) {
            let a = abbrevMol.bondOther(b, 1);
            if (abbrevMol.atomHExplicit(a) != _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.HEXPLICIT_UNKNOWN)
                continue;
            abbrevMol.setAtomHExplicit(a, Math.max(0, abbrevMol.atomHydrogens(a)));
        }
        abbrevMol.deleteAtomAndBonds(1);
    }
}


/***/ }),

/***/ "./src/sketcher/EditAtom.ts":
/*!**********************************!*\
  !*** ./src/sketcher/EditAtom.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EditAtom: () => (/* binding */ EditAtom)
/* harmony export */ });
/* harmony import */ var _data_AbbrevContainer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/AbbrevContainer */ "./src/data/AbbrevContainer.ts");
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _dialog_Dialog__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dialog/Dialog */ "./src/dialog/Dialog.ts");
/* harmony import */ var _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../gfx/ArrangeMeasurement */ "./src/gfx/ArrangeMeasurement.ts");
/* harmony import */ var _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../gfx/ArrangeMolecule */ "./src/gfx/ArrangeMolecule.ts");
/* harmony import */ var _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../gfx/DrawMolecule */ "./src/gfx/DrawMolecule.ts");
/* harmony import */ var _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../gfx/MetaVector */ "./src/gfx/MetaVector.ts");
/* harmony import */ var _gfx_Rendering__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../gfx/Rendering */ "./src/gfx/Rendering.ts");
/* harmony import */ var _ui_ClipboardProxy__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ui/ClipboardProxy */ "./src/ui/ClipboardProxy.ts");
/* harmony import */ var _ui_OptionList__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ui/OptionList */ "./src/ui/OptionList.ts");
/* harmony import */ var _ui_TabBar__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ui/TabBar */ "./src/ui/TabBar.ts");
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _util_Theme__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../util/Theme */ "./src/util/Theme.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _ExtraFieldsWidget__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ExtraFieldsWidget */ "./src/sketcher/ExtraFieldsWidget.ts");
/* harmony import */ var _GeomWidget__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./GeomWidget */ "./src/sketcher/GeomWidget.ts");
/* harmony import */ var _MoleculeActivity__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./MoleculeActivity */ "./src/sketcher/MoleculeActivity.ts");
/* harmony import */ var _PeriodicTableWidget__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./PeriodicTableWidget */ "./src/sketcher/PeriodicTableWidget.ts");
/* harmony import */ var _QueryFieldsWidget__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./QueryFieldsWidget */ "./src/sketcher/QueryFieldsWidget.ts");





















class EditAtom extends _dialog_Dialog__WEBPACK_IMPORTED_MODULE_3__.Dialog {
    constructor(mol, atom, proxyClip, callbackApply) {
        super();
        this.atom = atom;
        this.proxyClip = proxyClip;
        this.callbackApply = callbackApply;
        this.newX = 0;
        this.newY = 0;
        this.tabs = null;
        this.abbrevList = null;
        this.svgAbbrev = null;
        this.abbrevIndices = [];
        this.currentAbbrev = -1;
        this.initMol = mol;
        this.mol = mol.clone();
        this.title = 'Edit Atom';
        this.minPortionWidth = 20;
        this.maxPortionWidth = 95;
    }
    populate() {
        this.proxyClip.pushHandler(new _ui_ClipboardProxy__WEBPACK_IMPORTED_MODULE_9__.ClipboardProxyHandler());
        let buttons = this.buttonsDOM(), body = this.bodyDOM();
        this.btnApply = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<button class="wmk-button wmk-button-primary">Apply</button>').appendTo(buttons).css({ 'margin-left': '0.5em' });
        this.btnApply.onClick(() => this.applyChanges());
        if (this.atom > 0) {
            this.tabs = new _ui_TabBar__WEBPACK_IMPORTED_MODULE_11__.TabBar(['Atom', 'Abbreviation', 'Geometry', 'Query', 'Extra']);
            this.tabs.render(body);
            this.tabs.onSelect((idx) => this.selectedTab(idx));
            this.populateAtom(this.tabs.getPanelDOM('Atom'));
            this.populateAbbreviation(this.tabs.getPanelDOM('Abbreviation'));
            if (this.atom > 0)
                this.populateGeometry(this.tabs.getPanelDOM('Geometry'));
            this.populateQuery(this.tabs.getPanelDOM('Query'));
            this.populateExtra(this.tabs.getPanelDOM('Extra'));
        }
        else {
            this.populateAtom(body);
        }
        let focusable = body.findAll('input,textarea');
        if (focusable.length > 0)
            focusable[0].grabFocus(true);
        for (let dom of focusable) {
            dom.css({ 'font': 'inherit' });
            dom.onKeyDown((event) => {
                if (event.key == "Enter")
                    this.applyChanges();
                else if (event.key == "Escape")
                    this.close();
                else if (event.key == "PageUp") {
                    this.tabs.rotateSelected(-1);
                    this.selectedTab(this.tabs.getSelectedIndex());
                    event.preventDefault();
                }
                else if (event.key == "PageDown") {
                    this.tabs.rotateSelected(1);
                    this.selectedTab(this.tabs.getSelectedIndex());
                    event.preventDefault();
                }
                event.stopPropagation();
            });
        }
    }
    close() {
        this.proxyClip.popHandler();
        super.close();
    }
    applyChanges() {
        this.mol.keepTransient = true;
        this.updateMolecule();
        let selTab = this.tabs ? this.tabs.getSelectedValue() : null;
        if (selTab == 'Abbreviation')
            this.updateAbbrev();
        if (selTab == 'Geometry')
            this.updateGeometry();
        if (selTab == 'Query')
            this.updateQuery();
        if (selTab == 'Extra')
            this.updateExtra();
        this.mol.keepTransient = false;
        if (this.callbackApply)
            this.callbackApply(this);
    }
    populateAtom(panel) {
        let grid = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<div/>').appendTo(panel);
        grid.css({ 'display': 'grid', 'align-items': 'center', 'justify-content': 'start' });
        grid.css({ 'grid-row-gap': '0.5em', 'grid-column-gap': '0.5em' });
        grid.css({ 'grid-template-columns': '[start col0] auto [col1] auto [col2] auto [col3] auto [col4 end]' });
        grid.appendHTML('<div style="grid-area: 1 / col0;">Symbol</div>');
        this.inputSymbol = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<input size="20"/>').appendTo(grid);
        this.inputSymbol.css({ 'grid-area': '1 / col1 / auto / col4}' });
        this.inputSymbol.onInput(() => this.periodicWidget.changeElement(this.inputSymbol.getValue()));
        grid.appendHTML('<div style="grid-area: 2 / col0;">Charge</div>');
        this.inputCharge = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<input type="number" size="6"/>').appendTo(grid);
        this.inputCharge.css({ 'grid-area': '2 / col1' });
        grid.appendHTML('<div style="grid-area: 2 / col2;">Unpaired</div>');
        this.inputUnpaired = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<input type="number" size="6"/>').appendTo(grid);
        this.inputUnpaired.css({ 'grid-area': '2 / col3' });
        grid.appendHTML('<div style="grid-area: 3 / col0;">Hydrogens</div>');
        this.optionHydrogen = new _ui_OptionList__WEBPACK_IMPORTED_MODULE_10__.OptionList(['Auto', 'None', '1', '2', '3', '4', 'Other']);
        this.optionHydrogen.render((0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<div style="grid-area: 3 / col1 / auto / col3"/>').appendTo(grid));
        this.optionHydrogen.onSelect((idx) => this.inputHydrogen.elInput.disabled = idx != 6);
        this.inputHydrogen = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<input type="number" size="4"/>').appendTo(grid);
        this.inputHydrogen.css({ 'grid-area': '3 / col3' });
        this.inputHydrogen.elInput.disabled = true;
        grid.appendHTML('<div style="grid-area: 4 / col0;">Isotope</div>');
        this.optionIsotope = new _ui_OptionList__WEBPACK_IMPORTED_MODULE_10__.OptionList(['Natural', 'Enriched']);
        this.optionIsotope.render((0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<div style="grid-area: 4 / col1 / auto / col3"/>').appendTo(grid));
        this.optionIsotope.onSelect((idx) => this.inputIsotope.elInput.disabled = idx == 0);
        this.inputIsotope = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<input type="number" size="6"/>').appendTo(grid);
        this.inputIsotope.css({ 'grid-area': '4 / col3' });
        this.inputIsotope.elInput.disabled = true;
        grid.appendHTML('<div style="grid-area: 5 / col0;">Mapping</div>');
        this.inputMapping = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<input type="number" size="6"/>').appendTo(grid);
        this.inputMapping.css({ 'grid-area': '5 / col1' });
        grid.appendHTML('<div style="grid-area: 5 / col2;">Index</div>');
        this.inputIndex = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<input type="number" size="6" readonly="readonly"/>').appendTo(grid);
        this.inputIndex.css({ 'grid-area': '5 / col3' });
        let divPeriodic = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<div/>').appendTo(grid).css({ 'grid-area': '6 / start / 6 / end' });
        this.periodicWidget = new _PeriodicTableWidget__WEBPACK_IMPORTED_MODULE_19__.PeriodicTableWidget();
        this.periodicWidget.onSelect((element) => this.inputSymbol.setValue(element));
        this.periodicWidget.onDoubleClick(() => this.applyChanges());
        this.periodicWidget.render(divPeriodic);
        const mol = this.mol, atom = this.atom;
        if (atom > 0) {
            this.inputSymbol.setValue(mol.atomElement(atom));
            this.inputCharge.setValue(mol.atomCharge(atom).toString());
            this.inputUnpaired.setValue(mol.atomUnpaired(atom).toString());
            let hc = mol.atomHExplicit(atom);
            if (hc == _mol_Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.HEXPLICIT_UNKNOWN) {
                this.optionHydrogen.setSelectedIndex(0);
                this.inputHydrogen.setValue(mol.atomHydrogens(atom).toString());
                this.inputHydrogen.elInput.disabled = true;
            }
            else if (hc <= 4) {
                this.optionHydrogen.setSelectedIndex(hc + 1);
                this.inputHydrogen.setValue(hc.toString());
                this.inputHydrogen.elInput.disabled = true;
            }
            else {
                this.optionHydrogen.setSelectedIndex(6);
                this.inputHydrogen.setValue(hc.toString());
                this.inputHydrogen.elInput.disabled = false;
            }
            this.optionIsotope.setSelectedIndex(mol.atomIsotope(atom) == _mol_Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.ISOTOPE_NATURAL ? 0 : 1);
            if (mol.atomIsotope(atom) != _mol_Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.ISOTOPE_NATURAL)
                this.inputIsotope.setValue(mol.atomIsotope(atom).toString());
            this.inputIsotope.elInput.disabled = mol.atomIsotope(atom) == _mol_Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.ISOTOPE_NATURAL;
            this.inputMapping.setValue(mol.atomMapNum(atom).toString());
            this.inputIndex.setValue(atom.toString());
            this.periodicWidget.changeElement(mol.atomElement(atom));
        }
    }
    populateAbbreviation(panel) {
        let divFlex = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<div/>').appendTo(panel).css({ 'display': 'flex', 'align-items': 'flex-start' });
        divFlex.css({ 'max-width': '60vw', 'max-height': '50vh', 'overflow-y': 'scroll' });
        let spanSearch = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<div/>').appendTo(divFlex).css({ 'margin-right': '0.5em', 'flex': '0 0' });
        let spanList = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<div/>').appendTo(divFlex).css({ 'flex': '1 1 100%' });
        this.inputAbbrevSearch = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<input size="10"/>').appendTo(spanSearch);
        this.inputAbbrevSearch.setAttr('placeholder', 'Search');
        let lastSearch = '';
        this.inputAbbrevSearch.onKeyDown((event) => {
            if (event.key == "ArrowUp")
                this.cycleAbbreviation(-1);
            else if (event.key == "ArrowDown")
                this.cycleAbbreviation(1);
        });
        this.inputAbbrevSearch.onInput(() => {
            let search = this.inputAbbrevSearch.getValue();
            if (search == lastSearch)
                return;
            lastSearch = search;
            this.fillAbbreviations();
        });
        let divButtons = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<div/>').appendTo(spanSearch).css({ 'margin-top': '0.5em' });
        let btnClear = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<button class="wmk-button wmk-button-default">Clear</button>').appendTo(divButtons);
        btnClear.onClick(() => {
            this.selectAbbreviation(-1);
            if (this.atom > 0 && _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.hasAbbrev(this.mol, this.atom))
                this.applyChanges();
        });
        this.tableAbbrev = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<table/>').appendTo(spanList).css({ 'border-collapse': 'collapse', 'width': '100%' });
        this.fillAbbreviations();
    }
    populateGeometry(panel) {
        const { mol, atom } = this;
        let divContainer1 = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<div/>').appendTo(panel).css({ 'text-align': 'center' });
        let divContainer2 = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<div/>').appendTo(divContainer1).css({ 'display': 'inline-block' });
        let grid = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<div/>').appendTo(divContainer2);
        grid.css({ 'display': 'grid', 'align-items': 'center', 'justify-content': 'start' });
        grid.css({ 'grid-row-gap': '0.5em', 'grid-column-gap': '0.5em' });
        grid.css({ 'grid-template-columns': '[start col0] auto [col1] auto [col2] auto [col3] auto [col4 end]' });
        this.geomWidget = new _GeomWidget__WEBPACK_IMPORTED_MODULE_17__.GeomWidget(_GeomWidget__WEBPACK_IMPORTED_MODULE_17__.GeomWidgetType.Atom, mol, atom);
        this.geomWidget.render((0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<div/>').appendTo(grid).css({ 'grid-area': '1 / col0 / auto / col4', 'text-align': 'center' }));
        let label1 = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<div/>').appendTo(grid).css({ 'grid-area': '2 / col0' });
        this.inputGeom1 = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<input type="number" size="8"/>').appendTo(grid).css({ 'grid-area': '2 / col1' });
        let label2 = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<div/>').appendTo(grid).css({ 'grid-area': '2 / col2' });
        this.inputGeom2 = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<input type="number" size="8"/>').appendTo(grid).css({ 'grid-area': '2 / col3' });
        this.geomWidget.callbackSelect = (sel) => {
            let atoms = this.geomWidget.selectionAtoms(sel);
            if (sel.type == _GeomWidget__WEBPACK_IMPORTED_MODULE_17__.GeomWidgetSelType.Position) {
                label1.setText('Position X');
                label2.setText('Y');
                this.inputGeom1.setValue(this.refGeom1 = mol.atomX(atoms[0]).toFixed(3));
                this.inputGeom2.setValue(this.refGeom2 = mol.atomY(atoms[0]).toFixed(3));
            }
            else if (sel.type == _GeomWidget__WEBPACK_IMPORTED_MODULE_17__.GeomWidgetSelType.Link) {
                let dx = mol.atomX(atoms[1]) - mol.atomX(atoms[0]), dy = mol.atomY(atoms[1]) - mol.atomY(atoms[0]);
                label1.setText('Distance');
                label2.setText('Angle');
                this.inputGeom1.setValue(this.refGeom1 = (0,_util_util__WEBPACK_IMPORTED_MODULE_14__.norm_xy)(dx, dy).toFixed(3));
                this.inputGeom2.setValue(this.refGeom2 = (Math.atan2(dy, dx) * _util_util__WEBPACK_IMPORTED_MODULE_14__.RADDEG).toFixed(1));
            }
            else if (sel.type == _GeomWidget__WEBPACK_IMPORTED_MODULE_17__.GeomWidgetSelType.Torsion) {
                let cx = mol.atomX(atoms[0]), cy = mol.atomY(atoms[0]);
                let th2 = Math.atan2(mol.atomY(atoms[1]) - cy, mol.atomX(atoms[1]) - cx);
                let th1 = Math.atan2(mol.atomY(atoms[2]) - cy, mol.atomX(atoms[2]) - cx);
                label1.setText('Angle');
                label2.setText('');
                this.inputGeom1.setValue(this.refGeom1 = ((0,_util_util__WEBPACK_IMPORTED_MODULE_14__.angleDiffPos)(th2, th1) * _util_util__WEBPACK_IMPORTED_MODULE_14__.RADDEG).toFixed(1));
                this.inputGeom2.setValue(this.refGeom2 = '');
            }
            label2.setCSS('display', sel.type == _GeomWidget__WEBPACK_IMPORTED_MODULE_17__.GeomWidgetSelType.Torsion ? 'none' : 'block');
            this.inputGeom2.setCSS('display', sel.type == _GeomWidget__WEBPACK_IMPORTED_MODULE_17__.GeomWidgetSelType.Torsion ? 'none' : 'block');
        };
        this.geomWidget.callbackSelect(this.geomWidget.selected);
    }
    populateQuery(panel) {
        this.queryWidget = new _QueryFieldsWidget__WEBPACK_IMPORTED_MODULE_20__.QueryFieldsWidget(this.mol, this.atom, 0);
        this.queryWidget.render(panel);
    }
    populateExtra(panel) {
        let fields = [...this.mol.atomExtra(this.atom), ...this.mol.atomTransient(this.atom)];
        this.fieldsWidget = new _ExtraFieldsWidget__WEBPACK_IMPORTED_MODULE_16__.ExtraFieldsWidget(fields);
        this.fieldsWidget.render(panel);
    }
    updateMolecule() {
        let { mol, atom } = this;
        if (atom == 0)
            atom = this.atom = mol.addAtom('C', this.newX, this.newY);
        let sym = this.inputSymbol.getValue();
        if (sym != '')
            mol.setAtomElement(atom, sym);
        let chg = parseInt(this.inputCharge.getValue());
        if (chg > -20 && chg < 20)
            mol.setAtomCharge(atom, chg);
        let unp = parseInt(this.inputUnpaired.getValue());
        if (unp >= 0 && unp < 20)
            mol.setAtomUnpaired(atom, unp);
        let hcidx = this.optionHydrogen.getSelectedIndex();
        if (hcidx == 0)
            mol.setAtomHExplicit(atom, _mol_Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.HEXPLICIT_UNKNOWN);
        else if (hcidx <= 5)
            mol.setAtomHExplicit(atom, hcidx - 1);
        else {
            let hyd = parseInt(this.inputHydrogen.getValue());
            if (hyd >= 0 && hyd < 20)
                mol.setAtomHExplicit(atom, hyd);
        }
        if (this.optionIsotope.getSelectedIndex() == 1) {
            let iso = parseInt(this.inputIsotope.getValue());
            if (iso >= 0 && iso < 300)
                mol.setAtomIsotope(atom, iso);
        }
        else
            mol.setAtomIsotope(atom, _mol_Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.ISOTOPE_NATURAL);
        let map = parseInt(this.inputMapping.getValue());
        if (!isNaN(map))
            mol.setAtomMapNum(atom, map);
    }
    updateAbbrev() {
        const { mol, atom } = this;
        if (this.currentAbbrev < 0) {
            let el = mol.atomElement(atom);
            _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.clearAbbrev(mol, atom);
            mol.setAtomElement(atom, el);
        }
        else {
            let abbrev = this.abbrevList[this.currentAbbrev];
            mol.setAtomElement(atom, abbrev.name);
            _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.setAbbrev(mol, atom, abbrev.frag);
        }
    }
    updateGeometry() {
        let strval1 = this.inputGeom1.getValue(), strval2 = this.inputGeom2.getValue();
        if (this.refGeom1 == strval1 && this.refGeom2 == strval2)
            return;
        const { mol } = this;
        let sel = this.geomWidget.selected, atoms = this.geomWidget.selectionAtoms(sel);
        if (sel.type == _GeomWidget__WEBPACK_IMPORTED_MODULE_17__.GeomWidgetSelType.Position) {
            let x = parseFloat(strval1), y = parseFloat(strval2);
            if (isNaN(x) || isNaN(y) || Math.abs(x) > 1E6 || Math.abs(y) > 1E6)
                return;
            mol.setAtomPos(atoms[0], x, y);
        }
        else if (sel.type == _GeomWidget__WEBPACK_IMPORTED_MODULE_17__.GeomWidgetSelType.Link) {
            if (this.refGeom1 != strval1) {
                let dist = parseFloat(strval1);
                if (isNaN(dist) || Math.abs(dist) > 100)
                    return;
                let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_15__.Vec.booleanArray(false, mol.numAtoms);
                mask[atoms[1] - 1] = true;
                let instate = { mol, currentAtom: 0, currentBond: mol.findBond(atoms[0], atoms[1]), 'selectedMask': mask };
                let molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_18__.MoleculeActivity(instate, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_18__.ActivityType.BondDist, { dist });
                molact.execute();
                if (molact.output.mol)
                    this.mol = molact.output.mol;
                return;
            }
            else if (this.refGeom2 != strval2) {
                let angle = parseFloat(strval2);
                if (isNaN(angle))
                    return;
                let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_15__.Vec.booleanArray(false, mol.numAtoms);
                mask[atoms[1] - 1] = true;
                let instate = { mol, currentAtom: 0, currentBond: mol.findBond(atoms[0], atoms[1]), selectedMask: mask };
                let molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_18__.MoleculeActivity(instate, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_18__.ActivityType.AlignAngle, { angle: angle * _util_util__WEBPACK_IMPORTED_MODULE_14__.DEGRAD });
                molact.execute();
                if (molact.output.mol)
                    this.mol = molact.output.mol;
                return;
            }
        }
        else if (sel.type == _GeomWidget__WEBPACK_IMPORTED_MODULE_17__.GeomWidgetSelType.Torsion) {
            let angle = parseFloat(strval1);
            if (isNaN(angle))
                return;
            let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_15__.Vec.booleanArray(false, mol.numAtoms);
            for (let a of atoms)
                mask[a - 1] = true;
            let instate = { mol, currentAtom: atoms[2], currentBond: 0, selectedMask: mask };
            let molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_18__.MoleculeActivity(instate, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_18__.ActivityType.AdjustTorsion, { angle: angle * _util_util__WEBPACK_IMPORTED_MODULE_14__.DEGRAD });
            molact.execute();
            if (molact.output.mol)
                this.mol = molact.output.mol;
            return;
        }
    }
    updateQuery() {
        this.queryWidget.updateAtom();
    }
    updateExtra() {
        this.mol.setAtomExtra(this.atom, this.fieldsWidget.getExtraFields());
        this.mol.setAtomTransient(this.atom, this.fieldsWidget.getTransientFields());
    }
    fillAbbreviations() {
        if (_data_AbbrevContainer__WEBPACK_IMPORTED_MODULE_0__.AbbrevContainer.needsSetup()) {
            setTimeout(() => _data_AbbrevContainer__WEBPACK_IMPORTED_MODULE_0__.AbbrevContainer.setupData().then(() => this.fillAbbreviations()), 1);
            return;
        }
        this.tableAbbrev.empty();
        _data_AbbrevContainer__WEBPACK_IMPORTED_MODULE_0__.AbbrevContainer.main.submitMolecule(this.mol, true);
        this.abbrevList = _data_AbbrevContainer__WEBPACK_IMPORTED_MODULE_0__.AbbrevContainer.main.getAbbrevs();
        if (!this.svgAbbrev) {
            this.svgAbbrev = [];
            let policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_8__.RenderPolicy.defaultColourOnWhite(10);
            let measure = new _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_4__.OutlineMeasurement(0, 0, policy.data.pointScale);
            for (let abbrev of this.abbrevList) {
                let effects = new _gfx_Rendering__WEBPACK_IMPORTED_MODULE_8__.RenderEffects();
                let mol = abbrev.frag.clone();
                effects.atomCircleSz = _util_Vec__WEBPACK_IMPORTED_MODULE_15__.Vec.numberArray(0, mol.numAtoms);
                effects.atomCircleCol = _util_Vec__WEBPACK_IMPORTED_MODULE_15__.Vec.numberArray(0, mol.numAtoms);
                for (let n = 1; n <= mol.numAtoms; n++)
                    if (mol.atomElement(n) == _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.ABBREV_ATTACHMENT) {
                        mol.setAtomElement(n, 'C');
                        effects.atomCircleSz[n - 1] = 0.2;
                        effects.atomCircleCol[n - 1] = 0x00C000;
                    }
                let layout = new _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_5__.ArrangeMolecule(mol, measure, policy, effects);
                layout.arrange();
                let gfx = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_7__.MetaVector();
                new _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_6__.DrawMolecule(layout, gfx).draw();
                gfx.normalise();
                this.svgAbbrev.push(gfx.createSVG());
            }
            const { mol, atom } = this;
            if (atom > 0 && _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.hasAbbrev(mol, atom)) {
                let name = mol.atomElement(atom), mf = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.molecularFormula(_mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.getAbbrev(mol, atom));
                for (let n = 0; n < this.abbrevList.length; n++)
                    if (name == this.abbrevList[n].name) {
                        if (mf == _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.molecularFormula(this.abbrevList[n].frag))
                            this.currentAbbrev = n;
                        break;
                    }
            }
        }
        let tr = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<tr/>').appendTo(this.tableAbbrev);
        tr.appendHTML('<td><u>Label</u></td>');
        tr.appendHTML('<td><u>Structure</u></td>');
        this.abbrevEntries = [];
        this.abbrevIndices = [];
        let search = this.inputAbbrevSearch.getValue().toLowerCase();
        for (let n = 0; n < this.abbrevList.length; n++) {
            if (this.currentAbbrev != n && !this.abbrevList[n].nameSearch.includes(search))
                continue;
            let entry = {
                tr: (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<tr/>').appendTo(this.tableAbbrev),
                idx: n,
                bgcol: this.abbrevEntries.length % 2 == 0 ? '#FFFFFF' : '#F8F8F8'
            };
            entry.tr.setCSS('background-color', this.currentAbbrev == entry.idx ? (0,_util_util__WEBPACK_IMPORTED_MODULE_14__.colourCode)(_util_Theme__WEBPACK_IMPORTED_MODULE_13__.Theme.lowlight) : entry.bgcol);
            let tdLabel = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<td/>').appendTo(entry.tr), tdStruct = (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)('<td/>').appendTo(entry.tr);
            tdLabel.setHTML(this.abbrevList[n].nameHTML);
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_12__.dom)(this.svgAbbrev[n]).appendTo(tdStruct).css({ 'display': 'block', 'pointer-events': 'none' });
            entry.tr.css({ 'cursor': 'pointer' });
            entry.tr.onClick(() => this.selectAbbreviation(n));
            entry.tr.onDblClick((event) => this.applyChanges());
            this.abbrevEntries.push(entry);
            this.abbrevIndices.push(n);
        }
    }
    selectAbbreviation(idx) {
        if (this.currentAbbrev == idx)
            return;
        this.currentAbbrev = idx;
        for (let entry of this.abbrevEntries) {
            entry.tr.setCSS('background-color', this.currentAbbrev == entry.idx ? (0,_util_util__WEBPACK_IMPORTED_MODULE_14__.colourCode)(_util_Theme__WEBPACK_IMPORTED_MODULE_13__.Theme.lowlight) : entry.bgcol);
            if (this.currentAbbrev == entry.idx)
                entry.tr.el.scrollIntoView({ 'block': 'nearest' });
        }
    }
    cycleAbbreviation(dir) {
        let sz = this.abbrevIndices.length;
        if (sz == 0)
            return;
        let idx = this.abbrevIndices.indexOf(this.currentAbbrev);
        if (idx < 0) {
            if (dir < 0)
                idx = sz - 1;
            else
                idx = 0;
        }
        else
            idx = (idx + sz + dir) % sz;
        this.selectAbbreviation(this.abbrevIndices[idx]);
    }
    selectedTab(idx) {
        if (idx == 0)
            this.inputSymbol.grabFocus();
        else if (idx == 1)
            this.inputAbbrevSearch.grabFocus();
        else if (idx == 2)
            this.inputGeom1.grabFocus();
    }
}


/***/ }),

/***/ "./src/sketcher/EditBond.ts":
/*!**********************************!*\
  !*** ./src/sketcher/EditBond.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EditBond: () => (/* binding */ EditBond)
/* harmony export */ });
/* harmony import */ var _dialog_Dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dialog/Dialog */ "./src/dialog/Dialog.ts");
/* harmony import */ var _ui_ClipboardProxy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ui/ClipboardProxy */ "./src/ui/ClipboardProxy.ts");
/* harmony import */ var _ui_OptionList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ui/OptionList */ "./src/ui/OptionList.ts");
/* harmony import */ var _ui_TabBar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/TabBar */ "./src/ui/TabBar.ts");
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _ExtraFieldsWidget__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ExtraFieldsWidget */ "./src/sketcher/ExtraFieldsWidget.ts");
/* harmony import */ var _GeomWidget__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./GeomWidget */ "./src/sketcher/GeomWidget.ts");
/* harmony import */ var _MoleculeActivity__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./MoleculeActivity */ "./src/sketcher/MoleculeActivity.ts");
/* harmony import */ var _QueryFieldsWidget__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./QueryFieldsWidget */ "./src/sketcher/QueryFieldsWidget.ts");










class EditBond extends _dialog_Dialog__WEBPACK_IMPORTED_MODULE_0__.Dialog {
    constructor(mol, bond, proxyClip, callbackApply) {
        super();
        this.bond = bond;
        this.proxyClip = proxyClip;
        this.callbackApply = callbackApply;
        this.initMol = mol;
        this.mol = mol.clone();
        this.title = 'Edit Bond';
        this.minPortionWidth = 20;
        this.maxPortionWidth = 95;
    }
    populate() {
        this.proxyClip.pushHandler(new _ui_ClipboardProxy__WEBPACK_IMPORTED_MODULE_1__.ClipboardProxyHandler());
        let buttons = this.buttonsDOM(), body = this.bodyDOM();
        this.btnApply = (0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<button class="wmk-button wmk-button-primary">Apply</button>').appendTo(buttons).css({ 'margin-left': '0.5em' });
        this.btnApply.onClick(() => this.applyChanges());
        this.tabs = new _ui_TabBar__WEBPACK_IMPORTED_MODULE_3__.TabBar(['Bond', 'Geometry', 'Query', 'Extra']);
        this.tabs.render(body);
        this.tabs.onSelect((idx) => this.selectedTab(idx));
        this.populateBond(this.tabs.getPanelDOM('Bond'));
        this.populateGeometry(this.tabs.getPanelDOM('Geometry'));
        this.populateQuery(this.tabs.getPanelDOM('Query'));
        this.populateExtra(this.tabs.getPanelDOM('Extra'));
        let focusable = body.findAll('input,textarea');
        if (focusable.length > 0)
            focusable[0].grabFocus(true);
        for (let dom of focusable) {
            dom.css({ 'font': 'inherit' });
            dom.onKeyDown((event) => {
                if (event.key == "Enter")
                    this.applyChanges();
                else if (event.key == "Escape")
                    this.close();
                else if (event.key == "PageUp") {
                    this.tabs.rotateSelected(-1);
                    this.selectedTab(this.tabs.getSelectedIndex());
                    event.preventDefault();
                }
                else if (event.key == "PageDown") {
                    this.tabs.rotateSelected(1);
                    this.selectedTab(this.tabs.getSelectedIndex());
                    event.preventDefault();
                }
                event.stopPropagation();
            });
        }
    }
    close() {
        this.proxyClip.popHandler();
        super.close();
    }
    applyChanges() {
        this.mol.keepTransient = true;
        this.updateMolecule();
        if (this.tabs.getSelectedValue() == 'Geometry')
            this.updateGeometry();
        if (this.tabs.getSelectedValue() == 'Query')
            this.updateQuery();
        if (this.tabs.getSelectedValue() == 'Extra')
            this.updateExtra();
        this.mol.keepTransient = false;
        if (this.callbackApply)
            this.callbackApply(this);
    }
    populateBond(panel) {
        const { mol, bond } = this;
        let grid = (0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<div/>').appendTo(panel);
        grid.css({ 'display': 'grid', 'align-items': 'center', 'justify-content': 'start' });
        grid.css({ 'grid-row-gap': '0.5em', 'grid-column-gap': '0.5em' });
        grid.css({ 'grid-template-columns': '[start col0] auto [col1] auto [col2] auto [col3] auto [col4 end]' });
        (0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<div/>').appendTo(grid).css({ 'grid-area': '1 / col0' }).setText('Order');
        let ordersHTML = [];
        for (let o = 0; o <= 4; o++)
            ordersHTML.push(`&nbsp;&nbsp;${o}&nbsp;&nbsp;`);
        this.optionOrder = new _ui_OptionList__WEBPACK_IMPORTED_MODULE_2__.OptionList(ordersHTML);
        this.optionOrder.htmlLabels = true;
        this.optionOrder.setSelectedIndex(mol.bondOrder(bond));
        this.optionOrder.render((0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<div/>').appendTo(grid).css({ 'grid-column': 'col1 / col4', 'grid-row': '1' }));
        (0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<div/>').appendTo(grid).css({ 'grid-area': '2 / col0' }).setText('Stereo');
        this.optionStereo = new _ui_OptionList__WEBPACK_IMPORTED_MODULE_2__.OptionList(['None', 'Up', 'Down', 'Unknown']);
        this.optionStereo.setSelectedIndex(mol.bondType(bond));
        this.optionStereo.render((0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<div/>').appendTo(grid).css({ 'grid-column': 'col1 / col4', 'grid-row': '2' }));
        (0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<div/>').appendTo(grid).css({ 'grid-area': '3 / col0' }).setText('From');
        this.inputFrom = (0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<input size="6"/>').appendTo(grid).css({ 'grid-area': '3 / col1', 'font': 'inherit' });
        this.inputFrom.elInput.readOnly = true;
        this.inputFrom.setValue(mol.bondFrom(bond).toString());
        (0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<div/>').appendTo(grid).css({ 'grid-area': '3 / col2' }).setText('To');
        this.inputTo = (0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<input size="6"/>').appendTo(grid).css({ 'grid-area': '3 / col3', 'font': 'inherit' });
        this.inputTo.elInput.readOnly = true;
        this.inputTo.setValue(mol.bondTo(bond).toString());
        (0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<div/>').appendTo(grid).css({ 'grid-area': '4 / col2' }).setText('Index');
        this.inputIndex = (0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<input size="6"/>').appendTo(grid).css({ 'grid-area': '4 / col3', 'font': 'inherit' });
        this.inputIndex.elInput.readOnly = true;
        this.inputIndex.setValue(bond.toString());
    }
    populateGeometry(panel) {
        const { mol, bond } = this;
        let divContainer1 = (0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<div/>').appendTo(panel).css({ 'text-align': 'center' });
        let divContainer2 = (0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<div/>').appendTo(divContainer1).css({ 'display': 'inline-block' });
        let grid = (0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<div/>').appendTo(divContainer2);
        grid.css({ 'display': 'grid', 'align-items': 'center', 'justify-content': 'start' });
        grid.css({ 'grid-row-gap': '0.5em', 'grid-column-gap': '0.5em' });
        grid.css({ 'grid-template-columns': '[start col0] auto [col1] auto [col2]' });
        this.geomWidget = new _GeomWidget__WEBPACK_IMPORTED_MODULE_7__.GeomWidget(_GeomWidget__WEBPACK_IMPORTED_MODULE_7__.GeomWidgetType.Bond, mol, bond);
        this.geomWidget.render((0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<div/>').appendTo(grid).css({ 'grid-area': '1 / col0 / auto / col2', 'text-align': 'center' }));
        let label1 = (0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<div/>').appendTo(grid).css({ 'grid-area': '2 / col0' });
        this.inputGeom1 = (0,_util_dom__WEBPACK_IMPORTED_MODULE_4__.dom)('<input type="number" size="8"/>').appendTo(grid).css({ 'grid-area': '2 / col1' });
        this.geomWidget.callbackSelect = (sel) => {
            if (sel.type == _GeomWidget__WEBPACK_IMPORTED_MODULE_7__.GeomWidgetSelType.Link) {
                let a1 = mol.bondFrom(bond), a2 = mol.bondTo(bond);
                let dx = mol.atomX(a2) - mol.atomX(a1), dy = mol.atomY(a2) - mol.atomY(a1);
                label1.setText('Distance');
                this.inputGeom1.setValue(this.refGeom1 = (0,_util_util__WEBPACK_IMPORTED_MODULE_5__.norm_xy)(dx, dy).toFixed(3));
            }
        };
        this.geomWidget.callbackSelect(this.geomWidget.selected);
    }
    populateQuery(panel) {
        this.queryWidget = new _QueryFieldsWidget__WEBPACK_IMPORTED_MODULE_9__.QueryFieldsWidget(this.mol, 0, this.bond);
        this.queryWidget.render(panel);
    }
    populateExtra(panel) {
        let fields = [...this.mol.bondExtra(this.bond), ...this.mol.bondTransient(this.bond)];
        this.fieldsWidget = new _ExtraFieldsWidget__WEBPACK_IMPORTED_MODULE_6__.ExtraFieldsWidget(fields);
        this.fieldsWidget.render(panel);
    }
    updateMolecule() {
        let { mol, bond } = this;
        mol.setBondOrder(bond, this.optionOrder.getSelectedIndex());
        mol.setBondType(bond, this.optionStereo.getSelectedIndex());
    }
    updateGeometry() {
        let strval1 = this.inputGeom1.getValue();
        if (this.refGeom1 == strval1)
            return;
        const { mol } = this;
        let sel = this.geomWidget.selected, atoms = this.geomWidget.selectionAtoms(sel);
        if (sel.type == _GeomWidget__WEBPACK_IMPORTED_MODULE_7__.GeomWidgetSelType.Link) {
            if (this.refGeom1 != strval1) {
                let dist = parseFloat(strval1);
                if (isNaN(dist) || Math.abs(dist) > 100)
                    return;
                let instate = { mol, currentAtom: 0, currentBond: mol.findBond(atoms[0], atoms[1]), selectedMask: null };
                let molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_8__.MoleculeActivity(instate, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_8__.ActivityType.BondDist, { dist });
                molact.execute();
                this.mol = molact.output.mol;
                return;
            }
        }
    }
    updateQuery() {
        this.queryWidget.updateBond();
    }
    updateExtra() {
        this.mol.setBondExtra(this.bond, this.fieldsWidget.getExtraFields());
        this.mol.setBondTransient(this.bond, this.fieldsWidget.getTransientFields());
    }
    selectedTab(idx) {
        if (idx == 0)
            this.inputFrom.grabFocus();
        else if (idx == 1)
            this.inputGeom1.grabFocus();
    }
}


/***/ }),

/***/ "./src/sketcher/EditPolymer.ts":
/*!*************************************!*\
  !*** ./src/sketcher/EditPolymer.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EditPolymer: () => (/* binding */ EditPolymer)
/* harmony export */ });
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mol/PolymerBlock */ "./src/mol/PolymerBlock.ts");
/* harmony import */ var _dialog_Dialog__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dialog/Dialog */ "./src/dialog/Dialog.ts");
/* harmony import */ var _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../gfx/ArrangeMeasurement */ "./src/gfx/ArrangeMeasurement.ts");
/* harmony import */ var _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../gfx/ArrangeMolecule */ "./src/gfx/ArrangeMolecule.ts");
/* harmony import */ var _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../gfx/DrawMolecule */ "./src/gfx/DrawMolecule.ts");
/* harmony import */ var _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../gfx/MetaVector */ "./src/gfx/MetaVector.ts");
/* harmony import */ var _gfx_Rendering__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../gfx/Rendering */ "./src/gfx/Rendering.ts");
/* harmony import */ var _ui_ClipboardProxy__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ui/ClipboardProxy */ "./src/ui/ClipboardProxy.ts");
/* harmony import */ var _ui_OptionList__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ui/OptionList */ "./src/ui/OptionList.ts");
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");












const CHAR_LOW_A = 'a'.charCodeAt(0), CHAR_UP_A = 'A'.charCodeAt(0);
function indexToAtomLabel(idx) { return String.fromCharCode(CHAR_UP_A + Math.min(26, Math.max(0, idx)) - 1); }
function indexToBondLabel(idx) { return String.fromCharCode(CHAR_LOW_A + Math.min(26, Math.max(0, idx)) - 1); }
class EditPolymer extends _dialog_Dialog__WEBPACK_IMPORTED_MODULE_2__.Dialog {
    constructor(mol, atoms, proxyClip, callbackApply) {
        super();
        this.atoms = atoms;
        this.proxyClip = proxyClip;
        this.callbackApply = callbackApply;
        this.optionConnect = null;
        this.optionBondConn = null;
        this.currentID = 0;
        this.unit = null;
        this.borderAtoms = [];
        this.outBonds = [];
        this.outAtoms = [];
        this.initMol = mol;
        this.mol = mol.clone();
        this.title = 'Polymer Block';
        this.minPortionWidth = 20;
        this.maxPortionWidth = 95;
        this.polymer = new _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_1__.PolymerBlock(this.mol);
        atoms = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.sorted(atoms);
        for (let id of this.polymer.getIDList()) {
            let look = this.polymer.getUnit(id);
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.equals(atoms, look.atoms)) {
                this.currentID = id;
                this.unit = look;
                break;
            }
        }
        if (!this.unit)
            this.unit = new _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_1__.PolymerBlockUnit(atoms);
        let umol = this.umol = this.mol.clone();
        let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(false, this.umol.numAtoms);
        for (let n = 1; n <= this.mol.numBonds; n++) {
            let bfr = this.mol.bondFrom(n), bto = this.mol.bondTo(n);
            let in1 = this.atoms.includes(bfr), in2 = this.atoms.includes(bto);
            if (in1 || in2)
                mask[bfr - 1] = mask[bto - 1] = true;
            if (in1 && !in2) {
                this.borderAtoms.push(bfr);
                this.outBonds.push(n);
                this.outAtoms.push(bto);
            }
            if (in2 && !in1) {
                this.borderAtoms.push(bto);
                this.outBonds.push(n);
                this.outAtoms.push(bfr);
            }
        }
        this.borderAtoms = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.sortedUnique(this.borderAtoms);
        this.umap = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.maskMap(mask);
        this.umol = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_0__.MolUtil.subgraphMask(this.umol, mask);
        new _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_1__.PolymerBlock(this.umol).removeAll();
    }
    populate() {
        this.proxyClip.pushHandler(new _ui_ClipboardProxy__WEBPACK_IMPORTED_MODULE_8__.ClipboardProxyHandler());
        let buttons = this.buttonsDOM(), body = this.bodyDOM();
        this.btnApply = (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<button class="wmk-button wmk-button-primary">Apply</button>').appendTo(buttons).css({ 'margin-left': '0.5em' });
        if (this.currentID == 0)
            this.btnApply.setText('Create');
        this.btnApply.onClick(() => this.applyChanges());
        if (this.currentID > 0) {
            this.btnRemove = (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<button class="wmk-button wmk-button-default">Remove</button>').appendTo(buttons).css({ 'margin-left': '0.5em' });
            this.btnRemove.onClick(() => this.applyRemove());
        }
        let grid = (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(body);
        grid.css({ 'display': 'grid', 'align-items': 'center', 'justify-content': 'start' });
        grid.css({ 'grid-row-gap': '0.5em', 'grid-column-gap': '0.5em' });
        grid.css({ 'grid-template-columns': '[start col0] auto [col1] auto [col2] auto [col3] auto [col4] auto [end]' });
        (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(grid).css({ 'grid-area': '1 / col0' }).setText('# Atoms');
        let inputNAtoms = (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<input size="5"/>').appendTo((0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(grid).css({ 'grid-area': '1 / col1' }));
        inputNAtoms.elInput.readOnly = true;
        inputNAtoms.setValue(this.unit.atoms.length.toString());
        (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(grid).css({ 'grid-area': '1 / col2' }).setText('Out-bonds');
        let inputNBond = (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<input size="5"/>').appendTo((0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(grid).css({ 'grid-area': '1 / col3' }));
        inputNBond.elInput.readOnly = true;
        inputNBond.setValue(this.outBonds.length.toString());
        let row = 1;
        if (this.outBonds.length == 2) {
            row++;
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / col0` }).setText('Connectivity');
            this.optionConnect = new _ui_OptionList__WEBPACK_IMPORTED_MODULE_9__.OptionList(['Unknown', 'Head-to-Tail', 'Head-to-Head', 'Random']);
            this.optionConnect.render((0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / col1 / auto / col4` }));
            if (this.unit.connect == _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_1__.PolymerBlockConnectivity.HeadToTail)
                this.optionConnect.setSelectedIndex(1);
            else if (this.unit.connect == _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_1__.PolymerBlockConnectivity.HeadToHead)
                this.optionConnect.setSelectedIndex(2);
            else if (this.unit.connect == _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_1__.PolymerBlockConnectivity.Random)
                this.optionConnect.setSelectedIndex(3);
        }
        if (this.outBonds.length == 4 && _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.uniqueUnstable(this.outAtoms).length == 4) {
            row++;
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / col0` }).setText('2x2 Connectivity');
            this.populate2x2Conn((0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / col1 / auto / end` }));
        }
        let getList = (str) => {
            if (!str)
                return null;
            let list = [];
            for (let bit of str.split(',')) {
                let v = parseInt(bit);
                if (v > 0)
                    list.push(v);
                else
                    return undefined;
            }
            return list;
        };
        for (let n = 0; n < this.borderAtoms.length; n++) {
            row++;
            let domLabel = (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / col0`, 'text-align': 'right', 'padding-right': '0.5em' });
            if (n == 0)
                domLabel.setText('Name ');
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<span/>').appendTo(domLabel).css({ 'color': '#008000' }).setText(indexToAtomLabel(n + 1));
            let input = (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<input size="20"/>').appendTo((0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / col1 / auto / end`, 'width': '100%' }));
            let atom = this.borderAtoms[n];
            let nvals = this.unit.atomName.get(atom);
            if (nvals)
                input.setValue(nvals.join(','));
            input.onInput(() => {
                let list = getList(input.getValue());
                if (list !== undefined)
                    this.unit.atomName.set(atom, list);
            });
        }
        for (let n = 0; n < this.outAtoms.length; n++) {
            row++;
            let domLabel = (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / col0`, 'text-align': 'right', 'padding-right': '0.5em' });
            if (n == 0)
                domLabel.setText('Link ');
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<span/>').appendTo(domLabel).css({ 'color': '#800080' }).setText(indexToBondLabel(n + 1));
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / col1` }).setText('Include');
            let inputIncl = (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<input size="10"/>').appendTo((0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / col2`, 'width': '100%' }));
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / col3` }).setText('Exclude');
            let inputExcl = (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<input size="10"/>').appendTo((0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / col4`, 'width': '100%' }));
            let bond = this.outBonds[n];
            let ivals = this.unit.bondIncl.get(bond), evals = this.unit.bondExcl.get(bond);
            if (ivals)
                inputIncl.setValue(ivals.join(','));
            if (evals)
                inputExcl.setValue(evals.join(','));
            inputIncl.onInput(() => {
                let list = getList(inputIncl.getValue());
                if (list !== undefined)
                    this.unit.bondIncl.set(bond, list);
            });
            inputExcl.onInput(() => {
                let list = getList(inputExcl.getValue());
                if (list !== undefined)
                    this.unit.bondExcl.set(bond, list);
            });
        }
        row++;
        this.populateUncap((0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / col0 / auto / col4`, 'text-align': 'center' }));
        row++;
        this.divPreview = (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / col0 / auto / col4`, 'text-align': 'center' });
        this.renderUnit();
        let focusable = body.findAll('input,textarea');
        if (focusable.length > 0)
            focusable[0].grabFocus(true);
        for (let dom of focusable) {
            dom.css({ 'font': 'inherit' });
            dom.onKeyDown((event) => {
                let keyCode = event.keyCode || event.which;
                if (keyCode == 13)
                    this.applyChanges();
                if (keyCode == 27)
                    this.close();
            });
        }
    }
    close() {
        this.proxyClip.popHandler();
        super.close();
    }
    populate2x2Conn(div) {
        const perms = [[0, 1, 2, 3], [0, 1, 3, 2], [0, 2, 1, 3], [0, 2, 3, 1], [0, 3, 1, 2], [0, 3, 2, 1]];
        let bondConnOptions = [null];
        let optionList = ['None'];
        let selidx = 0;
        for (let perm of perms) {
            let bonds = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.idxGet(this.outBonds, perm);
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.equals(bonds, this.unit.bondConn))
                selidx = optionList.length;
            bondConnOptions.push(bonds);
            optionList.push(`${perm[0] + 1},${perm[1] + 1}:${perm[2] + 1},${perm[3] + 1}`);
        }
        this.optionBondConn = new _ui_OptionList__WEBPACK_IMPORTED_MODULE_9__.OptionList(optionList);
        this.optionBondConn.setSelectedIndex(selidx);
        this.optionBondConn.render(div);
        this.optionBondConn.onSelect((idx) => {
            this.unit.bondConn = bondConnOptions[idx];
            this.renderUnit();
        });
    }
    populateUncap(div) {
        let uncapAtoms = [];
        skip: for (let a of this.outAtoms)
            if (this.mol.atomAdjCount(a) == 1 && this.mol.atomElement(a) != '*') {
                for (let unit of this.polymer.getUnits())
                    if (unit.atoms.includes(a))
                        continue skip;
                uncapAtoms.push(a);
            }
        if (uncapAtoms.length == 0)
            return;
        let btnUncap = (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)('<button class="wmk-button wmk-button-default">Uncap Exterior</button>').appendTo(div);
        btnUncap.onClick(() => {
            btnUncap.elInput.disabled = true;
            for (let a of uncapAtoms)
                this.mol.setAtomElement(a, '*');
        });
    }
    applyChanges() {
        if (this.optionConnect) {
            let sel = this.optionConnect.getSelectedIndex();
            if (sel == 0)
                this.unit.connect = null;
            else if (sel == 1)
                this.unit.connect = _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_1__.PolymerBlockConnectivity.HeadToTail;
            else if (sel == 2)
                this.unit.connect = _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_1__.PolymerBlockConnectivity.HeadToHead;
            else if (sel == 3)
                this.unit.connect = _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_1__.PolymerBlockConnectivity.Random;
        }
        if (this.currentID)
            this.polymer.removeUnit(this.currentID);
        this.currentID = this.polymer.createUnit(this.unit.clone());
        this.polymer.rewriteMolecule();
        this.callbackApply(this);
    }
    applyRemove() {
        if (this.currentID)
            this.polymer.removeUnit(this.currentID);
        this.callbackApply(this);
    }
    renderUnit() {
        let umol = this.umol.clone();
        let policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_7__.RenderPolicy.defaultColourOnWhite(20);
        let measure = new _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_3__.OutlineMeasurement(0, 0, policy.data.pointScale);
        let effects = new _gfx_Rendering__WEBPACK_IMPORTED_MODULE_7__.RenderEffects();
        effects.atomCircleSz = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.numberArray(0, umol.numAtoms);
        effects.atomCircleCol = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.numberArray(0, umol.numAtoms);
        effects.atomDecoText = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.stringArray(null, umol.numAtoms);
        effects.atomDecoCol = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.numberArray(null, umol.numAtoms);
        effects.atomDecoSize = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.numberArray(null, umol.numAtoms);
        let borderAtoms = this.borderAtoms.map((atom) => this.umap[atom - 1] + 1);
        let outAtoms = this.outAtoms.map((atom) => this.umap[atom - 1] + 1);
        for (let n = 1; n <= umol.numAtoms; n++) {
            let bidx = borderAtoms.indexOf(n), oidx = outAtoms.indexOf(n);
            if (bidx >= 0) {
                effects.atomDecoText[n - 1] = indexToAtomLabel(bidx + 1);
                effects.atomDecoCol[n - 1] = 0x008000;
                effects.atomDecoSize[n - 1] = 0.5;
            }
            if (oidx >= 0) {
                umol.setAtomCharge(n, 0);
                umol.setAtomUnpaired(n, 0);
                umol.setAtomIsotope(n, 0);
                effects.atomCircleSz[n - 1] = 0.1;
                effects.atomCircleCol[n - 1] = 0xFF00FF;
                effects.atomDecoText[n - 1] = indexToBondLabel(oidx + 1);
                effects.atomDecoCol[n - 1] = 0x800080;
                effects.atomDecoSize[n - 1] = 0.5;
                umol.setAtomElement(n, 'C');
            }
        }
        let layout = new _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.ArrangeMolecule(umol, measure, policy, effects);
        layout.arrange();
        layout.squeezeInto(0, 0, 300, 300);
        let gfx = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_6__.MetaVector();
        if (this.unit.bondConn) {
            const LINES = [
                [0, 1, 0xC86D08, 2, false], [2, 3, 0xC86D08, 2, false],
                [0, 2, 0xC0C86D08, 1, true], [1, 3, 0xC0C86D08, 1, true]
            ];
            for (let [i1, i2, col, sz, circle] of LINES) {
                let a1 = this.outAtoms[this.outBonds.indexOf(this.unit.bondConn[i1])];
                let a2 = this.outAtoms[this.outBonds.indexOf(this.unit.bondConn[i2])];
                let p1 = layout.getPoint(a1 - 1), p2 = layout.getPoint(a2 - 1);
                gfx.drawLine(p1.oval.cx, p1.oval.cy, p2.oval.cx, p2.oval.cy, col, sz);
                if (circle) {
                    for (let f of [0.2, 0.4, 0.6, 0.8]) {
                        let mx = p1.oval.cx + f * (p2.oval.cx - p1.oval.cx), my = p1.oval.cy + f * (p2.oval.cy - p1.oval.cy);
                        gfx.drawOval(mx, my, 2, 2, col, sz, null);
                    }
                }
            }
        }
        new _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_5__.DrawMolecule(layout, gfx).draw();
        gfx.normalise();
        this.divPreview.empty();
        (0,_util_dom__WEBPACK_IMPORTED_MODULE_10__.dom)(gfx.createSVG()).appendTo(this.divPreview).css({ 'pointer-events': 'none' });
    }
}


/***/ }),

/***/ "./src/sketcher/ExtraFieldsWidget.ts":
/*!*******************************************!*\
  !*** ./src/sketcher/ExtraFieldsWidget.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtraFieldsWidget: () => (/* binding */ ExtraFieldsWidget)
/* harmony export */ });
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _ui_Widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ui/Widget */ "./src/ui/Widget.ts");
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");



class ExtraFieldsWidget extends _ui_Widget__WEBPACK_IMPORTED_MODULE_1__.Widget {
    constructor(fields) {
        super();
        this.fields = fields;
    }
    render(parent) {
        super.render(parent);
        this.divFields = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<div/>').appendTo(this.contentDOM);
        this.fillTable();
        let divButtons = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<div/>').appendTo(this.contentDOM).css({ 'text-align': 'center' });
        let btnExtra = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<button class="wmk-button wmk-button-default">Extra</button>').appendTo(divButtons);
        btnExtra.onClick(() => {
            this.fields.push(_mol_Molecule__WEBPACK_IMPORTED_MODULE_0__.Molecule.PREFIX_EXTRA);
            this.fillTable();
        });
        let btnTransient = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<button class="wmk-button wmk-button-default">Transient</button>').appendTo(divButtons).css({ 'margin-left': '0.5em' });
        btnTransient.onClick(() => {
            this.fields.push(_mol_Molecule__WEBPACK_IMPORTED_MODULE_0__.Molecule.PREFIX_TRANSIENT);
            this.fillTable();
        });
    }
    getExtraFields() {
        let extra = [];
        for (let field of this.fields)
            if (!field.startsWith(_mol_Molecule__WEBPACK_IMPORTED_MODULE_0__.Molecule.PREFIX_TRANSIENT) && field.length > 1)
                extra.push(field);
        return extra;
    }
    getTransientFields() {
        let transient = [];
        for (let field of this.fields)
            if (field.startsWith(_mol_Molecule__WEBPACK_IMPORTED_MODULE_0__.Molecule.PREFIX_TRANSIENT) && field.length > 1)
                transient.push(field);
        return transient;
    }
    fillTable() {
        this.divFields.empty();
        if (this.fields.length == 0)
            return;
        let table = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<table/>').appendTo(this.divFields).css({ 'width': '100%' });
        let tr = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<tr/>').appendTo(table);
        (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<td/>').appendTo(tr).css({ 'text-align': 'right', 'font-weight': 'bold', 'text-decoration': 'underline' }).setText('Type');
        (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<td/>').appendTo(tr).css({ 'font-weight': 'bold', 'text-decoration': 'underline' }).setText('Value');
        for (let n = 0; n < this.fields.length; n++) {
            let strType = '?', strValue = '';
            if (this.fields[n].length > 0) {
                strType = this.fields[n].charAt(0);
                strValue = this.fields[n].substring(1);
            }
            tr = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<tr/>').appendTo(table);
            let tdType = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<td/>').appendTo(tr).css({ 'text-align': 'right' }), tdValue = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<td/>').appendTo(tr), tdButton = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<td/>').appendTo(tr);
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<span/>').appendTo(tdType).css({ 'padding': '0.2em', 'border': '1px solid black', 'background-color': '#C0C0C0' }).setText(strType);
            let input = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<input size="20"/>').appendTo(tdValue).css({ 'width': '100%', 'font': 'inherit' });
            input.setValue(strValue);
            input.onInput(() => { this.fields[n] = strType + input.getValue(); });
            let btnDelete = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<button class="wmk-button wmk-button-small wmk-button-default">\u{2716}</button>').appendTo(tdButton).css({ 'margin-left': '0.5em' });
            btnDelete.onClick(() => {
                this.fields.splice(n, 1);
                this.fillTable();
            });
        }
    }
}


/***/ }),

/***/ "./src/sketcher/GeomWidget.ts":
/*!************************************!*\
  !*** ./src/sketcher/GeomWidget.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GeomWidget: () => (/* binding */ GeomWidget),
/* harmony export */   GeomWidgetSelType: () => (/* binding */ GeomWidgetSelType),
/* harmony export */   GeomWidgetType: () => (/* binding */ GeomWidgetType)
/* harmony export */ });
/* harmony import */ var _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../gfx/MetaVector */ "./src/gfx/MetaVector.ts");
/* harmony import */ var _ui_Widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ui/Widget */ "./src/ui/Widget.ts");
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _util_Geom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/Geom */ "./src/util/Geom.ts");
/* harmony import */ var _util_Theme__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/Theme */ "./src/util/Theme.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");







var GeomWidgetType;
(function (GeomWidgetType) {
    GeomWidgetType[GeomWidgetType["Atom"] = 0] = "Atom";
    GeomWidgetType[GeomWidgetType["Bond"] = 1] = "Bond";
})(GeomWidgetType || (GeomWidgetType = {}));
var GeomWidgetSelType;
(function (GeomWidgetSelType) {
    GeomWidgetSelType[GeomWidgetSelType["Position"] = 0] = "Position";
    GeomWidgetSelType[GeomWidgetSelType["Link"] = 1] = "Link";
    GeomWidgetSelType[GeomWidgetSelType["Torsion"] = 2] = "Torsion";
})(GeomWidgetSelType || (GeomWidgetSelType = {}));
class GeomWidget extends _ui_Widget__WEBPACK_IMPORTED_MODULE_1__.Widget {
    constructor(type, mol, idx) {
        super();
        this.type = type;
        this.mol = mol;
        this.idx = idx;
        this.posX = [];
        this.posY = [];
        this.linkA = [];
        this.linkB = [];
        this.torsA = [];
        this.torsB = [];
        this.hovered = null;
        if (type == GeomWidgetType.Atom) {
            const atom = idx;
            let adj = mol.atomAdjList(atom);
            this.atomSubset = [atom, ...adj];
            for (let b of mol.atomAdjBonds(atom)) {
                this.linkA.push(0);
                this.linkB.push(this.atomSubset.indexOf(mol.bondOther(b, atom)));
            }
            let theta = [];
            for (let a of adj)
                theta.push(Math.atan2(-(mol.atomY(a) - mol.atomY(atom)), mol.atomX(a) - mol.atomX(atom)));
            let order = _util_Vec__WEBPACK_IMPORTED_MODULE_6__.Vec.idxSort(theta);
            for (let n = 0; n < order.length; n++) {
                this.torsA.push(order[n] + 1);
                this.torsB.push(order[n < order.length - 1 ? n + 1 : 0] + 1);
            }
            this.selected = { type: GeomWidgetSelType.Position, idx: 0 };
        }
        else {
            const bond = idx;
            let a1 = mol.bondFrom(bond), a2 = mol.bondTo(bond);
            this.atomSubset = [...mol.atomAdjList(a1), ...mol.atomAdjList(a2)];
            let link = (a1, a2) => {
                this.linkA.push(this.atomSubset.indexOf(a1));
                this.linkB.push(this.atomSubset.indexOf(a2));
            };
            link(a1, a2);
            for (let a of mol.atomAdjList(a1))
                if (a != a2)
                    link(a1, a);
            for (let a of mol.atomAdjList(a2))
                if (a != a1)
                    link(a2, a);
            this.selected = { type: GeomWidgetSelType.Link, idx: 0 };
        }
    }
    render(parent) {
        super.render(parent);
        let divOuter = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<div/>').appendTo(this.contentDOM).css({ 'text-align': 'center' });
        this.divDiagram = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<div/>').appendTo(divOuter).css({ 'display': 'inline-block' });
        this.contentDOM.onClick((event) => this.mouseClick((0,_util_util__WEBPACK_IMPORTED_MODULE_5__.eventCoords)(event, this.divDiagram)));
        this.contentDOM.onMouseMove((event) => this.mouseMove((0,_util_util__WEBPACK_IMPORTED_MODULE_5__.eventCoords)(event, this.divDiagram)));
        this.redraw();
    }
    selectionAtoms(sel) {
        const atoms = this.atomSubset;
        if (sel.type == GeomWidgetSelType.Position)
            return [atoms[sel.idx]];
        if (sel.type == GeomWidgetSelType.Link)
            return [atoms[this.linkA[sel.idx]], atoms[this.linkB[sel.idx]]];
        if (sel.type == GeomWidgetSelType.Torsion)
            return [atoms[0], atoms[this.torsA[sel.idx]], atoms[this.torsB[sel.idx]]];
        return null;
    }
    redraw() {
        this.divDiagram.empty();
        let w = 250, h = 250;
        this.posX = [];
        this.posY = [];
        const ANG_RAD = 0.25;
        for (let a of this.atomSubset) {
            this.posX.push(this.mol.atomX(a));
            this.posY.push(this.mol.atomY(a));
        }
        let loX = _util_Vec__WEBPACK_IMPORTED_MODULE_6__.Vec.min(this.posX) - ANG_RAD, hiX = _util_Vec__WEBPACK_IMPORTED_MODULE_6__.Vec.max(this.posX) + ANG_RAD;
        let loY = _util_Vec__WEBPACK_IMPORTED_MODULE_6__.Vec.min(this.posY) - ANG_RAD, hiY = _util_Vec__WEBPACK_IMPORTED_MODULE_6__.Vec.max(this.posY) + ANG_RAD;
        this.scale = Math.min(40, Math.min((w - 4) / (hiX - loX), (h - 4) / (hiY - loY)));
        let dx = 0.5 * (w - (hiX - loX) * this.scale), dy = 0.5 * (h - (hiY - loY) * this.scale);
        for (let n = 0; n < this.atomSubset.length; n++) {
            this.posX[n] = dx + (this.posX[n] - loX) * this.scale;
            this.posY[n] = h - (dy + (this.posY[n] - loY) * this.scale);
        }
        this.posRad = ANG_RAD * this.scale;
        let gfx = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_0__.MetaVector();
        gfx.setSize(w, h);
        let fg = _util_Theme__WEBPACK_IMPORTED_MODULE_4__.Theme.foreground, bg = _util_Theme__WEBPACK_IMPORTED_MODULE_4__.Theme.background, outerSel = 0x008FD1, innerSel = 0x47D5D2;
        for (let n = 0; n < this.atomSubset.length; n++) {
            if (this.hovered && this.hovered.type == GeomWidgetSelType.Position && this.hovered.idx == n)
                gfx.drawOval(this.posX[n], this.posY[n], this.posRad, this.posRad, fg, 1, bg);
            else if (this.selected && this.selected.type == GeomWidgetSelType.Position && this.selected.idx == n)
                gfx.drawOval(this.posX[n], this.posY[n], this.posRad, this.posRad, outerSel, 1, innerSel);
            else
                gfx.drawOval(this.posX[n], this.posY[n], this.posRad, this.posRad, _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_0__.MetaVector.NOCOLOUR, 0, fg);
        }
        for (let showsel of [1, 2, 3])
            for (let n = 0; n < this.linkA.length; n++) {
                let x1 = this.posX[this.linkA[n]], y1 = this.posY[this.linkA[n]];
                let x2 = this.posX[this.linkB[n]], y2 = this.posY[this.linkB[n]];
                if (this.hovered && this.hovered.type == GeomWidgetSelType.Link && this.hovered.idx == n) {
                    if (showsel == 3) {
                        gfx.drawLine(x1, y1, x2, y2, fg, this.scale * 0.1 + 2);
                        gfx.drawLine(x1, y1, x2, y2, bg, this.scale * 0.1);
                    }
                }
                else if (this.selected && this.selected.type == GeomWidgetSelType.Link && this.selected.idx == n) {
                    if (showsel == 2) {
                        gfx.drawLine(x1, y1, x2, y2, outerSel, this.scale * 0.1 + 2);
                        gfx.drawLine(x1, y1, x2, y2, innerSel, this.scale * 0.1);
                    }
                }
                else {
                    if (showsel == 1)
                        gfx.drawLine(x1, y1, x2, y2, fg, this.scale * 0.1);
                }
            }
        for (let n = 0; n < this.torsA.length; n++) {
            let cx = this.posX[0], cy = this.posY[0];
            let dx1 = 0.5 * (this.posX[this.torsA[n]] - cx), dy1 = 0.5 * (this.posY[this.torsA[n]] - cy);
            let dx2 = 0.5 * (this.posX[this.torsB[n]] - cx), dy2 = 0.5 * (this.posY[this.torsB[n]] - cy);
            let rad = 0.5 * ((0,_util_util__WEBPACK_IMPORTED_MODULE_5__.norm_xy)(dx1, dy1) + (0,_util_util__WEBPACK_IMPORTED_MODULE_5__.norm_xy)(dx2, dy2));
            let theta1 = Math.atan2(dy1, dx1) + 10 * _util_util__WEBPACK_IMPORTED_MODULE_5__.DEGRAD, theta2 = Math.atan2(dy2, dx2) - 10 * _util_util__WEBPACK_IMPORTED_MODULE_5__.DEGRAD, dtheta = (0,_util_util__WEBPACK_IMPORTED_MODULE_5__.angleDiff)(theta2, theta1);
            let ox1 = rad * Math.cos(theta1), oy1 = rad * Math.sin(theta1), ox2 = rad * Math.cos(theta2), oy2 = rad * Math.sin(theta2);
            let px, py, pf;
            if (dtheta > 0) {
                let [ax1, ay1, ax2, ay2] = _util_Geom__WEBPACK_IMPORTED_MODULE_3__.GeomUtil.arcControlPoints(rad, ox1, oy1, ox2, oy2);
                px = _util_Vec__WEBPACK_IMPORTED_MODULE_6__.Vec.add([ox1, ax1, ax2, ox2], cx);
                py = _util_Vec__WEBPACK_IMPORTED_MODULE_6__.Vec.add([oy1, ay1, ay2, oy2], cy);
                pf = [false, true, true, false];
            }
            else {
                let thetaM = theta1 + 0.5 * (dtheta + _util_util__WEBPACK_IMPORTED_MODULE_5__.TWOPI);
                let oxM = rad * Math.cos(thetaM), oyM = rad * Math.sin(thetaM);
                let [ax1, ay1, ax2, ay2] = _util_Geom__WEBPACK_IMPORTED_MODULE_3__.GeomUtil.arcControlPoints(rad, ox1, oy1, oxM, oyM);
                let [ax3, ay3, ax4, ay4] = _util_Geom__WEBPACK_IMPORTED_MODULE_3__.GeomUtil.arcControlPoints(rad, oxM, oyM, ox2, oy2);
                px = _util_Vec__WEBPACK_IMPORTED_MODULE_6__.Vec.add([ox1, ax1, ax2, oxM, ax3, ax4, ox2], cx);
                py = _util_Vec__WEBPACK_IMPORTED_MODULE_6__.Vec.add([oy1, ay1, ay2, oyM, ay3, ay4, oy2], cy);
                pf = [false, true, true, false, true, true, false];
            }
            if (this.hovered && this.hovered.type == GeomWidgetSelType.Torsion && this.hovered.idx == n) {
                gfx.drawPath(px, py, pf, false, fg, this.scale * 0.1 + 2, _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_0__.MetaVector.NOCOLOUR, false);
                gfx.drawPath(px, py, pf, false, bg, this.scale * 0.1, _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_0__.MetaVector.NOCOLOUR, false);
            }
            else if (this.selected && this.selected.type == GeomWidgetSelType.Torsion && this.selected.idx == n) {
                gfx.drawPath(px, py, pf, false, outerSel, this.scale * 0.1 + 2, _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_0__.MetaVector.NOCOLOUR, false);
                gfx.drawPath(px, py, pf, false, innerSel, this.scale * 0.1, _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_0__.MetaVector.NOCOLOUR, false);
            }
            else
                gfx.drawPath(px, py, pf, false, fg, this.scale * 0.1, _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_0__.MetaVector.NOCOLOUR, false);
        }
        this.divDiagram.empty();
        let svg = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)(gfx.createSVG()).appendTo(this.divDiagram).css({ 'pointer-events': 'none' });
    }
    mouseClick(xy) {
        event.stopPropagation();
        if (this.type == GeomWidgetType.Bond)
            return;
        let which = this.whichSelection(xy[0], xy[1]);
        if (!which)
            return;
        if (!this.sameSelection(this.selected, which)) {
            this.selected = which;
            this.hovered = null;
            this.redraw();
            this.callbackSelect(which);
        }
    }
    mouseMove(xy) {
        if (this.type == GeomWidgetType.Bond)
            return;
        let which = this.whichSelection(xy[0], xy[1]);
        if (which && this.sameSelection(which, this.selected))
            which = null;
        if (!this.sameSelection(this.hovered, which)) {
            this.hovered = which;
            this.redraw();
        }
    }
    whichSelection(x, y) {
        let cx = this.posX[0], cy = this.posY[0];
        if ((0,_util_util__WEBPACK_IMPORTED_MODULE_5__.norm_xy)(x - cx, y - cy) <= this.posRad)
            return { type: GeomWidgetSelType.Position, idx: 0 };
        let maxRad = 0;
        for (let n = 1; n < this.atomSubset.length; n++)
            maxRad = Math.max(maxRad, (0,_util_util__WEBPACK_IMPORTED_MODULE_5__.norm_xy)(this.posX[n] - cx, this.posY[n] - cy) + this.posRad);
        if ((0,_util_util__WEBPACK_IMPORTED_MODULE_5__.norm_xy)(x - cx, y - cy) > maxRad)
            return null;
        let theta = Math.atan2(y - cy, x - cx);
        let closeSel = null, closeDelta = Number.POSITIVE_INFINITY;
        for (let n = 0; n < this.linkB.length; n++) {
            let delta = Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_5__.angleDiff)(Math.atan2(this.posY[this.linkB[n]] - cy, this.posX[this.linkB[n]] - cx), theta));
            if (delta < 10 * _util_util__WEBPACK_IMPORTED_MODULE_5__.DEGRAD && delta < closeDelta) {
                closeSel = { type: GeomWidgetSelType.Link, idx: n };
                closeDelta = delta;
            }
        }
        for (let n = 0; n < this.torsA.length; n++) {
            let theta1 = Math.atan2(this.posY[this.torsA[n]] - cy, this.posX[this.torsA[n]] - cx);
            let theta2 = Math.atan2(this.posY[this.torsB[n]] - cy, this.posX[this.torsB[n]] - cx);
            let midtheta = theta1 + 0.5 * ((0,_util_util__WEBPACK_IMPORTED_MODULE_5__.angleDiff)(theta2, theta1));
            let delta = Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_5__.angleDiff)(midtheta, theta));
            if (delta < closeDelta) {
                closeSel = { type: GeomWidgetSelType.Torsion, idx: n };
                closeDelta = delta;
            }
        }
        return closeSel;
    }
    sameSelection(sel1, sel2) {
        if (sel1 == null && sel2 == null)
            return true;
        if (sel1 == null || sel2 == null)
            return false;
        return sel1.type == sel2.type && sel1.idx == sel2.idx;
    }
}


/***/ }),

/***/ "./src/sketcher/MetalLigate.ts":
/*!*************************************!*\
  !*** ./src/sketcher/MetalLigate.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MetalLigate: () => (/* binding */ MetalLigate)
/* harmony export */ });
/* harmony import */ var _mol_Graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/Graph */ "./src/mol/Graph.ts");
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _util_Geom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/Geom */ "./src/util/Geom.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");






class MetalLigate {
    constructor(mol, metalAtom, ligandAttach) {
        this.metalAtom = metalAtom;
        this.ligandAttach = ligandAttach;
        this.ligands = [];
        this.mol = mol.clone();
    }
    generate() {
        const { mol, metalAtom, ligandAttach, ligands } = this;
        let g = _mol_Graph__WEBPACK_IMPORTED_MODULE_0__.Graph.fromMolecule(mol);
        g.isolateNode(metalAtom - 1);
        for (let cc of g.calculateComponentGroups()) {
            _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.addTo(cc, 1);
            let anything = false;
            for (let a of ligandAttach)
                if (cc.indexOf(a) >= 0) {
                    anything = true;
                    break;
                }
            if (!anything)
                continue;
            let lig = { atoms: cc, attach: [] };
            lig.atoms = cc;
            let anyAttached = false;
            for (let a of lig.atoms)
                if (mol.findBond(a, metalAtom) > 0) {
                    anyAttached = true;
                    break;
                }
            for (let a of lig.atoms) {
                let bonded = mol.findBond(a, metalAtom) > 0;
                if (bonded || (!anyAttached && ligandAttach.includes(a)))
                    lig.attach.push(a);
            }
            ligands.push(lig);
            for (let a of lig.attach)
                if (mol.findBond(a, metalAtom) == 0)
                    this.makeLigandBond(a);
        }
        if (ligands.length == 0)
            throw new Error('No ligand atoms');
        let otherLigands = mol.atomAdjList(metalAtom);
        for (let lig of ligands)
            otherLigands = _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.exclude(otherLigands, lig.attach);
        let mx = mol.atomX(metalAtom), my = mol.atomY(metalAtom);
        let otherTheta = new Array(otherLigands.length);
        for (let n = 0; n < otherLigands.length; n++)
            otherTheta[n] = Math.atan2(mol.atomY(otherLigands[n]) - my, mol.atomX(otherLigands[n]) - mx);
        for (let lig of ligands) {
            if (lig.attach.length == 1) {
                let a = lig.attach[0];
                lig.avgTheta = Math.atan2(mol.atomY(a) - my, mol.atomX(a) - mx);
                this.orientLigand(lig);
            }
            else {
                let theta = new Array(lig.attach.length);
                for (let n = 0; n < lig.attach.length; n++) {
                    let a = lig.attach[n];
                    theta[n] = Math.atan2(mol.atomY(a) - my, mol.atomX(a) - mx);
                }
                theta = _util_Geom__WEBPACK_IMPORTED_MODULE_3__.GeomUtil.sortAngles(theta);
                let base = theta[0];
                for (let n = 0; n < theta.length; n++)
                    theta[n] = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.angleDiffPos)(theta[n], base);
                lig.avgTheta = base + _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.sum(theta) / theta.length;
                this.orientLigand(lig);
            }
        }
        if (otherLigands.length == 0) {
            ligands.sort((l1, l2) => (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.signum)(l1.avgTheta - l2.avgTheta));
            this.arrangeLigandsFree(ligands);
        }
        else if (otherLigands.length == 1) {
            ligands.sort((l1, l2) => {
                let diff1 = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.angleDiffPos)(l1.avgTheta, otherTheta[0]);
                let diff2 = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.angleDiffPos)(l2.avgTheta, otherTheta[0]);
                return (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.signum)(diff1 - diff2);
            });
            this.arrangeLigandsRange(ligands, otherTheta[0], _util_util__WEBPACK_IMPORTED_MODULE_4__.TWOPI, true);
        }
        else {
            let otherOrder = _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.idxSort(otherTheta);
            for (let n = 0; n < otherOrder.length; n++) {
                let nn = (n + 1) % otherOrder.length;
                let theta = otherTheta[otherOrder[n]];
                let extent = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.angleDiffPos)(otherTheta[otherOrder[nn]], theta);
                let batch = [];
                for (let lig of ligands) {
                    let diff = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.angleDiffPos)(lig.avgTheta, theta);
                    if (diff < extent)
                        batch.push(lig);
                }
                if (batch.length == 0)
                    continue;
                batch.sort((l1, l2) => {
                    let diff1 = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.angleDiffPos)(l1.avgTheta, theta);
                    let diff2 = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.angleDiffPos)(l2.avgTheta, theta);
                    return (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.signum)(diff1 - diff2);
                });
                this.arrangeLigandsRange(batch, theta, extent, true);
            }
        }
        this.resolveClashes();
        return mol;
    }
    makeLigandBond(ligAtom) {
        const { mol, metalAtom } = this;
        let mchg = mol.atomCharge(metalAtom), lchg = mol.atomCharge(ligAtom);
        if (mchg > 0 && lchg < 0) {
            mol.setAtomCharge(metalAtom, mchg - 1);
            mol.setAtomCharge(ligAtom, lchg + 1);
            mol.addBond(metalAtom, ligAtom, 1);
            return;
        }
        if (mchg < 0 && lchg > 0) {
            mol.setAtomCharge(metalAtom, mchg + 1);
            mol.setAtomCharge(ligAtom, lchg - 1);
            mol.addBond(metalAtom, ligAtom, 1);
            return;
        }
        let order = 0;
        if (mol.atomHExplicit(ligAtom) == _mol_Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.HEXPLICIT_UNKNOWN && mol.atomHydrogens(ligAtom) > 0)
            order = 1;
        mol.addBond(metalAtom, ligAtom, order);
    }
    orientLigand(lig) {
        const { mol, metalAtom } = this;
        let mx = mol.atomX(metalAtom), my = mol.atomY(metalAtom);
        let lsz = lig.atoms.length, asz = lig.attach.length;
        let idxAttach = new Array(asz);
        for (let n = 0; n < asz; n++)
            idxAttach[n] = lig.atoms.indexOf(lig.attach[n]);
        let lx = new Array(lsz), ly = new Array(lsz);
        let ax = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.arrayAtomX(mol), ay = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.arrayAtomY(mol);
        let molExtent = _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.max(ax) - _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.min(ax) + _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.max(ay) - _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.min(ay);
        let dx = molExtent * Math.cos(lig.avgTheta), dy = molExtent * Math.sin(lig.avgTheta);
        for (let n = 0; n < lsz; n++) {
            lx[n] = mol.atomX(lig.atoms[n]) + dx;
            ly[n] = mol.atomY(lig.atoms[n]) + dy;
        }
        let cx = _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.sum(lx) / lsz, cy = _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.sum(ly) / lsz;
        let weight = [];
        for (let n = 0; n < lsz; n++) {
            let closest = Number.POSITIVE_INFINITY;
            for (let idx of idxAttach)
                closest = Math.min(closest, (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.norm2_xy)(lx[n] - lx[idx], ly[n] - ly[idx]));
            weight.push(1.0 / (1 + Math.sqrt(closest)));
        }
        let bestScore = Number.POSITIVE_INFINITY;
        let bestLX = null, bestLY = null;
        for (let theta = 0; theta < 360; theta += 15) {
            let cosTheta = Math.cos(theta * _util_util__WEBPACK_IMPORTED_MODULE_4__.DEGRAD), sinTheta = Math.sin(theta * _util_util__WEBPACK_IMPORTED_MODULE_4__.DEGRAD);
            let rx = new Array(lsz), ry = new Array(lsz);
            let score = 0;
            for (let n = 0; n < lsz; n++) {
                let x = lx[n] - cx, y = ly[n] - cy;
                rx[n] = cx + x * cosTheta - y * sinTheta;
                ry[n] = cy + x * sinTheta + y * cosTheta;
                let dist = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.norm_xy)(rx[n] - mx, ry[n] - my);
                if (lig.attach.indexOf(lig.atoms[n]) >= 0)
                    score += dist;
                else
                    score -= dist * weight[n];
            }
            if (score < bestScore) {
                bestScore = score;
                bestLX = rx;
                bestLY = ry;
            }
        }
        lx = bestLX;
        ly = bestLY;
        if (asz == 1) {
            dx = _mol_Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.IDEALBOND * Math.cos(lig.avgTheta);
            dy = _mol_Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.IDEALBOND * Math.sin(lig.avgTheta);
            _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.addTo(lx, mx + dx - lx[idxAttach[0]]);
            _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.addTo(ly, my + dy - ly[idxAttach[0]]);
        }
        else {
            let attTheta = new Array(asz), attDist = _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.numberArray(0, asz), attDX = _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.numberArray(0, asz), attDY = _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.numberArray(0, asz);
            for (let n = 0; n < asz; n++) {
                let ox = lx[idxAttach[n]] - mx, oy = ly[idxAttach[n]] - my;
                attTheta[n] = Math.atan2(oy, ox);
                if (asz > 2) {
                    attDist[n] = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.norm_xy)(ox, oy);
                    attDX[n] = ox / attDist[n];
                    attDY[n] = oy / attDist[n];
                }
            }
            _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.addTo(attDist, -_util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.min(attDist));
            let orderAttach = _util_Geom__WEBPACK_IMPORTED_MODULE_3__.GeomUtil.idxSortAngles(attTheta);
            let srcX = new Array(asz), srcY = new Array(asz);
            let dstX = new Array(asz), dstY = new Array(asz);
            let dtheta = 45 * _util_util__WEBPACK_IMPORTED_MODULE_4__.DEGRAD / (asz - 1), theta = lig.avgTheta - 0.5 * dtheta;
            for (let n = 0; n < asz; n++) {
                srcX[n] = lx[idxAttach[orderAttach[n]]];
                srcY[n] = ly[idxAttach[orderAttach[n]]];
                dstX[n] = mx + _mol_Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.IDEALBOND * Math.cos(theta) + attDist[n] * attDX[n];
                dstY[n] = my + _mol_Molecule__WEBPACK_IMPORTED_MODULE_1__.Molecule.IDEALBOND * Math.sin(theta) + attDist[n] * attDY[n];
                theta += dtheta / (asz - 1);
            }
            let tfm = _util_Geom__WEBPACK_IMPORTED_MODULE_3__.GeomUtil.superimpose(srcX, srcY, dstX, dstY);
            for (let n = 0; n < lsz; n++) {
                let [x, y] = _util_Geom__WEBPACK_IMPORTED_MODULE_3__.GeomUtil.applyAffine(lx[n], ly[n], tfm);
                lx[n] = x;
                ly[n] = y;
            }
        }
        for (let n = 0; n < lsz; n++)
            mol.setAtomPos(lig.atoms[n], lx[n], ly[n]);
    }
    arrangeLigandsFree(batch) {
        if (batch.length == 1)
            return;
        let refTheta = _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.last(batch).avgTheta;
        refTheta += 0.5 * (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.angleDiffPos)(_util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.first(batch).avgTheta, refTheta);
        this.arrangeLigandsRange(batch, refTheta, _util_util__WEBPACK_IMPORTED_MODULE_4__.TWOPI, false);
    }
    arrangeLigandsRange(batch, refTheta, refSpan, bounded) {
        const { mol, metalAtom } = this;
        let mx = mol.atomX(metalAtom), my = mol.atomY(metalAtom);
        let bsz = batch.length;
        let thetaMin = new Array(bsz), thetaSpan = new Array(bsz);
        let ligandSpan = 0;
        for (let n = 0; n < bsz; n++) {
            let [theta1, theta2] = this.determineThetaBounds(batch[n]);
            thetaMin[n] = theta1;
            thetaSpan[n] = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.angleDiffPos)(theta2, theta1);
            ligandSpan += thetaSpan[n];
        }
        let residual = (refSpan - ligandSpan) / (bsz + (bounded ? 1 : 0));
        let theta = refTheta + (bounded ? residual : 0.5 * residual);
        for (let n = 0; n < bsz; n++) {
            let rotTheta = theta - thetaMin[n];
            let cosTheta = Math.cos(rotTheta), sinTheta = Math.sin(rotTheta);
            for (let a of batch[n].atoms) {
                let x = mol.atomX(a) - mx, y = mol.atomY(a) - my;
                mol.setAtomPos(a, mx + x * cosTheta - y * sinTheta, my + x * sinTheta + y * cosTheta);
            }
            theta += thetaSpan[n] + residual;
        }
    }
    determineThetaBounds(lig) {
        const { mol, metalAtom } = this;
        let theta = [];
        let mx = mol.atomX(metalAtom), my = mol.atomY(metalAtom);
        for (let n = 0; n < lig.attach.length; n++) {
            let x = mol.atomX(lig.attach[n]) - mx;
            let y = mol.atomY(lig.attach[n]) - my;
            theta.push(Math.atan2(y, x));
        }
        _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.sort(theta);
        let bestScore = Number.POSITIVE_INFINITY, bestMin = 0, bestMax = 0;
        for (let n = 0; n < theta.length; n++) {
            let score = 0;
            for (let i = 0; i < theta.length - 1; i++)
                score += (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.angleDiffPos)(theta[i + 1], theta[i]);
            if (score < bestScore) {
                bestScore = score;
                bestMin = _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.first(theta);
                bestMax = _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.last(theta);
            }
            theta.push(theta.shift());
        }
        return [bestMin, bestMax];
    }
    resolveClashes() {
        const { mol, metalAtom, ligands } = this;
        const na = mol.numAtoms, nb = mol.numBonds, lsz = this.ligands.length;
        let ablk = _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.numberArray(-1, na), bblk = _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.numberArray(-1, nb);
        for (let n = 1; n <= na; n++)
            if (mol.atomConnComp(n) == mol.atomConnComp(metalAtom))
                ablk[n - 1] = 0;
        for (let n = 0; n < lsz; n++)
            for (let a of ligands[n].atoms)
                ablk[a - 1] = n + 1;
        for (let n = 1; n <= nb; n++) {
            let blk1 = ablk[mol.bondFrom(n) - 1], blk2 = ablk[mol.bondTo(n) - 1];
            if (blk1 < 0 || blk2 < 0) { }
            else if (blk1 == blk2)
                bblk[n - 1] = blk1;
        }
        let bumpDX = new Array(lsz), bumpDY = new Array(lsz);
        let mx = mol.atomX(metalAtom), my = mol.atomY(metalAtom);
        for (let n = 0; n < lsz; n++) {
            let lig = ligands[n];
            let dx = 0, dy = 0;
            for (let a of lig.attach) {
                dx += mol.atomX(a) - mx;
                dy += mol.atomY(a) - my;
            }
            dx /= lig.attach.length;
            dy /= lig.attach.length;
            let invDist = 1.0 / (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.norm_xy)(dx, dy);
            bumpDX[n] = dx * 0.5 * invDist;
            bumpDY[n] = dy * 0.5 * invDist;
        }
        const CLOSE_SQ = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.sqr)(0.5);
        for (let count = 0; count < 12; count++) {
            let tainted = _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.booleanArray(false, lsz);
            outer: for (let i = 0; i < na - 1; i++) {
                if (ablk[i] < 0)
                    continue;
                for (let j = i + 1; j < na; j++)
                    if (ablk[j] >= 0 && ablk[j] != ablk[i]) {
                        if ((0,_util_util__WEBPACK_IMPORTED_MODULE_4__.norm2_xy)(mol.atomX(i + 1) - mol.atomX(j + 1), mol.atomY(i + 1) - mol.atomY(j + 1)) < CLOSE_SQ) {
                            if (ablk[i] > 0)
                                tainted[ablk[i] - 1] = true;
                            if (ablk[j] > 0)
                                tainted[ablk[j] - 1] = true;
                        }
                        if (_util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.allTrue(tainted))
                            break outer;
                    }
            }
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.anyFalse(tainted))
                outer: for (let i = 0; i < nb - 1; i++) {
                    if (bblk[i] < 0)
                        continue;
                    let x1 = mol.atomX(mol.bondFrom(i + 1)), y1 = mol.atomY(mol.bondFrom(i + 1));
                    let x2 = mol.atomX(mol.bondTo(i + 1)), y2 = mol.atomY(mol.bondTo(i + 1));
                    for (let j = i + 1; j < nb; j++)
                        if (bblk[j] >= 0 && bblk[j] != bblk[i]) {
                            let x3 = mol.atomX(mol.bondFrom(j + 1)), y3 = mol.atomY(mol.bondFrom(j + 1));
                            let x4 = mol.atomX(mol.bondTo(j + 1)), y4 = mol.atomY(mol.bondTo(j + 1));
                            if (_util_Geom__WEBPACK_IMPORTED_MODULE_3__.GeomUtil.doLineSegsIntersect(x1, y1, x2, y2, x3, y3, x4, y4)) {
                                if (bblk[i] > 0)
                                    tainted[bblk[i] - 1] = true;
                                if (bblk[j] > 0)
                                    tainted[bblk[j] - 1] = true;
                            }
                            if (_util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.allTrue(tainted))
                                break outer;
                        }
                }
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.allFalse(tainted))
                break;
            for (let n = 0; n < lsz; n++)
                if (tainted[n]) {
                    for (let a of ligands[n].atoms) {
                        mol.setAtomPos(a, mol.atomX(a) + bumpDX[n], mol.atomY(a) + bumpDY[n]);
                    }
                }
        }
    }
}


/***/ }),

/***/ "./src/sketcher/MoleculeActivity.ts":
/*!******************************************!*\
  !*** ./src/sketcher/MoleculeActivity.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ActivityType: () => (/* binding */ ActivityType),
/* harmony export */   MoleculeActivity: () => (/* binding */ MoleculeActivity)
/* harmony export */ });
/* harmony import */ var _data_AbbrevContainer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/AbbrevContainer */ "./src/data/AbbrevContainer.ts");
/* harmony import */ var _mol_BondArtifact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mol/BondArtifact */ "./src/mol/BondArtifact.ts");
/* harmony import */ var _mol_Chemistry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/Chemistry */ "./src/mol/Chemistry.ts");
/* harmony import */ var _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mol/CoordUtil */ "./src/mol/CoordUtil.ts");
/* harmony import */ var _mol_Graph__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../mol/Graph */ "./src/mol/Graph.ts");
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../mol/PolymerBlock */ "./src/mol/PolymerBlock.ts");
/* harmony import */ var _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../mol/QueryUtil */ "./src/mol/QueryUtil.ts");
/* harmony import */ var _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../mol/SketchUtil */ "./src/mol/SketchUtil.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _MetalLigate__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./MetalLigate */ "./src/sketcher/MetalLigate.ts");
/* harmony import */ var _TemplateFusion__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./TemplateFusion */ "./src/sketcher/TemplateFusion.ts");














var ActivityType;
(function (ActivityType) {
    ActivityType[ActivityType["Delete"] = 1] = "Delete";
    ActivityType[ActivityType["Clear"] = 2] = "Clear";
    ActivityType[ActivityType["Copy"] = 3] = "Copy";
    ActivityType[ActivityType["Cut"] = 4] = "Cut";
    ActivityType[ActivityType["SelectAll"] = 5] = "SelectAll";
    ActivityType[ActivityType["SelectNone"] = 6] = "SelectNone";
    ActivityType[ActivityType["SelectPrevComp"] = 7] = "SelectPrevComp";
    ActivityType[ActivityType["SelectNextComp"] = 8] = "SelectNextComp";
    ActivityType[ActivityType["SelectSide"] = 9] = "SelectSide";
    ActivityType[ActivityType["SelectGrow"] = 10] = "SelectGrow";
    ActivityType[ActivityType["SelectShrink"] = 11] = "SelectShrink";
    ActivityType[ActivityType["SelectChain"] = 12] = "SelectChain";
    ActivityType[ActivityType["SelectSmRing"] = 13] = "SelectSmRing";
    ActivityType[ActivityType["SelectRingBlk"] = 14] = "SelectRingBlk";
    ActivityType[ActivityType["SelectCurElement"] = 15] = "SelectCurElement";
    ActivityType[ActivityType["SelectToggle"] = 16] = "SelectToggle";
    ActivityType[ActivityType["SelectUnCurrent"] = 17] = "SelectUnCurrent";
    ActivityType[ActivityType["Element"] = 18] = "Element";
    ActivityType[ActivityType["AtomPos"] = 19] = "AtomPos";
    ActivityType[ActivityType["Charge"] = 20] = "Charge";
    ActivityType[ActivityType["Connect"] = 21] = "Connect";
    ActivityType[ActivityType["Disconnect"] = 22] = "Disconnect";
    ActivityType[ActivityType["MetalLigate"] = 23] = "MetalLigate";
    ActivityType[ActivityType["BondOrder"] = 24] = "BondOrder";
    ActivityType[ActivityType["BondType"] = 25] = "BondType";
    ActivityType[ActivityType["BondGeom"] = 26] = "BondGeom";
    ActivityType[ActivityType["BondAtom"] = 27] = "BondAtom";
    ActivityType[ActivityType["BondSwitch"] = 28] = "BondSwitch";
    ActivityType[ActivityType["BondRotate"] = 29] = "BondRotate";
    ActivityType[ActivityType["BondAddTwo"] = 30] = "BondAddTwo";
    ActivityType[ActivityType["BondInsert"] = 31] = "BondInsert";
    ActivityType[ActivityType["Join"] = 32] = "Join";
    ActivityType[ActivityType["Nudge"] = 33] = "Nudge";
    ActivityType[ActivityType["NudgeLots"] = 34] = "NudgeLots";
    ActivityType[ActivityType["NudgeFar"] = 35] = "NudgeFar";
    ActivityType[ActivityType["Flip"] = 36] = "Flip";
    ActivityType[ActivityType["Scale"] = 37] = "Scale";
    ActivityType[ActivityType["Rotate"] = 38] = "Rotate";
    ActivityType[ActivityType["BondDist"] = 39] = "BondDist";
    ActivityType[ActivityType["AlignAngle"] = 40] = "AlignAngle";
    ActivityType[ActivityType["AlignRegular"] = 41] = "AlignRegular";
    ActivityType[ActivityType["AdjustTorsion"] = 42] = "AdjustTorsion";
    ActivityType[ActivityType["Move"] = 43] = "Move";
    ActivityType[ActivityType["Ring"] = 44] = "Ring";
    ActivityType[ActivityType["TemplateFusion"] = 45] = "TemplateFusion";
    ActivityType[ActivityType["AbbrevTempl"] = 46] = "AbbrevTempl";
    ActivityType[ActivityType["AbbrevGroup"] = 47] = "AbbrevGroup";
    ActivityType[ActivityType["AbbrevFormula"] = 48] = "AbbrevFormula";
    ActivityType[ActivityType["AbbrevClear"] = 49] = "AbbrevClear";
    ActivityType[ActivityType["AbbrevExpand"] = 50] = "AbbrevExpand";
    ActivityType[ActivityType["BondArtifactPath"] = 51] = "BondArtifactPath";
    ActivityType[ActivityType["BondArtifactRing"] = 52] = "BondArtifactRing";
    ActivityType[ActivityType["BondArtifactArene"] = 53] = "BondArtifactArene";
    ActivityType[ActivityType["BondArtifactClear"] = 54] = "BondArtifactClear";
    ActivityType[ActivityType["PolymerBlock"] = 55] = "PolymerBlock";
    ActivityType[ActivityType["AddHydrogens"] = 56] = "AddHydrogens";
    ActivityType[ActivityType["RemoveHydrogens"] = 57] = "RemoveHydrogens";
    ActivityType[ActivityType["QueryClear"] = 58] = "QueryClear";
    ActivityType[ActivityType["QueryCopy"] = 59] = "QueryCopy";
    ActivityType[ActivityType["QueryPaste"] = 60] = "QueryPaste";
    ActivityType[ActivityType["QuerySetAtom"] = 61] = "QuerySetAtom";
    ActivityType[ActivityType["QuerySetBond"] = 62] = "QuerySetBond";
    ActivityType[ActivityType["QueryBondAny"] = 63] = "QueryBondAny";
    ActivityType[ActivityType["SproutDirection"] = 64] = "SproutDirection";
})(ActivityType || (ActivityType = {}));
class MoleculeActivity {
    constructor(input, activity, param, owner) {
        this.input = input;
        this.activity = activity;
        this.param = param;
        this.owner = owner;
        this.toClipboard = null;
        this.output =
            {
                mol: null,
                currentAtom: -1,
                currentBond: -1,
                selectedMask: null
            };
        let na = this.input.mol.numAtoms;
        if (this.input.selectedMask == null)
            this.input.selectedMask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(false, na);
        while (this.input.selectedMask.length < na)
            this.input.selectedMask.push(false);
        this.subjectMask = this.input.selectedMask.slice(0);
        this.subjectLength = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.maskCount(this.subjectMask);
        this.subjectIndex = [];
        this.hasSelected = this.subjectLength > 0;
        if (this.subjectLength == 0) {
            if (this.input.currentAtom > 0) {
                this.subjectLength = 1;
                this.subjectMask[this.input.currentAtom - 1] = true;
                this.subjectIndex = [this.input.currentAtom];
            }
            else if (this.input.currentBond > 0) {
                let bfr = this.input.mol.bondFrom(this.input.currentBond), bto = this.input.mol.bondTo(this.input.currentBond);
                let b1 = Math.min(bfr, bto), b2 = Math.max(bfr, bto);
                this.subjectLength = 2;
                this.subjectMask[b1 - 1] = true;
                this.subjectMask[b2 - 1] = true;
                this.subjectIndex = [b1, b2];
            }
        }
        else {
            this.subjectIndex = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.maskIdx(this.subjectMask);
            _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.addTo(this.subjectIndex, 1);
        }
    }
    setOwner(owner) {
        this.owner = owner;
    }
    evaluate() {
        return true;
    }
    execute() {
        var _a;
        let param = this.param;
        if (this.activity == ActivityType.Delete)
            this.execDelete();
        else if (this.activity == ActivityType.Clear)
            this.execClear();
        else if (this.activity == ActivityType.Copy)
            this.execCopy(false);
        else if (this.activity == ActivityType.Cut)
            this.execCopy(true);
        else if (this.activity == ActivityType.SelectAll)
            this.execSelectAll(true);
        else if (this.activity == ActivityType.SelectNone)
            this.execSelectAll(false);
        else if (this.activity == ActivityType.SelectPrevComp)
            this.execSelectComp(-1);
        else if (this.activity == ActivityType.SelectNextComp)
            this.execSelectComp(1);
        else if (this.activity == ActivityType.SelectSide)
            this.execSelectSide();
        else if (this.activity == ActivityType.SelectGrow)
            this.execSelectGrow();
        else if (this.activity == ActivityType.SelectShrink)
            this.execSelectShrink();
        else if (this.activity == ActivityType.SelectChain)
            this.execSelectChain();
        else if (this.activity == ActivityType.SelectSmRing)
            this.execSelectSmRing();
        else if (this.activity == ActivityType.SelectRingBlk)
            this.execSelectRingBlk();
        else if (this.activity == ActivityType.SelectCurElement)
            this.execSelectCurElement();
        else if (this.activity == ActivityType.SelectToggle)
            this.execSelectToggle();
        else if (this.activity == ActivityType.SelectUnCurrent)
            this.execSelectUnCurrent();
        else if (this.activity == ActivityType.Element)
            this.execElement(param.element, param.positionX, param.positionY, param.keepAbbrev);
        else if (this.activity == ActivityType.Charge)
            this.execCharge(param.delta);
        else if (this.activity == ActivityType.Connect)
            this.execConnect(1, _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.BONDTYPE_NORMAL);
        else if (this.activity == ActivityType.Disconnect)
            this.execDisconnect();
        else if (this.activity == ActivityType.MetalLigate)
            this.execMetalLigate();
        else if (this.activity == ActivityType.BondOrder)
            this.execBond(param.order, _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.BONDTYPE_NORMAL);
        else if (this.activity == ActivityType.BondType)
            this.execBond(1, param.type);
        else if (this.activity == ActivityType.BondGeom)
            this.execBondGeom(param.geom);
        else if (this.activity == ActivityType.BondAtom)
            this.execBondAtom(param.order, param.type, param.element, param.x1, param.y1, param.x2, param.y2);
        else if (this.activity == ActivityType.BondSwitch)
            this.execBondSwitch();
        else if (this.activity == ActivityType.BondRotate)
            this.execBondRotate();
        else if (this.activity == ActivityType.BondAddTwo)
            this.execBondAddTwo();
        else if (this.activity == ActivityType.BondInsert)
            this.execBondInsert();
        else if (this.activity == ActivityType.Join)
            this.execJoin();
        else if (this.activity == ActivityType.Nudge)
            this.execNudge(param.dir, 0.1);
        else if (this.activity == ActivityType.NudgeLots)
            this.execNudge(param.dir, 1);
        else if (this.activity == ActivityType.NudgeFar)
            this.execNudgeFar(param.dir);
        else if (this.activity == ActivityType.Flip)
            this.execFlip(param.axis);
        else if (this.activity == ActivityType.Scale)
            this.execScale(param.mag);
        else if (this.activity == ActivityType.Rotate)
            this.execRotate(param.theta, param.centreX, param.centreY);
        else if (this.activity == ActivityType.BondDist)
            this.execBondDist(param.dist);
        else if (this.activity == ActivityType.AlignAngle)
            this.execAlignAngle(param.angle);
        else if (this.activity == ActivityType.AlignRegular)
            this.execAlignRegular();
        else if (this.activity == ActivityType.AdjustTorsion)
            this.execAdjustTorsion(param.angle);
        else if (this.activity == ActivityType.Move)
            this.execMove(param.refAtom, param.deltaX, param.deltaY);
        else if (this.activity == ActivityType.Ring)
            this.execRing(param.ringX, param.ringY, param.aromatic);
        else if (this.activity == ActivityType.TemplateFusion) {
            this.execTemplateFusion((_a = param.frag) !== null && _a !== void 0 ? _a : _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.fromString(param.fragNative));
            if (this.owner)
                this.owner.setPermutations(this.output.permutations);
            return;
        }
        else if (this.activity == ActivityType.AbbrevTempl)
            this.execAbbrevTempl();
        else if (this.activity == ActivityType.AbbrevGroup)
            this.execAbbrevGroup();
        else if (this.activity == ActivityType.AbbrevFormula)
            this.execAbbrevFormula();
        else if (this.activity == ActivityType.AbbrevClear)
            this.execAbbrevClear();
        else if (this.activity == ActivityType.AbbrevExpand)
            this.execAbbrevExpand();
        else if (this.activity == ActivityType.BondArtifactPath || this.activity == ActivityType.BondArtifactRing ||
            this.activity == ActivityType.BondArtifactArene || this.activity == ActivityType.BondArtifactClear)
            this.execBondArtifact(this.activity);
        else if (this.activity == ActivityType.PolymerBlock)
            this.execPolymerBlock();
        else if (this.activity == ActivityType.AddHydrogens)
            this.execAddHydrogens();
        else if (this.activity == ActivityType.RemoveHydrogens)
            this.execRemoveHydrogens();
        else if (this.activity == ActivityType.QueryClear)
            this.execQueryClear();
        else if (this.activity == ActivityType.QueryCopy)
            this.execQueryCopy();
        else if (this.activity == ActivityType.QueryPaste)
            this.execQueryPaste();
        else if (this.activity == ActivityType.QuerySetAtom)
            this.execQuerySetAtom();
        else if (this.activity == ActivityType.QuerySetBond)
            this.execQuerySetBond();
        else if (this.activity == ActivityType.QueryBondAny)
            this.execQueryBondAny();
        else if (this.activity == ActivityType.SproutDirection)
            this.execSproutDirection(param.deltaX, param.deltaY);
        this.finish();
    }
    finish() {
        if (!this.owner)
            return;
        if (this.output.mol != null || this.output.currentAtom >= 0 || this.output.currentBond >= 0 || this.output.selectedMask != null) {
            this.owner.setState(this.output, true);
            if (this.errmsg != null)
                this.owner.showMessage(this.errmsg, false);
        }
        else {
            if (this.errmsg != null)
                this.owner.showMessage(this.errmsg, true);
        }
    }
    execDelete() {
        if (!this.requireSubject())
            return;
        let mol = this.input.mol;
        this.output.mol = mol.clone();
        this.zapSubject();
        if (this.input.currentBond > 0 && !this.hasSelected) {
            this.output.mol.deleteBond(this.input.currentBond);
            this.output.currentBond = 0;
            return;
        }
        if (this.subjectLength == 1 && this.subjectIndex[0] == this.input.currentAtom) {
            let adj = mol.atomAdjList(this.input.currentAtom);
            if (adj.length == 1) {
                this.output.currentAtom = adj[0];
                if (this.output.currentAtom > this.input.currentAtom)
                    this.output.currentAtom--;
            }
        }
        for (let n = this.subjectLength - 1; n >= 0; n--)
            this.output.mol.deleteAtomAndBonds(this.subjectIndex[n]);
    }
    execCopy(withCut) {
        let mol = this.input.mol;
        if (this.subjectLength > 0)
            mol = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.subgraphWithAttachments(mol, this.subjectMask);
        if (this.owner)
            this.owner.performCopy(mol);
        else
            this.toClipboard = mol.toString();
        if (withCut) {
            this.zapSubject();
            this.output.mol = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.subgraphMask(this.input.mol, _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.notMask(this.subjectMask));
        }
    }
    execClear() {
        this.output.mol = new _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule();
        this.zapSubject();
    }
    execSelectAll(all) {
        let same = true;
        for (let n = 0; n < this.input.mol.numAtoms; n++)
            if (this.subjectMask[n] != all) {
                same = false;
                break;
            }
        if (same) {
            this.errmsg = all ? 'All atoms already selected.' : 'All atoms already deselected.';
            return;
        }
        this.output.selectedMask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(all, this.input.mol.numAtoms);
    }
    execSelectComp(dir) {
        let cclist = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.componentList(this.input.mol);
        if (cclist.length == 1 && this.hasSelected && this.subjectLength == this.input.mol.numAtoms) {
            this.errmsg = 'All atoms already selected.';
            return;
        }
        let sel = this.pickSelectedGroup(cclist, dir);
        this.output.selectedMask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(false, this.input.mol.numAtoms);
        for (let n = 0; n < cclist[sel].length; n++)
            this.output.selectedMask[cclist[sel][n] - 1] = true;
    }
    execSelectSide() {
        if (!this.requireCurrent())
            return;
        let mol = this.input.mol, currentAtom = this.input.currentAtom, currentBond = this.input.currentBond;
        if (currentAtom > 0 && mol.atomAdjCount(currentAtom) == 0) {
            this.errmsg = 'Current atom has no neighbours.';
            return;
        }
        if (currentBond > 0 && mol.atomAdjCount(mol.bondFrom(currentBond)) == 1 && mol.atomAdjCount(mol.bondTo(currentBond)) == 1) {
            this.errmsg = 'Current bond has no neighbours.';
            return;
        }
        let sides = currentAtom > 0 ? _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.getAtomSides(mol, currentAtom) : _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.getBondSides(mol, currentBond);
        let sel = this.pickSelectedGroup(sides, 1);
        this.output.selectedMask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(false, mol.numAtoms);
        for (let n = 0; n < sides[sel].length; n++)
            this.output.selectedMask[sides[sel][n] - 1] = true;
    }
    execSelectGrow() {
        if (!this.requireSubject())
            return;
        let mol = this.input.mol, currentAtom = this.input.currentAtom, currentBond = this.input.currentBond;
        this.output.selectedMask = this.input.selectedMask.slice(0);
        if (!this.hasSelected) {
            if (currentAtom > 0) {
                this.output.selectedMask[currentAtom - 1] = true;
            }
            else {
                this.output.selectedMask[mol.bondFrom(currentBond) - 1] = true;
                this.output.selectedMask[mol.bondTo(currentBond) - 1] = true;
            }
        }
        else {
            for (let n = 1; n <= mol.numBonds; n++) {
                let bfr = mol.bondFrom(n) - 1, bto = mol.bondTo(n) - 1;
                if (this.input.selectedMask[bfr] && !this.input.selectedMask[bto])
                    this.output.selectedMask[bto] = true;
                else if (this.input.selectedMask && !this.input.selectedMask[bfr])
                    this.output.selectedMask[bfr] = true;
            }
        }
    }
    execSelectShrink() {
        if (!this.requireSelected())
            return;
        let mol = this.input.mol;
        let count = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.numberArray(0, mol.numAtoms);
        for (let n = 1; n <= mol.numBonds; n++) {
            let bfr = mol.bondFrom(n) - 1, bto = mol.bondTo(n) - 1;
            if (!this.input.selectedMask[bfr] || !this.input.selectedMask[bto])
                continue;
            count[bfr]++;
            count[bto]++;
        }
        this.output.selectedMask = this.input.selectedMask.slice(0);
        for (let n = 0; n < mol.numAtoms; n++)
            this.output.selectedMask[n] = this.input.selectedMask[n] && count[n] >= 2;
    }
    execSelectChain() {
        if (!this.requireSubject())
            return;
        let mol = this.input.mol;
        this.output.selectedMask = this.input.selectedMask.slice(0);
        for (let n = 1; n <= mol.numBonds; n++) {
            let bfr = mol.bondFrom(n) - 1, bto = mol.bondTo(n) - 1;
            if (this.input.selectedMask[bfr] && !this.input.selectedMask[bto] && mol.atomRingBlock(bto + 1) == 0)
                this.output.selectedMask[bto] = true;
            else if (this.input.selectedMask[bto] && !this.input.selectedMask[bfr] && mol.atomRingBlock(bfr + 1) == 0)
                this.output.selectedMask[bfr] = true;
        }
    }
    execSelectSmRing() {
        if (!this.requireSubject())
            return;
        this.output.selectedMask = this.input.selectedMask.slice(0);
        for (let r = 3; r <= 8; r++) {
            let rings = this.input.mol.findRingsOfSize(r);
            for (let i = 0; i < rings.length; i++) {
                let any = false;
                for (let j = 0; j < rings[i].length; j++)
                    if (this.subjectMask[rings[i][j] - 1]) {
                        any = true;
                        break;
                    }
                if (any)
                    for (let j = 0; j < rings[i].length; j++)
                        this.output.selectedMask[rings[i][j] - 1] = true;
            }
        }
    }
    execSelectRingBlk() {
        if (!this.requireSubject())
            return;
        let mol = this.input.mol;
        this.output.selectedMask = this.input.selectedMask.slice(0);
        let maxRB = 0;
        for (let n = 1; n <= mol.numAtoms; n++)
            maxRB = Math.max(maxRB, mol.atomRingBlock(n));
        if (maxRB == 0)
            return;
        let gotRB = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(false, maxRB);
        for (let n = 1; n <= mol.numAtoms; n++) {
            let rb = mol.atomRingBlock(n);
            if (rb > 0 && this.subjectMask[n - 1])
                gotRB[rb - 1] = true;
        }
        for (let n = 1; n <= mol.numAtoms; n++) {
            let rb = mol.atomRingBlock(n);
            if (rb > 0 && gotRB[rb - 1])
                this.output.selectedMask[n - 1] = true;
        }
    }
    execSelectCurElement() {
        if (!this.requireCurrent())
            return;
        let mol = this.input.mol;
        this.output.selectedMask = this.input.selectedMask.slice(0);
        let el1 = '', el2 = '';
        if (this.input.currentAtom > 0) {
            el1 = mol.atomElement(this.input.currentAtom);
        }
        else {
            el1 = mol.atomElement(mol.bondFrom(this.input.currentBond));
            el2 = mol.atomElement(mol.bondTo(this.input.currentBond));
        }
        for (let n = 1; n <= mol.numAtoms; n++)
            if (mol.atomElement(n) == el1 || mol.atomElement(n) == el2)
                this.output.selectedMask[n - 1] = true;
    }
    execSelectToggle() {
        if (!this.requireCurrent())
            return;
        this.output.selectedMask = this.input.selectedMask.slice(0);
        if (this.input.currentAtom > 0) {
            this.output.selectedMask[this.input.currentAtom - 1] = !this.output.selectedMask[this.input.currentAtom - 1];
        }
        else {
            let bfr = this.input.mol.bondFrom(this.input.currentBond), bto = this.input.mol.bondTo(this.input.currentBond);
            let sel = !this.input.selectedMask[bfr - 1] || !this.input.selectedMask[bto - 1];
            this.output.selectedMask[bfr - 1] = sel;
            this.output.selectedMask[bto - 1] = sel;
        }
    }
    execSelectUnCurrent() {
        if (!this.requireCurrent())
            return;
        this.output.selectedMask = this.input.selectedMask.slice(0);
        if (this.input.currentAtom > 0) {
            this.output.selectedMask[this.input.currentAtom - 1] = false;
        }
        else {
            this.output.selectedMask[this.input.mol.bondFrom(this.input.currentBond) - 1] = false;
            this.output.selectedMask[this.input.mol.bondTo(this.input.currentBond) - 1] = false;
        }
    }
    execElement(element, positionX, positionY, keepAbbrev) {
        const QUERY_ELEMENTS = ['A', 'X', 'Y', 'Z', 'Q', 'M', 'T', 'E', 'R'];
        if (this.subjectLength > 0 && !QUERY_ELEMENTS.includes(element)) {
            let anyChange = false;
            for (let n = 0; n < this.subjectLength; n++)
                if (this.input.mol.atomElement(this.subjectIndex[n]) != element) {
                    anyChange = true;
                    break;
                }
            if (!anyChange) {
                this.errmsg = 'Elements not changed.';
                return;
            }
        }
        let mol = this.output.mol = this.input.mol.clone();
        let applyQuery = (atom) => {
            if (element == 'A') {
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.setQueryAtomElementsNot(mol, atom, ['H']);
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.deleteQueryAtom(mol, atom, _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryTypeAtom.Elements);
            }
            else if (element == 'X') {
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.setQueryAtomElements(mol, atom, ['F', 'Cl', 'Br', 'I']);
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.deleteQueryAtom(mol, atom, _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryTypeAtom.ElementsNot);
            }
            else if (element == 'Y') {
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.setQueryAtomElements(mol, atom, ['O', 'S', 'Se', 'Te']);
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.deleteQueryAtom(mol, atom, _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryTypeAtom.ElementsNot);
            }
            else if (element == 'Z') {
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.setQueryAtomElements(mol, atom, ['F', 'Cl', 'Br', 'O', 'S']);
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.deleteQueryAtom(mol, atom, _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryTypeAtom.ElementsNot);
            }
            else if (element == 'Q') {
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.setQueryAtomElementsNot(mol, atom, ['H', 'C']);
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.deleteQueryAtom(mol, atom, _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryTypeAtom.Elements);
            }
            else if (element == 'M') {
                const NON_METALS = ['H', 'B', 'C', 'N', 'O', 'F', 'Si', 'P', 'S', 'Cl', 'As', 'Se', 'Br', 'Te', 'I'];
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.setQueryAtomElementsNot(mol, atom, NON_METALS);
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.deleteQueryAtom(mol, atom, _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryTypeAtom.Elements);
            }
            else if (element == 'T') {
                const TRANSITION_METALS = [
                    'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn',
                    'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd',
                    'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg',
                    'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu',
                    'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr'
                ];
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.setQueryAtomElements(mol, atom, TRANSITION_METALS);
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.deleteQueryAtom(mol, atom, _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryTypeAtom.ElementsNot);
            }
            else if (element == 'E') {
                const MAIN_GROUPS = [
                    'B', 'N', 'O', 'F',
                    'Al', 'Si', 'P', 'S', 'Cl',
                    'Zn', 'Ga', 'Se', 'As', 'Se', 'Br',
                    'Cd', 'In', 'Sn', 'Sb', 'Te', 'I',
                    'Hg', 'Tl', 'Pb', 'Bi', 'Pb', 'At'
                ];
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.setQueryAtomElements(mol, atom, MAIN_GROUPS);
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.deleteQueryAtom(mol, atom, _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryTypeAtom.ElementsNot);
            }
            else if (element == 'R') {
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.setQueryAtomElements(mol, atom, ['C', 'N', 'O', 'S', 'P', 'H']);
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.deleteQueryAtom(mol, atom, _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryTypeAtom.ElementsNot);
            }
        };
        if (mol.numAtoms == 0) {
            mol.addAtom(element, 0, 0);
            applyQuery(mol.numAtoms);
        }
        else if (this.subjectLength == 0) {
            if (positionX != null && positionY != null)
                mol.addAtom(element, positionX, positionY);
            else
                _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.placeNewAtom(mol, element);
            applyQuery(mol.numAtoms);
        }
        else {
            for (let n = 0; n < this.subjectLength; n++) {
                if (keepAbbrev)
                    mol.setAtomElement(this.subjectIndex[n], element);
                else
                    _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.setAtomElement(mol, this.subjectIndex[n], element);
                applyQuery(this.subjectIndex[n]);
            }
        }
    }
    execCharge(delta) {
        if (!this.requireSubject())
            return;
        this.output.mol = this.input.mol.clone();
        for (let n = 0; n < this.subjectLength; n++) {
            let chg = Math.max(-20, Math.min(20, this.input.mol.atomCharge(this.subjectIndex[n]) + delta));
            this.output.mol.setAtomCharge(this.subjectIndex[n], chg);
        }
    }
    execConnect(order, type) {
        if (!this.requireSubject())
            return;
        let conn = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.pickAtomsToConnect(this.input.mol, this.subjectIndex);
        if (conn == null) {
            this.errmsg = 'Subject atoms contain no bonds suitable for connection.';
            return;
        }
        this.output.mol = this.input.mol.clone();
        for (let n = 0; n < conn.length; n += 2)
            _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.addBond(this.output.mol, conn[n], conn[n + 1], order, type);
    }
    execDisconnect() {
        let zap = [];
        let mol = this.input.mol;
        if (this.hasSelected) {
            for (let n = 1; n <= mol.numBonds; n++)
                if (this.subjectMask[mol.bondFrom(n) - 1] && this.subjectMask[mol.bondTo(n) - 1])
                    zap.push(n);
        }
        else if (this.input.currentAtom > 0) {
            for (let a of mol.atomAdjBonds(this.input.currentAtom))
                zap.push(a);
        }
        else if (this.input.currentBond > 0) {
            zap.push(this.input.currentBond);
        }
        if (zap.length == 0) {
            this.errmsg = 'Subject atoms contain no bonds suitable for disconnection.';
            return;
        }
        let killmask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(false, mol.numBonds);
        for (let b of zap)
            killmask[b - 1] = true;
        this.output.mol = this.input.mol.clone();
        for (let n = mol.numBonds; n >= 1; n--)
            if (killmask[n - 1])
                this.output.mol.deleteBond(n);
    }
    execMetalLigate() {
        if (!this.requireSubject())
            return;
        let mol = this.input.mol;
        let ligAtoms = this.subjectIndex.slice(0);
        let metalAtom = this.input.currentAtom;
        if (metalAtom == 0) {
            for (let a of this.subjectIndex) {
                let atno = mol.atomicNumber(a);
                if (_mol_Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_BLOCKS[atno] >= 3) {
                    metalAtom = a;
                    break;
                }
            }
        }
        if (metalAtom == 0) {
            for (let a of this.subjectIndex) {
                let atno = mol.atomicNumber(a);
                if (_mol_Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_ROWS[atno] >= 3) {
                    metalAtom = a;
                    break;
                }
            }
        }
        if (metalAtom == 0) {
            this.errmsg = 'Unsure which is the metal atom: try indicating as current.';
            return;
        }
        let i = ligAtoms.indexOf(metalAtom);
        if (i >= 0)
            ligAtoms.splice(i, 1);
        if (ligAtoms.length == 0)
            ligAtoms = mol.atomAdjList(metalAtom);
        if (ligAtoms.length == 0) {
            this.errmsg = 'Metal centre has no attachments: try selecting atom join-points.';
            return;
        }
        mol = new _MetalLigate__WEBPACK_IMPORTED_MODULE_12__.MetalLigate(mol, metalAtom, ligAtoms).generate();
        this.output.mol = mol;
        this.output.currentAtom = metalAtom;
        this.output.currentBond = -1;
        this.output.selectedMask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(false, mol.numAtoms);
        for (let a of ligAtoms)
            this.output.selectedMask[a - 1] = true;
    }
    execBond(order, type) {
        if (!this.requireSubject())
            return;
        if (this.subjectLength == 1) {
            this.performBondNew(this.subjectIndex[0], order, type);
            return;
        }
        let ccmol = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.subgraphMask(this.input.mol, this.subjectMask);
        let oneComp = true;
        for (let n = ccmol.numAtoms; n >= 1; n--)
            if (ccmol.atomConnComp(n) != 1) {
                oneComp = false;
                break;
            }
        if (oneComp)
            this.performBondChange(order, type);
        else
            this.execConnect(order, type);
    }
    execBondGeom(geom) {
        let bond = this.subjectLength == 2 ? this.input.mol.findBond(this.subjectIndex[0], this.subjectIndex[1]) : 0;
        if (this.subjectLength == 0 || this.subjectLength > 2 || (this.subjectLength == 2 && bond == 0)) {
            this.errmsg = 'The subject must be a single atom or bond.';
            return;
        }
        if (this.subjectLength == 1)
            this.performBondGeomAtom(geom, this.subjectIndex[0]);
        else
            this.performBondGeomBond(geom, bond);
    }
    execBondAtom(order, type, element, x1, y1, x2, y2) {
        let mol = this.input.mol;
        let a1 = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.atomAtPoint(mol, x1, y1, 0.01), a2 = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.atomAtPoint(mol, x2, y2, 0.01);
        if (a1 > 0 && a1 == a2)
            return;
        if (a1 > 0 && a2 > 0 && mol.findBond(a1, a2) > 0)
            return;
        this.output.mol = mol.clone();
        if (a1 == 0)
            a1 = this.output.mol.addAtom('C', x1, y1);
        if (a2 == 0)
            a2 = this.output.mol.addAtom(element, x2, y2);
        this.output.mol.addBond(a1, a2, order, type);
    }
    execBondSwitch() {
        if (this.input.altmol) {
            this.output.mol = this.input.altmol;
            this.output.altmol = this.input.mol;
            return;
        }
        if (!this.requireSubject())
            return;
        let mol = this.input.mol;
        let src = 0, dst = [];
        if (this.subjectLength == 1) {
            src = this.subjectIndex[0];
            let adj = mol.atomAdjList(src);
            for (let n = 0; n < adj.length; n++)
                if (mol.atomAdjCount(adj[n]) == 1)
                    dst.push(adj[n]);
        }
        else if (this.subjectLength == 2 && mol.findBond(this.subjectIndex[0], this.subjectIndex[1]) > 0) {
            let ac1 = mol.atomAdjCount(this.subjectIndex[0]), ac2 = mol.atomAdjCount(this.subjectIndex[1]);
            if (ac1 > 1 && ac2 == 1) {
                src = this.subjectIndex[0];
                dst.push(this.subjectIndex[1]);
            }
            else if (ac1 == 1 && ac2 > 1) {
                src = this.subjectIndex[1];
                dst.push(this.subjectIndex[0]);
            }
        }
        if (src == 0 || dst.length == 0) {
            this.errmsg = 'Subject must include a terminal bond.';
            return;
        }
        let geoms = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.guessAtomGeometry(mol, src, 1);
        if (geoms.length == 0) {
            this.errmsg = 'No alternative geometries identified.';
            return;
        }
        this.output.mol = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.switchAtomGeometry(mol, src, dst, geoms);
        if (this.output.mol == null) {
            this.errmsg = 'No alternative geometries identified.';
        }
    }
    execBondRotate() {
        let bond = this.input.currentBond;
        if (bond == 0) {
            this.errmsg = 'There must be a current bond.';
            return;
        }
        let mol = this.input.mol;
        if (mol.bondInRing(bond)) {
            this.errmsg = 'Cannot rotate a ring-bond.';
            return;
        }
        if (mol.atomAdjCount(mol.bondFrom(bond)) == 1 && mol.atomAdjCount(mol.bondTo(bond)) == 1) {
            this.errmsg = 'Two-atom components do not rotate.';
            return;
        }
        mol = mol.clone();
        let [atom1, atom2, side] = this.mobileSide(bond, true);
        let cx = mol.atomX(atom1), cy = mol.atomY(atom1);
        let theta = Math.atan2(mol.atomY(atom1) - mol.atomY(atom2), mol.atomX(atom1) - mol.atomX(atom2));
        for (let a of side)
            if (a != atom1) {
                let dx = mol.atomX(a) - cx, dy = mol.atomY(a) - cy, dist = (0,_util_util__WEBPACK_IMPORTED_MODULE_10__.norm_xy)(dx, dy);
                let dtheta = Math.atan2(dy, dx);
                dtheta = theta - (0,_util_util__WEBPACK_IMPORTED_MODULE_10__.angleDiff)(dtheta, theta);
                mol.setAtomPos(a, cx + dist * Math.cos(dtheta), cy + dist * Math.sin(dtheta));
            }
        let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.idxMask(_util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.add(side, -1), mol.numAtoms);
        for (let b = 1; b <= mol.numBonds; b++)
            if (mask[mol.bondFrom(b) - 1] && mask[mol.bondTo(b) - 1]) {
                let bt = mol.bondType(b);
                if (bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.BONDTYPE_INCLINED)
                    mol.setBondType(b, _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.BONDTYPE_DECLINED);
                else if (bt == _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.BONDTYPE_DECLINED)
                    mol.setBondType(b, _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.BONDTYPE_INCLINED);
            }
        if (_mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.sketchEquivalent(this.input.mol, mol)) {
            this.errmsg = 'Rotation has no effect.';
            return;
        }
        this.output.mol = mol;
    }
    execBondAddTwo() {
        if (this.subjectLength != 1) {
            this.errmsg = 'Subject must be a single atom.';
            return;
        }
        let atom = this.subjectIndex[0];
        if (this.input.mol.atomAdjCount(atom) < 2) {
            this.errmsg = 'Subject atom must already have at least 2 bonds.';
            return;
        }
        let ang = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.calculateNewBondAngles(this.input.mol, atom, 1);
        if (ang.length == 0)
            ang = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.exitVectors(this.input.mol, atom);
        if (ang.length == 0) {
            this.errmsg = 'Could not find a suitable geometry for new substituents.';
            return;
        }
        let baseAng = ang[0];
        let cx = this.input.mol.atomX(atom), cy = this.input.mol.atomY(atom);
        if (ang.length > 1) {
            let best = 0;
            for (let n = 0; n < ang.length; n++) {
                let x = cx + _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.cos(ang[n]);
                let y = cy + _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.sin(ang[n]);
                let score = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.congestionPoint(this.input.mol, x, y);
                if (n == 0 || score < best) {
                    best = score;
                    baseAng = ang[n];
                }
            }
        }
        let ang1 = baseAng - 30.0 * _util_util__WEBPACK_IMPORTED_MODULE_10__.DEGRAD, ang2 = baseAng + 30.0 * _util_util__WEBPACK_IMPORTED_MODULE_10__.DEGRAD;
        let mol = this.input.mol.clone();
        let a1 = mol.addAtom('C', cx + _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.cos(ang1), cy + _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.sin(ang1));
        let a2 = mol.addAtom('C', cx + _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.cos(ang2), cy + _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.sin(ang2));
        mol.addBond(atom, a1, 1);
        mol.addBond(atom, a2, 1);
        this.output.mol = mol;
    }
    execBondInsert() {
        let mol = this.input.mol, bond = this.input.currentBond;
        if (bond == 0) {
            this.errmsg = 'There must be a current bond.';
            return;
        }
        if (mol.bondInRing(bond)) {
            this.errmsg = 'Cannot insert into a ring-bond.';
            return;
        }
        let [alink, _, side] = this.mobileSide(bond);
        mol = mol.clone();
        mol.setBondOrder(bond, 1);
        let fragmask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(false, mol.numAtoms);
        for (let a of side)
            fragmask[a - 1] = true;
        let frag = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.subgraphWithAttachments(mol, fragmask);
        for (let n = mol.numAtoms; n >= 1; n--)
            if (fragmask[n - 1] && n != alink) {
                mol.deleteAtomAndBonds(n);
                if (n < alink)
                    alink -= 1;
            }
        mol.setAtomElement(alink, 'C');
        mol.setAtomCharge(alink, 0);
        mol.setAtomUnpaired(alink, 0);
        mol.setAtomHExplicit(alink, _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.HEXPLICIT_UNKNOWN);
        mol.setAtomIsotope(alink, _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.ISOTOPE_NATURAL);
        mol.setAtomMapNum(alink, 0);
        mol.setAtomExtra(alink, []);
        mol.setAtomTransient(alink, []);
        let fusion = new _TemplateFusion__WEBPACK_IMPORTED_MODULE_13__.TemplateFusion(mol, frag, '');
        fusion.withGuideOnly = true;
        fusion.permuteAtom(alink);
        if (fusion.perms.length == 0) {
            this.errmsg = 'Unable to insert.';
            return;
        }
        this.output.mol = fusion.perms[0].mol;
        this.zapSubject();
        this.output.currentAtom = alink;
    }
    execJoin() {
        if (!this.requireSubject())
            return;
        this.output.mol = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.joinOverlappingAtoms(this.input.mol, this.subjectMask);
        if (this.output.mol == null) {
            this.errmsg = 'Subject contains no overlapping atoms.';
        }
        else {
            this.zapSubject();
        }
    }
    execNudge(dir, extent) {
        if (!this.requireSubject())
            return;
        let dx = extent * (dir == 'left' ? -1 : dir == 'right' ? 1 : 0);
        let dy = extent * (dir == 'down' ? -1 : dir == 'up' ? 1 : 0);
        this.output.mol = this.input.mol.clone();
        for (let n = 0; n < this.subjectLength; n++) {
            let x = this.output.mol.atomX(this.subjectIndex[n]), y = this.output.mol.atomY(this.subjectIndex[n]);
            this.output.mol.setAtomPos(this.subjectIndex[n], x + dx, y + dy);
        }
    }
    execNudgeFar(dir) {
        if (!this.requireSubject())
            return;
        if (this.subjectLength == this.input.mol.numAtoms) {
            this.errmsg = 'Cannot apply to entire molecule.';
            return;
        }
        let dx = dir == 'left' ? -1 : dir == 'right' ? 1 : 0;
        let dy = dir == 'down' ? -1 : dir == 'up' ? 1 : 0;
        this.output.mol = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.moveToEdge(this.input.mol, this.subjectMask, dx, dy);
        if (this.output.mol == null) {
            this.execNudge(dir, 1);
        }
    }
    execFlip(axis) {
        if (this.input.mol.numAtoms < 2) {
            this.errmsg = 'At least 2 atoms are required.';
            return;
        }
        let isVertical = axis == 'ver';
        let cx = 0, cy = 0;
        let mask = this.subjectMask, mol = this.input.mol;
        if (this.input.currentAtom > 0) {
            cx = mol.atomX(this.input.currentAtom);
            cy = mol.atomY(this.input.currentAtom);
            if (!this.hasSelected) {
                mask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(false, mol.numAtoms);
                let cc = mol.atomConnComp(this.input.currentAtom);
                for (let n = 1; n <= mol.numAtoms; n++)
                    mask[n - 1] = mol.atomConnComp(n) == cc;
            }
        }
        else if (this.input.currentBond > 0) {
            let bfr = mol.bondFrom(this.input.currentBond), bto = mol.bondTo(this.input.currentBond);
            cx = 0.5 * (mol.atomX(bfr) + mol.atomX(bto));
            cy = 0.5 * (mol.atomY(bfr) + mol.atomY(bto));
            if (!this.hasSelected) {
                mask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(false, mol.numAtoms);
                let cc = mol.atomConnComp(bfr);
                for (let n = 1; n <= mol.numAtoms; n++)
                    mask[n - 1] = mol.atomConnComp(n) == cc;
            }
        }
        else if (this.subjectLength == 0) {
            let box = mol.boundary();
            cx = 0.5 * (box.minX() + box.maxX());
            cy = 0.5 * (box.minY() + box.maxY());
            mask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(true, mol.numAtoms);
        }
        else {
            for (let n = 0; n < this.subjectLength; n++) {
                cx += mol.atomX(this.subjectIndex[n]);
                cy += mol.atomY(this.subjectIndex[n]);
            }
            let invSz = 1.0 / this.subjectLength;
            cx *= invSz;
            cy *= invSz;
        }
        this.output.mol = mol.clone();
        for (let n = 1; n <= mol.numAtoms; n++)
            if (mask[n - 1]) {
                if (!isVertical)
                    this.output.mol.setAtomX(n, 2 * cx - this.output.mol.atomX(n));
                else
                    this.output.mol.setAtomY(n, 2 * cy - this.output.mol.atomY(n));
            }
    }
    execScale(mag) {
        const { mol, currentAtom, currentBond } = this.input;
        if (mol.numAtoms < 2) {
            this.errmsg = 'At least 2 atoms are required.';
            return;
        }
        if (currentAtom > 0) {
            let connAtoms = [];
            for (let a of this.subjectIndex)
                if (a != currentAtom && mol.findBond(currentAtom, a) > 0)
                    connAtoms.push(a);
            let g = _mol_Graph__WEBPACK_IMPORTED_MODULE_4__.Graph.fromMolecule(mol);
            g.isolateNode(currentAtom - 1);
            let anything = false;
            for (let cc of g.calculateComponentGroups()) {
                _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.addTo(cc, 1);
                let sz = 0, dx = 0, dy = 0;
                for (let a of cc)
                    if (connAtoms.includes(a)) {
                        dx += mol.atomX(a) - mol.atomX(currentAtom);
                        dy += mol.atomY(a) - mol.atomY(currentAtom);
                        sz++;
                    }
                if (sz == 0)
                    continue;
                [dx, dy] = [dx / sz, dy / sz];
                if (Math.abs(dx) < 0.1 && Math.abs(dy) < 0.1)
                    continue;
                [dx, dy] = [dx * (mag - 1), dy * (mag - 1)];
                if (!this.output.mol)
                    this.output.mol = mol.clone();
                for (let a of cc)
                    this.output.mol.setAtomPos(a, this.output.mol.atomX(a) + dx, this.output.mol.atomY(a) + dy);
                anything = true;
            }
            if (anything)
                return;
        }
        let b;
        if (this.subjectLength == 2 && (b = mol.findBond(this.subjectIndex[0], this.subjectIndex[1])) > 0 && !mol.bondInRing(b)) {
            let a1 = this.subjectIndex[0], a2 = this.subjectIndex[1];
            let ccmol = mol.clone();
            ccmol.deleteBond(b);
            let idx1 = [], idx2 = [];
            for (let n = 1; n <= ccmol.numAtoms; n++) {
                if (ccmol.atomConnComp(n) == ccmol.atomConnComp(a1))
                    idx1.push(n);
                else if (ccmol.atomConnComp(n) == ccmol.atomConnComp(a2))
                    idx2.push(n);
            }
            let dx = (mol.atomX(a2) - mol.atomX(a1)) * (mag - 1);
            let dy = (mol.atomY(a2) - mol.atomY(a1)) * (mag - 1);
            if (idx1.length == idx2.length) {
                dx *= 0.5;
                dy *= 0.5;
            }
            this.output.mol = mol.clone();
            if (idx1.length <= idx2.length)
                for (let n = 0; n < idx1.length; n++) {
                    let a = idx1[n];
                    this.output.mol.setAtomPos(a, this.output.mol.atomX(a) - dx, this.output.mol.atomY(a) - dy);
                }
            if (idx2.length <= idx1.length)
                for (let n = 0; n < idx2.length; n++) {
                    let a = idx2[n];
                    this.output.mol.setAtomPos(a, this.output.mol.atomX(a) + dx, this.output.mol.atomY(a) + dy);
                }
            return;
        }
        let cx = 0, cy = 0;
        if (currentAtom > 0) {
            cx = mol.atomX(currentAtom);
            cy = mol.atomY(currentAtom);
        }
        else if (currentBond > 0) {
            let bfr = mol.bondFrom(currentBond), bto = mol.bondTo(currentBond);
            cx = 0.5 * (mol.atomX(bfr) + mol.atomX(bto));
            cy = 0.5 * (mol.atomY(bfr) + mol.atomY(bto));
        }
        else {
            for (let n = 0; n < this.subjectLength; n++) {
                cx += mol.atomX(this.subjectIndex[n]);
                cy += mol.atomY(this.subjectIndex[n]);
            }
            let invSz = 1.0 / this.subjectLength;
            cx *= invSz;
            cy *= invSz;
        }
        this.output.mol = mol.clone();
        for (let n = 0; n < this.subjectLength; n++) {
            let x = this.output.mol.atomX(this.subjectIndex[n]);
            let y = this.output.mol.atomY(this.subjectIndex[n]);
            this.output.mol.setAtomPos(this.subjectIndex[n], (x - cx) * mag + cx, (y - cy) * mag + cy);
        }
    }
    execRotate(theta, centreX, centreY) {
        theta *= _util_util__WEBPACK_IMPORTED_MODULE_10__.DEGRAD;
        let mol = this.input.mol;
        if (centreX != null && centreY != null) {
            this.output.mol = mol.clone();
            let mask = this.subjectLength == 0 ? _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(true, mol.numAtoms) : this.subjectMask;
            _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.rotateAtoms(this.output.mol, mask, centreX, centreY, theta);
            return;
        }
        if (mol.numAtoms < 2) {
            this.errmsg = 'At least 2 atoms are required.';
            return;
        }
        let cx = 0, cy = 0;
        let mask = this.subjectMask;
        if (this.input.currentAtom > 0) {
            cx = mol.atomX(this.input.currentAtom);
            cy = mol.atomY(this.input.currentAtom);
            if (!this.hasSelected) {
                mask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(false, mol.numAtoms);
                let cc = mol.atomConnComp(this.input.currentAtom);
                for (let n = 1; n <= mol.numAtoms; n++)
                    mask[n - 1] = mol.atomConnComp(n) == cc;
            }
            if (_util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.maskCount(mask) == 1 && mask[this.input.currentAtom - 1]) {
                this.errmsg = 'Component is isolated.';
                return;
            }
        }
        else if (this.input.currentBond > 0) {
            let bfr = mol.bondFrom(this.input.currentBond), bto = mol.bondTo(this.input.currentBond);
            cx = 0.5 * (mol.atomX(bfr) + mol.atomX(bto));
            cy = 0.5 * (mol.atomY(bfr) + mol.atomY(bto));
            if (!this.hasSelected) {
                mask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(false, mol.numAtoms);
                let cc = mol.atomConnComp(bfr);
                for (let n = 1; n <= mol.numAtoms; n++)
                    mask[n - 1] = mol.atomConnComp(n) == cc;
            }
        }
        else if (this.subjectLength == 0) {
            let box = mol.boundary();
            cx = 0.5 * (box.minX() + box.maxX());
            cy = 0.5 * (box.minY() + box.maxY());
            mask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(true, mol.numAtoms);
        }
        else {
            if (this.subjectLength == 1) {
                this.errmsg = 'Component is isolated.';
                return;
            }
            for (let n = 0; n < this.subjectLength; n++) {
                cx += mol.atomX(this.subjectIndex[n]);
                cy += mol.atomY(this.subjectIndex[n]);
            }
            let invSz = 1.0 / this.subjectLength;
            cx *= invSz;
            cy *= invSz;
        }
        this.output.mol = mol.clone();
        _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.rotateAtoms(this.output.mol, mask, cx, cy, theta);
    }
    execBondDist(dist) {
        let bond = this.input.currentBond;
        if (bond == 0) {
            this.errmsg = 'There must be a current bond.';
            return;
        }
        let mol = this.input.mol.clone();
        if (mol.bondInRing(bond)) {
            let atom1 = mol.bondFrom(bond), atom2 = mol.bondTo(bond);
            let dx = mol.atomX(atom2) - mol.atomX(atom1), dy = mol.atomY(atom2) - mol.atomY(atom1), curDist = (0,_util_util__WEBPACK_IMPORTED_MODULE_10__.norm_xy)(dx, dy), inv = 1.0 / curDist;
            let sel1 = this.isSelected(atom1), sel2 = this.isSelected(atom2);
            let ox = dx * (dist - curDist) * inv, oy = dy * (dist - curDist) * inv;
            if (sel1 && !sel2) {
                mol.setAtomPos(atom1, mol.atomX(atom1) - ox, mol.atomY(atom1) - oy);
            }
            else if (sel2 && !sel1) {
                mol.setAtomPos(atom2, mol.atomX(atom2) + ox, mol.atomY(atom2) + oy);
            }
            else {
                mol.setAtomPos(atom1, mol.atomX(atom1) - 0.5 * ox, mol.atomY(atom1) - 0.5 * oy);
                mol.setAtomPos(atom2, mol.atomX(atom2) + 0.5 * ox, mol.atomY(atom2) + 0.5 * oy);
            }
        }
        else {
            let [atom1, atom2, side] = this.mobileSide(bond);
            let dx = mol.atomX(atom2) - mol.atomX(atom1), dy = mol.atomY(atom2) - mol.atomY(atom1);
            let curDist = (0,_util_util__WEBPACK_IMPORTED_MODULE_10__.norm_xy)(dx, dy), inv = 1.0 / curDist;
            let ox = dx * (dist - curDist) * inv, oy = dy * (dist - curDist) * inv;
            for (let a of side)
                mol.setAtomPos(a, mol.atomX(a) - ox, mol.atomY(a) - oy);
        }
        this.output.mol = mol;
    }
    execAlignAngle(angle) {
        let bond = this.input.currentBond;
        if (bond == 0) {
            this.errmsg = 'There must be a current bond.';
            return;
        }
        let mol = this.input.mol.clone();
        if (mol.bondInRing(bond)) {
            this.errmsg = 'Cannot align a ring-bond.';
            return;
        }
        let [atom1, atom2, side] = this.mobileSide(bond);
        let cx = mol.atomX(atom2), cy = mol.atomY(atom2);
        let delta = angle - Math.atan2(mol.atomY(atom1) - cy, mol.atomX(atom1) - cx);
        let cosTheta = Math.cos(delta), sinTheta = Math.sin(delta);
        for (let a of side) {
            let x = mol.atomX(a) - cx, y = mol.atomY(a) - cy;
            mol.setAtomPos(a, cx + x * cosTheta - y * sinTheta, cy + x * sinTheta + y * cosTheta);
        }
        this.output.mol = mol;
    }
    execAlignRegular() {
        let bond = this.input.currentBond;
        if (bond == 0) {
            this.errmsg = 'There must be a current bond.';
            return;
        }
        let mol = this.input.mol.clone();
        let bfr = mol.bondFrom(this.input.currentBond), bto = mol.bondTo(this.input.currentBond);
        let theta = Math.atan2(mol.atomY(bto) - mol.atomY(bfr), mol.atomX(bto) - mol.atomX(bfr)) * _util_util__WEBPACK_IMPORTED_MODULE_10__.RADDEG;
        if (theta < 0)
            theta += 360;
        let snap = Math.round(theta / 30) * 30;
        if (Math.abs(theta - snap) < 0.001)
            return;
        let delta = (snap - theta) * _util_util__WEBPACK_IMPORTED_MODULE_10__.DEGRAD;
        let mask = this.input.selectedMask;
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.allFalse(mask)) {
            let cc = mol.atomConnComp(bfr);
            for (let n = 1; n <= mol.numAtoms; n++)
                mask[n - 1] = cc == mol.atomConnComp(n);
        }
        let cx = 0.5 * (mol.atomX(bfr) + mol.atomX(bto)), cy = 0.5 * (mol.atomY(bfr) + mol.atomY(bto));
        for (let n = 1; n <= mol.numAtoms; n++)
            if (mask[n - 1]) {
                let dx = mol.atomX(n) - cx, dy = mol.atomY(n) - cy;
                let th = Math.atan2(dy, dx) + delta, dist = (0,_util_util__WEBPACK_IMPORTED_MODULE_10__.norm_xy)(dx, dy);
                mol.setAtomPos(n, cx + dist * Math.cos(th), cy + dist * Math.sin(th));
            }
        this.output.mol = mol;
    }
    execAdjustTorsion(angle) {
        if (this.input.currentAtom == 0 || _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.maskCount(this.input.selectedMask) != 3) {
            this.errmsg = 'Must be 3 selected atoms and a current atom.';
            return;
        }
        let mol = this.input.mol.clone();
        let a1 = this.input.currentAtom;
        let atoms = [];
        for (let n = 1; n <= mol.numAtoms; n++)
            if (n != a1 && this.input.selectedMask[n - 1])
                atoms.push(n);
        let a2 = mol.findBond(a1, atoms[0]) > 0 ? atoms.shift() :
            mol.findBond(a1, atoms[1]) > 0 ? atoms.pop() : 0;
        if (a2 == 0 || mol.findBond(a2, atoms[0]) == 0) {
            this.errmsg = 'Selected atoms must be consecutive.';
            return;
        }
        let a3 = atoms[0];
        let cx = mol.atomX(a2), cy = mol.atomY(a2);
        let theta1 = Math.atan2(mol.atomY(a1) - cy, mol.atomX(a1) - cx);
        let theta3 = Math.atan2(mol.atomY(a3) - cy, mol.atomX(a3) - cx);
        let delta = angle - (0,_util_util__WEBPACK_IMPORTED_MODULE_10__.angleDiff)(theta3, theta1);
        let group1 = [], group3 = [];
        if (mol.atomRingBlock(a1) == 0 || mol.atomRingBlock(a1) != mol.atomRingBlock(a3)) {
            let g = _mol_Graph__WEBPACK_IMPORTED_MODULE_4__.Graph.fromMolecule(mol);
            g.removeEdge(a2 - 1, a1 - 1);
            g.removeEdge(a2 - 1, a3 - 1);
            let cc = g.calculateComponents();
            for (let n = 0; n < g.numNodes; n++) {
                if (cc[n] == cc[a1 - 1])
                    group1.push(n + 1);
                else if (cc[n] == cc[a3 - 1])
                    group3.push(n + 1);
            }
        }
        if (mol.atomRingBlock(a1) > 0 && mol.atomRingBlock(a1) == mol.atomRingBlock(a2))
            group1 = [a1];
        if (mol.atomRingBlock(a3) > 0 && mol.atomRingBlock(a3) == mol.atomRingBlock(a2))
            group3 = [a3];
        _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.rotateAtoms(mol, _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.idxMask(_util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.add(group1, -1), mol.numAtoms), cx, cy, -0.5 * delta);
        _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.rotateAtoms(mol, _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.idxMask(_util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.add(group3, -1), mol.numAtoms), cx, cy, 0.5 * delta);
        this.output.mol = mol;
    }
    execMove(refAtom, deltaX, deltaY) {
        let subj = this.subjectIndex;
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.len(subj) == 0) {
            if (refAtom == 0)
                return;
            subj = [refAtom];
        }
        this.output.mol = this.input.mol.clone();
        for (let a of subj)
            this.output.mol.setAtomPos(a, this.output.mol.atomX(a) + deltaX, this.output.mol.atomY(a) + deltaY);
    }
    execRing(ringX, ringY, aromatic) {
        let rsz = ringX.length;
        let atoms = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.numberArray(0, rsz), bonds = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.numberArray(0, rsz);
        let outmol = this.input.mol.clone();
        for (let n = 0; n < rsz; n++) {
            atoms[n] = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.atomAtPoint(outmol, ringX[n], ringY[n]);
            if (atoms[n] == 0)
                atoms[n] = outmol.addAtom('C', ringX[n], ringY[n]);
        }
        for (let n = 0; n < rsz; n++) {
            let nn = n < rsz - 1 ? n + 1 : 0;
            bonds[n] = outmol.findBond(atoms[n], atoms[nn]);
            if (bonds[n] == 0)
                bonds[n] = outmol.addBond(atoms[n], atoms[nn], 1);
        }
        if (aromatic) {
            let valence = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.numberArray(0, rsz);
            let pi = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(false, rsz);
            for (let n = 0; n < rsz; n++) {
                valence[n] = _mol_Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_BONDING[outmol.atomicNumber(atoms[n])] + outmol.atomCharge(atoms[n]);
                if (outmol.atomHExplicit(atoms[n]) != _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.HEXPLICIT_UNKNOWN)
                    valence[n] -= outmol.atomHExplicit(atoms[n]);
                for (let b of outmol.atomAdjBonds(atoms[n]))
                    valence[n] -= outmol.bondOrder(b);
                if (outmol.bondOrder(bonds[n]) >= 2) {
                    pi[n] = true;
                    if (n < rsz - 1) {
                        pi[n] = true;
                        n++;
                    }
                    else
                        pi[0] = true;
                }
            }
            for (let n = 0; n < rsz; n++) {
                let nn = n < rsz - 1 ? n + 1 : 0;
                if (pi[n] || pi[nn])
                    continue;
                if (valence[n] > 0 && valence[nn] > 0) {
                    outmol.setBondOrder(bonds[n], 2);
                    pi[n] = true;
                    pi[nn] = true;
                    valence[n]--;
                    valence[nn]--;
                }
            }
        }
        this.output.mol = outmol;
    }
    execTemplateFusion(frag) {
        let mol = this.input.mol;
        let fusion = new _TemplateFusion__WEBPACK_IMPORTED_MODULE_13__.TemplateFusion(mol, frag, '');
        if (this.subjectLength == 0)
            fusion.permuteNone();
        else if (this.subjectLength == 1)
            fusion.permuteAtom(this.subjectIndex[0]);
        else if (this.subjectLength == 2 && mol.findBond(this.subjectIndex[0], this.subjectIndex[1]) > 0)
            fusion.permuteBond(this.subjectIndex[0], this.subjectIndex[1]);
        else
            fusion.permuteMulti(this.subjectIndex);
        let permutations = [];
        for (let perm of fusion.perms) {
            let obj = {};
            obj['mol'] = perm.mol.toString();
            obj['display'] = perm.display.toString();
            obj['molidx'] = perm.molidx;
            obj['temidx'] = perm.temidx;
            obj['srcidx'] = perm.srcidx;
            permutations.push(obj);
        }
        this.output.permutations = permutations;
    }
    execAbbrevTempl() {
    }
    execAbbrevGroup() {
        if (!this.requireSubject())
            return;
        if (!this.checkAbbreviationReady())
            return;
        let mol = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.convertToAbbrev(this.input.mol, _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.notMask(this.subjectMask), '?');
        if (mol == null) {
            this.errmsg = 'Inline abbreviations must be terminal with exactly one attachment point.';
            return;
        }
        if (_data_AbbrevContainer__WEBPACK_IMPORTED_MODULE_0__.AbbrevContainer.main) {
            _data_AbbrevContainer__WEBPACK_IMPORTED_MODULE_0__.AbbrevContainer.main.submitMolecule(mol, true);
            for (let n = 1; n <= mol.numAtoms; n++)
                if (mol.atomElement(n) == '?' && _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.hasAbbrev(mol, n))
                    _data_AbbrevContainer__WEBPACK_IMPORTED_MODULE_0__.AbbrevContainer.main.substituteAbbrevName(mol, n);
        }
        this.output.mol = mol;
        this.zapSubject();
        this.output.currentAtom = mol.numAtoms;
    }
    execAbbrevFormula() {
        if (!this.requireSubject())
            return;
        if (!this.checkAbbreviationReady())
            return;
        let fixed = this.input.mol.clone();
        for (let n = 1; n <= fixed.numAtoms; n++)
            fixed.setAtomHExplicit(n, fixed.atomHydrogens(n));
        let abv = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.subgraphMask(fixed, this.subjectMask);
        let formula = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.molecularFormula(abv, true);
        let mol = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.convertToAbbrev(this.input.mol, _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.notMask(this.subjectMask), formula);
        if (mol == null) {
            this.errmsg = 'Inline abbreviations must be terminal with exactly one attachment point.';
            return;
        }
        this.output.mol = mol;
        this.zapSubject();
        this.output.currentAtom = mol.numAtoms;
    }
    execAbbrevClear() {
        let idx = [];
        for (let n of this.subjectIndex)
            if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.hasAbbrev(this.input.mol, n))
                idx.push(n);
        if (idx.length == 0) {
            this.errmsg = 'No abbreviations to clear.';
            return;
        }
        let mol = this.input.mol.clone();
        for (let n of idx)
            _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.clearAbbrev(mol, n);
        this.output.mol = mol;
    }
    execAbbrevExpand() {
        let idx = [];
        for (let n of this.subjectIndex)
            if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.hasAbbrev(this.input.mol, n))
                idx.push(n);
        if (idx.length == 0) {
            this.errmsg = 'No abbreviations to expand.';
            return;
        }
        let mol = this.input.mol.clone();
        for (let n of idx)
            _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.expandOneAbbrev(mol, n, true);
        this.output.mol = mol;
        this.zapSubject();
    }
    execBondArtifact(activity) {
        if (!this.requireAtoms() || !this.requireSubject())
            return;
        let artif = new _mol_BondArtifact__WEBPACK_IMPORTED_MODULE_1__.BondArtifact(this.input.mol.clone());
        let subject = this.subjectIndex.slice(0), curAtom = this.input.currentAtom;
        if (curAtom > 0 && subject.indexOf(curAtom) < 0)
            subject.push(curAtom);
        if (activity == ActivityType.BondArtifactPath) {
            if (!artif.createPath(subject)) {
                this.errmsg = 'Path artifact not suitable.';
                return;
            }
        }
        else if (activity == ActivityType.BondArtifactRing) {
            if (!artif.createRing(subject)) {
                this.errmsg = 'Ring artifact not suitable.';
                return;
            }
        }
        else if (activity == ActivityType.BondArtifactArene) {
            if (!artif.createArene(subject)) {
                this.errmsg = 'Arene artifact not suitable.';
                return;
            }
        }
        else if (activity == ActivityType.BondArtifactClear) {
            if (!artif.removeArtifact(subject)) {
                if (this.removePolymerBlock(subject))
                    return;
                this.errmsg = 'No artifact removed.';
                return;
            }
        }
        artif.rewriteMolecule();
        this.output.mol = artif.mol;
    }
    execPolymerBlock() {
        if (!this.requireAtoms() || !this.requireSubject())
            return;
        if (this.owner)
            this.owner.performPolymerBlock(this.subjectIndex);
    }
    execAddHydrogens() {
        let mol = this.input.mol.clone();
        if (!this.requireAtoms())
            return;
        let atoms = this.subjectIndex;
        if (atoms.length == 0)
            atoms = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.identity1(mol.numAtoms);
        for (let a of atoms) {
            let hc = mol.atomHydrogens(a);
            if (hc > 0)
                _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.placeAdditionalHydrogens(mol, a, hc);
        }
        if (mol.numAtoms == this.input.mol.numAtoms) {
            this.errmsg = 'Nothing needs to be added.';
            return;
        }
        this.output.mol = mol;
    }
    execRemoveHydrogens() {
        if (!this.requireAtoms())
            return;
        let mol = this.input.mol;
        let selmask = this.subjectMask;
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.allFalse(selmask))
            selmask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(true, mol.numAtoms);
        let keepmask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(true, mol.numAtoms);
        for (let n = 1; n <= mol.numAtoms; n++)
            if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.boringHydrogen(mol, n)) {
                let nbr = mol.atomAdjList(n)[0];
                if (selmask[n - 1] || selmask[nbr - 1])
                    keepmask[n - 1] = false;
            }
        if (_util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.allTrue(keepmask)) {
            this.errmsg = 'Nothing to be deleted.';
            return;
        }
        this.output.mol = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.subgraphMask(mol, keepmask);
    }
    execQueryClear() {
        if (!this.requireSubject())
            return;
        let mol = this.input.mol.clone();
        const { currentBond } = this.input;
        if (currentBond > 0 && _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.hasAnyQueryBond(mol, currentBond)) {
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.deleteQueryBondAll(mol, currentBond);
            this.output.mol = mol;
            return;
        }
        let anything = false;
        for (let a of this.subjectIndex)
            if (_mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.hasAnyQueryAtom(mol, a)) {
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.deleteQueryAtomAll(mol, a);
                anything = true;
            }
        for (let b = 1; b <= mol.numBonds; b++)
            if (this.subjectMask[mol.bondFrom(b) - 1] && this.subjectMask[mol.bondTo(b) - 1] && _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.hasAnyQueryBond(mol, b)) {
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.deleteQueryBondAll(mol, b);
                anything = true;
            }
        if (anything)
            this.output.mol = mol;
        else
            this.errmsg = 'No query terms to clear.';
    }
    execQueryCopy() {
        if (!this.requireSubject())
            return;
        const { mol, currentBond } = this.input;
        if (currentBond > 0) {
            if (!_mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.hasAnyQueryBond(mol, currentBond)) {
                this.errmsg = 'Bond has no query terms.';
                return;
            }
            let qmol = new _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule();
            qmol.addAtom('*', 0, 0);
            qmol.addAtom('*', _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND, 0);
            qmol.addBond(1, 2, 1);
            qmol.setBondExtra(1, mol.bondExtra(currentBond).filter((xtra) => xtra.startsWith('q')));
            this.toClipboard = qmol.toString();
        }
        else if (this.subjectLength == 1) {
            let atom = this.subjectIndex[0];
            if (!_mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.hasAnyQueryAtom(mol, atom)) {
                this.errmsg = 'Atom has no query terms.';
                return;
            }
            let qmol = new _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule();
            qmol.addAtom('*', 0, 0);
            qmol.setAtomExtra(1, mol.atomExtra(atom).filter((xtra) => xtra.startsWith('q')));
            this.toClipboard = qmol.toString();
        }
        else
            this.errmsg = 'Subject has to be a single atom or bond.';
    }
    execQueryPaste() {
        if (!this.requireSubject())
            return;
        let qmol = this.param.qmol;
        if (!qmol) { }
        else if (qmol.numAtoms == 1 && qmol.atomElement(1) == '*' && _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.hasAnyQueryAtom(qmol, 1)) {
            let mol = this.output.mol = this.input.mol.clone();
            let qterms = qmol.atomExtra(1).filter((xtra) => xtra.startsWith('q'));
            for (let a of this.subjectIndex) {
                let aterms = mol.atomExtra(a).filter((xtra) => xtra.startsWith('q'));
                mol.setAtomExtra(a, [...aterms, ...qterms]);
            }
            return;
        }
        else if (qmol.numAtoms == 2 && qmol.atomElement(1) == '*' && qmol.atomElement(2) == '*' &&
            qmol.numBonds == 1 && _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.hasAnyQueryBond(qmol, 1)) {
            let mol = this.output.mol = this.input.mol.clone();
            let qterms = qmol.bondExtra(1).filter((xtra) => xtra.startsWith('q'));
            for (let b = 1; b <= mol.numBonds; b++)
                if (this.subjectMask[mol.bondFrom(b) - 1] && this.subjectMask[mol.bondTo(b) - 1]) {
                    let bterms = mol.bondExtra(b).filter((xtra) => xtra.startsWith('q'));
                    mol.setBondExtra(b, [...bterms, ...qterms]);
                }
            return;
        }
        this.errmsg = 'Unable to paste query terms.';
    }
    execQuerySetAtom() {
    }
    execQuerySetBond() {
    }
    execQueryBondAny() {
        if (!this.requireSubject())
            return;
        const { mol, currentBond } = this.input;
        let bonds = [];
        for (let n = 1; n <= mol.numBonds; n++)
            if (this.subjectMask[mol.bondFrom(n) - 1] && this.subjectMask[mol.bondTo(n) - 1])
                bonds.push(n);
        if (bonds.length == 0) {
            this.errmsg = 'Must select at least one bond.';
            return;
        }
        this.output.mol = mol.clone();
        for (let b of bonds) {
            this.output.mol.setBondOrder(b, 0);
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_8__.QueryUtil.setQueryBondOrders(this.output.mol, b, [-1, 0, 1, 2, 3, 4]);
        }
    }
    execSproutDirection(deltaX, deltaY) {
        var _a, _b;
        if (!this.requireCurrent())
            return;
        if (deltaX == 0 && deltaY == 0)
            return;
        const { mol, currentAtom } = this.input;
        let angleOptions;
        if (mol.atomAdjCount(currentAtom) == 0)
            angleOptions = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.identity0(12).map((n) => n * _util_util__WEBPACK_IMPORTED_MODULE_10__.TWOPI / 12);
        else
            angleOptions = (_a = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.primeDirections(mol, currentAtom)) !== null && _a !== void 0 ? _a : _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.exitVectors(mol, currentAtom);
        if (angleOptions.length == 0)
            return;
        let theta = Math.atan2(deltaY, deltaX);
        let idx = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.idxMin(angleOptions.map((look) => Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_10__.angleDiff)(theta, look)) + 0.01 * Math.abs(Math.sin(look))));
        let px = mol.atomX(currentAtom) + _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.cos(angleOptions[idx]);
        let py = mol.atomY(currentAtom) + _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.sin(angleOptions[idx]);
        this.output.mol = mol.clone();
        let newAtom = this.output.mol.addAtom('C', px, py);
        this.output.mol.addBond(currentAtom, newAtom, 1);
        this.output.mol = (_b = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.joinOverlappingAtoms(this.output.mol, _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(true, this.output.mol.numAtoms))) !== null && _b !== void 0 ? _b : this.output.mol;
        for (let n = 1; n <= this.output.mol.numAtoms; n++) {
            let dx = this.output.mol.atomX(n) - px, dy = this.output.mol.atomY(n) - py;
            if ((0,_util_util__WEBPACK_IMPORTED_MODULE_10__.norm2_xy)(dx, dy) < _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.OVERLAP_THRESHOLD_SQ) {
                this.output.currentAtom = n;
                break;
            }
        }
    }
    requireSubject() {
        if (this.subjectLength == 0)
            this.errmsg = 'Subject required: current atom/bond or selected atoms.';
        return this.subjectLength > 0;
    }
    requireAtoms() {
        if (this.input.mol.numAtoms == 0)
            this.errmsg = 'There are no atoms.';
        return this.input.mol.numAtoms > 0;
    }
    requireCurrent() {
        if (this.input.currentAtom == 0 && this.input.currentBond == 0) {
            this.errmsg = 'There must be a current atom or bond.';
            return false;
        }
        return true;
    }
    requireSelected() {
        if (!this.hasSelected)
            this.errmsg = 'No atoms are selected.';
        return this.hasSelected;
    }
    pickSelectedGroup(groups, dir) {
        if (this.subjectLength == 0)
            return 0;
        for (let i = 0; i < groups.length; i++) {
            let g = groups[i];
            let all = true;
            for (let j = 0; j < g.length; j++)
                if (!this.subjectMask[g[j] - 1]) {
                    all = false;
                    break;
                }
            if (all) {
                i += dir;
                return i < 0 ? i + groups.length : i >= groups.length ? i - groups.length : i;
            }
        }
        for (let i = 0; i < groups.length; i++) {
            let g = groups[i];
            for (let j = 0; j < g.length; j++)
                if (this.subjectMask[g[j] - 1])
                    return i;
        }
        return 0;
    }
    zapSubject() {
        this.output.currentAtom = 0;
        this.output.currentBond = 0;
        this.output.selectedMask = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(false, this.input.mol.numAtoms);
    }
    performBondNew(atom, order, type) {
        let mol = this.input.mol;
        let ang = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.calculateNewBondAngles(mol, atom, order);
        if (ang.length == 0)
            ang = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.exitVectors(mol, atom);
        if (ang.length == 0) {
            this.errmsg = 'Could not find a suitable geometry for a new substituent.';
            return;
        }
        let bx = [], by = [], bscore = [];
        for (let n = 0; n < ang.length; n++) {
            let x = mol.atomX(atom) + _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.cos(ang[n]);
            let y = mol.atomY(atom) + _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.sin(ang[n]);
            let score = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.congestionPoint(mol, x, y);
            if (_mol_Chemistry__WEBPACK_IMPORTED_MODULE_2__.Chemistry.ELEMENT_BLOCKS[mol.atomicNumber(atom)] <= 2)
                score += Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_10__.angleNorm)(ang[n])) * 1E-8;
            else
                score += Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_10__.angleDiff)(0.5 * Math.PI, ang[n])) * 1E-8;
            bx.push(x);
            by.push(y);
            bscore.push(score);
        }
        let idx = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.idxSort(bscore);
        this.output.mol = mol.clone();
        let anum = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.atomAtPoint(this.output.mol, bx[idx[0]], by[idx[0]]);
        if (anum == 0)
            anum = this.output.mol.addAtom('C', bx[idx[0]], by[idx[0]]);
        _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.addBond(this.output.mol, atom, anum, order, type);
        if (idx.length >= 2) {
            this.output.altmol = mol.clone();
            anum = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.atomAtPoint(this.output.altmol, bx[idx[1]], by[idx[1]]);
            if (anum == 0)
                anum = this.output.altmol.addAtom('C', bx[idx[1]], by[idx[1]]);
            _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.addBond(this.output.altmol, atom, anum, order, type);
        }
    }
    performBondChange(order, type) {
        let mol = this.input.mol;
        let bonds = [];
        for (let n = 1; n <= mol.numBonds; n++)
            if (this.subjectMask[mol.bondFrom(n) - 1] && this.subjectMask[mol.bondTo(n) - 1])
                bonds.push(n);
        let switchType = type == _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.BONDTYPE_DECLINED || type == _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.BONDTYPE_INCLINED;
        let stereoType = switchType || type == _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.BONDTYPE_UNKNOWN;
        let anyChange = switchType;
        for (let n = 0; n < bonds.length && !anyChange; n++) {
            let b = bonds[n];
            if (mol.bondOrder(b) != order && type == _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.BONDTYPE_NORMAL)
                anyChange = true;
            else if (mol.bondType(b) != type)
                anyChange = true;
        }
        if (!anyChange) {
            this.errmsg = 'No bond changes made.';
            return;
        }
        this.output.mol = mol.clone();
        for (let n = 0; n < bonds.length; n++) {
            let b = bonds[n], bfr = this.output.mol.bondFrom(b), bto = this.output.mol.bondTo(b);
            if (switchType && this.output.mol.bondType(b) == type) {
                this.output.mol.setBondFromTo(b, bto, bfr);
            }
            else if (this.output.mol.bondOrder(b) != order || this.output.mol.bondType(b) != type) {
                if (!stereoType && order != this.output.mol.bondOrder(b))
                    this.output.mol.setBondOrder(b, order);
                else
                    this.output.mol.setBondType(b, type);
            }
            else if (switchType) {
                this.output.mol.setBondFromTo(b, bto, bfr);
            }
        }
    }
    performBondGeomAtom(geom, atom) {
        let mol = this.input.mol;
        let adj = mol.atomAdjList(atom);
        let asz = adj.length, gsz = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.GEOM_ANGLES[geom].length;
        if (asz > gsz) {
            this.errmsg = 'The current atom has more bonds than does the selected geometry.';
            return;
        }
        if (asz == 0) {
            this.performBondNew(atom, 1, _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.BONDTYPE_NORMAL);
            return;
        }
        if (asz == gsz) {
            this.output.mol = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.refitAtomGeometry(mol, atom, geom);
            if (this.output.mol == null)
                this.errmsg = 'Could not re-fit the atom geometry.';
            return;
        }
        let ang = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.atomBondAngles(mol, atom);
        let newang = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.mapAngleSubstituent(geom, ang);
        if (newang == null) {
            this.output.mol = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.refitAtomGeometry(mol, atom, geom);
            if (this.output.mol == null)
                this.errmsg = 'Could not re-fit the atom geometry.';
            return;
        }
        this.output.mol = mol.clone();
        let theta = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.pickNewAtomDirection(mol, atom, newang);
        let x = this.output.mol.atomX(atom) + _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.cos(theta);
        let y = this.output.mol.atomY(atom) + _mol_Molecule__WEBPACK_IMPORTED_MODULE_5__.Molecule.IDEALBOND * Math.sin(theta);
        let anum = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.atomAtPoint(this.output.mol, x, y);
        if (anum == 0)
            anum = this.output.mol.addAtom('C', x, y);
        _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.addBond(this.output.mol, atom, anum, 1);
    }
    performBondGeomBond(geom, bond) {
        let mol = this.input.mol;
        let bfr = mol.bondFrom(bond), bto = mol.bondTo(bond);
        let ac1 = mol.atomAdjCount(bfr), ac2 = mol.atomAdjCount(bto);
        if (ac1 > 1 && ac2 == 1) { }
        else if (ac1 == 1 && ac2 > 1) {
            let t = ac1;
            ac1 = ac2;
            ac2 = t;
        }
        else {
            this.errmsg = 'One end of the bond must be terminal.';
            return;
        }
        let adj = mol.atomAdjList(bfr);
        let x1 = mol.atomX(bfr), y1 = mol.atomY(bfr);
        let x2 = mol.atomX(bto), y2 = mol.atomY(bto);
        let ang = [];
        for (let n = 0, p = 0; n < adj.length; n++)
            if (adj[n] != bto) {
                ang.push(Math.atan2(mol.atomY(adj[n]) - y1, mol.atomX(adj[n]) - x1));
            }
        let newang = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_9__.SketchUtil.mapAngleSubstituent(geom, ang);
        if (newang == null) {
            this.errmsg = 'No alternative geometries identified.';
            return;
        }
        let bestAng = _util_util__WEBPACK_IMPORTED_MODULE_10__.TWOPI + 1, bestX = 0, bestY = 0;
        let curth = Math.atan2(y2 - y1, x2 - x1), r = (0,_util_util__WEBPACK_IMPORTED_MODULE_10__.norm_xy)(x2 - x1, y2 - y1);
        for (let n = 0; n < newang.length; n++) {
            let th = (0,_util_util__WEBPACK_IMPORTED_MODULE_10__.angleDiff)(newang[n], curth);
            if (th < 0)
                th += _util_util__WEBPACK_IMPORTED_MODULE_10__.TWOPI;
            if (n > 0 && th > bestAng)
                continue;
            let x = x1 + r * Math.cos(th + curth);
            let y = y1 + r * Math.sin(th + curth);
            if (_mol_CoordUtil__WEBPACK_IMPORTED_MODULE_3__.CoordUtil.atomAtPoint(mol, x, y) > 0)
                continue;
            bestAng = th;
            bestX = x;
            bestY = y;
        }
        if (bestAng > _util_util__WEBPACK_IMPORTED_MODULE_10__.TWOPI) {
            this.errmsg = 'No alternative geometries identified.';
            return;
        }
        this.output.mol = mol.clone();
        this.output.mol.setAtomPos(bto, bestX, bestY);
    }
    checkAbbreviationReady() {
        let junction = 0;
        let mol = this.input.mol, subjmask = this.subjectMask;
        for (let n = 1; n <= mol.numBonds; n++) {
            let b1 = mol.bondFrom(n), b2 = mol.bondTo(n);
            let atom = 0;
            if ((subjmask[b1 - 1] && !subjmask[b2 - 1] && _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.hasAbbrev(mol, b1)) ||
                (subjmask[b2 - 1] && !subjmask[b1 - 1] && _mol_MolUtil__WEBPACK_IMPORTED_MODULE_6__.MolUtil.hasAbbrev(mol, b2))) {
                this.errmsg = 'Already an abbreviation.';
                return false;
            }
            if (subjmask[b1 - 1] && !subjmask[b2 - 1])
                atom = b1;
            else if (subjmask[b2 - 1] && !subjmask[b1 - 1])
                atom = b2;
            if (atom == 0 || atom == junction) { }
            else if (junction == 0)
                junction = atom;
            else {
                this.errmsg = 'The selected group must be terminal.';
                return false;
            }
        }
        return true;
    }
    mobileSide(bond, disqualTerminal = false) {
        let { mol } = this.input;
        let atom1 = mol.bondFrom(bond), atom2 = mol.bondTo(bond);
        let g = _mol_Graph__WEBPACK_IMPORTED_MODULE_4__.Graph.fromMolecule(mol);
        g.removeEdge(atom1 - 1, atom2 - 1);
        let side1 = [], side2 = [];
        for (let grp of g.calculateComponentGroups()) {
            if (grp.includes(atom1 - 1))
                side1 = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.add(grp, 1);
            if (grp.includes(atom2 - 1))
                side2 = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.add(grp, 1);
        }
        let weight1 = side1.length * (mol.atomRingBlock(atom1) > 0 ? 2 : 1);
        let weight2 = side2.length * (mol.atomRingBlock(atom2) > 0 ? 2 : 1);
        let sel1 = false, sel2 = false;
        for (let a of side1)
            if (this.isSelected(a)) {
                sel1 = true;
                break;
            }
        for (let a of side2)
            if (this.isSelected(a)) {
                sel2 = true;
                break;
            }
        if (disqualTerminal && mol.atomAdjCount(atom1) == 1)
            return [atom2, atom1, side2];
        else if (disqualTerminal && mol.atomAdjCount(atom2) == 1)
            return [atom1, atom2, side1];
        else if (sel1 && !sel2) { }
        else if ((sel2 && !sel1) || weight2 < weight1)
            return [atom2, atom1, side2];
        return [atom1, atom2, side1];
    }
    isSelected(atom) {
        let mask = this.input.selectedMask;
        return mask ? mask[atom - 1] : false;
    }
    removePolymerBlock(atoms) {
        let polymer = new _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_7__.PolymerBlock(this.input.mol.clone());
        for (let id of polymer.getIDList()) {
            let unit = polymer.getUnit(id);
            for (let atom of atoms)
                if (unit.atoms.includes(atom)) {
                    polymer.removeUnit(id);
                    polymer.rewriteMolecule();
                    this.output.mol = polymer.mol;
                    return true;
                }
        }
        return false;
    }
}


/***/ }),

/***/ "./src/sketcher/PeriodicTableWidget.ts":
/*!*********************************************!*\
  !*** ./src/sketcher/PeriodicTableWidget.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PeriodicTableWidget: () => (/* binding */ PeriodicTableWidget)
/* harmony export */ });
/* harmony import */ var _mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/Chemistry */ "./src/mol/Chemistry.ts");
/* harmony import */ var _ui_Widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ui/Widget */ "./src/ui/Widget.ts");
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _util_Theme__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/Theme */ "./src/util/Theme.ts");




const POSITION_TABLE_Y = [
    1, 1,
    2, 2, 2, 2, 2, 2, 2, 2,
    3, 3, 3, 3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    6, 6,
    8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5, 8.5,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    7, 7,
    9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7
];
const POSITION_TABLE_X = [
    1, 18,
    1, 2, 13, 14, 15, 16, 17, 18,
    1, 2, 13, 14, 15, 16, 17, 18,
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    1, 2,
    3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5,
    3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    1, 2,
    3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5,
    3, 4, 5, 6, 7, 8, 9, 10, 11, 12
];
const CSS_PERIODICTABLE = `
	*.wmk-periodictable-element
	{
		border: 1px solid black;
		border-radius: 2px;
		margin: 0;
		min-width: 2em;
		padding: 0.4em 0 0.3em 0;
		text-align: center;
		color: #FFFFFF;
		cursor: pointer;
	}
	*.wmk-periodictable-block1
	{
		background-color: #313062;
	}
	*.wmk-periodictable-block1:hover
	{
		background-color: #414072;
	}
	*.wmk-periodictable-block2
	{
		background-color: #205224;
	}
	*.wmk-periodictable-block2:hover
	{
		background-color: #306234;
	}
	*.wmk-periodictable-block3
	{
		background-color: #522818;
	}
	*.wmk-periodictable-block3:hover
	{
		background-color: #623828;
	}
	*.wmk-periodictable-block4
	{
		background-color: #575212;
	}
	*.wmk-periodictable-block4:block
	{
		background-color: #676222;
	}
	*.wmk-periodictable-selected
	{
		background-color: #FFFFFF !important;
		color: #000000 !important;
		cursor: default;
	}
`;
class PeriodicTableWidget extends _ui_Widget__WEBPACK_IMPORTED_MODULE_1__.Widget {
    constructor() {
        super();
        this.divList = [];
        this.selectedAtno = [];
        (0,_util_Theme__WEBPACK_IMPORTED_MODULE_3__.installInlineCSS)('periodictable', CSS_PERIODICTABLE);
    }
    render(parent) {
        super.render(parent);
        let grid = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<div/>').appendTo(this.contentDOM).css({ 'display': 'grid' });
        grid.css({ 'align-items': 'center', 'justify-content': 'start', 'gap': '1px' });
        let row = POSITION_TABLE_Y.map((y) => Math.round(2 * y) + 1);
        let col = POSITION_TABLE_X.map((x) => Math.round(2 * x) + 1);
        let num = row.length;
        for (let n = 0; n < num; n++) {
            let div = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<div/>').appendTo(grid);
            div.css({ 'grid-row': `${row[n]} / span 2`, 'grid-column': `${col[n]} / span 2` });
            div.addClass('wmk-periodictable-element');
            let blk = _mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__.Chemistry.ELEMENT_BLOCKS[n + 1];
            if (blk == 1)
                div.addClass('wmk-periodictable-block1');
            else if (blk == 2)
                div.addClass('wmk-periodictable-block2');
            else if (blk == 3)
                div.addClass('wmk-periodictable-block3');
            else if (blk == 4)
                div.addClass('wmk-periodictable-block4');
            let el = _mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__.Chemistry.ELEMENTS[n + 1];
            div.setText(el);
            this.divList.push(div);
            div.onClick(() => {
                this.changeElement(el);
                this.callbackSelect(el);
            });
            div.onDblClick((event) => {
                this.callbackDoubleClick();
                event.preventDefault();
                event.stopPropagation();
            });
        }
    }
    onSelect(callback) {
        this.callbackSelect = callback;
    }
    onDoubleClick(callback) {
        this.callbackDoubleClick = callback;
    }
    changeElement(element) {
        let atno = _mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__.Chemistry.ELEMENTS.indexOf(element);
        this.selectedAtno = [atno];
        this.updateSelected();
    }
    setSelectedElements(elementList) {
        this.selectedAtno = elementList.map((el) => _mol_Chemistry__WEBPACK_IMPORTED_MODULE_0__.Chemistry.ELEMENTS.indexOf(el)).filter((atno) => atno > 0);
        this.updateSelected();
    }
    updateSelected() {
        for (let n = 1; n <= this.divList.length; n++) {
            if (this.selectedAtno.includes(n))
                this.divList[n - 1].addClass('wmk-periodictable-selected');
            else
                this.divList[n - 1].removeClass('wmk-periodictable-selected');
        }
    }
}


/***/ }),

/***/ "./src/sketcher/QueryFieldsWidget.ts":
/*!*******************************************!*\
  !*** ./src/sketcher/QueryFieldsWidget.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   QueryFieldsWidget: () => (/* binding */ QueryFieldsWidget)
/* harmony export */ });
/* harmony import */ var _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/QueryUtil */ "./src/mol/QueryUtil.ts");
/* harmony import */ var _ui_OptionList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ui/OptionList */ "./src/ui/OptionList.ts");
/* harmony import */ var _ui_Widget__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ui/Widget */ "./src/ui/Widget.ts");
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");





class QueryFieldsWidget extends _ui_Widget__WEBPACK_IMPORTED_MODULE_2__.Widget {
    constructor(mol, atom, bond) {
        super();
        this.mol = mol;
        this.atom = atom;
        this.bond = bond;
    }
    render(parent) {
        super.render(parent);
        let grid = (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div/>').appendTo(this.contentDOM);
        grid.css({ 'display': 'grid', 'align-items': 'center', 'justify-content': 'start' });
        grid.css({ 'grid-row-gap': '0.5em', 'grid-column-gap': '0.5em' });
        grid.css({ 'grid-template-columns': '[title] auto [value] auto [end]' });
        let row = 0;
        let makeInput = () => {
            let input = (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<input size="20"/>').appendTo(grid).css({ 'grid-area': `${row} / value` });
            return input;
        };
        let makeToggleInput = () => {
            let div = (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / value`, 'dispkay': 'flex' });
            let lbl = (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<label/>').appendTo(div).css({ 'margin-right': '0.5em' });
            let chk = (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<input type="checkbox"/>').appendTo(lbl);
            lbl.appendText('Not');
            let input = (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<input size="20"/>').appendTo(div).css({ 'flex-grow': '1' });
            return [chk, input];
        };
        if (this.atom > 0) {
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div>Charges</div>').appendTo(grid).css({ 'grid-area': `${++row} / title` });
            this.inputCharges = makeInput();
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div>Aromatic</div>').appendTo(grid).css({ 'grid-area': `${++row} / title` });
            this.optAromatic = new _ui_OptionList__WEBPACK_IMPORTED_MODULE_1__.OptionList(['Maybe', 'Yes', 'No']);
            this.optAromatic.render((0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / value` }));
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div>Unsaturated</div>').appendTo(grid).css({ 'grid-area': `${++row} / title` });
            this.optUnsaturated = new _ui_OptionList__WEBPACK_IMPORTED_MODULE_1__.OptionList(['Maybe', 'Yes', 'No']);
            this.optUnsaturated.render((0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / value` }));
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div>Elements</div>').appendTo(grid).css({ 'grid-area': `${++row} / title` });
            [this.chkNotElements, this.inputElements] = makeToggleInput();
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div>Ring Sizes</div>').appendTo(grid).css({ 'grid-area': `${++row} / title` });
            [this.chkNotRingSizes, this.inputRingSizes] = makeToggleInput();
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div>Ring Block</div>').appendTo(grid).css({ 'grid-area': `${++row} / title` });
            this.optRingBlock = new _ui_OptionList__WEBPACK_IMPORTED_MODULE_1__.OptionList(['Maybe', 'Yes', 'No']);
            this.optRingBlock.render((0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / value` }));
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div># Small Rings</div>').appendTo(grid).css({ 'grid-area': `${++row} / title` });
            this.inputNumRings = makeInput();
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div># Ring Bonds</div>').appendTo(grid).css({ 'grid-area': `${++row} / title` });
            this.inputRingBonds = makeInput();
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div>Adjacency</div>').appendTo(grid).css({ 'grid-area': `${++row} / title` });
            this.inputAdjacency = makeInput();
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div>Bond Sums</div>').appendTo(grid).css({ 'grid-area': `${++row} / title` });
            this.inputBondSums = makeInput();
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div>Valences</div>').appendTo(grid).css({ 'grid-area': `${++row} / title` });
            this.inputValences = makeInput();
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div>Hydrogens</div>').appendTo(grid).css({ 'grid-area': `${++row} / title` });
            this.inputHydrogens = makeInput();
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div>Isotopes</div>').appendTo(grid).css({ 'grid-area': `${++row} / title` });
            this.inputIsotopes = makeInput();
            this.setupAtom();
        }
        else {
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div>Ring Sizes</div>').appendTo(grid).css({ 'grid-area': `${++row} / title` });
            [this.chkNotRingSizes, this.inputRingSizes] = makeToggleInput();
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div>Ring Block</div>').appendTo(grid).css({ 'grid-area': `${++row} / title` });
            this.optRingBlock = new _ui_OptionList__WEBPACK_IMPORTED_MODULE_1__.OptionList(['Maybe', 'Yes', 'No']);
            this.optRingBlock.render((0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div/>').appendTo(grid).css({ 'grid-area': `${row} / value` }));
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div># Small Rings</div>').appendTo(grid).css({ 'grid-area': `${++row} / title` });
            this.inputNumRings = makeInput();
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_3__.dom)('<div>Bond Orders</div>').appendTo(grid).css({ 'grid-area': `${++row} / title` });
            this.inputOrders = makeInput();
            this.setupBond();
        }
    }
    updateAtom() {
        const { mol, atom } = this;
        _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.deleteQueryAtomAll(mol, atom);
        let chg = this.splitNumbers(this.inputCharges.getValue());
        if (chg)
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryAtomCharges(mol, atom, chg);
        let arom = this.optAromatic.getSelectedIndex();
        if (arom > 0)
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryAtomAromatic(mol, atom, arom == 1);
        let unsat = this.optUnsaturated.getSelectedIndex();
        if (unsat > 0)
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryAtomUnsaturated(mol, atom, unsat == 1);
        let elem = this.splitStrings(this.inputElements.getValue());
        if (elem) {
            if (!this.chkNotElements.elInput.checked)
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryAtomElements(mol, atom, elem);
            else
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryAtomElementsNot(mol, atom, elem);
        }
        let ringsz = this.splitNumbers(this.inputRingSizes.getValue());
        if (ringsz) {
            if (!this.chkNotRingSizes.elInput.checked)
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryAtomRingSizes(mol, atom, ringsz);
            else
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryAtomRingSizesNot(mol, atom, ringsz);
        }
        let ringblk = this.optRingBlock.getSelectedIndex();
        if (ringblk > 0)
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryAtomRingBlock(mol, atom, ringblk == 1);
        let nring = this.splitNumbers(this.inputNumRings.getValue());
        if (nring)
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryAtomNumRings(mol, atom, nring);
        let rbc = this.splitNumbers(this.inputRingBonds.getValue());
        if (rbc)
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryAtomRingBonds(mol, atom, rbc);
        let adj = this.splitNumbers(this.inputAdjacency.getValue());
        if (adj)
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryAtomAdjacency(mol, atom, adj);
        let bond = this.splitNumbers(this.inputBondSums.getValue());
        if (bond)
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryAtomBondSums(mol, atom, bond);
        let val = this.splitNumbers(this.inputValences.getValue());
        if (val)
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryAtomValences(mol, atom, val);
        let hyd = this.splitNumbers(this.inputHydrogens.getValue());
        if (hyd)
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryAtomHydrogens(mol, atom, hyd);
        let iso = this.splitNumbers(this.inputIsotopes.getValue());
        if (iso)
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryAtomIsotope(mol, atom, iso);
    }
    updateBond() {
        const { mol, bond } = this;
        _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.deleteQueryBondAll(mol, bond);
        let ringsz = this.splitNumbers(this.inputRingSizes.getValue());
        if (ringsz) {
            if (!this.chkNotRingSizes.elInput.checked)
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryBondRingSizes(mol, bond, ringsz);
            else
                _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryBondRingSizesNot(mol, bond, ringsz);
        }
        let ringblk = this.optRingBlock.getSelectedIndex();
        if (ringblk > 0)
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryBondRingBlock(mol, bond, ringblk == 1);
        let nring = this.splitNumbers(this.inputNumRings.getValue());
        if (nring)
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryBondNumRings(mol, bond, nring);
        let order = this.splitNumbers(this.inputOrders.getValue());
        if (order)
            _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.setQueryBondOrders(mol, bond, order);
    }
    setupAtom() {
        const { mol, atom } = this;
        let chg = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryAtomCharges(mol, atom);
        let arom = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryAtomAromatic(mol, atom);
        let unsat = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryAtomUnsaturated(mol, atom);
        let elem = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryAtomElements(mol, atom);
        let elemNot = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryAtomElementsNot(mol, atom);
        let ringsz = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryAtomRingSizes(mol, atom);
        let ringszNot = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryAtomRingSizesNot(mol, atom);
        let ringblk = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryAtomRingBlock(mol, atom);
        let nring = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryAtomNumRings(mol, atom);
        let rbc = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryAtomRingBonds(mol, atom);
        let adj = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryAtomAdjacency(mol, atom);
        let bond = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryAtomBondSums(mol, atom);
        let val = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryAtomValences(mol, atom);
        let hyd = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryAtomHydrogens(mol, atom);
        let iso = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryAtomIsotope(mol, atom);
        let frag = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryAtomSubFrags(mol, atom);
        let fragNot = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryAtomSubFragsNot(mol, atom);
        this.inputCharges.setValue(_util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(chg) ? chg.join(',') : '');
        this.optAromatic.setSelectedIndex(arom == null ? 0 : arom ? 1 : 2);
        this.optUnsaturated.setSelectedIndex(unsat == null ? 0 : unsat ? 1 : 2);
        this.chkNotElements.elInput.checked = _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.isBlank(elem) && _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(elemNot);
        this.inputElements.setValue(_util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(elem) ? elem.join(',') : _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(elemNot) ? elemNot.join(',') : '');
        this.chkNotRingSizes.elInput.checked = _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.isBlank(ringsz) && _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(ringszNot);
        this.inputRingSizes.setValue(_util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(ringsz) ? ringsz.join(',') : _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(ringszNot) ? ringszNot.join(',') : '');
        this.optRingBlock.setSelectedIndex(ringblk == null ? 0 : ringblk ? 1 : 2);
        this.inputNumRings.setValue(_util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(nring) ? nring.join(',') : '');
        this.inputRingBonds.setValue(_util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(rbc) ? rbc.join(',') : '');
        this.inputAdjacency.setValue(_util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(adj) ? adj.join(',') : '');
        this.inputBondSums.setValue(_util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(bond) ? bond.join(',') : '');
        this.inputValences.setValue(_util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(val) ? val.join(',') : '');
        this.inputHydrogens.setValue(_util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(hyd) ? hyd.join(',') : '');
        this.inputIsotopes.setValue(_util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(iso) ? iso.join(',') : '');
    }
    setupBond() {
        const { mol, bond } = this;
        let ringsz = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryBondRingSizes(mol, bond);
        let ringszNot = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryBondRingSizesNot(mol, bond);
        let ringblk = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryBondRingBlock(mol, bond);
        let nring = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryBondNumRings(mol, bond);
        let order = _mol_QueryUtil__WEBPACK_IMPORTED_MODULE_0__.QueryUtil.queryBondOrders(mol, bond);
        this.chkNotRingSizes.elInput.checked = _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.isBlank(ringsz) && _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(ringszNot);
        this.inputRingSizes.setValue(_util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(ringsz) ? ringsz.join(',') : _util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(ringszNot) ? ringszNot.join(',') : '');
        this.optRingBlock.setSelectedIndex(ringblk == null ? 0 : ringblk ? 1 : 2);
        this.inputNumRings.setValue(_util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(nring) ? nring.join(',') : '');
        this.inputOrders.setValue(_util_Vec__WEBPACK_IMPORTED_MODULE_4__.Vec.notBlank(order) ? order.join(',') : '');
    }
    splitStrings(str) {
        let list = [];
        if (str)
            for (let bit of str.split(/[\s\,\;]+/))
                if (bit)
                    list.push(bit);
        return list.length ? list : null;
    }
    splitNumbers(str) {
        let list = [];
        if (str)
            for (let bit of str.split(/[\s\,\;]+/)) {
                if (bit.startsWith('+'))
                    bit = bit.substring(1);
                let num = parseInt(bit);
                if (!isNaN(num))
                    list.push(num);
            }
        return list.length ? list : null;
    }
}


/***/ }),

/***/ "./src/sketcher/Sketcher.ts":
/*!**********************************!*\
  !*** ./src/sketcher/Sketcher.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Sketcher: () => (/* binding */ Sketcher)
/* harmony export */ });
/* harmony import */ var _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/CoordUtil */ "./src/mol/CoordUtil.ts");
/* harmony import */ var _io_DataSheetStream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../io/DataSheetStream */ "./src/io/DataSheetStream.ts");
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../io/MoleculeStream */ "./src/io/MoleculeStream.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mol/PolymerBlock */ "./src/mol/PolymerBlock.ts");
/* harmony import */ var _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../mol/SketchUtil */ "./src/mol/SketchUtil.ts");
/* harmony import */ var _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../gfx/ArrangeMolecule */ "./src/gfx/ArrangeMolecule.ts");
/* harmony import */ var _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../gfx/DrawMolecule */ "./src/gfx/DrawMolecule.ts");
/* harmony import */ var _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../gfx/MetaVector */ "./src/gfx/MetaVector.ts");
/* harmony import */ var _gfx_Rendering__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../gfx/Rendering */ "./src/gfx/Rendering.ts");
/* harmony import */ var _ui_ButtonView__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ui/ButtonView */ "./src/ui/ButtonView.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _CommandBank__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./CommandBank */ "./src/sketcher/CommandBank.ts");
/* harmony import */ var _ContextSketch__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ContextSketch */ "./src/sketcher/ContextSketch.ts");
/* harmony import */ var _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./DrawCanvas */ "./src/sketcher/DrawCanvas.ts");
/* harmony import */ var _EditAtom__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./EditAtom */ "./src/sketcher/EditAtom.ts");
/* harmony import */ var _EditBond__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./EditBond */ "./src/sketcher/EditBond.ts");
/* harmony import */ var _EditPolymer__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./EditPolymer */ "./src/sketcher/EditPolymer.ts");
/* harmony import */ var _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./MoleculeActivity */ "./src/sketcher/MoleculeActivity.ts");
/* harmony import */ var _TemplateBank__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./TemplateBank */ "./src/sketcher/TemplateBank.ts");
/* harmony import */ var _ToolBank__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./ToolBank */ "./src/sketcher/ToolBank.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};























class Sketcher extends _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DrawCanvas {
    constructor() {
        super();
        this.plugins = {};
        this.inDialog = false;
        this.initialFocus = true;
        this.useToolBank = true;
        this.lowerToolBank = false;
        this.useCommandBank = true;
        this.lowerCommandBank = false;
        this.useTemplateBank = true;
        this.lowerTemplateBank = false;
        this.debugOutput = undefined;
        this.beenSetup = false;
        this.undoStack = [];
        this.redoStack = [];
        this.fadeWatermark = 0;
        this.toolView = null;
        this.commandView = null;
        this.templateView = null;
        this.proxyClip = null;
        this.proxyMenu = null;
    }
    setSize(width, height) {
        this.width = width;
        this.height = height;
    }
    defineMolecule(mol, withAutoScale = true, withStashUndo = false, keepSelect = false) {
        if (mol.compareTo(this.mol) == 0)
            return;
        if (withStashUndo)
            this.stashUndo();
        this.stopTemplateFusion();
        this.mol = mol.clone();
        if (this.callbackChangeMolecule)
            this.callbackChangeMolecule(this.mol);
        this.guidelines = [];
        for (let n = 1; n <= this.mol.numAtoms; n++) {
            for (let sprout of _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_6__.SketchUtil.guidelineSprouts(this.mol, n))
                this.guidelines.push(sprout);
        }
        if (!this.beenSetup)
            return;
        if (!keepSelect) {
            this.currentAtom = this.currentBond = 0;
            this.selectedMask = null;
        }
        this.stereo = null;
        this.hoverAtom = 0;
        this.hoverBond = 0;
        if (!withAutoScale)
            this.renderMolecule();
        else
            this.autoScale();
    }
    defineClipboard(proxy) {
        this.proxyClip = proxy;
    }
    defineContext(proxy) {
        this.proxyMenu = proxy;
    }
    defineMoleculeString(molsk, withAutoScale, withStashUndo) {
        this.defineMolecule(_mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.fromString(molsk), withAutoScale, withStashUndo);
    }
    defineRenderPolicy(policy) {
        this.policy = policy;
        this.pointScale = policy.data.pointScale;
    }
    defineBackground(borderCol, borderRad, bgCol) {
        if (borderCol != null)
            this.border = borderCol;
        if (borderRad != null)
            this.borderRadius = borderRad;
        if (bgCol != null)
            this.background = bgCol;
    }
    clearMolecule() { this.defineMolecule(new _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule(), true, true); }
    getMolecule() { return this.mol.clone(); }
    setup(callback) {
        this.beenSetup = true;
        if (this.mol == null)
            this.mol = new _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule();
        if (this.policy == null) {
            this.policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_10__.RenderPolicy.defaultColourOnWhite();
            this.pointScale = this.policy.data.pointScale;
        }
        this.layoutMolecule();
        this.centreAndShrink();
        this.redrawMetaVector();
        if (callback)
            callback();
    }
    setupAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => this.setup(() => resolve()));
        });
    }
    render(parent) {
        super.render(parent);
        this.centreAndShrink();
        this.redraw();
        let reserveHeight = 0;
        if (this.useCommandBank) {
            this.commandView = new _ui_ButtonView__WEBPACK_IMPORTED_MODULE_11__.ButtonView(_ui_ButtonView__WEBPACK_IMPORTED_MODULE_11__.ButtonViewPosition.Bottom, 0, 0, this.width, this.height);
            if (this.lowerCommandBank)
                this.commandView.lowerBank();
            this.commandView.setHasBigButtons(false);
            this.commandView.pushBank(new _CommandBank__WEBPACK_IMPORTED_MODULE_14__.CommandBank(this));
            this.commandView.render(this.container);
            reserveHeight = this.commandView.height;
        }
        if (this.useToolBank) {
            this.toolView = new _ui_ButtonView__WEBPACK_IMPORTED_MODULE_11__.ButtonView(_ui_ButtonView__WEBPACK_IMPORTED_MODULE_11__.ButtonViewPosition.Left, 0, 0, this.width, this.height - reserveHeight);
            if (this.lowerToolBank)
                this.toolView.lowerBank();
            this.toolView.setHasBigButtons(false);
            this.toolView.pushBank(new _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBank(this));
            this.toolView.render(this.container);
        }
        if (this.useTemplateBank) {
            this.templateView = new _ui_ButtonView__WEBPACK_IMPORTED_MODULE_11__.ButtonView(_ui_ButtonView__WEBPACK_IMPORTED_MODULE_11__.ButtonViewPosition.Right, 0, 0, this.width, this.height - reserveHeight);
            if (this.lowerTemplateBank)
                this.templateView.lowerBank();
            this.templateView.setHasBigButtons(true);
            this.templateView.pushBank(new _TemplateBank__WEBPACK_IMPORTED_MODULE_21__.TemplateBank(this, null));
            this.templateView.render(this.container);
        }
        this.container.onClick((event) => this.mouseClick(event));
        this.container.onDblClick((event) => this.mouseDoubleClick(event));
        this.container.onMouseDown((event) => this.mouseDown(event));
        this.container.onMouseUp((event) => this.mouseUp(event));
        this.container.onMouseOver((event) => this.mouseOver(event));
        this.container.onMouseLeave((event) => this.mouseOut(event));
        this.container.onMouseMove((event) => this.mouseMove(event));
        this.container.onKeyPress((event) => this.keyPressed(event));
        this.container.onKeyDown((event) => this.keyDown(event));
        this.container.onKeyUp((event) => this.keyUp(event));
        this.container.onTouchStart((event) => this.touchStart(event));
        this.container.onTouchMove((event) => this.touchMove(event));
        this.container.onTouchCancel((event) => this.touchCancel(event));
        this.container.onTouchEnd((event) => this.touchEnd(event));
        this.contentDOM.onContextMenu((event) => this.contextMenu(event));
        this.container.el.addEventListener('dragover', (event) => {
            event.stopPropagation();
            event.preventDefault();
            event.dataTransfer.dropEffect = 'copy';
        });
        this.container.el.addEventListener('drop', (event) => {
            event.stopPropagation();
            event.preventDefault();
            this.dropInto(event.dataTransfer);
        });
        if (this.initialFocus)
            this.grabFocus();
    }
    get decoration() { return this.viewOpt.decoration; }
    set decoration(decoration) { if (this.viewOpt.decoration != decoration) {
        this.viewOpt.decoration = decoration;
        this.renderMolecule();
    } }
    get showOxState() { return this.viewOpt.showOxState; }
    set showOxState(showOxState) { if (this.viewOpt.showOxState != showOxState) {
        this.viewOpt.showOxState = showOxState;
        this.renderMolecule();
    } }
    get showQuery() { return this.viewOpt.showQuery; }
    set showQuery(showQuery) { if (this.viewOpt.showQuery != showQuery) {
        this.viewOpt.showQuery = showQuery;
        this.renderMolecule();
    } }
    get showArtifacts() { return this.viewOpt.showArtifacts; }
    set showArtifacts(showArtifacts) { if (this.viewOpt.showArtifacts != showArtifacts) {
        this.viewOpt.showArtifacts = showArtifacts;
        this.renderMolecule();
    } }
    changeSize(width, height) {
        if (width == this.width && height == this.height)
            return;
        this.width = width;
        this.height = height;
        for (let widget of [this.container, this.canvasUnder, this.canvasMolecule, this.canvasOver]) {
            widget.css({ 'width': `${width}px`, 'height': `${height}px` });
        }
        for (let btnv of [this.commandView, this.toolView, this.templateView])
            if (btnv) {
                btnv.setParentSize(width, height);
                btnv.refreshBank();
            }
        this.autoScale();
    }
    showMessage(msg, isError = false) {
        let watermark = ++this.fadeWatermark;
        this.divMessage.css({ 'color': isError ? '#FF0000' : '#008000' });
        this.divMessage.setText(msg);
        let szLeft = (this.toolView == null ? 0 : this.toolView.width) + 2;
        let szRight = (this.templateView == null ? 0 : this.templateView.width) + 2;
        let szBottom = (this.commandView == null ? 0 : this.commandView.height) + 2;
        this.divMessage.css({ 'left': szLeft + 'px' });
        this.divMessage.css({ 'width': (this.width - szLeft - szRight) + 'px' });
        this.divMessage.css({ 'height': (this.height - szBottom) + 'px' });
        window.setTimeout(() => {
            if (watermark == this.fadeWatermark)
                this.divMessage.setText('');
        }, 5000);
    }
    clearMessage() {
        if (this.divMessage.getText() == '')
            return;
        this.fadeWatermark++;
        this.divMessage.setText('');
    }
    autoScale() {
        this.pointScale = this.policy.data.pointScale;
        this.layoutMolecule();
        this.centreAndShrink();
        this.redrawMetaVector();
        this.layoutTemplatePerm();
        this.delayedRedraw();
    }
    anySelected() {
        if (this.selectedMask == null)
            return false;
        for (let n = 0; n < this.selectedMask.length; n++)
            if (this.selectedMask[n])
                return true;
        return false;
    }
    setSelected(atom, sel) {
        if (this.selectedMask == null) {
            this.selectedMask = new Array(this.mol.numAtoms);
            for (let n = this.selectedMask.length - 1; n >= 0; n--)
                this.selectedMask[n] = false;
        }
        while (this.selectedMask.length < this.mol.numAtoms) {
            this.selectedMask.push(false);
        }
        this.selectedMask[atom - 1] = sel;
        this.delayedRedraw();
    }
    changeCurrentAtom(atom) {
        if (this.currentAtom == atom)
            return;
        this.currentAtom = atom;
        this.currentBond = 0;
        this.delayedRedraw();
    }
    changeCurrentBond(bond) {
        if (this.currentBond == bond)
            return;
        this.currentBond = bond;
        this.currentAtom = 0;
        this.delayedRedraw();
    }
    clearSubject() {
        if (this.currentAtom == 0 && this.currentBond == 0 && _util_Vec__WEBPACK_IMPORTED_MODULE_13__.Vec.allFalse(this.selectedMask))
            return;
        this.currentAtom = 0;
        this.currentBond = 0;
        this.selectedMask = _util_Vec__WEBPACK_IMPORTED_MODULE_13__.Vec.booleanArray(false, this.mol.numAtoms);
        this.delayedRedraw();
    }
    setState(state, withStashUndo = true) {
        this.stopTemplateFusion();
        if (state.mol != null)
            this.defineMolecule(state.mol.clone(), false, withStashUndo, true);
        if (state.currentAtom >= 0)
            this.currentAtom = state.currentAtom;
        if (state.currentBond >= 0)
            this.currentBond = state.currentBond;
        if (state.selectedMask != null)
            this.selectedMask = state.selectedMask == null ? null : state.selectedMask.slice(0);
        this.delayedRedraw();
    }
    stashUndo() {
        let state = this.getState();
        this.undoStack.push(state);
        while (this.undoStack.length > Sketcher.UNDO_SIZE) {
            this.undoStack.splice(0, 1);
        }
        this.redoStack = [];
    }
    setPermutations(perms) {
        this.templatePerms = perms;
        this.pickTemplatePermutation(0);
        this.fusionBank = new _TemplateBank__WEBPACK_IMPORTED_MODULE_21__.FusionBank(this);
        this.templateView.pushBank(this.fusionBank);
        if (this.mol.numAtoms == 0)
            this.centreAndShrink();
    }
    stopTemplateFusion() {
        if (this.fusionBank != null)
            this.templateView.popBank();
    }
    clearPermutations() {
        if (this.templatePerms == null)
            return;
        this.templatePerms = null;
        this.delayedRedraw();
        this.fusionBank = null;
    }
    templateAccept() {
        let mol = _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.fromString(this.templatePerms[this.currentPerm].mol);
        this.templateView.popBank();
        this.defineMolecule(mol, false, true, false);
    }
    templateRotate(dir) {
        let idx = (this.currentPerm + dir) % this.templatePerms.length;
        if (idx < 0)
            idx += this.templatePerms.length;
        this.pickTemplatePermutation(idx);
    }
    canUndo() { return this.undoStack.length > 0; }
    canRedo() { return this.redoStack.length > 0; }
    performUndo() {
        if (this.undoStack.length == 0)
            return;
        let state = this.getState();
        this.redoStack.push(state);
        this.setState(this.undoStack.pop(), false);
    }
    performRedo() {
        if (this.redoStack.length == 0)
            return;
        let state = this.getState();
        this.undoStack.push(state);
        this.setState(this.redoStack.pop(), false);
    }
    performCopy(mol) {
        if (!mol)
            mol = this.getMolecule();
        if (this.proxyClip)
            this.proxyClip.setString(mol.toString());
    }
    performCopySelection(andCut) {
        new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.MoleculeActivity(this.getState(), andCut ? _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.ActivityType.Cut : _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.ActivityType.Copy, {}, this).execute();
    }
    performPaste() {
        if (this.proxyClip && this.proxyClip.canAlwaysGet()) {
            let txt = this.proxyClip.getString();
            this.pasteText(txt);
        }
    }
    performActivity(activity, param = {}) {
        new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.MoleculeActivity(this.getState(), activity, param, this).execute();
    }
    zoom(mag) {
        let cx = 0.5 * this.width, cy = 0.5 * this.height;
        let newScale = Math.min(10 * this.policy.data.pointScale, Math.max(0.1 * this.policy.data.pointScale, this.pointScale * mag));
        if (newScale == this.pointScale)
            return;
        this.offsetX = cx - (newScale / this.pointScale) * (cx - this.offsetX);
        this.offsetY = cy - (newScale / this.pointScale) * (cy - this.offsetY);
        this.pointScale = newScale;
        this.layoutMolecule();
        this.redrawMetaVector();
        this.layoutTemplatePerm();
        this.delayedRedraw();
    }
    editCurrent() {
        if (this.currentBond > 0)
            this.editBond(this.currentBond);
        else
            this.editAtom(this.currentAtom);
    }
    pasteText(str) {
        const pasteLocal = () => {
            let mol = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_3__.MoleculeStream.readUnknown(str);
            if (!mol) {
                let ds = _io_DataSheetStream__WEBPACK_IMPORTED_MODULE_1__.DataSheetStream.readXML(str);
                if (ds) {
                    outer: for (let r = 0; r < ds.numRows; r++)
                        for (let c = 0; c < ds.numCols; c++)
                            if (ds.colType(c) == "molecule" && ds.notNull(r, c)) {
                                mol = ds.getMolecule(r, c);
                                break outer;
                            }
                }
            }
            if (mol != null)
                this.pasteMolecule(mol);
            else
                alert('Text from clipboard is not a valid molecule.');
        };
        if (this.plugins.callbackSpecialPaste) {
            (() => __awaiter(this, void 0, void 0, function* () {
                let mol = yield this.plugins.callbackSpecialPaste(str);
                if (mol)
                    this.pasteMolecule(mol);
                else
                    pasteLocal();
            }))();
        }
        else
            pasteLocal();
    }
    pasteMolecule(mol) {
        if (this.mol.numAtoms == 0) {
            this.defineMolecule(mol, true, true, true);
            return;
        }
        let molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.MoleculeActivity(this.getState(), _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.ActivityType.QueryPaste, { qmol: mol });
        molact.execute();
        if (molact.output.mol) {
            this.defineMolecule(molact.output.mol, false, true, true);
            return;
        }
        let param = { fragNative: mol.toString() };
        new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.MoleculeActivity(this.getState(), _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.ActivityType.TemplateFusion, param, this).execute();
    }
    pickTemplatePermutation(idx) {
        let perm = this.templatePerms[idx];
        this.currentPerm = idx;
        this.layoutTemplatePerm();
        this.delayedRedraw();
    }
    performPolymerBlock(atoms) {
        let dlg = new _EditPolymer__WEBPACK_IMPORTED_MODULE_19__.EditPolymer(this.mol, atoms, this.proxyClip, () => {
            if (this.mol.compareTo(dlg.mol) != 0)
                this.defineMolecule(dlg.mol, false, true, true);
            dlg.close();
        });
        dlg.callbackClose = () => {
            this.inDialog = false;
            this.grabFocus();
        };
        this.inDialog = true;
        dlg.open();
    }
    grabFocus() {
        this.container.grabFocus();
    }
    hasFocus() {
        return this.container.hasFocus();
    }
    centreAndShrink() {
        if (this.mol.numAtoms == 0 || this.layout == null) {
            this.offsetX = 0.5 * this.width;
            this.offsetY = 0.5 * this.height;
            this.pointScale = this.policy.data.pointScale;
            return;
        }
        let bounds = this.layout.determineBoundary(0);
        let limW = this.width - 6, limH = this.height - 6;
        let natW = bounds[2] - bounds[0], natH = bounds[3] - bounds[1];
        let scale = 1;
        if (natW > limW) {
            let down = limW / natW;
            scale *= down;
            natW *= down;
            natH *= down;
        }
        if (natH > limH) {
            let down = limH / natH;
            scale *= down;
            natW *= down;
            natH *= down;
        }
        if (scale < 1) {
            this.pointScale *= scale;
            this.layout.offsetEverything(this.offsetX * scale, this.offsetY * scale);
            this.layout.scaleEverything(scale);
            bounds = this.layout.determineBoundary(0);
        }
        let dx = 0.5 * (limW - natW) - bounds[0], dy = 0.5 * (limH - natH) - bounds[1];
        this.offsetX += dx;
        this.offsetY += dy;
        this.layout.offsetEverything(dx, dy);
    }
    layoutTemplatePerm() {
        if (this.currentPerm < 0 || this.templatePerms == null)
            return;
        let perm = this.templatePerms[this.currentPerm];
        let tpolicy = new _gfx_Rendering__WEBPACK_IMPORTED_MODULE_10__.RenderPolicy(this.policy.data);
        tpolicy.data.foreground = 0x808080;
        tpolicy.data.atomCols = tpolicy.data.atomCols.slice(0);
        for (let n in tpolicy.data.atomCols)
            tpolicy.data.atomCols[n] = 0x808080;
        let effects = new _gfx_Rendering__WEBPACK_IMPORTED_MODULE_10__.RenderEffects();
        let layout = new _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_7__.ArrangeMolecule(_mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.fromString(perm.display), this, tpolicy, effects);
        layout.arrange();
        perm.metavec = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.MetaVector();
        new _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_8__.DrawMolecule(layout, perm.metavec).draw();
    }
    renderMolecule() {
        this.layoutMolecule();
        this.redrawMetaVector();
        this.delayedRedraw();
    }
    pickObjectCanvas(x, y) {
        if (this.layout == null)
            return 0;
        if (this.toolView != null) {
            let pos1 = this.container.offset(), pos2 = this.toolView.contentDOM.offset();
            if (this.toolView.withinOutline(x + pos1.x - pos2.x, y + pos1.y - pos2.y))
                return null;
        }
        if (this.commandView != null) {
            let pos1 = this.container.offset(), pos2 = this.commandView.contentDOM.offset();
            if (this.commandView.withinOutline(x + pos1.x - pos2.x, y + pos1.y - pos2.y))
                return null;
        }
        if (this.templateView != null) {
            let pos1 = this.container.offset(), pos2 = this.templateView.contentDOM.offset();
            if (this.templateView.withinOutline(x + pos1.x - pos2.x, y + pos1.y - pos2.y))
                return null;
        }
        return super.pickObjectCanvas(x, y);
    }
    updateHoverCursor(x, y) {
        let tool = this.toolView ? this.toolView.selectedButton : '';
        let toolApplies = tool && tool != _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.Pan && tool != _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.Rotate;
        let mouseObj = 0;
        if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.None && toolApplies) {
            mouseObj = this.pickObject(x, y);
        }
        let mouseAtom = mouseObj > 0 ? mouseObj : 0, mouseBond = mouseObj < 0 ? -mouseObj : 0;
        let abbrevThen = this.hoverAtom > 0 && _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.hasAbbrev(this.mol, this.hoverAtom) ? this.hoverAtom : 0;
        let abbrevNow = mouseAtom > 0 && _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.hasAbbrev(this.mol, mouseAtom) ? mouseAtom : 0;
        if (mouseAtom != this.hoverAtom || mouseBond != this.hoverBond) {
            this.hoverAtom = mouseAtom;
            this.hoverBond = mouseBond;
            if (abbrevThen != abbrevNow) {
                this.layoutMolecule();
                this.redrawMetaVector();
            }
            this.delayedRedraw();
        }
    }
    determineDragGuide(order) {
        if (this.opAtom == 0 || this.mol.atomAdjCount(this.opAtom) == 0) {
            let g = {
                atom: this.opAtom,
                orders: [order],
                x: [],
                y: [],
                sourceX: this.opAtom == 0 ? this.clickX : this.angToX(this.mol.atomX(this.opAtom)),
                sourceY: this.opAtom == 0 ? this.clickY : this.angToY(this.mol.atomY(this.opAtom)),
                destX: [],
                destY: []
            };
            let mx = this.opAtom == 0 ? this.xToAng(this.clickX) : this.mol.atomX(this.opAtom);
            let my = this.opAtom == 0 ? this.yToAng(this.clickY) : this.mol.atomY(this.opAtom);
            for (let n = 0; n < 12; n++) {
                let theta = _util_util__WEBPACK_IMPORTED_MODULE_12__.TWOPI * n / 12;
                let dx = _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.IDEALBOND * Math.cos(theta), dy = _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.IDEALBOND * Math.sin(theta);
                g.x.push(mx + dx);
                g.y.push(my + dy);
                g.destX.push(g.sourceX + dx * this.pointScale);
                g.destY.push(g.sourceY - dy * this.pointScale);
            }
            return [g];
        }
        if (this.guidelines == null)
            return null;
        let best = null, single = null;
        for (let n = 0; n < this.guidelines.length; n++) {
            let g = this.guidelines[n];
            if (g.atom != this.opAtom)
                continue;
            if (g.orders.indexOf(order) >= 0) {
                best = g;
                break;
            }
            if (g.orders.indexOf(1) >= 0)
                single = g;
        }
        if (best == null)
            best = single;
        if (best == null)
            return [];
        let g = (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.clone)(best);
        g.sourceX = this.angToX(this.mol.atomX(g.atom));
        g.sourceY = this.angToY(this.mol.atomY(g.atom));
        g.destX = [];
        g.destY = [];
        for (let n = 0; n < g.x.length; n++) {
            g.destX.push(this.angToX(g.x[n]));
            g.destY.push(this.angToY(g.y[n]));
        }
        return [g];
    }
    determineMoveGuide() {
        let subj = this.subjectAtoms(false, true);
        if (subj.length == 0 || subj.length == this.mol.numAtoms)
            return null;
        let guides = [];
        for (let n = 0; n < this.guidelines.length; n++) {
            let g = this.guidelines[n];
            if (g.orders.indexOf(1) < 0 || subj.indexOf(g.atom) >= 0)
                continue;
            g = (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.clone)(g);
            g.sourceX = this.angToX(this.mol.atomX(g.atom));
            g.sourceY = this.angToY(this.mol.atomY(g.atom));
            g.destX = [];
            g.destY = [];
            for (let i = 0; i < g.x.length; i++) {
                g.destX.push(this.angToX(g.x[i]));
                g.destY.push(this.angToY(g.y[i]));
            }
            guides.push(g);
        }
        return guides;
    }
    editAtom(atom) {
        let dlg = new _EditAtom__WEBPACK_IMPORTED_MODULE_17__.EditAtom(this.mol, atom, this.proxyClip, () => {
            if (this.mol.compareTo(dlg.mol) != 0)
                this.defineMolecule(dlg.mol, false, true, true);
            dlg.close();
        });
        dlg.callbackClose = () => {
            this.inDialog = false;
            this.grabFocus();
        };
        if (atom == 0 && this.mol.numAtoms > 0) {
            let box = this.mol.boundary();
            dlg.newX = box.maxX() + _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.IDEALBOND;
            dlg.newY = box.midY();
        }
        this.inDialog = true;
        dlg.open();
    }
    editBond(bond) {
        if (bond == 0)
            return;
        let dlg = new _EditBond__WEBPACK_IMPORTED_MODULE_18__.EditBond(this.mol, bond, this.proxyClip, () => {
            if (this.mol.compareTo(dlg.mol) != 0)
                this.defineMolecule(dlg.mol, false, true, true);
            dlg.close();
        });
        dlg.callbackClose = () => {
            this.inDialog = false;
            this.grabFocus();
        };
        this.inDialog = true;
        dlg.open();
    }
    hitArrowKey(dx, dy) {
        let watermark = ++this.cursorWatermark;
        this.cursorDX += dx;
        this.cursorDY += dy;
        setTimeout(() => {
            if (watermark == this.cursorWatermark)
                this.cursorJumpDirection();
        }, 100);
    }
    cursorJumpDirection() {
        let theta = Math.atan2(this.cursorDY, this.cursorDX);
        if (this.currentAtom > 0)
            this.jumpFromCurrentAtom(theta);
        else if (this.currentBond > 0)
            this.jumpFromCurrentBond(theta);
        else
            this.jumpFromNowhere(theta);
        this.cursorDX = 0;
        this.cursorDY = 0;
        this.cursorWatermark = 0;
    }
    jumpFromCurrentAtom(theta) {
        let adj = this.mol.atomAdjList(this.currentAtom);
        let closest = 0, closestDelta = Number.MAX_VALUE;
        for (let a of adj) {
            let dx = this.mol.atomX(a) - this.mol.atomX(this.currentAtom), dy = this.mol.atomY(a) - this.mol.atomY(this.currentAtom);
            let adjTheta = Math.atan2(dy, dx), delta = Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_12__.angleDiff)(adjTheta, theta));
            if (delta < 35.0 * _util_util__WEBPACK_IMPORTED_MODULE_12__.DEGRAD && delta < closestDelta)
                [closest, closestDelta] = [a, delta];
        }
        if (closest > 0) {
            this.changeCurrentBond(this.mol.findBond(this.currentAtom, closest));
            return;
        }
        let best = 0, bestScore = Number.MIN_VALUE;
        for (let n = 1; n <= this.mol.numAtoms; n++)
            if (n != this.currentAtom && adj.indexOf(n) < 0) {
                let dx = this.mol.atomX(n) - this.mol.atomX(this.currentAtom), dy = this.mol.atomY(n) - this.mol.atomY(this.currentAtom);
                let adjTheta = Math.atan2(dy, dx), delta = Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_12__.angleDiff)(adjTheta, theta));
                if (delta > 45.0 * _util_util__WEBPACK_IMPORTED_MODULE_12__.DEGRAD)
                    continue;
                let cosdelta = Math.cos(delta);
                let score = Math.pow(cosdelta, 2) / ((0,_util_util__WEBPACK_IMPORTED_MODULE_12__.norm2_xy)(dx, dy) + 0.001);
                if (score > bestScore)
                    [best, bestScore] = [n, score];
            }
        if (best > 0)
            this.changeCurrentAtom(best);
    }
    jumpFromCurrentBond(theta) {
        let [bfr, bto] = this.mol.bondFromTo(this.currentBond);
        let bondTheta = Math.atan2(this.mol.atomY(bto) - this.mol.atomY(bfr), this.mol.atomX(bto) - this.mol.atomX(bfr));
        if (Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_12__.angleDiff)(theta, bondTheta)) < 50.0 * _util_util__WEBPACK_IMPORTED_MODULE_12__.DEGRAD)
            this.changeCurrentAtom(bto);
        if (Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_12__.angleDiff)(theta, bondTheta + Math.PI)) < 50.0 * _util_util__WEBPACK_IMPORTED_MODULE_12__.DEGRAD)
            this.changeCurrentAtom(bfr);
    }
    jumpFromNowhere(theta) {
        if (this.mol.numAtoms == 0)
            return;
        if (this.mol.numAtoms == 1) {
            this.changeCurrentAtom(1);
            return;
        }
        let cx = 0, cy = 0;
        for (let n = 1; n <= this.mol.numAtoms; n++) {
            cx += this.mol.atomX(n);
            cy += this.mol.atomY(n);
        }
        let inv = 1.0 / this.mol.numAtoms;
        cx *= inv;
        cy *= inv;
        let best = 0, bestScore = Number.MIN_VALUE;
        for (let n = 1; n <= this.mol.numAtoms; n++) {
            let dx = this.mol.atomX(n) - cx, dy = this.mol.atomY(n) - cy, atheta = Math.atan2(dy, dx);
            let cosdelta = Math.cos(Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_12__.angleDiff)(theta + Math.PI, atheta)));
            let score = cosdelta * (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.norm_xy)(dx, dy);
            if (score > bestScore)
                [best, bestScore] = [n, score];
        }
        if (best > 0)
            this.changeCurrentAtom(best);
    }
    createRing(rsz, aromatic) {
        const { mol } = this;
        let rx = null, ry = null;
        if (this.currentAtom > 0) {
            let dx = 0, dy = 0, adj = mol.atomAdjList(this.currentAtom);
            let x0 = mol.atomX(this.currentAtom), y0 = mol.atomY(this.currentAtom);
            for (let a of adj) {
                dx -= mol.atomX(a) - x0;
                dy -= mol.atomY(a) - y0;
            }
            if (Math.abs(dx) < 0.001 && Math.abs(dy) < 0.001) {
                if (adj.length >= 2) {
                    let theta = adj.map((a) => Math.atan2(mol.atomY(a) - x0, mol.atomX(a) - y0));
                    _util_Vec__WEBPACK_IMPORTED_MODULE_13__.Vec.sort(theta);
                    let best = Number.POSITIVE_INFINITY;
                    for (let n = 0; n < theta.length; n++) {
                        let th = (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.angleDiff)(theta[(n + 1) % theta.length], theta[n]);
                        let lx = Math.cos(th), ly = Math.sin(th), score = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_0__.CoordUtil.congestionPoint(mol, x0 + lx, y0 + ly);
                        if (score < best)
                            [best, dx, dy] = [score, lx, ly];
                    }
                }
                else
                    [dx, dy] = [1, 0];
            }
            [rx, ry] = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_6__.SketchUtil.proposeAtomRing(this.mol, rsz, this.currentAtom, dx, dy);
        }
        else if (this.currentBond > 0) {
            let a1 = mol.bondFrom(this.currentBond), a2 = mol.bondTo(this.currentBond);
            let x1 = mol.atomX(a1), y1 = mol.atomY(a1), x2 = mol.atomX(a2), y2 = mol.atomY(a2);
            let cx = 0.5 * (x1 + x2), cy = 0.5 * (y1 + y2), ox = y1 - y2, oy = x2 - x1;
            let [dx, dy] = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_0__.CoordUtil.congestionPoint(mol, cx - ox, cy - oy) < _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_0__.CoordUtil.congestionPoint(mol, cx + ox, cy + oy) ? [-ox, -oy] : [ox, oy];
            [rx, ry] = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_6__.SketchUtil.proposeBondRing(this.mol, rsz, this.currentBond, dx, dy);
        }
        else {
            let x = 0, y = 0;
            if (mol.numAtoms > 0) {
                let bound = mol.boundary();
                [x, y] = [bound.maxX() + _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.IDEALBOND, bound.midY()];
            }
            [rx, ry] = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_6__.SketchUtil.proposeNewRing(this.mol, rsz, x, y, 0, -1, false);
        }
        if (!rx)
            return;
        let param = {
            ringX: rx,
            ringY: ry,
            aromatic: aromatic
        };
        let molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.MoleculeActivity(this.getState(), _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.ActivityType.Ring, param, this);
        molact.execute();
    }
    ctrlArrowKey(dx, dy) {
        let watermark = ++this.cursorWatermark;
        this.cursorDX += dx;
        this.cursorDY += dy;
        setTimeout(() => {
            if (watermark == this.cursorWatermark) {
                this.sproutDirection(this.cursorDX, this.cursorDY);
                this.cursorDX = this.cursorDY = 0;
            }
        }, 100);
    }
    sproutDirection(deltaX, deltaY) {
        new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.MoleculeActivity(this.getState(), _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.ActivityType.SproutDirection, { deltaX, deltaY }, this).execute();
    }
    launchComposeFragment() {
        const { callbackComposeFragment } = this.plugins;
        if (!callbackComposeFragment || this.inDialog)
            return;
        callbackComposeFragment(this);
    }
    mouseClick(event) {
        event.stopPropagation();
        this.grabFocus();
        return false;
    }
    mouseDoubleClick(event) {
        event.stopPropagation();
        event.preventDefault();
        if (this.toolView.selectedButton != _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.Arrow)
            return;
        let xy = (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.eventCoords)(event, this.container);
        let clickObj = this.pickObject(xy[0], xy[1]);
        if (clickObj > 0) {
            let atom = clickObj;
            this.editAtom(atom);
        }
        else {
            let bond = -clickObj;
            this.editBond(bond);
        }
        return false;
    }
    mouseDown(event) {
        event.stopPropagation();
        event.preventDefault();
        this.clearMessage();
        if (event.ctrlKey && !event.shiftKey && !event.altKey) {
            this.contextMenu(event);
            return;
        }
        let [x, y] = (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.eventCoords)(event, this.container);
        this.interactStart(x, y, event.shiftKey, event.ctrlKey, event.altKey);
        return false;
    }
    mouseUp(event) {
        event.stopPropagation();
        let [x, y] = (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.eventCoords)(event, this.container);
        this.interactEnd(x, y);
        return false;
    }
    mouseOver(event) {
        event.stopPropagation();
        let [x, y] = (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.eventCoords)(event, this.container);
        this.updateHoverCursor(x, y);
        this.updateLasso(x, y);
        return false;
    }
    mouseOut(event) {
        event.stopPropagation();
        let [x, y] = (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.eventCoords)(event, this.container);
        this.updateHoverCursor(x, y);
        this.updateLasso(x, y);
        return false;
    }
    mouseMove(event) {
        event.stopPropagation();
        let [x, y] = (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.eventCoords)(event, this.container);
        this.updateHoverCursor(x, y);
        if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.None)
            return;
        this.interactDrag(x, y);
        return false;
    }
    keyPressed(event) {
    }
    keyDown(event) {
        let key = event.key;
        if (key == "Escape") {
            for (let view of [this.templateView, this.commandView, this.toolView])
                if (view != null && view.stackSize > 1) {
                    view.popBank();
                    event.preventDefault();
                    event.stopPropagation();
                    return;
                }
        }
        let mod = (event.shiftKey ? 'S' : '') + (event.ctrlKey || event.metaKey ? 'C' : '') + (event.altKey ? 'A' : '');
        let nomod = !event.shiftKey && !event.ctrlKey && !event.altKey && !event.metaKey;
        if (this.toolView != null && this.toolView.topBank.claimKey(event)) { }
        else if (this.commandView != null && this.commandView.topBank.claimKey(event)) { }
        else if (this.templateView != null && this.templateView.topBank.claimKey(event)) { }
        else if (key == "Enter")
            this.editCurrent();
        else if (key == "ArrowLeft" && nomod)
            this.hitArrowKey(-1, 0);
        else if (key == "ArrowRight" && nomod)
            this.hitArrowKey(1, 0);
        else if (key == "ArrowUp" && nomod)
            this.hitArrowKey(0, 1);
        else if (key == "ArrowDown" && nomod)
            this.hitArrowKey(0, -1);
        else if (key == 'z' && mod == 'C')
            this.performUndo();
        else if (key == 'Z' && mod == 'SC')
            this.performRedo();
        else if (key == 'z' && nomod)
            this.toolView.cycleSelected(-1);
        else if (key == 'x' && nomod)
            this.toolView.cycleSelected(1);
        else if (key == '#' && mod == 'SC')
            this.createRing(3, false);
        else if (key == '$' && mod == 'SC')
            this.createRing(4, false);
        else if (key == '%' && mod == 'SC')
            this.createRing(5, false);
        else if (key == '^' && mod == 'SC')
            this.createRing(6, false);
        else if (key == '&' && mod == 'SC')
            this.createRing(7, false);
        else if (key == '3' && mod == 'CA')
            this.createRing(3, true);
        else if (key == '4' && mod == 'CA')
            this.createRing(4, true);
        else if (key == '5' && mod == 'CA')
            this.createRing(5, true);
        else if (key == '6' && mod == 'CA')
            this.createRing(6, true);
        else if (key == '7' && mod == 'CA')
            this.createRing(7, true);
        else if (key == 'c' && mod == 'C' && this.proxyClip)
            this.proxyClip.triggerCopy(false);
        else if (key == 'x' && mod == 'C' && this.proxyClip)
            this.proxyClip.triggerCopy(true);
        else if (key == 'v' && mod == 'C' && this.proxyClip && this.proxyClip.canAlwaysGet())
            this.proxyClip.triggerPaste();
        else if (key == "ArrowLeft" && mod == 'C')
            this.ctrlArrowKey(-1, 0);
        else if (key == "ArrowRight" && mod == 'C')
            this.ctrlArrowKey(1, 0);
        else if (key == "ArrowUp" && mod == 'C')
            this.ctrlArrowKey(0, 1);
        else if (key == "ArrowDown" && mod == 'C')
            this.ctrlArrowKey(0, -1);
        else if (key == '1' && mod == 'C')
            this.sproutDirection(-1, -1);
        else if (key == '2' && mod == 'C')
            this.sproutDirection(0, -1);
        else if (key == '3' && mod == 'C')
            this.sproutDirection(1, -1);
        else if (key == '4' && mod == 'C')
            this.sproutDirection(-1, 0);
        else if (key == '6' && mod == 'C')
            this.sproutDirection(1, 0);
        else if (key == '7' && mod == 'C')
            this.sproutDirection(-1, 1);
        else if (key == '8' && mod == 'C')
            this.sproutDirection(0, 1);
        else if (key == '9' && mod == 'C')
            this.sproutDirection(1, 1);
        else if (key == '`' && nomod)
            this.launchComposeFragment();
        else
            return;
        event.preventDefault();
        event.stopPropagation();
    }
    keyUp(event) {
    }
    touchStart(event) {
        let [x, y] = (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.eventCoords)(event.touches[0], this.container);
        if (this.pickObjectCanvas(x, y) == null)
            return;
        this.interactStart(x, y, event.shiftKey, event.ctrlKey, event.altKey);
        event.preventDefault();
    }
    touchMove(event) {
        if (this.dragType != _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.None) {
            let [x, y] = (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.eventCoords)(event.touches[0], this.container);
            this.interactDrag(x, y);
        }
        event.preventDefault();
    }
    touchCancel(event) {
    }
    touchEnd(event) {
        if (this.dragType != _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.None) {
            let [x, y] = [this.mouseX, this.mouseY];
            this.interactEnd(x, y);
            event.preventDefault();
        }
    }
    mouseWheel(event) {
    }
    contextMenu(event) {
        event.preventDefault();
        event.stopPropagation();
        this.dragType = _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.None;
        if (!this.proxyMenu)
            return;
        let [x, y] = (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.eventCoords)(event, this.container);
        let clickObj = this.pickObject(x, y);
        if (clickObj > 0)
            this.changeCurrentAtom(clickObj);
        else if (clickObj < 0)
            this.changeCurrentBond(-clickObj);
        let state = this.getState();
        let ctx = new _ContextSketch__WEBPACK_IMPORTED_MODULE_15__.ContextSketch(state, this, this.proxyClip);
        let menu = ctx.populate();
        this.proxyMenu.openContextMenu(menu, event);
    }
    interactStart(x, y, shiftKey, ctrlKey, altKey) {
        this.dragType = _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Press;
        this.opBudged = false;
        this.dragGuides = null;
        this.mouseX = x;
        this.mouseY = y;
        this.clickX = x;
        this.clickY = y;
        let clickObj = this.pickObject(x, y);
        this.opAtom = clickObj > 0 ? clickObj : 0;
        this.opBond = clickObj < 0 ? -clickObj : 0;
        this.opShift = shiftKey;
        this.opCtrl = ctrlKey;
        this.opAlt = altKey;
        let tool = '';
        if (this.toolView != null)
            tool = this.toolView.selectedButton;
        if (tool == _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.Arrow) {
            if (!this.opShift && !this.opCtrl && !this.opAlt) {
                this.dragType = _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Press;
            }
            else if (!this.opShift && !this.opCtrl && this.opAlt) {
                this.dragType = _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Pan;
            }
            else if (!this.opShift && this.opCtrl && this.opAlt) {
                this.dragType = _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Zoom;
            }
        }
        else if (tool == _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.Rotate) {
            this.dragType = _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Rotate;
            this.toolRotateIncr = this.opShift ? 0 : 15 * _util_util__WEBPACK_IMPORTED_MODULE_12__.DEGRAD;
        }
        else if (tool == _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.Pan) {
            this.dragType = _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Pan;
        }
        else if (tool == _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.Drag) {
            this.dragType = _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Move;
            if (this.opAtom > 0)
                this.dragGuides = this.determineMoveGuide();
            this.delayedRedraw();
        }
        else if (tool == _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.Erasor) {
            this.dragType = _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Erasor;
            this.lassoX = [x];
            this.lassoY = [y];
            this.lassoMask = [];
        }
        else if (tool == _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.RingAliph) {
            this.dragType = _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Ring;
            this.toolRingArom = false;
            this.toolRingFreeform = this.opShift;
        }
        else if (tool == _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.RingArom) {
            this.dragType = _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Ring;
            this.toolRingArom = true;
            this.toolRingFreeform = this.opShift;
        }
        else if (tool == _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.AtomPlus) {
            this.dragType = _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Charge;
            this.toolChargeDelta = 1;
        }
        else if (tool == _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.AtomMinus) {
            this.dragType = _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Charge;
            this.toolChargeDelta = -1;
        }
        else if (tool.startsWith(_ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.BondPfx)) {
            this.dragType = _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Bond;
            this.toolBondOrder = 1;
            this.toolBondType = _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.BONDTYPE_NORMAL;
            if (tool == _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.BondOrder0)
                this.toolBondOrder = 0;
            else if (tool == _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.BondOrder2)
                this.toolBondOrder = 2;
            else if (tool == _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.BondOrder3)
                this.toolBondOrder = 3;
            else if (tool == _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.BondUnknown)
                this.toolBondType = _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.BONDTYPE_UNKNOWN;
            else if (tool == _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.BondInclined)
                this.toolBondType = _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.BONDTYPE_INCLINED;
            else if (tool == _ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.BondDeclined)
                this.toolBondType = _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.BONDTYPE_DECLINED;
            if (this.opBond > 0) {
                let [bfr, bto] = this.mol.bondFromTo(this.opBond), inPoly = false;
                for (let poly of new _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__.PolymerBlock(this.mol).getUnits()) {
                    let in1 = poly.atoms.includes(bfr), in2 = poly.atoms.includes(bto);
                    if ((in1 && !in2) || (in2 && !in1)) {
                        inPoly = true;
                        break;
                    }
                }
                if (inPoly) {
                    this.toolBondOrder = 0;
                    this.toolBondType = _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.BONDTYPE_NORMAL;
                }
            }
            if (this.opBond == 0)
                this.dragGuides = this.determineDragGuide(this.toolBondOrder);
        }
        else if (tool.startsWith(_ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.ElementPfx)) {
            this.dragType = _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Atom;
            this.toolAtomSymbol = tool.substring(_ToolBank__WEBPACK_IMPORTED_MODULE_22__.ToolBankItem.ElementPfx.length);
            this.dragGuides = this.determineDragGuide(1);
        }
    }
    interactDrag(x, y) {
        if (!this.opBudged) {
            let dx = x - this.clickX, dy = y - this.clickY;
            if (dx * dx + dy * dy > 2 * 2)
                this.opBudged = true;
        }
        if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Press && this.opAtom == 0 && this.opBond == 0 && this.opBudged) {
            this.dragType = _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Lasso;
            this.lassoX = [x];
            this.lassoY = [y];
            this.lassoMask = [];
        }
        if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Lasso || this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Erasor) {
            this.updateLasso(x, y);
        }
        else if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Pan) {
            let dx = x - this.mouseX, dy = y - this.mouseY;
            if (dx != 0 || dy != 0) {
                this.offsetX += dx;
                this.offsetY += dy;
                this.layout.offsetEverything(dx, dy);
                this.metavec.transformPrimitives(dx, dy, 1, 1);
                if (this.currentPerm >= 0 && this.templatePerms != null) {
                    let perm = this.templatePerms[this.currentPerm];
                    perm.metavec.transformPrimitives(dx, dy, 1, 1);
                }
                this.delayedRedraw();
            }
            this.mouseX = x;
            this.mouseY = y;
        }
        else if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Zoom) {
            let dy = y - this.mouseY;
            if (dy != 0) {
                dy = Math.min(50, Math.max(-50, dy));
                let newScale = this.pointScale * (1 - dy * 0.01);
                newScale = Math.min(10, Math.max(0.1, newScale));
                let newOX = this.clickX - (newScale / this.pointScale) * (this.clickX - this.offsetX);
                let newOY = this.clickY - (newScale / this.pointScale) * (this.clickY - this.offsetY);
                this.pointScale = newScale;
                this.offsetX = newOX;
                this.offsetY = newOY;
                this.delayedRedraw();
            }
            this.mouseX = x;
            this.mouseY = y;
        }
        else if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Rotate ||
            this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Move ||
            this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Atom ||
            this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Bond ||
            this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Ring) {
            this.mouseX = x;
            this.mouseY = y;
            this.delayedRedraw();
        }
    }
    interactEnd(x, y) {
        if (this.opBudged)
            this.interactEndDrag(x, y);
        else
            this.interactEndClick(x, y);
        this.dragType = _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.None;
        this.lassoX = null;
        this.lassoY = null;
        this.lassoMask = null;
        this.dragGuides = null;
        this.delayedRedraw();
    }
    interactEndClick(x, y) {
        let clickObj = this.pickObject(x, y);
        let clickAtom = clickObj > 0 ? clickObj : 0, clickBond = clickObj < 0 ? -clickObj : 0;
        if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Press) {
            if (!this.opShift && !this.opCtrl && !this.opAlt) {
                if (clickAtom == 0 && clickBond == 0) {
                    if (_util_Vec__WEBPACK_IMPORTED_MODULE_13__.Vec.anyTrue(this.selectedMask))
                        this.selectedMask = null;
                    else if (this.currentAtom > 0)
                        this.currentAtom = 0;
                    else if (this.currentBond > 0)
                        this.currentBond = 0;
                }
                else if (clickAtom != this.currentAtom || clickBond != this.currentBond) {
                    this.currentAtom = clickAtom;
                    this.currentBond = clickBond;
                }
                else if (clickAtom == 0 && clickBond == 0 && this.anySelected()) {
                    this.selectedMask = null;
                }
            }
            else if (this.opShift && !this.opCtrl && !this.opAlt) {
                if (clickAtom > 0)
                    this.setSelected(clickAtom, !this.getSelected(clickAtom));
            }
        }
        else if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Move) {
            if (clickObj == 0) {
                if (_util_Vec__WEBPACK_IMPORTED_MODULE_13__.Vec.anyTrue(this.selectedMask))
                    this.selectedMask = null;
                else if (this.currentAtom > 0)
                    this.currentAtom = 0;
                else if (this.currentBond > 0)
                    this.currentBond = 0;
            }
        }
        else if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Erasor) {
            if (this.opAtom > 0 || this.opBond > 0) {
                let state = Object.assign(Object.assign({}, this.getState()), { 'currentAtom': this.opAtom, 'currentBond': this.opBond, 'selectedMask': [] });
                let molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.MoleculeActivity(state, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.ActivityType.Delete, {}, this);
                molact.execute();
            }
        }
        else if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Atom) {
            let element = this.toolAtomSymbol;
            if (element == 'A') {
                let dlg = new _EditAtom__WEBPACK_IMPORTED_MODULE_17__.EditAtom(this.mol, this.opAtom, this.proxyClip, () => {
                    let autoscale = this.mol.numAtoms == 0;
                    if (this.mol.compareTo(dlg.mol) != 0)
                        this.defineMolecule(dlg.mol, autoscale, true);
                    dlg.close();
                });
                if (this.opAtom == 0) {
                    dlg.newX = this.xToAng(this.clickX);
                    dlg.newY = this.yToAng(this.clickY);
                }
                dlg.callbackClose = () => {
                    this.inDialog = false;
                    this.grabFocus();
                };
                this.inDialog = true;
                dlg.open();
            }
            else if (element) {
                let param = { element, keepAbbrev: true };
                if (this.opAtom == 0) {
                    let x = this.xToAng(this.clickX), y = this.yToAng(this.clickY);
                    if (this.mol.numAtoms == 0) {
                        this.offsetX = this.clickX;
                        this.offsetY = this.clickY;
                        x = 0;
                        y = 0;
                    }
                    param.positionX = x;
                    param.positionY = y;
                }
                let state = Object.assign(Object.assign({}, this.getState()), { currentAtom: this.opAtom, currentBond: 0, selectedMask: null });
                let molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.MoleculeActivity(state, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.ActivityType.Element, param, this);
                molact.execute();
            }
        }
        else if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Charge) {
            if (this.opAtom > 0 || this.opBond > 0) {
                let state = Object.assign(Object.assign({}, this.getState()), { currentAtom: this.opAtom, currentBond: this.opBond, selectedMask: null });
                let molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.MoleculeActivity(state, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.ActivityType.Charge, { delta: this.toolChargeDelta }, this);
                molact.execute();
            }
        }
        else if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Bond) {
            let state = Object.assign(Object.assign({}, this.getState()), { currentAtom: this.opAtom, currentBond: this.opBond, selectedMask: null });
            let molact;
            if (this.toolBondType == _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.BONDTYPE_NORMAL)
                molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.MoleculeActivity(state, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.ActivityType.BondOrder, { order: this.toolBondOrder }, this);
            else
                molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.MoleculeActivity(state, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.ActivityType.BondType, { type: this.toolBondType }, this);
            molact.execute();
        }
    }
    interactEndDrag(x, y) {
        if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Lasso) {
            if (this.lassoX.length >= 2) {
                this.calculateLassoMask();
                for (let n = 1; n <= this.mol.numAtoms; n++)
                    if (this.getLassoed(n) && !this.getSelected(n))
                        this.setSelected(n, true);
            }
            this.lassoX = null;
            this.lassoY = null;
            this.lassoMask = null;
            this.delayedRedraw();
        }
        else if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Erasor) {
            let any = false;
            for (let n = 0; n < this.lassoMask.length; n++)
                if (this.lassoMask[n]) {
                    any = true;
                    break;
                }
            if (any) {
                let state = Object.assign(Object.assign({}, this.getState()), { currentAtom: 0, currentBond: 0, selectedMask: this.lassoMask });
                let molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.MoleculeActivity(state, _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.ActivityType.Delete, {}, this);
                molact.execute();
            }
        }
        else if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Rotate) {
            let [x0, y0, theta, magnitude] = this.determineDragTheta();
            let degrees = -theta * _util_util__WEBPACK_IMPORTED_MODULE_12__.RADDEG;
            let mx = this.xToAng(x0), my = this.yToAng(y0);
            let molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.MoleculeActivity(this.getState(), _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.ActivityType.Rotate, { theta: degrees, centreX: mx, centreY: my }, this);
            molact.execute();
        }
        else if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Move) {
            let [dx, dy] = this.determineMoveDelta();
            let scale = this.pointScale;
            let molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.MoleculeActivity(this.getState(), _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.ActivityType.Move, { refAtom: this.opAtom, deltaX: dx / scale, deltaY: -dy / scale }, this);
            molact.execute();
        }
        else if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Ring) {
            let [ringX, ringY] = this.determineFauxRing();
            if (ringX != null) {
                let param = {
                    ringX: ringX,
                    ringY: ringY,
                    aromatic: this.toolRingArom
                };
                let molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.MoleculeActivity(this.getState(), _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.ActivityType.Ring, param, this);
                molact.execute();
            }
        }
        else if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Atom && this.opAtom > 0) {
            let x2 = this.mouseX, y2 = this.mouseY;
            let snapTo = this.snapToGuide(x2, y2);
            if (snapTo != null)
                [x2, y2] = snapTo;
            let param = {
                order: 1,
                type: _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.BONDTYPE_NORMAL,
                element: this.toolAtomSymbol,
                x1: this.mol.atomX(this.opAtom),
                y1: this.mol.atomY(this.opAtom),
                x2: this.xToAng(x2),
                y2: this.yToAng(y2)
            };
            if (this.toolAtomSymbol == 'A')
                param.element = window.prompt('Enter element symbol:', '');
            if (param.element != '') {
                let molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.MoleculeActivity(this.getState(), _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.ActivityType.BondAtom, param, this);
                molact.execute();
            }
        }
        else if (this.dragType == _DrawCanvas__WEBPACK_IMPORTED_MODULE_16__.DraggingTool.Bond) {
            let x2 = this.mouseX, y2 = this.mouseY;
            let snapTo = this.snapToGuide(x2, y2);
            if (snapTo != null) {
                [x2, y2] = snapTo;
                if (this.opBond > 0) {
                    let toObj = this.pickObject(x2, y2, { noAtoms: true });
                    if (toObj < 0) {
                        this.connectPolymerBlock(this.opBond, -toObj);
                        return;
                    }
                }
            }
            let param = {
                order: this.toolBondOrder,
                type: this.toolBondType,
                element: 'C',
                x1: this.opAtom == 0 ? this.xToAng(this.clickX) : this.mol.atomX(this.opAtom),
                y1: this.opAtom == 0 ? this.yToAng(this.clickY) : this.mol.atomY(this.opAtom),
                x2: this.xToAng(x2),
                y2: this.yToAng(y2)
            };
            let molact = new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.MoleculeActivity(this.getState(), _MoleculeActivity__WEBPACK_IMPORTED_MODULE_20__.ActivityType.BondAtom, param, this);
            molact.execute();
        }
    }
    dropInto(transfer) {
        let items = transfer.items, files = transfer.files;
        const SUFFIXES = ['.el', '.mol'];
        const MIMES = ['text/plain', 'chemical/x-sketchel', 'x-mdl-molfile'];
        for (let n = 0; n < items.length; n++) {
            if (items[n].kind == 'string' && MIMES.indexOf(items[n].type) >= 0) {
                items[n].getAsString((str) => {
                    let mol = _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.fromString(str);
                    if (mol != null) {
                        this.defineMolecule(mol, true, true, true);
                    }
                    else
                        console.log('Dragged data is not a SketchEl molecule: ' + str);
                });
                return;
            }
        }
        for (let n = 0; n < files.length; n++) {
            for (let sfx of SUFFIXES)
                if (files[n].name.endsWith(sfx)) {
                    let reader = new FileReader();
                    reader.onload = (event) => {
                        let str = reader.result;
                        let mol = _io_MoleculeStream__WEBPACK_IMPORTED_MODULE_3__.MoleculeStream.readUnknown(str.toString());
                        if (mol != null) {
                            this.defineMolecule(mol, true, true);
                        }
                        else
                            console.log('Dragged file is not a recognised molecule: ' + str);
                    };
                    reader.readAsText(files[n]);
                    return;
                }
        }
    }
    connectPolymerBlock(bond1, bond2) {
        let [atomIn1, atomOut1] = this.mol.bondFromTo(bond1), [atomIn2, atomOut2] = this.mol.bondFromTo(bond2);
        let state = this.getState();
        let polymer = new _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__.PolymerBlock(state.mol);
        let poly1 = null, poly2 = null;
        let highName = 0;
        for (let poly of polymer.getUnits()) {
            if (!poly1 || poly.atoms.length < poly1.atoms.length) {
                let ina = poly.atoms.includes(atomIn1), inb = poly.atoms.includes(atomOut1);
                if (ina && !inb)
                    poly1 = poly;
                else if (inb && !ina)
                    [poly1, atomIn1, atomOut1] = [poly, atomOut1, atomIn1];
            }
            if (!poly2 || poly.atoms.length < poly2.atoms.length) {
                let ina = poly.atoms.includes(atomIn2), inb = poly.atoms.includes(atomOut2);
                if (ina && !inb)
                    poly2 = poly;
                else if (inb && !ina)
                    [poly2, atomIn2, atomOut2] = [poly, atomOut2, atomIn2];
            }
            for (let nameList of poly.atomName.values())
                highName = Math.max(highName, _util_Vec__WEBPACK_IMPORTED_MODULE_13__.Vec.max(nameList));
        }
        if (!poly1 || !poly2)
            return false;
        let name1 = _util_Vec__WEBPACK_IMPORTED_MODULE_13__.Vec.first(poly1.atomName.get(atomIn1));
        if (!name1) {
            name1 = ++highName;
            poly1.atomName.set(atomIn1, [name1]);
        }
        let name2 = _util_Vec__WEBPACK_IMPORTED_MODULE_13__.Vec.first(poly2.atomName.get(atomIn2));
        if (!name2) {
            name2 = ++highName;
            poly2.atomName.set(atomIn2, [name2]);
        }
        poly1.bondIncl.set(bond1, _util_Vec__WEBPACK_IMPORTED_MODULE_13__.Vec.append(poly1.bondIncl.get(bond1), name2));
        poly2.bondIncl.set(bond2, _util_Vec__WEBPACK_IMPORTED_MODULE_13__.Vec.append(poly2.bondIncl.get(bond2), name1));
        polymer.rewriteMolecule();
        this.setState(state);
    }
}
Sketcher.UNDO_SIZE = 20;


/***/ }),

/***/ "./src/sketcher/TemplateBank.ts":
/*!**************************************!*\
  !*** ./src/sketcher/TemplateBank.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FusionBank: () => (/* binding */ FusionBank),
/* harmony export */   TemplateBank: () => (/* binding */ TemplateBank)
/* harmony export */ });
/* harmony import */ var _data_AbbrevContainer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/AbbrevContainer */ "./src/data/AbbrevContainer.ts");
/* harmony import */ var _io_DataSheetStream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../io/DataSheetStream */ "./src/io/DataSheetStream.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../gfx/ArrangeMeasurement */ "./src/gfx/ArrangeMeasurement.ts");
/* harmony import */ var _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../gfx/ArrangeMolecule */ "./src/gfx/ArrangeMolecule.ts");
/* harmony import */ var _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../gfx/DrawMolecule */ "./src/gfx/DrawMolecule.ts");
/* harmony import */ var _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../gfx/MetaVector */ "./src/gfx/MetaVector.ts");
/* harmony import */ var _gfx_Rendering__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../gfx/Rendering */ "./src/gfx/Rendering.ts");
/* harmony import */ var _ui_ButtonBank__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ui/ButtonBank */ "./src/ui/ButtonBank.ts");
/* harmony import */ var _MoleculeActivity__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./MoleculeActivity */ "./src/sketcher/MoleculeActivity.ts");
/* harmony import */ var _reswmk_img_actions_GenericAccept_svg__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @reswmk/img/actions/GenericAccept.svg */ "./res/img/actions/GenericAccept.svg");
/* harmony import */ var _reswmk_img_actions_TemplatePrev_svg__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @reswmk/img/actions/TemplatePrev.svg */ "./res/img/actions/TemplatePrev.svg");
/* harmony import */ var _reswmk_img_actions_TemplateNext_svg__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @reswmk/img/actions/TemplateNext.svg */ "./res/img/actions/TemplateNext.svg");










class TemplateBank extends _ui_ButtonBank__WEBPACK_IMPORTED_MODULE_8__.ButtonBank {
    constructor(owner, group) {
        super();
        this.owner = owner;
        this.group = group;
        this.subgroups = null;
        this.templates = null;
    }
    init() {
        let policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_7__.RenderPolicy.defaultBlackOnWhite();
        policy.data.pointScale = 10;
        policy.data.lineSize *= 1.5;
        policy.data.bondSep *= 1.5;
        if (TemplateBank.resourceData.length == 0)
            this.loadResourceData();
        if (this.group == null)
            this.prepareSubGroups();
        else
            this.prepareTemplates();
    }
    update() {
        if (this.subgroups == null && this.templates == null)
            return;
        this.buttons = [];
        if (this.group == null)
            this.populateGroups();
        else
            this.populateTemplates();
    }
    populateGroups() {
        let groups = this.subgroups.groups, titles = this.subgroups.titles, preview = this.subgroups.preview;
        for (let n = 0; n < groups.length; n++) {
            this.buttons.push({ id: groups[n], metavec: preview[n], helpText: titles[n] });
        }
    }
    populateTemplates() {
        let names = this.templates.names, abbrev = this.templates.abbrev, mnemonic = this.templates.mnemonic, preview = this.templates.preview;
        for (let n = 0; n < names.length; n++) {
            this.buttons.push({ id: n.toString(), metavec: preview[n], helpText: names[n] });
        }
    }
    hitButton(id) {
        if (this.group == null) {
            this.buttonView.pushBank(new TemplateBank(this.owner, id));
        }
        else {
            let idx = parseInt(id);
            let param = { fragNative: this.templates.molecules[idx] };
            new _MoleculeActivity__WEBPACK_IMPORTED_MODULE_9__.MoleculeActivity(this.owner.getState(), _MoleculeActivity__WEBPACK_IMPORTED_MODULE_9__.ActivityType.TemplateFusion, param, this.owner).execute();
        }
    }
    loadResourceData() {
        for (let key of _data_AbbrevContainer__WEBPACK_IMPORTED_MODULE_0__.AbbrevContainer.getTemplateKeys()) {
            let dsstr = _data_AbbrevContainer__WEBPACK_IMPORTED_MODULE_0__.AbbrevContainer.getTemplateData(key);
            TemplateBank.resourceList.push(key);
            TemplateBank.resourceData.push(_io_DataSheetStream__WEBPACK_IMPORTED_MODULE_1__.DataSheetStream.readXML(dsstr));
        }
    }
    prepareSubGroups() {
        this.subgroups = { groups: TemplateBank.resourceList, titles: [], preview: [] };
        let sz = this.buttonView.idealSize, msz = 0.5 * (sz - 2);
        let policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_7__.RenderPolicy.defaultBlackOnWhite();
        policy.data.pointScale = 10;
        let effects = new _gfx_Rendering__WEBPACK_IMPORTED_MODULE_7__.RenderEffects();
        let measure = new _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_3__.OutlineMeasurement(0, 0, policy.data.pointScale);
        for (let ds of TemplateBank.resourceData) {
            this.subgroups.titles.push(ds.title);
            let colMol = ds.firstColOfType("molecule");
            let metavec = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_6__.MetaVector();
            for (let n = 0, idx = 0; idx < 4 && n < ds.numRows; n++) {
                let mol = ds.getMolecule(n, colMol);
                if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.isBlank(mol))
                    continue;
                let layout = new _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.ArrangeMolecule(mol, measure, policy, effects);
                layout.arrange();
                let col = (idx % 2), row = Math.floor(idx / 2);
                layout.squeezeInto(1 + col * msz, 1 + row * msz, msz, msz, 1);
                new _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_5__.DrawMolecule(layout, metavec).draw();
                idx++;
            }
            metavec.width = sz;
            metavec.height = sz;
            this.subgroups.preview.push(metavec);
        }
        this.buttonView.refreshBank();
    }
    prepareTemplates() {
        let idx = TemplateBank.resourceList.indexOf(this.group);
        let ds = TemplateBank.resourceData[idx];
        this.templates = { molecules: [], names: [], abbrev: [], mnemonic: [], preview: [] };
        let sz = this.buttonView.idealSize;
        let policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_7__.RenderPolicy.defaultBlackOnWhite();
        policy.data.pointScale = 12;
        let effects = new _gfx_Rendering__WEBPACK_IMPORTED_MODULE_7__.RenderEffects();
        let measure = new _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_3__.OutlineMeasurement(0, 0, policy.data.pointScale);
        let colMol = ds.findColByName('Molecule');
        let colName = ds.findColByName('Name');
        let colAbbrev = ds.findColByName('Abbrev');
        let colMnemonic = ds.findColByName('Mnemonic');
        for (let n = 0; n < ds.numRows; n++) {
            let mol = ds.getMolecule(n, colMol);
            this.templates.molecules.push(mol.toString());
            this.templates.names.push(ds.getString(n, colName));
            this.templates.abbrev.push(ds.getString(n, colAbbrev));
            this.templates.mnemonic.push(ds.getString(n, colMnemonic));
            let layout = new _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.ArrangeMolecule(mol, measure, policy, effects);
            layout.arrange();
            layout.squeezeInto(0, 0, sz, sz, 2);
            let metavec = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_6__.MetaVector();
            new _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_5__.DrawMolecule(layout, metavec).draw();
            metavec.width = sz;
            metavec.height = sz;
            this.templates.preview.push(metavec);
        }
        this.buttonView.refreshBank();
    }
}
TemplateBank.resourceList = [];
TemplateBank.resourceData = [];



class FusionBank extends _ui_ButtonBank__WEBPACK_IMPORTED_MODULE_8__.ButtonBank {
    constructor(owner) {
        super();
        this.owner = owner;
    }
    update() {
        this.buttons = [];
        this.buttons.push({ id: 'accept', svg: _reswmk_img_actions_GenericAccept_svg__WEBPACK_IMPORTED_MODULE_10__["default"], helpText: 'Apply this template.' });
        this.buttons.push({ id: 'prev', svg: _reswmk_img_actions_TemplatePrev_svg__WEBPACK_IMPORTED_MODULE_11__["default"], helpText: 'Show previous fusion option.' });
        this.buttons.push({ id: 'next', svg: _reswmk_img_actions_TemplateNext_svg__WEBPACK_IMPORTED_MODULE_12__["default"], helpText: 'Show next fusion option.' });
    }
    hitButton(id) {
        if (id == 'accept')
            this.owner.templateAccept();
        else if (id == 'prev')
            this.owner.templateRotate(-1);
        else if (id == 'next')
            this.owner.templateRotate(1);
    }
    claimKey(event) {
        if (event.key == "Enter") {
            this.owner.templateAccept();
            return true;
        }
        else if (event.key == "ArrowLeft" || event.key == "ArrowUp") {
            this.owner.templateRotate(-1);
            return true;
        }
        else if (event.key == "ArrowRight" || event.key == "ArrowDown") {
            this.owner.templateRotate(1);
            return true;
        }
        return false;
    }
    bankClosed() {
        this.owner.clearPermutations();
    }
}


/***/ }),

/***/ "./src/sketcher/TemplateFusion.ts":
/*!****************************************!*\
  !*** ./src/sketcher/TemplateFusion.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FusionPermutation: () => (/* binding */ FusionPermutation),
/* harmony export */   TemplateFusion: () => (/* binding */ TemplateFusion)
/* harmony export */ });
/* harmony import */ var _mol_BondArtifact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/BondArtifact */ "./src/mol/BondArtifact.ts");
/* harmony import */ var _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mol/CoordUtil */ "./src/mol/CoordUtil.ts");
/* harmony import */ var _mol_Graph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/Graph */ "./src/mol/Graph.ts");
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mol/PolymerBlock */ "./src/mol/PolymerBlock.ts");
/* harmony import */ var _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../mol/SketchUtil */ "./src/mol/SketchUtil.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");









class FusionPermutation {
    constructor() {
        this.attdist = 0;
        this.guided = false;
        this.bridged = false;
        this.scoreModifier = 0;
        this.chainSelect = 0;
    }
}
class TemplateFusion {
    constructor(mol, templ, abbrev) {
        this.mol = mol;
        this.templ = templ;
        this.abbrev = abbrev;
        this.perms = [];
        this.numAttach = 0;
        this.withGuideOnly = false;
        this.guidetempl = null;
        this.guideidx = [];
        this.guideadj = [];
        this.timeLimit = 5.0;
        let artif1 = new _mol_BondArtifact__WEBPACK_IMPORTED_MODULE_0__.BondArtifact(mol), artif2 = new _mol_BondArtifact__WEBPACK_IMPORTED_MODULE_0__.BondArtifact(templ);
        artif2.harmoniseNumbering(artif1);
        artif2.rewriteMolecule();
        let poly1 = new _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__.PolymerBlock(mol), poly2 = new _mol_PolymerBlock__WEBPACK_IMPORTED_MODULE_5__.PolymerBlock(templ);
        poly2.harmoniseNumbering(poly1);
        poly2.rewriteMolecule();
        this.huntForGuides();
    }
    permuteNone() {
        let numAttach = 0;
        let oldmol = this.mol.clone(), newmol = this.templ.clone();
        if (oldmol.numAtoms > 0) {
            let oldbox = oldmol.boundary(), newbox = newmol.boundary();
            let dx = oldbox.maxX() + 1 - newbox.minX();
            let dy = 0.5 * (oldbox.minY() + oldbox.maxY()) - 0.5 * (newbox.minY() + newbox.maxY());
            _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.translateMolecule(newmol, dx, dy);
        }
        else {
            let newbox = newmol.boundary();
            _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.translateMolecule(newmol, -newbox.midX(), -newbox.midY());
        }
        let oldbox = oldmol.boundary(), newbox = newmol.boundary();
        let cx = newbox.midX(), cy = newbox.midY();
        let ROTN = [0, 30, 45, 60, 90, 120, 135, 150, 180, 210, 225, 240, 270, 300, 315, 330];
        duplicate: for (let n = 0; n < ROTN.length; n++) {
            let rotmol = newmol.clone();
            _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.rotateMolecule(rotmol, -ROTN[n] * _util_util__WEBPACK_IMPORTED_MODULE_7__.DEGRAD, cx, cy);
            for (let i = 0; i < this.perms.length; i++)
                if (_mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.sketchEquivalent(rotmol, this.perms[i].display))
                    continue duplicate;
            let p = new FusionPermutation();
            p.mol = oldmol.clone();
            p.mol.append(rotmol);
            p.display = rotmol;
            p.srcidx = this.sourceIndex(p.mol, oldmol);
            p.attdist = 0;
            p.guided = false;
            this.perms.push(p);
        }
    }
    permuteAtom(atom) {
        this.numAttach = 1;
        let timeStart = new Date().getTime();
        let oldmol = this.mol.clone(), newmol = this.templ.clone();
        let newperms = [];
        if (this.guidetempl != null) {
            let fliptempl = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.mirrorImage(this.guidetempl.clone());
            for (let n = 0; n < this.guideidx.length; n++) {
                if (new Date().getTime() - timeStart > this.timeLimit * 1000)
                    break;
                this.composeGuidedOne(newperms, oldmol, this.guidetempl, atom, this.guideidx[n]);
                this.composeGuidedOne(newperms, oldmol, fliptempl, atom, this.guideidx[n]);
            }
        }
        if (!this.withGuideOnly) {
            let flipmol = newmol.clone();
            _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.mirrorImage(flipmol);
            for (let n = 1; n <= newmol.numAtoms; n++) {
                if (new Date().getTime() - timeStart > this.timeLimit * 1000)
                    break;
                this.composeDirectOne(newperms, oldmol, newmol, atom, n);
                this.composeDirectOne(newperms, oldmol, flipmol, atom, n);
                this.composeBridge(newperms, oldmol, newmol, atom, n);
                this.composeBridge(newperms, oldmol, flipmol, atom, n);
            }
        }
        this.affixRawPermutations(newperms);
    }
    permuteBond(a1, a2) {
        this.numAttach = 2;
        let timeStart = new Date().getTime();
        let oldmol = this.mol.clone(), newmol = this.templ.clone();
        let newperms = [];
        if (this.guidetempl != null) {
            let fliptempl = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.mirrorImage(this.guidetempl.clone());
            for (let i = 0; i < this.guideidx.length; i++) {
                if (new Date().getTime() - timeStart > this.timeLimit * 1000)
                    break;
                let g1 = this.guideidx[i];
                let adj = this.guidetempl.atomAdjList(g1);
                for (let j = 0; j < adj.length; j++) {
                    let g2 = adj[j];
                    this.composeGuidedTwo(newperms, oldmol, this.guidetempl, a1, a2, g1, g2, true);
                    this.composeGuidedTwo(newperms, oldmol, this.guidetempl, a2, a1, g1, g2, true);
                    this.composeGuidedTwo(newperms, oldmol, fliptempl, a1, a2, g1, g2, true);
                    this.composeGuidedTwo(newperms, oldmol, fliptempl, a2, a1, g1, g2, true);
                    this.composeGuidedTwo(newperms, oldmol, this.guidetempl, a1, a2, g1, g2, false);
                    this.composeGuidedTwo(newperms, oldmol, this.guidetempl, a2, a1, g1, g2, false);
                    this.composeGuidedTwo(newperms, oldmol, fliptempl, a1, a2, g1, g2, false);
                    this.composeGuidedTwo(newperms, oldmol, fliptempl, a2, a1, g1, g2, false);
                }
            }
        }
        if (!this.withGuideOnly) {
            let flipmol = newmol.clone();
            _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.mirrorImage(flipmol);
            for (let n = 1; n <= newmol.numBonds; n++) {
                if (new Date().getTime() - timeStart > this.timeLimit * 1000)
                    break;
                let nfr = newmol.bondFrom(n), nto = newmol.bondTo(n);
                this.composeDirectTwo(newperms, oldmol, newmol, a1, a2, nfr, nto);
                this.composeDirectTwo(newperms, oldmol, flipmol, a1, a2, nfr, nto);
                this.composeDirectTwo(newperms, oldmol, newmol, a1, a2, nto, nfr);
                this.composeDirectTwo(newperms, oldmol, flipmol, a1, a2, nto, nfr);
            }
        }
        this.affixRawPermutations(newperms);
    }
    permuteMulti(atoms) {
        this.numAttach = atoms.length;
        let timeStart = new Date().getTime();
        let oldmol = this.mol.clone(), newmol = this.templ.clone();
        let newperms = [];
        if (this.guidetempl != null) {
            let fliptempl = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.mirrorImage(this.guidetempl.clone());
            if (this.guideidx.length == atoms.length) {
                this.composeGuidedMulti(newperms, oldmol, this.guidetempl, atoms, this.guideidx, true);
                this.composeGuidedMulti(newperms, oldmol, fliptempl, atoms, this.guideidx, true);
            }
            if (this.guideadj.length == atoms.length) {
                this.composeGuidedMulti(newperms, oldmol, this.guidetempl, atoms, this.guideadj, false);
                this.composeGuidedMulti(newperms, oldmol, fliptempl, atoms, this.guideadj, false);
            }
        }
        if (!this.withGuideOnly) {
            let flipmol = newmol.clone();
            _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.mirrorImage(flipmol);
            for (let n = 1; n <= newmol.numAtoms; n++) {
                if (new Date().getTime() - timeStart > this.timeLimit * 1000)
                    break;
                this.composeDirectMulti(newperms, oldmol, newmol, atoms, n);
                this.composeDirectMulti(newperms, oldmol, flipmol, atoms, n);
            }
        }
        this.affixRawPermutations(newperms);
    }
    huntForGuides() {
        this.guideidx = [];
        this.guideadj = [];
        for (let n = 1; n <= this.templ.numAtoms; n++)
            if (this.templ.atomElement(n) == 'X' && this.templ.atomAdjCount(n) > 0) {
                this.guideidx.push(n);
                let adj = this.templ.atomAdjList(n);
                for (let i = 0; i < adj.length; i++)
                    if (this.guideadj.indexOf(adj[i]) < 0)
                        this.guideadj.push(adj[i]);
            }
        if (this.guideidx.length > 0) {
            this.guidetempl = this.templ.clone();
            for (let n = this.guideidx.length - 1; n >= 0; n--)
                this.templ.deleteAtomAndBonds(this.guideidx[n]);
        }
    }
    composeDirectOne(list, oldmol, newmol, o1, n1) {
        let otheta = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_6__.SketchUtil.primeDirections(oldmol, o1);
        let ntheta = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_6__.SketchUtil.primeDirections(newmol, n1);
        let ocurrent = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.atomBondAngles(oldmol, o1);
        let ncurrent = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.atomBondAngles(newmol, n1);
        let theta1 = [], theta2 = [], scoreMod = [];
        for (let i = 0; i < ocurrent.length; i++)
            for (let j = 0; j < ntheta.length; j++) {
                theta1.push(ocurrent[i]);
                theta2.push(ntheta[j]);
                scoreMod.push(-51);
            }
        for (let i = 0; i < otheta.length; i++)
            for (let j = 0; j < ncurrent.length; j++) {
                theta1.push(otheta[i]);
                theta2.push(ncurrent[j]);
                scoreMod.push(0);
            }
        for (let i = 0; i < otheta.length; i++)
            for (let j = 0; j < ntheta.length; j++) {
                theta1.push(otheta[i]);
                theta2.push(ntheta[j]);
                scoreMod.push(0);
            }
        let bfs = _mol_Graph__WEBPACK_IMPORTED_MODULE_2__.Graph.fromMolecule(newmol).calculateBFS(0);
        let ox = oldmol.atomX(o1), oy = oldmol.atomY(o1), nx = newmol.atomX(n1), ny = newmol.atomY(n1);
        for (let n = 0; n < theta1.length; n++) {
            let dth = (0,_util_util__WEBPACK_IMPORTED_MODULE_7__.angleDiff)(theta1[n], theta2[n]);
            let frag = newmol.clone();
            _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.translateMolecule(frag, ox - nx, oy - ny);
            _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.rotateMolecule(frag, dth, ox, oy);
            let pmol = oldmol.clone();
            let osz = pmol.numAtoms;
            pmol.append(frag);
            let srcidx = this.sourceIndex(pmol, oldmol);
            _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_6__.SketchUtil.mergeFragmentsMask(pmol, this.asMask(srcidx));
            if (pmol.numAtoms == osz)
                continue;
            let p = new FusionPermutation();
            p.mol = pmol;
            p.display = frag;
            p.srcidx = srcidx;
            p.molidx = [o1];
            p.temidx = [n1];
            p.attdist = bfs[n1 - 1];
            p.guided = false;
            p.scoreModifier = scoreMod[n];
            this.removeExtraGuides(p, oldmol);
            list.push(p);
        }
    }
    composeDirectTwo(list, oldmol, newmol, o1, o2, n1, n2) {
        let oth = Math.atan2(oldmol.atomY(o2) - oldmol.atomY(o1), oldmol.atomX(o2) - oldmol.atomX(o1));
        let nth = Math.atan2(newmol.atomY(n2) - newmol.atomY(n1), newmol.atomX(n2) - newmol.atomX(n1));
        let cx = 0.5 * (oldmol.atomX(o1) + oldmol.atomX(o2)), cy = 0.5 * (oldmol.atomY(o1) + oldmol.atomY(o2));
        let frag = newmol.clone();
        _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.translateMolecule(frag, cx - 0.5 * (newmol.atomX(n1) + newmol.atomX(n2)), cy - 0.5 * (newmol.atomY(n1) + newmol.atomY(n2)));
        _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.rotateMolecule(frag, oth - nth, cx, cy);
        frag.setAtomPos(n1, oldmol.atomX(o1), oldmol.atomY(o1));
        frag.setAtomPos(n2, oldmol.atomX(o2), oldmol.atomY(o2));
        let pmol = oldmol.clone();
        let osz = pmol.numAtoms;
        pmol.append(frag);
        let srcidx = this.sourceIndex(pmol, oldmol);
        _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_6__.SketchUtil.mergeFragmentsMask(pmol, this.asMask(srcidx));
        if (pmol.numAtoms == osz)
            return;
        let bfs = _mol_Graph__WEBPACK_IMPORTED_MODULE_2__.Graph.fromMolecule(newmol).calculateBFS(0);
        let p = new FusionPermutation();
        p.mol = pmol;
        p.display = frag;
        p.srcidx = srcidx;
        p.molidx = [o1, o2];
        p.temidx = [n1, n2];
        p.attdist = Math.min(bfs[n1 - 1], bfs[n2 - 1]);
        p.guided = false;
        this.removeExtraGuides(p, oldmol);
        list.push(p);
    }
    composeDirectMulti(list, oldmol, newmol, oidx, n1) {
        let frag = newmol.clone();
        let x0 = oldmol.atomX(oidx[0]), y0 = oldmol.atomY(oidx[0]);
        _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.translateMolecule(frag, x0 - frag.atomX(n1), y0 - frag.atomY(n1));
        let ox = oldmol.atomX(oidx[1]) - x0, oy = oldmol.atomY(oidx[1]) - y0;
        let otheta = Math.atan2(oy, ox), orad = (0,_util_util__WEBPACK_IMPORTED_MODULE_7__.norm_xy)(ox, oy);
        let bfs = _mol_Graph__WEBPACK_IMPORTED_MODULE_2__.Graph.fromMolecule(newmol).calculateBFS(1);
        let nidx = [];
        for (let n2 = 1; n2 <= frag.numAtoms; n2++)
            if (n1 != n2) {
                let nx = frag.atomX(n2) - frag.atomX(n1), ny = frag.atomY(n2) - frag.atomY(n1), nrad = (0,_util_util__WEBPACK_IMPORTED_MODULE_7__.norm_xy)(nx, ny);
                if (Math.abs(nrad - orad) > 0.1)
                    continue;
                let ntheta = Math.atan2(ny, nx);
                _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.rotateMolecule(frag, otheta - ntheta, x0, y0);
                nidx = [n1, n2];
                for (let i = 2; i < oidx.length; i++) {
                    let hit = false;
                    for (let j = 1; j <= frag.numAtoms; j++)
                        if (nidx.indexOf(j) < 0)
                            if ((0,_util_util__WEBPACK_IMPORTED_MODULE_7__.norm_xy)(oldmol.atomX(oidx[i]) - frag.atomX(j), oldmol.atomY(oidx[i]) - frag.atomY(j)) < 0.1 * 0.1) {
                                hit = true;
                                nidx.push(j);
                                break;
                            }
                    if (!hit)
                        break;
                }
                if (nidx.length < oidx.length)
                    continue;
                let lowbfs = bfs.length;
                for (let n = 0; n < nidx.length; n++)
                    lowbfs = Math.min(lowbfs, bfs[nidx[n] - 1]);
                let dx = 0, dy = 0;
                for (let n = 0; n < oidx.length; n++) {
                    dx += oldmol.atomX(oidx[n]) - frag.atomX(nidx[n]);
                    dy += oldmol.atomY(oidx[n]) - frag.atomY(nidx[n]);
                }
                let invsz = 1.0 / oidx.length;
                dx *= invsz;
                dy *= invsz;
                _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.translateMolecule(frag, dx, dy);
                let pmol = oldmol.clone();
                let osz = pmol.numAtoms;
                pmol.append(frag);
                let srcidx = this.sourceIndex(pmol, oldmol);
                for (let n = 0; n < nidx.length; n++) {
                    let x = pmol.atomX(oidx[n]), y = pmol.atomY(oidx[n]);
                    pmol.setAtomPos(osz + nidx[n], x, y);
                }
                _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_6__.SketchUtil.mergeFragmentsMask(pmol, this.asMask(srcidx));
                if (pmol.numAtoms == osz)
                    continue;
                let p = new FusionPermutation();
                p.mol = pmol;
                p.display = frag.clone();
                p.srcidx = srcidx;
                p.molidx = oidx.slice(0);
                p.temidx = nidx.slice(0);
                p.attdist = Math.min(bfs[n1 - 1], bfs[n2 - 1]);
                p.guided = false;
                this.removeExtraGuides(p, oldmol);
                list.push(p);
            }
    }
    composeBridge(list, oldmol, newmol, o1, n1) {
        let busy1 = oldmol.atomRingBlock(o1) != 0 || oldmol.atomAdjCount(o1) >= 3;
        let busy2 = newmol.atomRingBlock(n1) != 0 || newmol.atomAdjCount(n1) >= 3;
        if (!busy1 || !busy2)
            return;
        let otheta = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_6__.SketchUtil.primeDirections(oldmol, o1);
        let ntheta = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_6__.SketchUtil.primeDirections(newmol, n1);
        let bfs = _mol_Graph__WEBPACK_IMPORTED_MODULE_2__.Graph.fromMolecule(newmol).calculateBFS(0);
        for (let i = 0; i < otheta.length; i++)
            for (let j = 0; j < ntheta.length; j++) {
                let ox = oldmol.atomX(o1), oy = oldmol.atomY(o1), nx = newmol.atomX(n1), ny = newmol.atomY(n1);
                let dx = _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.IDEALBOND * Math.cos(otheta[i]), dy = _mol_Molecule__WEBPACK_IMPORTED_MODULE_3__.Molecule.IDEALBOND * Math.sin(otheta[i]);
                let dth = (0,_util_util__WEBPACK_IMPORTED_MODULE_7__.angleDiff)(otheta[i], Math.PI + ntheta[j]);
                let frag = newmol.clone();
                _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.translateMolecule(frag, ox - nx + dx, oy - ny + dy);
                _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.rotateMolecule(frag, dth, ox + dx, oy + dy);
                let pmol = oldmol.clone();
                let att = pmol.numAtoms + n1, osz = pmol.numAtoms;
                pmol.append(frag);
                let srcidx = this.sourceIndex(pmol, oldmol);
                pmol.addBond(o1, att, 1);
                att = frag.addAtom('C', ox, oy);
                frag.addBond(n1, att, 1);
                _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_6__.SketchUtil.mergeFragmentsMask(pmol, this.asMask(srcidx));
                if (pmol.numAtoms == osz)
                    continue;
                let p = new FusionPermutation();
                p.mol = pmol;
                p.display = frag;
                p.srcidx = srcidx;
                p.molidx = [o1];
                p.temidx = [att];
                p.attdist = bfs[n1 - 1];
                p.bridged = true;
                p.guided = false;
                this.removeExtraGuides(p, oldmol);
                list.push(p);
            }
    }
    composeGuidedOne(list, oldmol, newmol, oidx, gidx) {
        if (newmol.atomAdjCount(gidx) == 0)
            return;
        let otheta = _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_6__.SketchUtil.primeDirections(oldmol, oidx);
        if (newmol.atomAdjCount(gidx) > 1 && oldmol.atomAdjCount(oidx) > 0) {
            let ox = 0, oy = 0;
            let adj = oldmol.atomAdjList(oidx);
            for (let n = 0; n < adj.length; n++) {
                ox += oldmol.atomX(adj[n]) - oldmol.atomX(oidx);
                oy += oldmol.atomY(adj[n]) - oldmol.atomY(oidx);
            }
            let ang = Math.atan2(oy, ox);
            let unique = true;
            for (let n = 0; n < otheta.length; n++)
                if (Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_7__.angleDiff)(ang, otheta[n])) < 3 * _util_util__WEBPACK_IMPORTED_MODULE_7__.RADDEG) {
                    unique = false;
                    break;
                }
            if (unique)
                otheta.push(ang);
        }
        let gx = newmol.atomX(gidx), gy = newmol.atomY(gidx);
        let dx = 0, dy = 0;
        let adj = newmol.atomAdjList(gidx);
        for (let n = 0; n < adj.length; n++) {
            dx += newmol.atomX(adj[n]) - gx;
            dy += newmol.atomY(adj[n]) - gy;
        }
        dx /= adj.length;
        dy /= adj.length;
        let ntheta = Math.atan2(dy, dx);
        let homoPenalty = 0;
        if (adj.length == 1) {
            let oel = oldmol.atomElement(oidx), nel = newmol.atomElement(adj[0]);
            if (oel != 'C' && oel == nel)
                homoPenalty = 1;
        }
        for (let n = 0; n < otheta.length; n++) {
            let frag = newmol.clone();
            if (this.guideidx.length == 2) {
                for (let i = 1; i <= frag.numAtoms; i++)
                    if (i != gidx && frag.atomElement(i) == 'X') {
                        frag.setAtomElement(i, TemplateFusion.RESERVED_GUIDESYMBOL);
                        break;
                    }
            }
            _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.rotateMolecule(frag, otheta[n] - ntheta, gx, gy);
            _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.translateMolecule(frag, oldmol.atomX(oidx) - gx, oldmol.atomY(oidx) - gy);
            let pmol = oldmol.clone();
            let osz = pmol.numAtoms;
            pmol.append(frag);
            let srcidx = this.sourceIndex(pmol, oldmol);
            _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_6__.SketchUtil.mergeFragmentsMask(pmol, this.asMask(srcidx));
            if (pmol.numAtoms == osz)
                continue;
            let sel = 0;
            for (let i = 1; i <= pmol.numAtoms; i++)
                if (pmol.atomElement(i) == TemplateFusion.RESERVED_GUIDESYMBOL) {
                    let padj = pmol.atomAdjList(i);
                    if (padj.length == 1) {
                        sel = padj[0];
                        if (sel > i)
                            sel--;
                    }
                    pmol.deleteAtomAndBonds(i);
                    srcidx.splice(i - 1, 1);
                    break;
                }
            let p = new FusionPermutation();
            p.mol = pmol;
            p.display = frag;
            p.srcidx = srcidx;
            p.molidx = [oidx];
            p.temidx = [gidx];
            p.attdist = 0;
            p.guided = true;
            p.scoreModifier = homoPenalty;
            p.chainSelect = sel;
            this.removeExtraGuides(p, oldmol);
            list.push(p);
        }
    }
    composeGuidedTwo(list, oldmol, newmol, o1, o2, gidx, nidx, snapToGuide) {
        let ox = oldmol.atomX(o1), oy = oldmol.atomY(o1);
        let gx = newmol.atomX(gidx), gy = newmol.atomY(gidx);
        let nx = newmol.atomX(nidx), ny = newmol.atomY(nidx);
        let otheta = Math.atan2(oldmol.atomY(o2) - oy, oldmol.atomX(o2) - ox);
        let gtheta = Math.atan2(ny - gy, nx - gx);
        let isGuideOnTerminal = oldmol.atomAdjCount(o1) == 1;
        let pmol = oldmol.clone(), frag = newmol.clone();
        _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.rotateMolecule(frag, otheta - gtheta, gx, gy);
        if (snapToGuide) {
            _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.translateMolecule(frag, ox - gx, oy - gy);
            pmol.setAtomPos(o2, frag.atomX(nidx), frag.atomY(nidx));
        }
        else {
            _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.translateMolecule(frag, oldmol.atomX(o2) - frag.atomX(nidx), oldmol.atomY(o2) - frag.atomY(nidx));
            frag.setAtomPos(gidx, ox, oy);
        }
        let osz = pmol.numAtoms;
        pmol.append(frag);
        let srcidx = this.sourceIndex(pmol, oldmol);
        _mol_SketchUtil__WEBPACK_IMPORTED_MODULE_6__.SketchUtil.mergeFragmentsMask(pmol, this.asMask(srcidx));
        if (pmol.numAtoms == osz)
            return;
        let p = new FusionPermutation();
        p.mol = pmol;
        p.display = frag;
        p.srcidx = srcidx;
        p.molidx = [o1, o2];
        p.temidx = [gidx, nidx];
        p.attdist = isGuideOnTerminal ? 1 : 0;
        p.guided = true;
        this.removeExtraGuides(p, oldmol);
        list.push(p);
    }
    composeGuidedMulti(list, oldmol, newmol, oidx, gidx, nudgenew) {
        let cx1 = 0, cy1 = 0, cx2 = 0, cy2 = 0;
        for (let n = 0; n < oidx.length; n++) {
            cx1 += oldmol.atomX(oidx[n]);
            cy1 += oldmol.atomY(oidx[n]);
        }
        for (let n = 0; n < gidx.length; n++) {
            cx2 += newmol.atomX(gidx[n]);
            cy2 += newmol.atomY(gidx[n]);
        }
        cx1 /= oidx.length;
        cy1 /= oidx.length;
        cx2 /= gidx.length;
        cy2 /= gidx.length;
        let osz = oldmol.numAtoms;
        for (let i = 0; i < oidx.length; i++)
            for (let j = 0; j < gidx.length; j++) {
                let pmol = oldmol.clone(), frag = newmol.clone();
                let th1 = Math.atan2(pmol.atomY(oidx[i]) - cy1, pmol.atomX(oidx[i]) - cx1);
                let th2 = Math.atan2(frag.atomY(gidx[j]) - cy2, frag.atomX(gidx[j]) - cx2);
                _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.rotateMolecule(frag, th1 - th2, cx2, cy2);
                _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.translateMolecule(frag, cx1 - cx2, cy1 - cy2);
                pmol.append(frag);
                let srcidx = this.sourceIndex(pmol, oldmol);
                let midx = _util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.numberArray(0, gidx.length), tidx = gidx.slice(0);
                _util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.sort(tidx);
                let mask = _util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.booleanArray(false, osz);
                for (let g = tidx.length - 1; g >= 0; g--) {
                    let gatom = tidx[g] + osz;
                    let closest = 0, closeDSQ = 0;
                    for (let n = 0; n < oidx.length; n++)
                        if (!mask[oidx[n] - 1]) {
                            let dx = pmol.atomX(oidx[n]) - pmol.atomX(gatom), dy = pmol.atomY(oidx[n]) - pmol.atomY(gatom);
                            let dsq = (0,_util_util__WEBPACK_IMPORTED_MODULE_7__.norm_xy)(dx, dy);
                            if (closest == 0 || dsq < closeDSQ) {
                                closest = oidx[n];
                                closeDSQ = dsq;
                            }
                        }
                    if (!nudgenew) {
                        let dsq = (0,_util_util__WEBPACK_IMPORTED_MODULE_7__.norm_xy)(pmol.atomX(gatom) - pmol.atomX(closest), pmol.atomY(gatom) - pmol.atomY(closest));
                        if (dsq > 0.1 * 0.1) {
                            let num = frag.addAtom('C', pmol.atomX(closest), pmol.atomY(closest));
                            frag.addBond(num, tidx[g], 0);
                        }
                        pmol.setAtomPos(closest, pmol.atomX(gatom), pmol.atomY(gatom));
                    }
                    midx[g] = closest;
                    mask[closest - 1] = true;
                    let adj = pmol.atomAdjList(gatom);
                    for (let n = 0; n < adj.length; n++) {
                        let b = pmol.findBond(gatom, adj[n]);
                        pmol.addBond(closest, adj[n], pmol.bondOrder(b), pmol.bondType(b));
                    }
                    pmol.deleteAtomAndBonds(gatom);
                    srcidx.splice(gatom - 1, 1);
                    frag.setAtomPos(tidx[g], pmol.atomX(closest), pmol.atomY(closest));
                }
                for (let n = pmol.numAtoms; n > osz; n--)
                    if (pmol.atomElement(n) == 'X') {
                        pmol.deleteAtomAndBonds(n);
                        srcidx.splice(n - 1, 1);
                        for (let k = 0; k < tidx.length; k++)
                            if (n < tidx[k])
                                tidx[k]--;
                    }
                for (let n = frag.numAtoms; n >= 1; n--)
                    if (frag.atomElement(n) == 'X') {
                        frag.setAtomElement(n, 'C');
                    }
                let p = new FusionPermutation();
                p.mol = pmol;
                p.display = frag;
                p.srcidx = srcidx;
                p.molidx = midx;
                p.temidx = tidx;
                p.attdist = 0;
                p.guided = true;
                this.removeExtraGuides(p, oldmol);
                list.push(p);
            }
    }
    affixRawPermutations(list) {
        let npsz = list.length;
        if (npsz == 0)
            return;
        let umask = _util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.booleanArray(true, npsz);
        for (let i = 0; i < npsz - 1; i++)
            if (umask[i]) {
                let p1 = list[i];
                for (let j = i + 1; j < npsz; j++)
                    if (umask[j]) {
                        let p2 = list[j];
                        if (_mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.sketchEquivalent(p1.mol, p2.mol)) {
                            if (p1.scoreModifier + p1.attdist > p2.scoreModifier + p2.attdist) {
                                list[i] = p2;
                                list[j] = p1;
                            }
                            umask[j] = false;
                        }
                    }
            }
        let score = _util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.numberArray(0, npsz);
        let numKeep = 0;
        for (let n = 0; n < npsz; n++) {
            if (umask[n]) {
                score[n] = this.scorePermutation(list[n]);
                if (score[n] < 1000)
                    numKeep++;
            }
            else
                score[n] = 0;
        }
        if (numKeep > 0)
            for (let n = 0; n < npsz; n++)
                if (umask[n] && score[n] >= 1000)
                    umask[n] = false;
        let uscore = [], uidx = [];
        for (let n = 0; n < npsz; n++)
            if (umask[n]) {
                uscore.push(score[n]);
                uidx.push(n);
            }
        let sidx = _util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.idxSort(uscore);
        for (let n = 0; n < sidx.length; n++) {
            let p = list[uidx[sidx[n]]];
            if (p.guided) {
                this.perms.push(p);
            }
        }
        for (let n = 0; n < sidx.length; n++) {
            let p = list[uidx[sidx[n]]];
            if (!p.guided) {
                this.perms.push(p);
            }
        }
    }
    removeExtraGuides(perm, oldmol) {
        _mol_MolUtil__WEBPACK_IMPORTED_MODULE_4__.MolUtil.removeDuplicateBonds(perm.mol);
        for (let n = perm.temidx.length - 1; n >= 0; n--) {
            let el = perm.display.atomElement(perm.temidx[n]);
            if (el != 'X' && el != TemplateFusion.RESERVED_GUIDESYMBOL)
                continue;
            perm.molidx.splice(n, 1);
            perm.temidx.splice(n, 1);
        }
        for (let n = perm.display.numAtoms; n >= 1; n--) {
            let el = perm.display.atomElement(n);
            if (el != 'X' && el != TemplateFusion.RESERVED_GUIDESYMBOL)
                continue;
            let a = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.atomAtPoint(oldmol, perm.display.atomX(n), perm.display.atomY(n));
            if (a > 0)
                perm.display.setAtomElement(n, 'C');
            else {
                perm.display.deleteAtomAndBonds(n);
                for (let i = 0; i < perm.temidx.length; i++)
                    if (perm.temidx[i] > n)
                        perm.temidx[i]--;
            }
        }
    }
    scorePermutation(perm) {
        let mol = this.mol, tmol = perm.display, tunion = perm.mol;
        let score = 0.2 * perm.attdist + perm.scoreModifier;
        score += _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.congestionMolecule(tunion, 1e-3);
        score -= tunion.numAtoms;
        let sz1 = mol.numAtoms, sz2 = tmol.numAtoms;
        let mx1 = [], my1 = [], mx2 = [], my2 = [];
        for (let n = 0; n < sz1; n++) {
            mx1.push(mol.atomX(n + 1));
            my1.push(mol.atomY(n + 1));
        }
        for (let n = 0; n < sz2; n++) {
            mx2.push(tmol.atomX(n + 1));
            my2.push(tmol.atomY(n + 1));
        }
        for (let i = 0; i < sz1; i++)
            for (let j = 0; j < sz2; j++) {
                if ((0,_util_util__WEBPACK_IMPORTED_MODULE_7__.norm_xy)(mx1[i] - mx2[j], my1[i] - my2[j]) > _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_1__.CoordUtil.OVERLAP_THRESHOLD_SQ)
                    continue;
                let contained = false;
                for (let k = 0; k < perm.molidx.length; k++)
                    if (perm.molidx[k] == i + 1 && perm.temidx[k] == j + 1) {
                        contained = true;
                        break;
                    }
                if (contained)
                    continue;
                score += 100;
            }
        if (!perm.guided)
            for (let n = 0; n < perm.molidx.length; n++) {
                let el = mol.atomElement(perm.molidx[n]);
                if (el == 'C' || el == 'O' || el == 'S' || el == 'N' || el == 'P')
                    continue;
                let adj1 = mol.atomAdjList(perm.molidx[n]), adj2 = tmol.atomAdjList(perm.temidx[n]);
                if (adj1.length + adj2.length >= 4)
                    continue;
                for (let i = 0; i < adj1.length; i++)
                    for (let j = 0; j < adj2.length; j++) {
                        let ai = adj1[i], aj = adj2[j];
                        let bo1 = mol.bondOrder(mol.findBond(perm.molidx[n], ai));
                        let bo2 = tmol.bondOrder(tmol.findBond(perm.temidx[n], aj));
                        let wantTheta = 0;
                        if ((bo1 == 1 && bo2 == 1) || (bo1 == 1 && bo2 == 2) || (bo1 == 2 && bo2 == 1))
                            wantTheta = 120;
                        else if ((bo1 == 2 && bo2 == 2) || (bo1 == 1 && bo2 == 3) || (bo1 == 3 && bo2 == 1))
                            wantTheta = 180;
                        else
                            continue;
                        let dx1 = mx1[ai - 1] - mx1[perm.molidx[n] - 1];
                        let dy1 = my1[ai - 1] - my1[perm.molidx[n] - 1];
                        let dx2 = mx2[aj - 1] - mx2[perm.temidx[n] - 1];
                        let dy2 = my2[aj - 1] - my2[perm.temidx[n] - 1];
                        let theta = Math.abs((0,_util_util__WEBPACK_IMPORTED_MODULE_7__.angleDiff)(Math.atan2(dy1, dx1), Math.atan2(dy2, dx2))) * _util_util__WEBPACK_IMPORTED_MODULE_7__.RADDEG;
                        if (Math.abs(theta - wantTheta) > 5)
                            score += 50;
                    }
            }
        for (let n = 1; n <= tunion.numAtoms; n++)
            if (tunion.atomElement(n) == 'C' || tunion.atomElement(n) == 'N') {
                let adjb = tunion.atomAdjBonds(n);
                let totalBO = 0;
                for (let i = 0; i < adjb.length; i++) {
                    let bo = tunion.bondOrder(adjb[i]);
                    totalBO += bo;
                    if (bo == 0) {
                        totalBO = 0;
                        break;
                    }
                }
                if (totalBO > 4)
                    score += 1000;
            }
        if (perm.molidx.length >= 2) {
            let mmask = _util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.booleanArray(false, sz1);
            for (let n = 0; n < perm.molidx.length; n++)
                mmask[perm.molidx[n] - 1] = true;
            for (let n = 1; n <= mol.numBonds; n++) {
                let bfr = mol.bondFrom(n), bto = mol.bondTo(n);
                if (!mmask[bfr - 1] || !mmask[bto - 1])
                    continue;
                let tfr = perm.molidx.indexOf(bfr), tto = perm.molidx.indexOf(bto);
                let tn = tmol.findBond(perm.temidx[tfr], perm.temidx[tto]);
                if (tn == 0)
                    continue;
                if (mol.bondOrder(n) != tmol.bondOrder(tn))
                    score += 1;
            }
        }
        return score;
    }
    sourceIndex(xmol, wmol) {
        let idx = _util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.numberArray(0, xmol.numAtoms);
        for (let n = wmol.numAtoms; n >= 1; n--)
            idx[n - 1] = n;
        return idx;
    }
    asMask(imask) {
        let ret = _util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.booleanArray(false, imask.length);
        for (let n = 0; n < imask.length; n++)
            ret[n] = imask[n] != 0;
        return ret;
    }
}
TemplateFusion.RESERVED_GUIDESYMBOL = 'XXX';


/***/ }),

/***/ "./src/sketcher/ToolBank.ts":
/*!**********************************!*\
  !*** ./src/sketcher/ToolBank.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ToolBank: () => (/* binding */ ToolBank),
/* harmony export */   ToolBankItem: () => (/* binding */ ToolBankItem)
/* harmony export */ });
/* harmony import */ var _ui_ButtonBank__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ui/ButtonBank */ "./src/ui/ButtonBank.ts");
/* harmony import */ var _reswmk_img_actions_ToolSelect_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @reswmk/img/actions/ToolSelect.svg */ "./res/img/actions/ToolSelect.svg");
/* harmony import */ var _reswmk_img_actions_ToolRotate_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @reswmk/img/actions/ToolRotate.svg */ "./res/img/actions/ToolRotate.svg");
/* harmony import */ var _reswmk_img_actions_ToolPan_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @reswmk/img/actions/ToolPan.svg */ "./res/img/actions/ToolPan.svg");
/* harmony import */ var _reswmk_img_actions_ToolDrag_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @reswmk/img/actions/ToolDrag.svg */ "./res/img/actions/ToolDrag.svg");
/* harmony import */ var _reswmk_img_actions_ToolErasor_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @reswmk/img/actions/ToolErasor.svg */ "./res/img/actions/ToolErasor.svg");
/* harmony import */ var _reswmk_img_actions_BondZero_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @reswmk/img/actions/BondZero.svg */ "./res/img/actions/BondZero.svg");
/* harmony import */ var _reswmk_img_actions_BondOne_svg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @reswmk/img/actions/BondOne.svg */ "./res/img/actions/BondOne.svg");
/* harmony import */ var _reswmk_img_actions_BondTwo_svg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @reswmk/img/actions/BondTwo.svg */ "./res/img/actions/BondTwo.svg");
/* harmony import */ var _reswmk_img_actions_BondThree_svg__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @reswmk/img/actions/BondThree.svg */ "./res/img/actions/BondThree.svg");
/* harmony import */ var _reswmk_img_actions_BondSquig_svg__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @reswmk/img/actions/BondSquig.svg */ "./res/img/actions/BondSquig.svg");
/* harmony import */ var _reswmk_img_actions_BondUp_svg__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @reswmk/img/actions/BondUp.svg */ "./res/img/actions/BondUp.svg");
/* harmony import */ var _reswmk_img_actions_BondDown_svg__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @reswmk/img/actions/BondDown.svg */ "./res/img/actions/BondDown.svg");
/* harmony import */ var _reswmk_img_actions_ToolRing_svg__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @reswmk/img/actions/ToolRing.svg */ "./res/img/actions/ToolRing.svg");
/* harmony import */ var _reswmk_img_actions_ToolArom_svg__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @reswmk/img/actions/ToolArom.svg */ "./res/img/actions/ToolArom.svg");
/* harmony import */ var _reswmk_img_actions_AtomPlus_svg__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @reswmk/img/actions/AtomPlus.svg */ "./res/img/actions/AtomPlus.svg");
/* harmony import */ var _reswmk_img_actions_AtomMinus_svg__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @reswmk/img/actions/AtomMinus.svg */ "./res/img/actions/AtomMinus.svg");

var ToolBankItem;
(function (ToolBankItem) {
    ToolBankItem["Arrow"] = "arrow";
    ToolBankItem["Rotate"] = "rotate";
    ToolBankItem["Pan"] = "pan";
    ToolBankItem["Drag"] = "drag";
    ToolBankItem["Erasor"] = "erasor";
    ToolBankItem["BondOrder0"] = "bond:Order0";
    ToolBankItem["BondOrder1"] = "bond:Order1";
    ToolBankItem["BondOrder2"] = "bond:Order2";
    ToolBankItem["BondOrder3"] = "bond:Order3";
    ToolBankItem["BondUnknown"] = "bond:Unknown";
    ToolBankItem["BondInclined"] = "bond:Inclined";
    ToolBankItem["BondDeclined"] = "bond:Declined";
    ToolBankItem["RingAliph"] = "ringAliph";
    ToolBankItem["RingArom"] = "ringArom";
    ToolBankItem["AtomPlus"] = "atomPlus";
    ToolBankItem["AtomMinus"] = "atomMinus";
    ToolBankItem["BondPfx"] = "bond:";
    ToolBankItem["ElementPfx"] = "element:";
})(ToolBankItem || (ToolBankItem = {}));
















const TOOLS_MAIN = [
    { id: ToolBankItem.Arrow, svg: _reswmk_img_actions_ToolSelect_svg__WEBPACK_IMPORTED_MODULE_1__["default"], helpText: 'Selection tool.', mnemonic: 'Escape' },
    { id: ToolBankItem.Rotate, svg: _reswmk_img_actions_ToolRotate_svg__WEBPACK_IMPORTED_MODULE_2__["default"], helpText: 'Rotate subject atoms.', mnemonic: '' },
    { id: ToolBankItem.Pan, svg: _reswmk_img_actions_ToolPan_svg__WEBPACK_IMPORTED_MODULE_3__["default"], helpText: 'Pan the viewport around the screen.', mnemonic: '' },
    { id: ToolBankItem.Drag, svg: _reswmk_img_actions_ToolDrag_svg__WEBPACK_IMPORTED_MODULE_4__["default"], helpText: 'Drag selected atoms to new positions.', mnemonic: '' },
    { id: ToolBankItem.Erasor, svg: _reswmk_img_actions_ToolErasor_svg__WEBPACK_IMPORTED_MODULE_5__["default"], helpText: 'Delete atoms or bonds by selecting.', mnemonic: 'Delete' },
    { id: ToolBankItem.BondOrder0, svg: _reswmk_img_actions_BondZero_svg__WEBPACK_IMPORTED_MODULE_6__["default"], helpText: 'Create or change a bond to zero order.', mnemonic: 'Shift+0', 'key': ')' },
    { id: ToolBankItem.BondOrder1, svg: _reswmk_img_actions_BondOne_svg__WEBPACK_IMPORTED_MODULE_7__["default"], helpText: 'Create or change a bond to single.', mnemonic: 'Shift+1', 'key': '!' },
    { id: ToolBankItem.BondOrder2, svg: _reswmk_img_actions_BondTwo_svg__WEBPACK_IMPORTED_MODULE_8__["default"], helpText: 'Create or change a bond to double.', mnemonic: 'Shift+2', 'key': '@' },
    { id: ToolBankItem.BondOrder3, svg: _reswmk_img_actions_BondThree_svg__WEBPACK_IMPORTED_MODULE_9__["default"], helpText: 'Create or change a bond to triple.', mnemonic: 'Shift+3', 'key': '#' },
    { id: ToolBankItem.BondUnknown, svg: _reswmk_img_actions_BondSquig_svg__WEBPACK_IMPORTED_MODULE_10__["default"], helpText: 'Create or change a bond to unknown stereochemistry.', mnemonic: 'Shift+4', 'key': '$' },
    { id: ToolBankItem.BondInclined, svg: _reswmk_img_actions_BondUp_svg__WEBPACK_IMPORTED_MODULE_11__["default"], helpText: 'Create or change a bond to up-wedge.', mnemonic: 'Shift+5', 'key': '%' },
    { id: ToolBankItem.BondDeclined, svg: _reswmk_img_actions_BondDown_svg__WEBPACK_IMPORTED_MODULE_12__["default"], helpText: 'Create or change a bond to down-wedge.', mnemonic: 'Shift+6', 'key': '^' },
    { id: ToolBankItem.RingAliph, svg: _reswmk_img_actions_ToolRing_svg__WEBPACK_IMPORTED_MODULE_13__["default"], helpText: 'Create plain ring.', mnemonic: 'Shift+7', 'key': '&' },
    { id: ToolBankItem.RingArom, svg: _reswmk_img_actions_ToolArom_svg__WEBPACK_IMPORTED_MODULE_14__["default"], helpText: 'Create aromatic ring.', mnemonic: 'Shift+8', 'key': '*' },
    { id: ToolBankItem.AtomPlus, svg: _reswmk_img_actions_AtomPlus_svg__WEBPACK_IMPORTED_MODULE_15__["default"], helpText: 'Increase charge on atom.', mnemonic: '' },
    { id: ToolBankItem.AtomMinus, svg: _reswmk_img_actions_AtomMinus_svg__WEBPACK_IMPORTED_MODULE_16__["default"], helpText: 'Decrease charge on atom.', mnemonic: '' },
    { id: ToolBankItem.ElementPfx + 'C', text: 'C', helpText: 'Change elements to Carbon.', mnemonic: '' },
    { id: ToolBankItem.ElementPfx + 'N', text: 'N', helpText: 'Change elements to Nitrogen.', mnemonic: '' },
    { id: ToolBankItem.ElementPfx + 'O', text: 'O', helpText: 'Change elements to Oxygen.', mnemonic: '' },
    { id: ToolBankItem.ElementPfx + 'S', text: 'S', helpText: 'Change elements to Sulfur.', mnemonic: '' },
    { id: ToolBankItem.ElementPfx + 'P', text: 'P', helpText: 'Change elements to Phosphorus.', mnemonic: '' },
    { id: ToolBankItem.ElementPfx + 'H', text: 'H', helpText: 'Change elements to Hydrogen.', mnemonic: '' },
    { id: ToolBankItem.ElementPfx + 'F', text: 'F', helpText: 'Change elements to Fluorine.', mnemonic: '' },
    { id: ToolBankItem.ElementPfx + 'Cl', text: 'Cl', helpText: 'Change elements to Chlorine.', mnemonic: '' },
    { id: ToolBankItem.ElementPfx + 'Br', text: 'Br', helpText: 'Change elements to Bromine.', mnemonic: '' },
    { id: ToolBankItem.ElementPfx + 'A', text: 'A', helpText: 'Pick other element.', mnemonic: '' }
];
class ToolBank extends _ui_ButtonBank__WEBPACK_IMPORTED_MODULE_0__.ButtonBank {
    constructor(owner) {
        super();
        this.owner = owner;
    }
    update() {
        for (let btn of TOOLS_MAIN)
            this.buttons.push(btn);
        this.buttonView.setSelectedButton('arrow');
    }
    hitButton(id) {
        this.buttonView.setSelectedButton(id);
    }
    claimKey(event) {
        for (let item of TOOLS_MAIN) {
            if (_ui_ButtonBank__WEBPACK_IMPORTED_MODULE_0__.ButtonBank.matchKey(event, item.mnemonic, item.key)) {
                this.hitButton(item.id);
                return true;
            }
        }
        return false;
    }
}


/***/ }),

/***/ "./src/ui/ButtonBank.ts":
/*!******************************!*\
  !*** ./src/ui/ButtonBank.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ButtonBank: () => (/* binding */ ButtonBank)
/* harmony export */ });
class ButtonBank {
    constructor() {
        this.isSubLevel = false;
        this.buttons = [];
    }
    init() { }
    claimKey(event) { return false; }
    bankClosed() { }
    static matchKey(event, mnemonic, key) {
        if (mnemonic == null || mnemonic == '')
            return false;
        let mshift = false, mctrl = false, malt = false, mmeta = false, mkey = mnemonic;
        while (true) {
            if (mkey.startsWith('Shift+')) {
                mshift = true;
                mkey = mkey.substring(6);
            }
            else if (mkey.startsWith('Ctrl+')) {
                mctrl = true;
                mkey = mkey.substring(5);
            }
            else if (mkey.startsWith('Alt+')) {
                malt = true;
                mkey = mkey.substring(4);
            }
            else if (mkey.startsWith('Cmd+')) {
                mmeta = true;
                mkey = mkey.substring(4);
            }
            else
                break;
        }
        if (mshift != event.shiftKey)
            return false;
        if (mctrl != event.ctrlKey)
            return false;
        if (malt != event.altKey)
            return false;
        if (mmeta != event.metaKey)
            return false;
        if (key)
            mkey = key;
        return mkey.toLowerCase() == event.key.toLowerCase();
    }
}


/***/ }),

/***/ "./src/ui/ButtonView.ts":
/*!******************************!*\
  !*** ./src/ui/ButtonView.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ButtonView: () => (/* binding */ ButtonView),
/* harmony export */   ButtonViewPosition: () => (/* binding */ ButtonViewPosition)
/* harmony export */ });
/* harmony import */ var _gfx_FontData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../gfx/FontData */ "./src/gfx/FontData.ts");
/* harmony import */ var _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../gfx/MetaVector */ "./src/gfx/MetaVector.ts");
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _util_Theme__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/Theme */ "./src/util/Theme.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _Tooltip__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Tooltip */ "./src/ui/Tooltip.ts");
/* harmony import */ var _Widget__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Widget */ "./src/ui/Widget.ts");








var ButtonViewPosition;
(function (ButtonViewPosition) {
    ButtonViewPosition[ButtonViewPosition["Left"] = 0] = "Left";
    ButtonViewPosition[ButtonViewPosition["Right"] = 1] = "Right";
    ButtonViewPosition[ButtonViewPosition["Top"] = 2] = "Top";
    ButtonViewPosition[ButtonViewPosition["Bottom"] = 3] = "Bottom";
    ButtonViewPosition[ButtonViewPosition["Centre"] = 4] = "Centre";
})(ButtonViewPosition || (ButtonViewPosition = {}));
class ButtonView extends _Widget__WEBPACK_IMPORTED_MODULE_7__.Widget {
    constructor(position, parentX, parentY, parentWidth, parentHeight) {
        super();
        this.position = position;
        this.parentX = parentX;
        this.parentY = parentY;
        this.parentWidth = parentWidth;
        this.parentHeight = parentHeight;
        this.idealSize = 50;
        this.width = 0;
        this.height = 0;
        this.selectedButton = null;
        this.highlightButton = null;
        this.maxButtonColumns = 0;
        this.maxButtonRows = 0;
        this.border = 0x808080;
        this.background = 0xFFFFFF;
        this.buttonColNorm1 = 0x47D5D2;
        this.buttonColNorm2 = 0x008FD1;
        this.buttonColActv1 = 0x30FF69;
        this.buttonColActv2 = 0x008650;
        this.buttonColSel1 = 0xFFFFFF;
        this.buttonColSel2 = 0xE0E0E0;
        this.canvas = null;
        this.stack = [];
        this.display = [];
        this.hasBigButtons = true;
        this.prefabImgSize = 44;
        this.gripHeight = 30;
        this.gripWidth = 50;
        this.isRaised = true;
        this.outPadding = 2;
        this.inPadding = 2;
        this.x = 0;
        this.y = 0;
        this.isMacLike = false;
        this.isMacLike = !!navigator.platform.match(/(Mac|iPhone|iPod|iPad)/i);
    }
    setParentSize(width, height) {
        this.parentWidth = width;
        this.parentHeight = height;
        if (this.contentDOM) {
            this.applyOffset();
            this.redraw();
        }
    }
    get topBank() {
        return this.stack.length > 0 ? this.stack[this.stack.length - 1] : null;
    }
    get stackSize() { return this.stack.length; }
    render(parent) {
        super.render(parent);
        this.contentDOM.css({ 'position': 'absolute', 'width': `${this.width}px`, 'height': `${this.height}px` });
        this.contentDOM.addClass('no_selection');
        this.layoutButtons();
        let canvasStyle = 'position: absolute; left: 0; top: 0;';
        canvasStyle += 'pointer-events: none;';
        this.canvas = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.newElement)(this.contentDOM.el, 'canvas', { 'width': this.width, 'height': this.height, 'style': canvasStyle });
        this.canvas.style.width = this.width + 'px';
        this.canvas.style.height = this.height + 'px';
        this.applyOffset();
        this.redraw();
        this.contentDOM.onClick((event) => this.mouseClick(event));
        this.contentDOM.onDblClick((event) => this.mouseDoubleClick(event));
        this.contentDOM.onMouseDown((event) => { event.preventDefault(); this.mouseDown(event); });
        this.contentDOM.onMouseUp((event) => this.mouseUp(event));
        this.contentDOM.onMouseOver((event) => this.mouseOver(event));
        this.contentDOM.onMouseLeave((event) => this.mouseOut(event));
        this.contentDOM.onMouseMove((event) => this.mouseMove(event));
    }
    pushBank(bank) {
        bank.buttonView = this;
        bank.isSubLevel = this.stack.length > 0;
        bank.init();
        this.stack.push(bank);
        if (this.canvas != null) {
            this.layoutButtons();
            this.replaceCanvas();
            this.applyOffset();
            this.redraw();
        }
    }
    popBank() {
        if (this.stack.length == 0)
            return;
        _util_Vec__WEBPACK_IMPORTED_MODULE_5__.Vec.last(this.stack).bankClosed();
        this.stack.length--;
        if (this.canvas != null) {
            this.layoutButtons();
            this.replaceCanvas();
            this.applyOffset();
            this.redraw();
        }
    }
    refreshBank() {
        if (this.canvas != null) {
            this.layoutButtons();
            this.replaceCanvas();
            this.applyOffset();
            this.redraw();
        }
    }
    getSelectedButton() {
        return this.selectedButton;
    }
    setSelectedButton(id) {
        if (id != this.selectedButton) {
            this.selectedButton = id;
            this.redraw();
        }
    }
    cycleSelected(dir) {
        let sorted = this.display.filter((s) => s.id != '*');
        sorted.sort((d1, d2) => (d1.y * 10000 + d1.x) - (d2.y * 10000 + d2.x));
        let idx = 0, sz = sorted.length;
        for (let n = 0; n < sz; n++)
            if (sorted[n].id == this.selectedButton) {
                idx = n;
                break;
            }
        this.selectedButton = sorted[(idx + dir + sz) % sz].id;
        this.redraw();
    }
    raiseBank() {
        if (this.isRaised)
            return;
        this.isRaised = true;
        if (this.contentDOM) {
            this.layoutButtons();
            this.replaceCanvas();
            this.applyOffset();
            this.redraw();
        }
    }
    lowerBank() {
        if (!this.isRaised)
            return;
        this.isRaised = false;
        if (this.contentDOM) {
            this.layoutButtons();
            this.replaceCanvas();
            this.applyOffset();
            this.redraw();
        }
    }
    getHasBigButtons() {
        return this.hasBigButtons;
    }
    setHasBigButtons(flag) {
        this.hasBigButtons = flag;
        this.prefabImgSize = flag ? 44 : 36;
        this.idealSize = flag ? 50 : 40;
    }
    withinOutline(x, y) {
        let w = this.width, h = this.height;
        if (x < 0 || x > w || y < 0 || y > h)
            return false;
        if (this.position == ButtonViewPosition.Centre || this.stack.length == 0)
            return true;
        if (this.position == ButtonViewPosition.Left) {
            let my = 0.5 * h - 1, gw = this.gripHeight, hg = 0.5 * this.gripWidth;
            return x < w - gw || (y > my - hg && y < my + hg);
        }
        else if (this.position == ButtonViewPosition.Right) {
            let my = 0.5 * h - 1, gw = this.gripHeight, hg = 0.5 * this.gripWidth;
            return x > gw || (y > my - hg && y < my + hg);
        }
        else if (this.position == ButtonViewPosition.Top) {
            let mx = 0.5 * w - 1, gh = this.gripHeight, hg = 0.5 * this.gripWidth;
            return y < h - gh || (x > mx - hg && x < mx + hg);
        }
        else if (this.position == ButtonViewPosition.Bottom) {
            let mx = 0.5 * w - 1, gh = this.gripHeight, hg = 0.5 * this.gripWidth;
            return y > gh || (x > mx - hg && x < mx + hg);
        }
        return true;
    }
    gripSize() {
        return this.gripHeight;
    }
    sizeForButtons(nbtn) {
        return this.idealSize * nbtn + this.inPadding * (nbtn - 1) + 2 * this.outPadding;
    }
    layoutButtons() {
        if (this.contentDOM == null)
            return;
        let outPadding = this.outPadding, inPadding = this.inPadding;
        this.removeDisplayButtons();
        if (this.stack.length == 0) {
            this.width = 10;
            this.height = 10;
            if (this.position == ButtonViewPosition.Left || this.position == ButtonViewPosition.Right)
                this.height = this.parentHeight;
            else if (this.position == ButtonViewPosition.Top || this.position == ButtonViewPosition.Bottom)
                this.width = this.parentWidth;
            return;
        }
        if (!this.isRaised) {
            if (this.position == ButtonViewPosition.Left || this.position == ButtonViewPosition.Right) {
                this.width = this.gripHeight;
                this.height = this.gripWidth + 2 * outPadding;
            }
            else if (this.position == ButtonViewPosition.Top || this.position == ButtonViewPosition.Bottom) {
                this.width = this.gripWidth + 2 * outPadding;
                this.height = this.gripHeight;
            }
            this.addGripButton();
            return;
        }
        let bank = this.stack[this.stack.length - 1];
        bank.buttons = [];
        bank.update();
        let popWidth = 0, popHeight = 0;
        if (this.stack.length == 1) { }
        else if (this.position == ButtonViewPosition.Left || this.position == ButtonViewPosition.Right)
            popHeight = this.gripHeight + inPadding;
        else if (this.position == ButtonViewPosition.Top || this.position == ButtonViewPosition.Bottom)
            popWidth = this.gripHeight + inPadding;
        let bestLayout = null, bestScore = null;
        if (this.position == ButtonViewPosition.Left || this.position == ButtonViewPosition.Right) {
            let maxSlotHeight = Math.floor((this.parentHeight - 2 * outPadding - inPadding) / (this.idealSize + inPadding));
            let minSlotHeight = Math.ceil(0.5 * maxSlotHeight);
            for (let i = maxSlotHeight; i >= minSlotHeight; i--) {
                let slotWidth = Math.ceil(bank.buttons.length / i);
                for (let j = slotWidth; j <= slotWidth + 1; j++) {
                    let layout = this.layoutMaxHeight(bank, i, j);
                    let score = this.scoreLayout(layout) + 1 * layout[0].length;
                    if (bestLayout == null || score < bestScore) {
                        bestLayout = layout;
                        bestScore = score;
                    }
                }
            }
        }
        else if (this.position == ButtonViewPosition.Top || this.position == ButtonViewPosition.Bottom) {
            let maxSlotWidth = Math.floor((this.parentWidth - 2 * outPadding - inPadding - popWidth) / (this.idealSize + inPadding));
            let minSlotWidth = Math.ceil(0.5 * maxSlotWidth);
            for (let n = maxSlotWidth; n >= minSlotWidth; n--) {
                let layout = this.layoutMaxWidth(bank, n);
                let score = this.scoreLayout(layout) + 1 * layout.length;
                if (bestLayout == null || score < bestScore) {
                    bestLayout = layout;
                    bestScore = score;
                }
            }
        }
        else {
        }
        let ncols = bestLayout[0].length, nrows = bestLayout.length;
        this.width = 2 * outPadding + inPadding + (this.idealSize + inPadding) * ncols + popWidth;
        this.height = 2 * outPadding + inPadding + (this.idealSize + inPadding) * nrows + popHeight;
        if (this.position == ButtonViewPosition.Left || this.position == ButtonViewPosition.Right)
            this.width += this.gripHeight;
        else if (this.position == ButtonViewPosition.Top || this.position == ButtonViewPosition.Bottom)
            this.height += this.gripHeight;
        this.addGripButton();
        if (popWidth > 0 || popHeight > 0) {
            let d = {
                id: '!',
                x: outPadding + inPadding,
                y: outPadding + inPadding,
                width: popWidth - inPadding,
                height: popHeight - inPadding
            };
            if (this.position == ButtonViewPosition.Right)
                d.x += this.gripHeight;
            else if (this.position == ButtonViewPosition.Bottom)
                d.y += this.gripHeight;
            if (popWidth == 0)
                d.width = ncols * this.idealSize + inPadding * (ncols - 1);
            if (popHeight == 0)
                d.height = nrows * this.idealSize + inPadding * (nrows - 1);
            this.display.push(d);
        }
        for (let y = 0; y < nrows; y++)
            for (let x = 0; x < ncols; x++) {
                for (let n = 0; n < bank.buttons.length; n++)
                    if (bestLayout[y][x] == bank.buttons[n].id) {
                        let b = bank.buttons[n], d = { id: b.id };
                        d.x = outPadding + inPadding + popWidth + (this.idealSize + inPadding) * x;
                        d.y = outPadding + inPadding + popHeight + (this.idealSize + inPadding) * y;
                        if (this.position == ButtonViewPosition.Right)
                            d.x += this.gripHeight;
                        else if (this.position == ButtonViewPosition.Bottom)
                            d.y += this.gripHeight;
                        d.width = this.idealSize;
                        d.height = this.idealSize;
                        this.display.push(d);
                    }
            }
    }
    addGripButton() {
        if (this.position == ButtonViewPosition.Centre)
            return;
        let d = { id: '*' }, spc = 3;
        if (this.position == ButtonViewPosition.Left) {
            d.width = this.gripHeight - spc;
            d.height = this.gripWidth - 2 * spc;
            d.x = this.width - d.width - spc - 1;
            d.y = 0.5 * (this.height - d.height);
        }
        else if (this.position == ButtonViewPosition.Right) {
            d.width = this.gripHeight - spc;
            d.height = this.gripWidth - 2 * spc;
            d.x = spc + 1;
            d.y = 0.5 * (this.height - d.height);
        }
        else if (this.position == ButtonViewPosition.Top) {
            d.width = this.gripWidth - 2 * spc;
            d.height = this.gripHeight - spc;
            d.x = 0.5 * (this.width - d.width);
            d.y = this.height - d.height - spc - 1;
        }
        else if (this.position == ButtonViewPosition.Bottom) {
            d.width = this.gripWidth - 2 * spc;
            d.height = this.gripHeight - spc;
            d.x = 0.5 * (this.width - d.width);
            d.y = spc + 1;
        }
        this.display.push(d);
    }
    replaceCanvas() {
        this.contentDOM.empty();
        for (let n = 0; n < this.display.length; n++) {
            this.display[n].imgDOM = null;
            this.display[n].helpSpan = null;
        }
        let canvasStyle = 'position: absolute; left: 0; top: 0;';
        canvasStyle += 'pointer-events: none;';
        this.canvas = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.newElement)(this.contentDOM.el, 'canvas', { 'width': this.width, 'height': this.height, 'style': canvasStyle });
    }
    removeDisplayButtons() {
        this.contentDOM.empty();
        this.display = [];
    }
    applyOffset() {
        let x, y;
        if (this.position == ButtonViewPosition.Left) {
            x = 0;
            y = 0.5 * (this.parentHeight - this.height);
        }
        else if (this.position == ButtonViewPosition.Right) {
            x = this.parentWidth - this.width;
            y = 0.5 * (this.parentHeight - this.height);
        }
        else if (this.position == ButtonViewPosition.Top) {
            x = 0.5 * (this.parentWidth - this.width);
            y = 0;
        }
        else if (this.position == ButtonViewPosition.Bottom) {
            x = 0.5 * (this.parentWidth - this.width);
            y = this.parentHeight - this.height;
        }
        else {
            x = 0.5 * (this.parentWidth - this.width);
            y = 0.5 * (this.parentHeight - this.height);
        }
        this.x = this.parentX + x;
        this.y = this.parentY + y;
        this.contentDOM.css({ 'position': 'absolute' });
        (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.setBoundaryPixels)(this.contentDOM, this.x, this.y, this.width, this.height);
    }
    redraw() {
        if (!this.contentDOM || !this.canvas)
            return;
        let density = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.pixelDensity)();
        this.canvas.width = this.width * density;
        this.canvas.height = this.height * density;
        this.canvas.style.width = this.width + 'px';
        this.canvas.style.height = this.height + 'px';
        let ctx = this.canvas.getContext('2d');
        ctx.save();
        ctx.scale(density, density);
        ctx.clearRect(0, 0, this.width, this.height);
        let path = this.traceOutline();
        ctx.fillStyle = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.colourCanvas)(this.background);
        ctx.fill(path);
        ctx.strokeStyle = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.colourCanvas)(this.border);
        ctx.lineWidth = 1;
        ctx.stroke(path);
        let bank = this.stack.length > 0 ? this.stack[this.stack.length - 1] : null;
        this.contentDOM.css({ 'width': this.width + 'px', 'height': this.height + 'px' });
        for (let n = 0; n < this.display.length; n++) {
            const d = this.display[n], b = this.buttonFromID(d.id);
            let col1, col2;
            if (this.highlightButton != null && d.id == this.highlightButton) {
                col1 = this.buttonColActv1;
                col2 = this.buttonColActv2;
            }
            else if (this.selectedButton != null && d.id == this.selectedButton) {
                col1 = this.buttonColSel1;
                col2 = this.buttonColSel2;
            }
            else {
                col1 = this.buttonColNorm1;
                col2 = this.buttonColNorm2;
            }
            ctx.save();
            path = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.pathRoundedRect)(d.x + 0.5, d.y + 0.5, d.x + d.width - 1, d.y + d.height - 1, 5);
            if (col2 != null) {
                let grad = ctx.createLinearGradient(d.x, d.y, d.x + d.width, d.y + d.height);
                grad.addColorStop(0, (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.colourCanvas)(col1));
                grad.addColorStop(1, (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.colourCanvas)(col2));
                ctx.fillStyle = grad;
            }
            else
                ctx.fillStyle = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.colourCanvas)(col1);
            ctx.fill(path);
            ctx.strokeStyle = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.colourCanvas)(this.border);
            ctx.lineWidth = 0.5;
            ctx.stroke(path);
            ctx.restore();
            if (d.imgDOM != null) {
                d.imgDOM.remove();
                d.imgDOM = null;
            }
            if (b != null) {
                if (d.helpSpan == null) {
                    d.helpSpan = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<span style="position: absolute;"/>').appendTo(this.contentDOM);
                    let txt = b.helpText;
                    if (b.mnemonic) {
                        while (txt.endsWith('.'))
                            txt = txt.substring(0, txt.length - 1);
                        let keyText = b.mnemonic;
                        let match = keyText.match(/^(.*)CmdOrCtrl(.*)$/);
                        if (match)
                            keyText = match[1] + (this.isMacLike ? 'Cmd' : 'Ctrl') + match[2];
                        txt += ' [' + keyText + ']';
                    }
                    (0,_Tooltip__WEBPACK_IMPORTED_MODULE_6__.addTooltip)(d.helpSpan, txt);
                }
                (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.setBoundaryPixels)(d.helpSpan, d.x, d.y, d.width, d.height);
            }
            if (b == null) { }
            else if (b.imageFN != null && d.imgDOM == null) {
                d.imgDOM = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<img/>').appendTo(this.contentDOM).css({ 'position': 'absolute', 'pointer-events': 'none' });
                d.imgDOM.setAttr('src', _util_Theme__WEBPACK_IMPORTED_MODULE_3__.Theme.RESOURCE_URL + '/img/actions/' + b.imageFN + '.svg');
                const sz = this.prefabImgSize;
                const bx = d.x + Math.floor(0.5 * (d.width - sz));
                const by = d.y + Math.floor(0.5 * (d.height - sz));
                (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.setBoundaryPixels)(d.imgDOM, bx, by, sz, sz);
            }
            else if (b.svg != null) {
                d.imgDOM = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)('<div/>').appendTo(this.contentDOM).css({ 'display': 'block', 'position': 'absolute', 'pointer-events': 'none' });
                const sz = this.prefabImgSize;
                const bx = d.x + Math.floor(0.5 * (d.width - sz));
                const by = d.y + Math.floor(0.5 * (d.height - sz));
                (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.setBoundaryPixels)(d.imgDOM, bx, by, sz, sz);
                let svg = (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)(b.svg.substring(b.svg.indexOf('<svg'))).appendTo(d.imgDOM);
                let oldWidth = svg.getAttr('width'), oldHeight = svg.getAttr('height');
                svg.attr({ 'viewBox': `0 0 ${oldWidth} ${oldHeight}`, 'width': `${sz}`, 'height': `${sz}` });
                svg.css({ 'width': `${sz}px`, 'height': `${sz}px`, 'pointer-events': 'none' });
                (0,_util_dom__WEBPACK_IMPORTED_MODULE_2__.dom)(svg).appendTo(d.imgDOM);
            }
            else if (b.metavec != null) {
                let draw = b.metavec instanceof _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_1__.MetaVector ? b.metavec : new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_1__.MetaVector(b.metavec);
                draw.offsetX = d.x + Math.floor(0.5 * (d.width - draw.width));
                draw.offsetY = d.y + Math.floor(0.5 * (d.height - draw.height));
                draw.renderContext(ctx);
            }
            else if (b.text != null) {
                let sz = this.idealSize;
                let draw = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_1__.MetaVector({ 'size': [sz, sz] });
                let fsz = sz * 0.6;
                let wad = _gfx_FontData__WEBPACK_IMPORTED_MODULE_0__.FontData.main.measureText(b.text, fsz);
                if (wad[1] + wad[2] > sz) {
                    fsz *= sz / (wad[1] + wad[2]);
                    wad = _gfx_FontData__WEBPACK_IMPORTED_MODULE_0__.FontData.main.measureText(b.text, fsz);
                }
                if (wad[0] > sz) {
                    fsz *= sz / wad[0];
                    wad = _gfx_FontData__WEBPACK_IMPORTED_MODULE_0__.FontData.main.measureText(b.text, fsz);
                }
                let x = 0.5 * (sz - wad[0]), y = 0.5 * (sz + wad[1]);
                draw.drawText(x - 1, y, b.text, fsz, 0x000000);
                draw.drawText(x + 1, y, b.text, fsz, 0x000000);
                draw.drawText(x, y - 1, b.text, fsz, 0x000000);
                draw.drawText(x, y + 1, b.text, fsz, 0x000000);
                draw.drawText(x, y, b.text, fsz, 0xFFFFFF);
                draw.offsetX = d.x + Math.floor(0.5 * (d.width - draw.width));
                draw.offsetY = d.y + Math.floor(0.5 * (d.height - draw.height));
                draw.renderContext(ctx);
            }
            if (b != null && b.isSubMenu) {
                ctx.save();
                let sx = d.x + d.width - 3, sy = d.y + d.height - 3;
                ctx.beginPath();
                ctx.moveTo(sx, sy);
                ctx.lineTo(sx - 6, sy);
                ctx.lineTo(sx, sy - 6);
                ctx.closePath();
                ctx.fillStyle = 'black';
                ctx.fill();
                ctx.restore();
            }
            if (d.id == '*') {
                ctx.save();
                path = new Path2D();
                let px, py, flip = this.isRaised;
                if (this.position == ButtonViewPosition.Left || this.position == ButtonViewPosition.Right) {
                    px = [0.2, 0.7, 0.7];
                    py = [0.5, 0.3, 0.7];
                    if (this.position == ButtonViewPosition.Left)
                        flip = !flip;
                }
                else if (this.position == ButtonViewPosition.Top || this.position == ButtonViewPosition.Bottom) {
                    px = [0.5, 0.3, 0.7];
                    py = [0.2, 0.7, 0.7];
                    if (this.position == ButtonViewPosition.Top)
                        flip = !flip;
                }
                if (flip) {
                    px = [1 - px[0], 1 - px[1], 1 - px[2]];
                    py = [1 - py[0], 1 - py[1], 1 - py[2]];
                }
                path.moveTo(d.x + d.width * px[0], d.y + d.height * py[0]);
                path.lineTo(d.x + d.width * px[1], d.y + d.height * py[1]);
                path.lineTo(d.x + d.width * px[2], d.y + d.height * py[2]);
                path.closePath();
                ctx.fillStyle = 'white';
                ctx.strokeStyle = 'black';
                ctx.lineWidth = 0;
                ctx.fill(path);
                ctx.stroke(path);
                ctx.restore();
            }
            else if (d.id == '!') {
                ctx.save();
                let path1 = new Path2D(), path2 = new Path2D();
                let inset = 5;
                let w = d.width - inset * 2, h = d.height - inset * 2;
                for (let z = 5; z < w + h - 1; z += 12) {
                    let x1 = 0, y1 = z, x2 = z, y2 = 0;
                    if (y1 > h) {
                        let delta = y1 - h;
                        x1 += delta;
                        y1 -= delta;
                    }
                    if (x2 > w) {
                        let delta = x2 - w;
                        x2 -= delta;
                        y2 += delta;
                    }
                    path1.moveTo(d.x + inset + x1, d.y + inset + y1);
                    path1.lineTo(d.x + inset + x2, d.y + inset + y2);
                    path2.moveTo(d.x + inset + x1 + 1, d.y + inset + y1);
                    path2.lineTo(d.x + inset + x2 + 1, d.y + inset + y2);
                }
                ctx.lineWidth = 1;
                ctx.strokeStyle = '#404040';
                ctx.stroke(path1);
                ctx.strokeStyle = 'white';
                ctx.stroke(path2);
                ctx.restore();
            }
        }
        ctx.restore();
    }
    delayedRedraw() {
        window.setTimeout(() => this.redraw(), 100);
    }
    buttonFromID(id) {
        let bank = this.stack[this.stack.length - 1];
        for (let n = 0; n < bank.buttons.length; n++)
            if (bank.buttons[n].id == id)
                return bank.buttons[n];
        return null;
    }
    displayFromID(id) {
        for (let n = 0; n < this.display.length; n++)
            if (this.display[n].id == id)
                return this.display[n];
        return null;
    }
    traceOutline() {
        let w = this.width, h = this.height, uw = w - 1, uh = h - 1, r = 8;
        if (this.position == ButtonViewPosition.Centre || this.stack.length == 0)
            return (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.pathRoundedRect)(0.5, 0.5, w - 0.5, h - 0.5, r);
        let path = new Path2D();
        if (this.position == ButtonViewPosition.Left) {
            let my = 0.5 * h - 1, gw = this.gripHeight, hg = 0.5 * this.gripWidth;
            path.moveTo(0.5, 0.5);
            path.lineTo(0.5 + uw - gw - r, 0.5);
            path.bezierCurveTo(0.5 + uw - gw, 0.5, 0.5 + uw - gw, 0.5, 0.5 + uw - gw, 0.5 + r);
            path.lineTo(0.5 + uw - gw, 0.5 + my - hg);
            path.lineTo(0.5 + uw - r, 0.5 + my - hg);
            path.bezierCurveTo(0.5 + uw, 0.5 + my - hg, 0.5 + uw, 0.5 + my - hg, 0.5 + uw, 0.5 + my - hg + r);
            path.lineTo(0.5 + uw, 0.5 + my + hg - r);
            path.bezierCurveTo(0.5 + uw, 0.5 + my + hg, 0.5 + uw, 0.5 + my + hg, 0.5 + uw - r, 0.5 + my + hg);
            path.lineTo(0.5 + uw - gw, 0.5 + my + hg);
            path.lineTo(0.5 + uw - gw, 0.5 + uh - r);
            path.bezierCurveTo(0.5 + uw - gw, 0.5 + uh, 0.5 + uw - gw, 0.5 + uh, 0.5 + uw - gw - r, 0.5 + uh);
            path.lineTo(0.5, 0.5 + uh);
        }
        else if (this.position == ButtonViewPosition.Right) {
            let my = 0.5 * h - 1, gw = this.gripHeight, hg = 0.5 * this.gripWidth;
            path.moveTo(w - 0.5, 0.5);
            path.lineTo(w - (0.5 + uw - gw - r), 0.5);
            path.bezierCurveTo(w - (0.5 + uw - gw), 0.5, w - (0.5 + uw - gw), 0.5, w - (0.5 + uw - gw), 0.5 + r);
            path.lineTo(w - (0.5 + uw - gw), 0.5 + my - hg);
            path.lineTo(w - (0.5 + uw - r), 0.5 + my - hg);
            path.bezierCurveTo(w - (0.5 + uw), 0.5 + my - hg, w - (0.5 + uw), 0.5 + my - hg, w - (0.5 + uw), 0.5 + my - hg + r);
            path.lineTo(w - (0.5 + uw), 0.5 + my + hg - r);
            path.bezierCurveTo(w - (0.5 + uw), 0.5 + my + hg, w - (0.5 + uw), 0.5 + my + hg, w - (0.5 + uw - r), 0.5 + my + hg);
            path.lineTo(w - (0.5 + uw - gw), 0.5 + my + hg);
            path.lineTo(w - (0.5 + uw - gw), 0.5 + uh - r);
            path.bezierCurveTo(w - (0.5 + uw - gw), 0.5 + uh, w - (0.5 + uw - gw), 0.5 + uh, w - (0.5 + uw - gw - r), 0.5 + uh);
            path.lineTo(w - 0.5, 0.5 + uh);
        }
        else if (this.position == ButtonViewPosition.Top) {
            let mx = 0.5 * w - 1, gh = this.gripHeight, hg = 0.5 * this.gripWidth;
            path.moveTo(0.5, h - (0.5 + uh));
            path.lineTo(0.5, h - (0.5 + gh + r));
            path.bezierCurveTo(0.5, h - (0.5 + gh), 0.5, h - (0.5 + gh), 0.5 + r, h - (0.5 + gh));
            path.lineTo(0.5 + mx - hg, h - (0.5 + gh));
            path.lineTo(0.5 + mx - hg, h - (0.5 + r));
            path.bezierCurveTo(0.5 + mx - hg, h - 0.5, 0.5 + mx - hg, h - 0.5, 0.5 + mx - hg + r, h - 0.5);
            path.lineTo(0.5 + mx + hg - r, h - 0.5);
            path.bezierCurveTo(0.5 + mx + hg, h - 0.5, 0.5 + mx + hg, h - 0.5, 0.5 + mx + hg, h - (0.5 + r));
            path.lineTo(0.5 + mx + hg, h - (0.5 + gh));
            path.lineTo(0.5 + uw - r, h - (0.5 + gh));
            path.bezierCurveTo(0.5 + uw, h - (0.5 + gh), 0.5 + uw, h - (0.5 + gh), 0.5 + uw, h - (0.5 + gh + r));
            path.lineTo(0.5 + uw, h - (0.5 + uh));
        }
        else if (this.position == ButtonViewPosition.Bottom) {
            let mx = 0.5 * w - 1, gh = this.gripHeight, hg = 0.5 * this.gripWidth;
            path.moveTo(0.5, 0.5 + uh);
            path.lineTo(0.5, 0.5 + gh + r);
            path.bezierCurveTo(0.5, 0.5 + gh, 0.5, 0.5 + gh, 0.5 + r, 0.5 + gh);
            path.lineTo(0.5 + mx - hg, 0.5 + gh);
            path.lineTo(0.5 + mx - hg, 0.5 + r);
            path.bezierCurveTo(0.5 + mx - hg, 0.5, 0.5 + mx - hg, 0.5, 0.5 + mx - hg + r, 0.5);
            path.lineTo(0.5 + mx + hg - r, 0.5);
            path.bezierCurveTo(0.5 + mx + hg, 0.5, 0.5 + mx + hg, 0.5, 0.5 + mx + hg, 0.5 + r);
            path.lineTo(0.5 + mx + hg, 0.5 + gh);
            path.lineTo(0.5 + uw - r, 0.5 + gh);
            path.bezierCurveTo(0.5 + uw, 0.5 + gh, 0.5 + uw, 0.5 + gh, 0.5 + uw, 0.5 + gh + r);
            path.lineTo(0.5 + uw, 0.5 + uh);
        }
        return path;
    }
    layoutMaxWidth(bank, slotWidth) {
        if (bank.buttons.length == 0)
            return [[null]];
        let bx = new Array(bank.buttons.length), by = new Array(bank.buttons.length);
        let x = 0, y = 0, w = 0, h = 0;
        for (let n = 0; n < bank.buttons.length; n++) {
            w = Math.max(x + 1, w);
            h = Math.max(y + 1, h);
            bx[n] = x;
            by[n] = y;
            x++;
            if (x >= slotWidth) {
                x = 0;
                y++;
            }
        }
        let slot = new Array(h);
        for (let n = 0; n < h; n++)
            slot[n] = new Array(w);
        for (let n = 0; n < bank.buttons.length; n++) {
            slot[by[n]][bx[n]] = bank.buttons[n].id;
        }
        return slot;
    }
    layoutMaxHeight(bank, slotHeight, slotWidth) {
        if (bank.buttons.length == 0)
            return [[null]];
        let bx = new Array(bank.buttons.length), by = new Array(bank.buttons.length);
        let x = 0, y = 0, w = 0, h = 0;
        for (let n = 0; n < bank.buttons.length; n++) {
            w = Math.max(x + 1, w);
            h = Math.max(y + 1, h);
            bx[n] = x;
            by[n] = y;
            x++;
            if (x >= slotWidth) {
                x = 0;
                y++;
            }
        }
        let slot = new Array(h);
        for (let n = 0; n < h; n++)
            slot[n] = new Array(w);
        for (let n = 0; n < bank.buttons.length; n++) {
            slot[by[n]][bx[n]] = bank.buttons[n].id;
        }
        return slot;
    }
    scoreLayout(slots) {
        let score = 0;
        let nrows = slots.length, ncols = slots[0].length;
        for (let y = 0; y < nrows; y++)
            for (let x = 0; x < ncols; x++) {
                if (slots[y][x] == null)
                    score++;
            }
        if (this.maxButtonRows > 0 && nrows > this.maxButtonRows)
            score += (nrows - this.maxButtonRows) * 100;
        if (this.maxButtonColumns > 0 && ncols > this.maxButtonColumns)
            score += (ncols - this.maxButtonColumns) * 100;
        return score;
    }
    pickButtonIndex(x, y) {
        for (let n = 0; n < this.display.length; n++) {
            let d = this.display[n];
            if (x >= d.x && y >= d.y && x < d.x + d.width && y < d.y + d.height)
                return n;
        }
        return -1;
    }
    pickButtonID(x, y) {
        let idx = this.pickButtonIndex(x, y);
        if (idx < 0)
            return undefined;
        return this.display[idx].id;
    }
    triggerButton(id) {
        if (id == '*') {
            if (this.isRaised)
                this.lowerBank();
            else
                this.raiseBank();
            return;
        }
        else if (id == '!') {
            this.popBank();
            return;
        }
        let bank = this.stack[this.stack.length - 1];
        bank.hitButton(id);
    }
    mouseClick(event) {
    }
    mouseDoubleClick(event) {
        event.stopImmediatePropagation();
    }
    mouseDown(event) {
        this.contentDOM.parent().grabFocus();
        let xy = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.eventCoords)(event, this.contentDOM);
        if (!this.withinOutline(xy[0], xy[1]))
            return;
        let id = this.pickButtonID(xy[0], xy[1]);
        if (id != this.highlightButton) {
            this.highlightButton = id;
            this.redraw();
        }
        event.stopPropagation();
    }
    mouseUp(event) {
        let xy = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.eventCoords)(event, this.contentDOM);
        if (!this.withinOutline(xy[0], xy[1]))
            return;
        let id = this.pickButtonID(xy[0], xy[1]);
        if (id != null && this.highlightButton == id) {
            this.highlightButton = undefined;
            this.triggerButton(id);
            this.delayedRedraw();
        }
        else {
            this.highlightButton = undefined;
            this.delayedRedraw();
        }
        event.stopPropagation();
    }
    mouseOver(event) {
        let xy = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.eventCoords)(event, this.contentDOM);
        if (!this.withinOutline(xy[0], xy[1]))
            return;
        event.stopPropagation();
    }
    mouseOut(event) {
        let xy = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.eventCoords)(event, this.contentDOM);
        if (!this.withinOutline(xy[0], xy[1])) {
            if (this.highlightButton != null) {
                this.highlightButton = null;
                this.delayedRedraw();
            }
            return;
        }
        if (this.highlightButton != null) {
            let xy = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.eventCoords)(event, this.contentDOM);
            let id = this.pickButtonID(xy[0], xy[1]);
            if (id != this.highlightButton) {
                this.highlightButton = null;
                this.delayedRedraw();
            }
        }
        event.stopPropagation();
    }
    mouseMove(event) {
        let xy = (0,_util_util__WEBPACK_IMPORTED_MODULE_4__.eventCoords)(event, this.contentDOM);
        if (!this.withinOutline(xy[0], xy[1]))
            return;
    }
}


/***/ }),

/***/ "./src/ui/ClipboardProxy.ts":
/*!**********************************!*\
  !*** ./src/ui/ClipboardProxy.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ClipboardProxy: () => (/* binding */ ClipboardProxy),
/* harmony export */   ClipboardProxyHandler: () => (/* binding */ ClipboardProxyHandler),
/* harmony export */   ClipboardProxyWeb: () => (/* binding */ ClipboardProxyWeb)
/* harmony export */ });
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class ClipboardProxyHandler {
    copyEvent(andCut, proxy) { return false; }
    pasteEvent(proxy) { return false; }
}
class ClipboardProxy {
    constructor() {
        this.handlers = [new ClipboardProxyHandler()];
        this.triggerBackupPaste = null;
    }
    pushHandler(handler) {
        this.handlers.push(handler);
    }
    popHandler() {
        this.handlers.pop();
    }
    currentHandler() {
        return _util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.last(this.handlers);
    }
    triggerCopy(andCut) {
        if (this.currentHandler().copyEvent(andCut, this))
            return;
        document.execCommand(andCut ? 'cut' : 'copy');
    }
    triggerPaste() {
        if (this.currentHandler().pasteEvent(this))
            return;
        document.execCommand('paste');
    }
    getString() { return null; }
    setString(str) { }
    setImage(blob) { }
    canSetHTML() { return false; }
    setHTML(html) { }
    canAlwaysGet() { return false; }
    downloadString(str, fn) { }
}
class ClipboardProxyWeb extends ClipboardProxy {
    constructor() {
        super();
        this.lastContent = null;
        this.fakeTextArea = null;
        this.busy = false;
        document.addEventListener('copy', (event) => {
            var _a;
            if (this.busy)
                return null;
            if ((_a = this.currentHandler()) === null || _a === void 0 ? void 0 : _a.copyEvent(false, this)) {
                event.preventDefault();
                return false;
            }
        });
        document.addEventListener('cut', (event) => {
            var _a;
            if (this.busy)
                return null;
            if ((_a = this.currentHandler()) === null || _a === void 0 ? void 0 : _a.copyEvent(true, this)) {
                event.preventDefault();
                return false;
            }
        });
        document.addEventListener('paste', (event) => {
            var _a;
            let wnd = window;
            this.lastContent = null;
            if (wnd.clipboardData && wnd.clipboardData.getData)
                this.lastContent = wnd.clipboardData.getData('Text');
            else if (event.clipboardData && event.clipboardData.getData)
                this.lastContent = event.clipboardData.getData('text/plain');
            let consumed = (_a = this.currentHandler()) === null || _a === void 0 ? void 0 : _a.pasteEvent(this);
            this.lastContent = null;
            if (consumed) {
                event.preventDefault();
                return false;
            }
            return true;
        });
    }
    getString() {
        return this.lastContent;
    }
    setString(str) {
        let fallbackWorkaround = () => {
            if (this.fakeTextArea == null) {
                this.fakeTextArea = document.createElement('textarea');
                this.fakeTextArea.style.fontSize = '12pt';
                this.fakeTextArea.style.border = '0';
                this.fakeTextArea.style.padding = '0';
                this.fakeTextArea.style.margin = '0';
                this.fakeTextArea.style.position = 'fixed';
                this.fakeTextArea.style['left'] = '-9999px';
                this.fakeTextArea.style.top = (window.pageYOffset || document.documentElement.scrollTop) + 'px';
                this.fakeTextArea.setAttribute('readonly', '');
                document.body.appendChild(this.fakeTextArea);
            }
            this.fakeTextArea.value = str;
            this.fakeTextArea.select();
            this.busy = true;
            document.execCommand('copy');
            this.busy = false;
        };
        if (navigator.clipboard) {
            navigator.clipboard.writeText(str).then(() => { }, fallbackWorkaround);
        }
        else
            fallbackWorkaround();
    }
    setImage(blob) {
        let item = new ClipboardItem({ 'image/png': blob });
        this.busy = true;
        (() => __awaiter(this, void 0, void 0, function* () {
            yield navigator.clipboard.write([item]);
            this.busy = false;
        }))();
    }
}


/***/ }),

/***/ "./src/ui/EmbedChemistry.ts":
/*!**********************************!*\
  !*** ./src/ui/EmbedChemistry.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EmbedChemistry: () => (/* binding */ EmbedChemistry)
/* harmony export */ });
/* harmony import */ var _gfx_Rendering__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../gfx/Rendering */ "./src/gfx/Rendering.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _Widget__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Widget */ "./src/ui/Widget.ts");



class EmbedChemistry extends _Widget__WEBPACK_IMPORTED_MODULE_2__.Widget {
    constructor() {
        super();
        this.padding = 4;
        this.borderCol = 0xD0D0D0;
        this.borderRadius = 8;
        this.backgroundCol1 = 0xFFFFFF;
        this.backgroundCol2 = 0xF0F0F0;
        this.policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_0__.RenderPolicy.defaultColourOnWhite();
    }
    clearBackground() { this.backgroundCol1 = null; this.backgroundCol2 = null; }
    setBackground(bg) { this.backgroundCol1 = bg; this.backgroundCol2 = null; }
    setBackgroundGradient(bg1, bg2) { this.backgroundCol1 = bg1; this.backgroundCol2 = bg2; }
    render(parent) {
        super.render(parent);
        let content = this.contentDOM;
        if (this.borderCol != null)
            content.setCSS('border', '1px solid ' + (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourCanvas)(this.borderCol));
        if (this.borderRadius > 0)
            content.setCSS('border-radius', this.borderRadius + 'px');
        let bg1 = this.backgroundCol1, bg2 = this.backgroundCol2;
        if (bg1 != null && bg2 != null) {
            let cols = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourCanvas)(bg1) + ',' + (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourCanvas)(bg2);
            content.setCSS('background-image', 'linear-gradient(to bottom right, ' + cols + ')');
        }
        else if (bg1 != null) {
            content.setCSS('background-color', (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.colourCanvas)(bg1));
        }
        content.css({ 'padding': this.padding + 'px', 'margin': '0' });
    }
}


/***/ }),

/***/ "./src/ui/EmbedCollection.ts":
/*!***********************************!*\
  !*** ./src/ui/EmbedCollection.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EmbedCollection: () => (/* binding */ EmbedCollection)
/* harmony export */ });
/* harmony import */ var _aspect_Aspect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../aspect/Aspect */ "./src/aspect/Aspect.ts");
/* harmony import */ var _aspect_AspectList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../aspect/AspectList */ "./src/aspect/AspectList.ts");
/* harmony import */ var _io_DataSheetStream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../io/DataSheetStream */ "./src/io/DataSheetStream.ts");
/* harmony import */ var _io_MDLReader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../io/MDLReader */ "./src/io/MDLReader.ts");
/* harmony import */ var _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../gfx/ArrangeMeasurement */ "./src/gfx/ArrangeMeasurement.ts");
/* harmony import */ var _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../gfx/ArrangeMolecule */ "./src/gfx/ArrangeMolecule.ts");
/* harmony import */ var _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../gfx/DrawMolecule */ "./src/gfx/DrawMolecule.ts");
/* harmony import */ var _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../gfx/MetaVector */ "./src/gfx/MetaVector.ts");
/* harmony import */ var _gfx_Rendering__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../gfx/Rendering */ "./src/gfx/Rendering.ts");
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _util_Vec__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _EmbedChemistry__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./EmbedChemistry */ "./src/ui/EmbedChemistry.ts");













class EmbedCollection extends _EmbedChemistry__WEBPACK_IMPORTED_MODULE_12__.EmbedChemistry {
    constructor(datastr, options) {
        super();
        this.datastr = datastr;
        this.ds = null;
        this.failmsg = '';
        this.tight = false;
        if (!options)
            options = {};
        if (options.encoding == 'base64')
            datastr = (0,_util_util__WEBPACK_IMPORTED_MODULE_10__.fromUTF8)(atob(datastr.trim()));
        let ds = null, name = options.name;
        if (options.format == 'datasheet' || options.format == 'chemical/x-datasheet') {
            ds = _io_DataSheetStream__WEBPACK_IMPORTED_MODULE_2__.DataSheetStream.readXML(datastr);
        }
        else if (options.format == 'sdfile' || options.format == 'chemical/x-mdl-sdfile') {
            try {
                let mdl = new _io_MDLReader__WEBPACK_IMPORTED_MODULE_3__.MDLSDFReader(datastr);
                ds = mdl.parse();
            }
            catch (ex) {
                this.failmsg = ex;
            }
        }
        else {
            try {
                ds = _io_DataSheetStream__WEBPACK_IMPORTED_MODULE_2__.DataSheetStream.readXML(datastr);
            }
            catch (ex) { }
            if (ds == null) {
                try {
                    let mdl = new _io_MDLReader__WEBPACK_IMPORTED_MODULE_3__.MDLSDFReader(datastr);
                    ds = mdl.parse();
                }
                catch (ex) { }
            }
        }
        if (ds == null)
            return;
        if (options.padding)
            this.padding = options.padding;
        if (options.background == 'transparent')
            this.clearBackground();
        else if (options.background) {
            let bg = options.background, comma = bg.indexOf(',');
            if (comma < 0)
                this.setBackground((0,_util_util__WEBPACK_IMPORTED_MODULE_10__.htmlToRGB)(bg));
            else
                this.setBackgroundGradient((0,_util_util__WEBPACK_IMPORTED_MODULE_10__.htmlToRGB)(bg.substring(0, comma)), (0,_util_util__WEBPACK_IMPORTED_MODULE_10__.htmlToRGB)(bg.substring(comma + 1)));
        }
        if (options.border == 'transparent')
            this.borderCol = _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_7__.MetaVector.NOCOLOUR;
        else if (options.border)
            this.borderCol = (0,_util_util__WEBPACK_IMPORTED_MODULE_10__.htmlToRGB)(options.border);
        if (options.radius != null)
            this.borderRadius = parseInt(options.radius);
        if (options.scheme == 'wob')
            this.policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_8__.RenderPolicy.defaultWhiteOnBlack();
        else if (options.scheme == 'cob')
            this.policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_8__.RenderPolicy.defaultColourOnBlack();
        else if (options.scheme == 'bow')
            this.policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_8__.RenderPolicy.defaultBlackOnWhite();
        else if (options.scheme == 'cow')
            this.policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_8__.RenderPolicy.defaultColourOnWhite();
        if (options.scale)
            this.policy.data.pointScale = options.scale;
        if (options.tight == true || options.tight == 'true')
            this.tight = true;
        this.ds = ds;
    }
    render(parent) {
        this.tagType = 'span';
        super.render(parent);
        let span = this.contentDOM, ds = this.ds, policy = this.policy;
        span.css({ 'display': 'inline-block', 'line-height': '0' });
        if (!this.tight)
            span.setCSS('margin-bottom', '1.5em');
        if (ds != null) {
            let aspects = new _aspect_AspectList__WEBPACK_IMPORTED_MODULE_1__.AspectList(ds).enumerate();
            let columns = this.determineColumns(aspects);
            let table = (0,_util_dom__WEBPACK_IMPORTED_MODULE_9__.dom)('<table/>').appendTo(span);
            table.css({ 'font-family': '"HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif' });
            table.css({ 'border-collapse': 'collapse', 'line-height': '1', 'margin': '2px', 'border': '0' });
            let tr = (0,_util_dom__WEBPACK_IMPORTED_MODULE_9__.dom)('<tr/>').appendTo(table).css({ 'line-height': '1' });
            for (let n = 0; n < columns.length; n++) {
                let th = (0,_util_dom__WEBPACK_IMPORTED_MODULE_9__.dom)('<th/>').appendTo(tr);
                th.css({ 'white-space': 'nowrap', 'font-weight': '600', 'text-decoration': 'underline', 'text-align': 'center' });
                th.css({ 'padding': '0.2em 0.5em 0.2em 0.5em', 'color': 'black', 'border': '0' });
                th.setText(columns[n].name);
            }
            for (let row = 0; row < ds.numRows;) {
                let blksz = 1;
                for (let aspect of aspects)
                    blksz = Math.max(blksz, aspect.rowBlockCount(row));
                tr = (0,_util_dom__WEBPACK_IMPORTED_MODULE_9__.dom)('<tr/>').appendTo(table).css({ 'line-height': '1' });
                for (let col = 0; col < columns.length; col++) {
                    let td = (0,_util_dom__WEBPACK_IMPORTED_MODULE_9__.dom)('<td/>').appendTo(tr);
                    td.css({ 'border': '1px solid #D0D0D0', 'padding': '0.2em', 'vertical-align': 'middle' });
                    let spec = columns[col];
                    if (spec.aspect == null) {
                        if (ds.isNull(row, spec.idx))
                            td.setText(' ');
                        else if (ds.colType(spec.idx) == "molecule")
                            this.renderMolecule(td, row, spec.idx);
                        else
                            this.renderPrimitive(td, row, spec.idx);
                    }
                    else if (spec.type == 'text')
                        this.renderTextAspect(td, row, spec.aspect, spec.idx);
                    else if (spec.type == 'graphic')
                        this.renderGraphicAspect(td, row, spec.aspect, spec.idx);
                }
                row += blksz;
            }
        }
        else {
            span.css({ 'color': 'red' });
            span.setText('Unable to parse datasheet: ' + this.failmsg);
            let pre = (0,_util_dom__WEBPACK_IMPORTED_MODULE_9__.dom)('<pre/>').appendTo(span);
            pre.css({ 'line-height': '1.1' });
            pre.setText(this.datastr);
            console.log('Unparseable datasheet source string:\n[' + this.datastr + ']');
        }
    }
    determineColumns(aspects) {
        let ds = this.ds;
        let columns = [];
        let reserved = _util_Vec__WEBPACK_IMPORTED_MODULE_11__.Vec.booleanArray(false, ds.numCols);
        let names = [];
        for (let n = 0; n < ds.numCols; n++)
            names.push(ds.colName(n));
        for (let aspect of aspects) {
            if (ds.numRows > 0)
                for (let n = 0, num = aspect.numTextRenderings(0); n < num; n++) {
                    let title = aspect.produceTextRendering(0, n).name;
                    columns.push({ 'name': title, 'aspect': aspect, 'type': 'text', 'idx': n });
                }
            if (ds.numRows > 0)
                for (let n = 0, num = aspect.numGraphicRenderings(0); n < num; n++) {
                    let title = aspect.produceGraphicRendering(0, n, this.policy).name;
                    columns.push({ 'name': title, 'aspect': aspect, 'type': 'graphic', 'idx': n });
                }
            let claimed = aspect.areColumnsReserved(names);
            for (let n = 0; n < names.length; n++)
                reserved[n] = reserved[n] || claimed[n];
        }
        for (let n = 0; n < ds.numCols; n++)
            if (!reserved[n] && ds.colType(n) != "extend") {
                columns.push({ 'name': ds.colName(n), 'aspect': null, 'type': null, 'idx': n });
            }
        return columns;
    }
    renderPrimitive(td, row, col) {
        let txt = '', ct = this.ds.colType(col), align = 'center';
        if (ct == "string") {
            txt = this.ds.getString(row, col);
            align = 'left';
        }
        else if (ct == "integer")
            txt = this.ds.getInteger(row, col).toString();
        else if (ct == "real")
            txt = this.ds.getReal(row, col).toString();
        else if (ct == "boolean")
            txt = this.ds.getBoolean(row, col) ? 'true' : 'false';
        td.setText(txt);
        td.css({ 'text-align': align });
    }
    renderMolecule(td, row, col) {
        td.css({ 'text-align': 'center' });
        let effects = new _gfx_Rendering__WEBPACK_IMPORTED_MODULE_8__.RenderEffects();
        let measure = new _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_4__.OutlineMeasurement(0, 0, this.policy.data.pointScale);
        let layout = new _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_5__.ArrangeMolecule(this.ds.getMolecule(row, col), measure, this.policy, effects);
        layout.arrange();
        let metavec = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_7__.MetaVector();
        new _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_6__.DrawMolecule(layout, metavec).draw();
        metavec.normalise();
        (0,_util_dom__WEBPACK_IMPORTED_MODULE_9__.dom)(metavec.createSVG()).appendTo(td);
    }
    renderTextAspect(td, row, aspect, idx) {
        let rend = aspect.produceTextRendering(row, idx);
        if (!rend.text)
            td.setText(' ');
        else if (rend.type == _aspect_Aspect__WEBPACK_IMPORTED_MODULE_0__.Aspect.TEXT_PLAIN)
            td.setText(rend.text);
        else if (rend.type == _aspect_Aspect__WEBPACK_IMPORTED_MODULE_0__.Aspect.TEXT_LINK) {
            let ahref = (0,_util_dom__WEBPACK_IMPORTED_MODULE_9__.dom)('<a target="_blank"/>').appendTo(td);
            ahref.setAttr('href', rend.text);
            ahref.setText(rend.text);
        }
        else if (rend.type == _aspect_Aspect__WEBPACK_IMPORTED_MODULE_0__.Aspect.TEXT_HTML)
            td.setHTML(rend.text);
    }
    renderGraphicAspect(td, row, aspect, idx) {
        let metavec = aspect.produceGraphicRendering(row, idx, this.policy).metavec;
        if (metavec == null) {
            td.setText(' ');
            return;
        }
        td.css({ 'text-align': 'center' });
        metavec.normalise();
        (0,_util_dom__WEBPACK_IMPORTED_MODULE_9__.dom)(metavec.createSVG()).appendTo(td);
    }
}


/***/ }),

/***/ "./src/ui/EmbedMolecule.ts":
/*!*********************************!*\
  !*** ./src/ui/EmbedMolecule.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EmbedMolecule: () => (/* binding */ EmbedMolecule)
/* harmony export */ });
/* harmony import */ var _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mol/CoordUtil */ "./src/mol/CoordUtil.ts");
/* harmony import */ var _io_MDLReader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../io/MDLReader */ "./src/io/MDLReader.ts");
/* harmony import */ var _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../gfx/ArrangeMeasurement */ "./src/gfx/ArrangeMeasurement.ts");
/* harmony import */ var _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../gfx/ArrangeMolecule */ "./src/gfx/ArrangeMolecule.ts");
/* harmony import */ var _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../gfx/DrawMolecule */ "./src/gfx/DrawMolecule.ts");
/* harmony import */ var _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../gfx/MetaVector */ "./src/gfx/MetaVector.ts");
/* harmony import */ var _gfx_Rendering__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../gfx/Rendering */ "./src/gfx/Rendering.ts");
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _util_Geom__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/Geom */ "./src/util/Geom.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _EmbedChemistry__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./EmbedChemistry */ "./src/ui/EmbedChemistry.ts");












class EmbedMolecule extends _EmbedChemistry__WEBPACK_IMPORTED_MODULE_11__.EmbedChemistry {
    constructor(molstr, options) {
        super();
        this.molstr = molstr;
        this.mol = null;
        this.name = '';
        this.failmsg = '';
        this.maxWidth = 0;
        this.maxHeight = 0;
        this.boxSize = null;
        this.tight = false;
        if (!options)
            options = {};
        let mol = null, name = options.name;
        if (options.format == 'sketchel' || options.format == 'chemical/x-sketchel') {
            mol = _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.fromString(molstr);
        }
        else if (options.format == 'molfile' || options.format == 'chemical/x-mdl-molfile') {
            try {
                let mdl = new _io_MDLReader__WEBPACK_IMPORTED_MODULE_1__.MDLMOLReader(molstr);
                mol = mdl.parse();
                if (mol != null && name == null)
                    name = mdl.molName;
            }
            catch (ex) {
                this.failmsg = ex;
            }
        }
        else {
            mol = _mol_Molecule__WEBPACK_IMPORTED_MODULE_2__.Molecule.fromString(molstr);
            if (mol == null) {
                try {
                    let mdl = new _io_MDLReader__WEBPACK_IMPORTED_MODULE_1__.MDLMOLReader(molstr);
                    mol = mdl.parse();
                    if (mol != null && name == null)
                        name = mdl.molName;
                }
                catch (ex) { }
            }
        }
        if (mol == null)
            return;
        if (options.invert)
            mol = _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_0__.CoordUtil.mirrorImage(mol);
        if (options.rotate)
            _mol_CoordUtil__WEBPACK_IMPORTED_MODULE_0__.CoordUtil.rotateMolecule(mol, options.rotate * _util_util__WEBPACK_IMPORTED_MODULE_10__.DEGRAD);
        if (options.padding)
            this.padding = options.padding;
        if (options.background == 'transparent')
            this.clearBackground();
        else if (options.background) {
            let bg = options.background, comma = bg.indexOf(',');
            if (comma < 0)
                this.setBackground((0,_util_util__WEBPACK_IMPORTED_MODULE_10__.htmlToRGB)(bg));
            else
                this.setBackgroundGradient((0,_util_util__WEBPACK_IMPORTED_MODULE_10__.htmlToRGB)(bg.substring(0, comma)), (0,_util_util__WEBPACK_IMPORTED_MODULE_10__.htmlToRGB)(bg.substring(comma + 1)));
        }
        if (options.border == 'transparent')
            this.borderCol = _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_6__.MetaVector.NOCOLOUR;
        else if (options.border)
            this.borderCol = (0,_util_util__WEBPACK_IMPORTED_MODULE_10__.htmlToRGB)(options.border);
        if (options.radius != null)
            this.borderRadius = parseInt(options.radius);
        if (options.width)
            this.maxWidth = options.width;
        if (options.height)
            this.maxHeight = options.height;
        if (options.box) {
            let box = options.box, comma = box.indexOf(',');
            this.boxSize = new _util_Geom__WEBPACK_IMPORTED_MODULE_9__.Size(parseInt(box.substring(0, comma)), parseInt(box.substring(comma + 1)));
        }
        if (options.scheme == 'wob')
            this.policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_7__.RenderPolicy.defaultWhiteOnBlack();
        else if (options.scheme == 'cob')
            this.policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_7__.RenderPolicy.defaultColourOnBlack();
        else if (options.scheme == 'bow')
            this.policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_7__.RenderPolicy.defaultBlackOnWhite();
        else if (options.scheme == 'cow')
            this.policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_7__.RenderPolicy.defaultColourOnWhite();
        if (options.scale)
            this.policy.data.pointScale = options.scale;
        if (options.tight == true || options.tight == 'true')
            this.tight = true;
        this.mol = mol;
        this.name = name;
    }
    render(parent) {
        this.tagType = 'span';
        super.render(parent);
        let span = this.contentDOM, mol = this.mol, policy = this.policy;
        span.css({ 'display': 'inline-block', 'line-height': '0' });
        if (!this.tight)
            span.setCSS('margin-bottom', '1.5em');
        if (mol != null && mol.numAtoms > 0) {
            span.setCSS('text-align', 'center');
            let effects = new _gfx_Rendering__WEBPACK_IMPORTED_MODULE_7__.RenderEffects();
            let measure = new _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_3__.OutlineMeasurement(0, 0, policy.data.pointScale);
            let layout = new _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_4__.ArrangeMolecule(mol, measure, policy, effects);
            layout.arrange();
            if (this.boxSize)
                layout.squeezeInto(0, 0, this.boxSize.w, this.boxSize.h);
            else if (this.maxWidth > 0 || this.maxHeight > 0) {
                let bounds = layout.determineBoundary();
                let w = bounds[2] - bounds[0], h = bounds[3] - bounds[1];
                let limW = this.maxWidth == 0 ? w : Math.min(w, this.maxWidth);
                let limH = this.maxHeight == 0 ? h : Math.min(h, this.maxHeight);
                if (limW != w || limH != h)
                    layout.squeezeInto(0, 0, limW, limH);
            }
            let metavec = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_6__.MetaVector();
            new _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_5__.DrawMolecule(layout, metavec).draw();
            if (this.boxSize == null)
                metavec.normalise();
            else
                metavec.setSize(this.boxSize.w, this.boxSize.h);
            let svg = (0,_util_dom__WEBPACK_IMPORTED_MODULE_8__.dom)(metavec.createSVG()).appendTo(span);
            if (this.name) {
                let p = (0,_util_dom__WEBPACK_IMPORTED_MODULE_8__.dom)('<p/>').appendTo(span);
                p.css({ 'padding': '0.2em 0 0 0', 'margin': '0', 'width': '100%', 'color': '#606060', 'line-height': '1' });
                p.css({ 'font-family': '"HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif' });
                p.setText(this.name);
            }
        }
        else {
            span.css({ 'color': 'red' });
            span.setText('Unable to parse molecule: ' + this.failmsg);
            let pre = (0,_util_dom__WEBPACK_IMPORTED_MODULE_8__.dom)('<pre/>').appendTo(span);
            pre.css({ 'line-height': '1.1' });
            pre.setText(this.molstr);
            console.log('Unparseable molecule source string:\n[' + this.molstr + ']');
        }
    }
}


/***/ }),

/***/ "./src/ui/EmbedReaction.ts":
/*!*********************************!*\
  !*** ./src/ui/EmbedReaction.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EmbedReaction: () => (/* binding */ EmbedReaction),
/* harmony export */   EmbedReactionFacet: () => (/* binding */ EmbedReactionFacet)
/* harmony export */ });
/* harmony import */ var _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../aspect/Experiment */ "./src/aspect/Experiment.ts");
/* harmony import */ var _io_DataSheetStream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../io/DataSheetStream */ "./src/io/DataSheetStream.ts");
/* harmony import */ var _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mol/MolUtil */ "./src/mol/MolUtil.ts");
/* harmony import */ var _rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../rxn/QuantityCalc */ "./src/rxn/QuantityCalc.ts");
/* harmony import */ var _gfx_ArrangeExperiment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../gfx/ArrangeExperiment */ "./src/gfx/ArrangeExperiment.ts");
/* harmony import */ var _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../gfx/ArrangeMeasurement */ "./src/gfx/ArrangeMeasurement.ts");
/* harmony import */ var _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../gfx/ArrangeMolecule */ "./src/gfx/ArrangeMolecule.ts");
/* harmony import */ var _gfx_DrawExperiment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../gfx/DrawExperiment */ "./src/gfx/DrawExperiment.ts");
/* harmony import */ var _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../gfx/DrawMolecule */ "./src/gfx/DrawMolecule.ts");
/* harmony import */ var _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../gfx/MetaVector */ "./src/gfx/MetaVector.ts");
/* harmony import */ var _gfx_Rendering__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../gfx/Rendering */ "./src/gfx/Rendering.ts");
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _EmbedChemistry__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./EmbedChemistry */ "./src/ui/EmbedChemistry.ts");














var EmbedReactionFacet;
(function (EmbedReactionFacet) {
    EmbedReactionFacet["HEADER"] = "header";
    EmbedReactionFacet["SCHEME"] = "scheme";
    EmbedReactionFacet["QUANTITY"] = "quantity";
    EmbedReactionFacet["METRICS"] = "metrics";
})(EmbedReactionFacet || (EmbedReactionFacet = {}));
class EmbedReaction extends _EmbedChemistry__WEBPACK_IMPORTED_MODULE_13__.EmbedChemistry {
    constructor(datastr, options) {
        super();
        this.datastr = datastr;
        this.row = 0;
        this.entry = null;
        this.failmsg = '';
        this.tight = false;
        this.facet = 'scheme';
        this.limitTotalW = 800;
        this.includeStoich = true;
        this.includeAnnot = false;
        if (!options)
            options = {};
        if (options.encoding == 'base64')
            datastr = (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.fromUTF8)(atob(datastr.trim()));
        let xs = null;
        if (options.format == 'datasheet' || options.format == 'chemical/x-datasheet') {
            let ds = _io_DataSheetStream__WEBPACK_IMPORTED_MODULE_1__.DataSheetStream.readXML(datastr);
            if (ds == null) {
                this.failmsg = 'Unable to parse raw XML datasheet.';
                return;
            }
            if (_aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.Experiment.isExperiment(ds))
                xs = new _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.Experiment(ds);
        }
        else {
            let ds = _io_DataSheetStream__WEBPACK_IMPORTED_MODULE_1__.DataSheetStream.readXML(datastr);
            if (ds == null) {
                this.failmsg = 'Unable to parse raw XML datasheet.';
                return;
            }
            if (_aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.Experiment.isExperiment(ds))
                xs = new _aspect_Experiment__WEBPACK_IMPORTED_MODULE_0__.Experiment(ds);
        }
        if (xs == null) {
            this.failmsg = 'Unable to instantiate Experiment aspect.';
            return;
        }
        if (xs.ds.numRows == 0) {
            this.failmsg = 'Experiment datasheet has no rows.';
            return;
        }
        if (options.row)
            this.row = options.row;
        if (this.row < 0 || this.row >= xs.ds.numRows) {
            this.failmsg = 'Requested row ' + this.row + ' out of bounds.';
            return;
        }
        this.entry = xs.getEntry(this.row);
        if (options.facet)
            this.facet = options.facet;
        if (options.padding)
            this.padding = options.padding;
        if (options.background == 'transparent')
            this.clearBackground();
        else if (options.background) {
            let bg = options.background, comma = bg.indexOf(',');
            if (comma < 0)
                this.setBackground((0,_util_util__WEBPACK_IMPORTED_MODULE_12__.htmlToRGB)(bg));
            else
                this.setBackgroundGradient((0,_util_util__WEBPACK_IMPORTED_MODULE_12__.htmlToRGB)(bg.substring(0, comma)), (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.htmlToRGB)(bg.substring(comma + 1)));
        }
        if (options.border == 'transparent')
            this.borderCol = _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.MetaVector.NOCOLOUR;
        else if (options.border)
            this.borderCol = (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.htmlToRGB)(options.border);
        if (options.radius != null)
            this.borderRadius = parseInt(options.radius);
        if (options.scheme == 'wob')
            this.policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_10__.RenderPolicy.defaultWhiteOnBlack();
        else if (options.scheme == 'cob')
            this.policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_10__.RenderPolicy.defaultColourOnBlack();
        else if (options.scheme == 'bow')
            this.policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_10__.RenderPolicy.defaultBlackOnWhite();
        else if (options.scheme == 'cow')
            this.policy = _gfx_Rendering__WEBPACK_IMPORTED_MODULE_10__.RenderPolicy.defaultColourOnWhite();
        if (options.scale)
            this.policy.data.pointScale = options.scale;
        if (options.tight == true || options.tight == 'true')
            this.tight = true;
        if (options.maximumwidth > 0)
            this.limitTotalW = options.maximumwidth;
        if (options.stoichiometry == false || options.stoichiometry == 'false')
            this.includeStoich = true;
        if (options.annotations == true || options.annotations == 'true')
            this.includeAnnot = true;
    }
    render(parent) {
        this.tagType = 'span';
        super.render(parent);
        let span = this.contentDOM;
        span.css({ 'display': 'inline-block', 'line-height': '0' });
        if (!this.tight)
            span.setCSS('margin-bottom', '1.5em');
        if (this.entry != null) {
            if (this.facet == EmbedReactionFacet.HEADER)
                this.renderHeader(span);
            else if (this.facet == EmbedReactionFacet.SCHEME)
                this.renderScheme(span);
            else if (this.facet == EmbedReactionFacet.QUANTITY)
                this.renderQuantity(span);
            else if (this.facet == EmbedReactionFacet.METRICS)
                this.renderMetrics(span);
        }
        else {
            span.css({ 'color': 'red' });
            span.setText('Failure to acquire data: ' + this.failmsg);
            let pre = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<pre/>').appendTo(span).css({ 'line-height': '1.1' });
            pre.setText(this.datastr);
            console.log('Unparseable datasheet source string:\n[' + this.datastr + ']');
        }
    }
    renderHeader(span) {
        let table = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<table/>').appendTo(span);
        table.css({ 'font-family': '"HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif' });
        table.css({ 'border-collapse': 'collapse', 'line-height': '1', 'margin': '2px', 'border': '0' });
        let titles = ['Title', 'Created', 'Modified', 'DOI'];
        for (let n = 0; n < 4; n++) {
            if (n == 3 && !this.entry.doi)
                continue;
            let tr = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<tr/>').appendTo(table).css({ 'line-height': '1' });
            let th = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<th/>').appendTo(tr);
            th.css({ 'white-space': 'nowrap', 'font-weight': '600', 'color': 'black', 'text-align': 'left', 'vertical-align': 'middle' });
            th.css({ 'padding': '0.2em 0.5em 0.2em 0.5em', 'border': '1px solid #D0D0D0' });
            th.setText(titles[n]);
            let td = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<td/>').appendTo(tr);
            td.css({ 'border': '1px solid #D0D0D0', 'padding': '0.2em', 'vertical-align': 'middle' });
            if (n == 0) {
                if (!this.entry.title)
                    td.setCSS('font-style', 'italic');
                td.setText(this.entry.title ? this.entry.title : '(none)');
            }
            else if (n == 1 || n == 2) {
                let date = n == 1 ? this.entry.createDate : this.entry.modifyDate;
                if (date == null)
                    td.setCSS('font-style', 'italic');
                td.setText(date == null ? '(none)' : date.toLocaleString());
            }
            else if (n == 3) {
                let url = this.doiToLink(this.entry.doi);
                if (url != null && (url.startsWith('http://') || url.startsWith('https://'))) {
                    let ahref = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<a target="_blank"/>').appendTo(td);
                    ahref.setAttr('href', url);
                    ahref.setText(this.entry.doi);
                }
                else
                    td.setText(this.entry.doi);
            }
        }
    }
    renderScheme(span) {
        let measure = new _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_5__.OutlineMeasurement(0, 0, this.policy.data.pointScale);
        let layout = new _gfx_ArrangeExperiment__WEBPACK_IMPORTED_MODULE_4__.ArrangeExperiment(this.entry, measure, this.policy);
        layout.limitTotalW = this.limitTotalW;
        layout.includeStoich = this.includeStoich;
        layout.includeAnnot = this.includeAnnot;
        layout.arrange();
        let metavec = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.MetaVector();
        new _gfx_DrawExperiment__WEBPACK_IMPORTED_MODULE_7__.DrawExperiment(layout, metavec).draw();
        metavec.normalise();
        let svg = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)(metavec.createSVG()).appendTo(span);
    }
    renderQuantity(span) {
        let quant = new _rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc(this.entry);
        quant.calculate();
        let table = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<table/>').appendTo(span);
        table.css({ 'font-family': '"HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif' });
        table.css({ 'border-collapse': 'collapse', 'line-height': '1', 'margin': '2px', 'border': '0' });
        let effects = new _gfx_Rendering__WEBPACK_IMPORTED_MODULE_10__.RenderEffects();
        let measure = new _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_5__.OutlineMeasurement(0, 0, this.policy.data.pointScale);
        for (let n = 0; n < quant.numQuantities; n++) {
            let qc = quant.getQuantity(n);
            let tr = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<tr/>').appendTo(table).css({ 'line-height': '1' });
            let td = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<td/>').appendTo(tr);
            td.css({ 'border': '1px solid #D0D0D0', 'padding': '0.2em', 'text-align': 'center', 'vertical-align': 'middle' });
            if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.notBlank(qc.comp.mol)) {
                let layout = new _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_6__.ArrangeMolecule(qc.comp.mol, measure, this.policy, effects);
                layout.arrange();
                let metavec = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.MetaVector();
                new _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_8__.DrawMolecule(layout, metavec).draw();
                metavec.normalise();
                let svg = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)(metavec.createSVG()).appendTo(td);
            }
            td = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<td/>').appendTo(tr);
            td.css({ 'border': '1px solid #D0D0D0', 'padding': '0.2em', 'text-align': 'left', 'vertical-align': 'top' });
            this.renderComponentText(td, qc);
        }
    }
    renderComponentText(parent, qc) {
        let title = [], content = [];
        if (qc.comp.name) {
            title.push('Name');
            content.push('<i>' + (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.escapeHTML)(qc.comp.name) + '</i>');
        }
        if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.notBlank(qc.comp.mol)) {
            let mw = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.molecularWeight(qc.comp.mol);
            title.push('Weight');
            content.push(mw.toFixed(4));
            let mf = _mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.molecularFormula(qc.comp.mol, ['<sub>', '</sub>', '<sup>', '</sup>']);
            title.push('Formula');
            content.push(mf);
        }
        if (qc.valueEquiv > 0) {
            let text = qc.valueEquiv.toString(), stat = qc.statEquiv;
            if (stat == 2)
                text = '<i>(' + text + ')</i>';
            else if (stat == 3)
                text += ' (conflicting)';
            title.push('Stoichiometry');
            content.push(text);
        }
        if (qc.valueMass > 0) {
            let text = _rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.formatMass(qc.valueMass), stat = qc.statMass;
            if (stat == 2)
                text = '<i>(' + text + ')</i>';
            else if (stat == 3)
                text += ' (conflicting)';
            title.push('Mass');
            content.push(text);
        }
        if (qc.valueVolume > 0) {
            let text = _rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.formatVolume(qc.valueVolume), stat = qc.statVolume;
            if (stat == 2)
                text = '<i>(' + text + ')</i>';
            else if (stat == 3)
                text += ' (conflicting)';
            title.push('Volume');
            content.push(text);
        }
        if (qc.valueMoles > 0) {
            let text = _rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.formatMoles(qc.valueMoles), stat = qc.statMoles;
            if (stat == 2)
                text = '<i>(' + text + ')</i>';
            else if (stat == 3)
                text += ' (conflicting)';
            title.push('Moles');
            content.push(text);
        }
        if (qc.valueDensity > 0) {
            let text = _rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.formatDensity(qc.valueDensity), stat = qc.statDensity;
            if (stat == 2)
                text = '<i>(' + text + ')</i>';
            else if (stat == 3)
                text += ' (conflicting)';
            title.push('Density');
            content.push(text);
        }
        if (qc.valueConc > 0) {
            let text = _rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.formatConc(qc.valueConc), stat = qc.statConc;
            if (stat == 2)
                text = '<i>(' + text + ')</i>';
            else if (stat == 3)
                text += ' (conflicting)';
            title.push('Concentration');
            content.push(text);
        }
        if (qc.valueYield > 0 && !qc.comp.waste) {
            let text = _rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.formatPercent(qc.valueYield), stat = qc.statYield;
            if (stat == 2)
                text = '<i>(' + text + ')</i>';
            else if (stat == 3)
                text += ' (conflicting)';
            title.push('Yield');
            content.push(text);
        }
        for (let n = 0; n < title.length; n++) {
            let p = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<p/>').appendTo(parent);
            p.setCSS('margin', '0.1em');
            p.append((0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<b>' + title[n] + '</b>'));
            p.appendText(': ');
            p.appendHTML(content[n]);
        }
    }
    renderMetrics(span) {
        let quant = new _rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc(this.entry);
        quant.calculate();
        let table = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<table/>').appendTo(span);
        table.css({ 'font-family': '"HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif' });
        table.css({ 'border-collapse': 'collapse', 'line-height': '1', 'margin': '2px', 'border': '0' });
        let effects = new _gfx_Rendering__WEBPACK_IMPORTED_MODULE_10__.RenderEffects();
        let measure = new _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_5__.OutlineMeasurement(0, 0, this.policy.data.pointScale);
        if (quant.numGreenMetrics > 0)
            for (let n = 0; n < 3; n++) {
                let tr = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<tr/>').appendTo(table).css({ 'line-height': '1' });
                let th = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<th/>').appendTo(tr);
                th.css({ 'border': '1px solid #D0D0D0', 'padding': '0.5em', 'font-weight': 'bold' });
                th.css({ 'text-align': 'right', 'vertical-align': 'middle', 'white-space': 'nowrap' });
                th.setText(n == 0 ? 'All Reactants' : n == 1 ? 'All Products' : 'All Waste');
                let td = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<td/>').appendTo(tr);
                td.css({ 'border': '1px solid #D0D0D0', 'padding': '0.5em', 'white-space': 'nowrap' });
                td.css({ 'text-align': 'left', 'vertical-align': 'middle' });
                if (n == 0) {
                    td.setText(this.combineQuant(quant.getAllMassReact(), 'g') + ' = ' + this.sumQuant(quant.getAllMassReact(), 'g', true));
                }
                else if (n == 1) {
                    td.setText(this.combineQuant(quant.getAllMassProd(), 'g') + ' = ' + this.sumQuant(quant.getAllMassProd(), 'g', true));
                }
                else if (n == 2) {
                    if (quant.getAllMassWaste().length > 0)
                        td.setText(this.combineQuant(quant.getAllMassWaste(), 'g') + ' = ' + this.sumQuant(quant.getAllMassWaste(), 'g', false));
                    else
                        td.setText('none');
                }
            }
        else {
            let tr = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<tr/>').appendTo(table);
            let td = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<td/>').appendTo(tr);
            td.setText('No metrics to show.');
        }
        for (let n = 0; n < quant.numGreenMetrics; n++) {
            let gm = quant.getGreenMetrics(n);
            let qc = quant.getQuantity(gm.idx);
            let tr = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<tr/>').appendTo(table).css({ 'line-height': '1' });
            let td = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<td/>').appendTo(tr);
            td.css({ 'border': '1px solid #D0D0D0', 'padding': '0.2em', 'text-align': 'center', 'vertical-align': 'middle' });
            if (_mol_MolUtil__WEBPACK_IMPORTED_MODULE_2__.MolUtil.notBlank(qc.comp.mol)) {
                let layout = new _gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_6__.ArrangeMolecule(qc.comp.mol, measure, this.policy, effects);
                layout.arrange();
                let metavec = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.MetaVector();
                new _gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_8__.DrawMolecule(layout, metavec).draw();
                metavec.normalise();
                (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)(metavec.createSVG()).appendTo(td);
            }
            td = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<td/>').appendTo(tr);
            td.css({ 'border': '1px solid #D0D0D0', 'padding': '0.5em', 'text-align': 'left', 'vertical-align': 'top' });
            let pmi1 = this.combineQuant(gm.massReact, 'g'), pmi2 = this.combineQuant(gm.massProd, 'g');
            let pmi3 = this.sumQuantExt(gm.massReact, gm.massProd, 1, Number.NaN, null);
            let vg = this.drawTotals('PMI', pmi1, pmi2, pmi3);
            vg.normalise();
            let para = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<p/>').appendTo(td);
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)(vg.createSVG()).appendTo(para);
            let ef1 = this.combineQuant(gm.massWaste, 'g'), ef2 = this.combineQuant(gm.massProd, 'g');
            let ef3 = this.sumQuantExt(gm.massWaste, gm.massProd, 1, Number.NaN, null);
            vg = this.drawTotals('E-factor', ef1, ef2, ef3);
            vg.normalise();
            para = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<p/>').appendTo(td);
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)(vg.createSVG()).appendTo(para);
            let ae1 = this.combineQuant(gm.molwProd, null), ae2 = this.combineQuant(gm.molwReact, null);
            let ae3 = this.sumQuantExt(gm.molwProd, gm.molwReact, 100, 100, '%');
            vg = this.drawTotals('Atom-E', ae1, ae2, ae3);
            vg.normalise();
            para = (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)('<p/>').appendTo(td);
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_11__.dom)(vg.createSVG()).appendTo(para);
        }
    }
    combineQuant(values, units) {
        if (values.length == 0)
            return '?';
        let str = '';
        for (let n = 0; n < values.length; n++) {
            if (n > 0)
                str += ' + ';
            if (values[n] == _rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.UNSPECIFIED) {
                str += '?';
            }
            else {
                str += (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.formatDouble)(values[n], 4);
                if (units)
                    str += ' ' + units;
            }
        }
        return str;
    }
    sumQuant(values, units, requireSomething) {
        if (values.length == 0)
            return requireSomething ? '?' : '0';
        let sum = 0;
        for (let n = 0; n < values.length; n++) {
            if (values[n] == _rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.UNSPECIFIED)
                return '?';
            sum += values[n];
        }
        let ret = (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.formatDouble)(sum, 4);
        if (units)
            ret += ' ' + units;
        return ret;
    }
    sumQuantExt(numer, denom, mul, max, units) {
        if (numer.length == 0 || denom.length == 0)
            return '?';
        let sum1 = 0, sum2 = 0;
        for (let n = 0; n < numer.length; n++) {
            if (numer[n] == _rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.UNSPECIFIED)
                return '?';
            sum1 += numer[n];
        }
        for (let n = 0; n < denom.length; n++) {
            if (denom[n] == _rxn_QuantityCalc__WEBPACK_IMPORTED_MODULE_3__.QuantityCalc.UNSPECIFIED)
                return '?';
            sum2 += denom[n];
        }
        if (sum2 <= 0)
            return '?';
        let val = mul * sum1 / sum2;
        if (!Number.isNaN(max))
            val = Math.min(val, max);
        let ret = (0,_util_util__WEBPACK_IMPORTED_MODULE_12__.formatDouble)(val, 4);
        if (units)
            ret += ' ' + units;
        return ret;
    }
    drawTotals(heading, over, under, answer) {
        let vg = new _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.MetaVector();
        let measure = new _gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_5__.OutlineMeasurement(0, 0, this.policy.data.pointScale);
        let sep = ' = ';
        let fsz = this.policy.data.pointScale * 0.8;
        let wadHeading = measure.measureText(heading, fsz);
        let wadOver = measure.measureText(over, fsz), wadUnder = measure.measureText(under, fsz);
        let wadAnswer = measure.measureText(answer, fsz);
        let wadSep = measure.measureText(sep, fsz);
        let x = 0;
        vg.drawText(x, 0, heading, fsz, 0x000000, _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.TextAlign.Left | _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.TextAlign.Middle);
        x += wadHeading[0];
        vg.drawText(x, 0, sep, fsz, 0x000000, _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.TextAlign.Left | _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.TextAlign.Middle);
        x += wadSep[0];
        vg.drawText(x, 0, answer, fsz, 0x000000, _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.TextAlign.Left | _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.TextAlign.Middle);
        x += wadAnswer[0];
        vg.drawText(x, 0, sep, fsz, 0x000000, _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.TextAlign.Left | _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.TextAlign.Middle);
        x += wadSep[0];
        let lw = Math.max(wadOver[0], wadUnder[0]);
        vg.drawLine(x, 0, x + lw, 0, 0x000000, 1);
        vg.drawText(x + 0.5 * lw, -2, over, fsz, 0x000000, _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.TextAlign.Centre | _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.TextAlign.Bottom);
        vg.drawText(x + 0.5 * lw, 2, under, fsz, 0x000000, _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.TextAlign.Centre | _gfx_MetaVector__WEBPACK_IMPORTED_MODULE_9__.TextAlign.Top);
        return vg;
    }
    doiToLink(doi) {
        if (doi.startsWith('http://') || doi.startsWith('https://'))
            return doi;
        let m = EmbedReaction.PTN_DOI1.exec(doi);
        if (m)
            return 'http://dx.doi.org/' + m[1];
        m = EmbedReaction.PTN_DOI2.exec(doi);
        if (m)
            return 'http://dx.doi.org/' + m[1];
        m = EmbedReaction.PTN_ISBN.exec(doi);
        if (m)
            return 'ISBN: ' + m[1];
        return null;
    }
}
EmbedReaction.PTN_DOI1 = /^doi:(\d+\.\d+\/.*)$/;
EmbedReaction.PTN_DOI2 = /^(\d+\.\d+\/.*)$/;
EmbedReaction.PTN_ISBN = /^(\d+-\d+-\d+-\d+-\d+)$/;


/***/ }),

/***/ "./src/ui/MenuProxy.ts":
/*!*****************************!*\
  !*** ./src/ui/MenuProxy.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MenuProxy: () => (/* binding */ MenuProxy),
/* harmony export */   MenuProxyWeb: () => (/* binding */ MenuProxyWeb)
/* harmony export */ });
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _Popup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Popup */ "./src/ui/Popup.ts");



class MenuProxy {
    hasContextMenu() { return false; }
    openContextMenu(menuItems, event, opt) { }
}
class MenuProxyWeb extends MenuProxy {
    hasContextMenu() { return true; }
    openContextMenu(menuItems, event, opt) {
        let [x, y] = (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.eventCoords)(event, document.body);
        let divCursor = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').appendTo(document.body).css({ 'position': 'absolute', 'user-select': 'none' });
        (0,_util_util__WEBPACK_IMPORTED_MODULE_1__.setBoundaryPixels)(divCursor, x - 5, y - 5, 10, 10);
        let currentFocus = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)(document.activeElement);
        let popup = new _Popup__WEBPACK_IMPORTED_MODULE_2__.Popup(divCursor);
        if ((opt === null || opt === void 0 ? void 0 : opt.overrideObscureOpacity) != null)
            popup.obscureOpacity = opt === null || opt === void 0 ? void 0 : opt.overrideObscureOpacity;
        popup.callbackPopulate = () => {
            popup.bodyDOM().css({ 'user-select': 'none', 'font-size': '16px' });
            for (let menuItem of menuItems) {
                let div = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').appendTo(popup.bodyDOM());
                if (menuItem == null) {
                    div.appendHTML('<hr/>');
                }
                else if (menuItem.subMenu) {
                    div.setText(menuItem.label + ' \u{25B8}');
                    div.css({ 'cursor': 'pointer' });
                    let fcn = (event) => {
                        event.preventDefault();
                        popup.close();
                        this.openContextMenu(menuItem.subMenu, event);
                    };
                    div.onClick(fcn);
                    div.onContextMenu(fcn);
                }
                else if (menuItem.click) {
                    div.setText(menuItem.label);
                    div.onMouseEnter(() => { div.css({ 'background-color': '#D0D0D0' }); });
                    div.onMouseLeave(() => { div.css({ 'background-color': 'transparent' }); });
                    div.css({ 'cursor': 'pointer' });
                    div.onClick(() => {
                        popup.close();
                        menuItem.click();
                    });
                }
                else {
                    div.css({ 'color': '#808080' });
                    div.setText(menuItem.label);
                }
            }
        };
        popup.callbackClose = () => {
            divCursor.remove();
            currentFocus.grabFocus();
            if (opt === null || opt === void 0 ? void 0 : opt.callbackClose)
                opt === null || opt === void 0 ? void 0 : opt.callbackClose();
        };
        popup.open();
    }
}


/***/ }),

/***/ "./src/ui/OptionList.ts":
/*!******************************!*\
  !*** ./src/ui/OptionList.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OptionList: () => (/* binding */ OptionList)
/* harmony export */ });
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _util_Theme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Theme */ "./src/util/Theme.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _Widget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Widget */ "./src/ui/Widget.ts");




class OptionList extends _Widget__WEBPACK_IMPORTED_MODULE_3__.Widget {
    constructor(options, isVertical = false) {
        super();
        this.options = options;
        this.isVertical = isVertical;
        this.padding = 6;
        this.htmlLabels = false;
        this.numCols = 0;
        this.selidx = 0;
        this.buttonDiv = [];
        this.auxCell = [];
        this.callbackSelect = null;
        if (options.length == 0)
            throw 'molsync.ui.OptionList: must provide a list of option labels.';
        if (!(0,_util_Theme__WEBPACK_IMPORTED_MODULE_1__.hasInlineCSS)('option'))
            (0,_util_Theme__WEBPACK_IMPORTED_MODULE_1__.installInlineCSS)('option', this.composeCSS());
    }
    getSelectedIndex() {
        return this.selidx;
    }
    getSelectedValue() {
        return this.options[this.selidx];
    }
    getAuxiliaryCell(idx) {
        return this.auxCell[idx].el;
    }
    onSelect(callback) {
        this.callbackSelect = callback;
    }
    render(parent) {
        super.render(parent);
        this.contentDOM.css({ 'display': 'block', 'baseline-shift': '1.5em' });
        this.buttonDiv = [];
        this.auxCell = [];
        let table = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<table class="wmk-option-table"/>').appendTo(this.contentDOM);
        let tr = this.isVertical ? null : (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<tr/>').appendTo(table);
        for (let n = 0; n < this.options.length; n++) {
            if (this.isVertical || (this.numCols > 0 && n > 0 && n % this.numCols == 0))
                tr = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<tr/>').appendTo(table);
            let td = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<td class="wmk-option-cell"/>').appendTo(tr);
            let div = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div class="wmk-option"/>').appendTo(td);
            div.css({ 'padding': `${this.padding}px` });
            div.onClick(() => this.clickButton(n));
            this.buttonDiv.push(div);
            if (this.isVertical) {
                td = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<td style="vertical-align: middle;"/>').appendTo(tr);
                this.auxCell.push(td);
            }
        }
        this.updateButtons();
    }
    clickButton(idx) {
        if (idx == this.selidx)
            return;
        this.setSelectedIndex(idx);
        if (this.callbackSelect)
            this.callbackSelect(idx, this);
    }
    setSelectedIndex(idx) {
        if (this.selidx == idx)
            return;
        this.selidx = idx;
        this.updateButtons();
    }
    setSelectedValue(val) {
        let idx = this.options.indexOf(val);
        if (idx >= 0)
            this.setSelectedIndex(idx);
    }
    updateButtons() {
        for (let n = 0; n < this.options.length && n < this.buttonDiv.length; n++) {
            let div = this.buttonDiv[n];
            let txt = this.options[n];
            if (txt.length == 0 && n == this.selidx)
                div.setText('\u00A0\u2716\u00A0');
            else if (txt.length == 0)
                div.setText('\u00A0\u00A0\u00A0');
            else if (this.htmlLabels)
                div.setHTML(txt);
            else
                div.setText(txt);
            div.removeClass('wmk-option-unselected wmk-option-selected');
            if (n != this.selidx)
                div.addClass('wmk-option-unselected');
            else
                div.addClass('wmk-option-selected');
        }
    }
    composeCSS() {
        let lowlight = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.colourCode)(_util_Theme__WEBPACK_IMPORTED_MODULE_1__.Theme.lowlight), lowlightEdge1 = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.colourCode)(_util_Theme__WEBPACK_IMPORTED_MODULE_1__.Theme.lowlightEdge1), lowlightEdge2 = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.colourCode)(_util_Theme__WEBPACK_IMPORTED_MODULE_1__.Theme.lowlightEdge2);
        let highlight = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.colourCode)(_util_Theme__WEBPACK_IMPORTED_MODULE_1__.Theme.highlight), highlightEdge1 = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.colourCode)(_util_Theme__WEBPACK_IMPORTED_MODULE_1__.Theme.highlightEdge1), highlightEdge2 = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.colourCode)(_util_Theme__WEBPACK_IMPORTED_MODULE_1__.Theme.highlightEdge2);
        return `
			.wmk-option
			{
				margin-bottom: 0;
				font-family: 'Open Sans', sans-serif;
				font-size: 14px;
				font-weight: normal;
				text-align: center;
				white-space: nowrap;
				line-height: 1.2em;
				cursor: pointer;
			}
			.wmk-option-selected
			{
				color: white;
				background-color: #008FD2;
				background-image: linear-gradient(to right bottom, ${lowlightEdge1}, ${lowlightEdge2});
			}
			.wmk-option-unselected
			{
				color: #333;
				background-color: white;
				background-image: linear-gradient(to right bottom, #FFFFFF, #E0E0E0);
			}
			.wmk-option-unselected:hover
			{
				background-color: #808080;
				background-image: linear-gradient(to right bottom, #F0F0F0, #D0D0D0);
			}
			.wmk-option-unselected:active
			{
				color: white;
				background-color: #00C000;
				background-image: linear-gradient(to right bottom, ${highlightEdge1}, ${highlightEdge2});
			}
			.wmk-option-table
			{
				margin: 1px;
				padding: 0;
				border-width: 0;
				border-collapse: collapse;
			}
			.wmk-option-cell
			{
				margin: 0;
				padding: 0;
				border-width: 0;
				border-width: 1px;
				border-style: solid;
				border-color: #808080;
			}
		`;
    }
}


/***/ }),

/***/ "./src/ui/Popup.ts":
/*!*************************!*\
  !*** ./src/ui/Popup.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Popup: () => (/* binding */ Popup)
/* harmony export */ });
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _util_Theme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Theme */ "./src/util/Theme.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _Tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Tooltip */ "./src/ui/Tooltip.ts");




const CSS_POPUP = `
	*.wmk-popup
	{
		font-family: 'Open Sans', sans-serif;
	}
`;
class Popup {
    constructor(parent) {
        this.popupBackground = 'white';
        this.obscureOpacity = 0.2;
        this.zindex = null;
        this.callbackClose = null;
        this.callbackPopulate = null;
        this.parent = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.domLegacy)(parent);
        (0,_util_Theme__WEBPACK_IMPORTED_MODULE_1__.installInlineCSS)('popup', CSS_POPUP);
    }
    onClose(callback) {
        this.callbackClose = callback;
    }
    open() {
        (0,_Tooltip__WEBPACK_IMPORTED_MODULE_3__.clearTooltip)();
        let body = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)(document.body);
        let bg = this.domObscureBackground = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').appendTo(body);
        bg.css({ 'position': 'fixed' });
        bg.css({ 'left': '0', 'right': '0', 'top': '0', 'bottom': '0' });
        bg.css({ 'background-color': 'black', 'opacity': this.obscureOpacity });
        let fg = this.domObscureForeground = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').appendTo(body);
        fg.css({ 'position': 'fixed' });
        fg.css({ 'left': '0', 'right': '0', 'top': '0', 'bottom': '0' });
        fg.onClick(() => this.close());
        if (this.zindex > 0) {
            bg.setCSS('z-index', this.zindex);
            fg.setCSS('z-index', this.zindex + 1);
        }
        let pb = this.domPanelBoundary = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div class="wmk-popup"/>').appendTo(fg).css({ 'visibility': 'hidden' });
        pb.onClick((event) => event.stopPropagation());
        pb.css({ 'background-color': this.popupBackground, 'border': '1px solid black' });
        pb.css({ 'position': 'absolute', 'overflow': 'auto' });
        this.domBody = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').appendTo(pb).css({ 'padding': '5px' });
        this.populate();
        this.positionAndShow();
    }
    close() {
        (0,_Tooltip__WEBPACK_IMPORTED_MODULE_3__.clearTooltip)();
        this.domPanelBoundary.remove();
        this.domObscureBackground.remove();
        this.domObscureForeground.remove();
        if (this.callbackClose)
            this.callbackClose(this);
        (0,_Tooltip__WEBPACK_IMPORTED_MODULE_3__.clearTooltip)();
    }
    bump() {
        this.positionAndShow();
    }
    bodyDOM() { return this.domBody; }
    populate() {
        if (this.callbackPopulate)
            this.callbackPopulate(this);
        else
            this.bodyDOM().setText('Empty popup.');
    }
    positionAndShow() {
        (0,_Tooltip__WEBPACK_IMPORTED_MODULE_3__.clearTooltip)();
        let winW = window.innerWidth, winH = window.innerHeight;
        const GAP = 2;
        let client = this.parent.el.getBoundingClientRect();
        let wx1 = client.left, wy1 = client.top, wx2 = client.right, wy2 = client.bottom;
        let pb = this.domPanelBoundary;
        let maxW = Math.max(wx1, winW - wx2) - 4;
        pb.css({ 'max-width': maxW + 'px' });
        let scrollSize = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.empiricalScrollerSize)();
        let setPosition = () => {
            let popW = this.domBody.width(), popH = this.domBody.height();
            let posX = 0, posY = 0;
            if (wy2 + GAP + popH < winH)
                posY = wy2 + GAP;
            else if (wy1 - GAP - popH > 0)
                posY = wy1 - GAP - popH;
            else if (winH - wy2 > wy1) {
                posY = wy2 + GAP;
                popH = winH - posY - GAP;
            }
            else {
                posY = GAP;
                popH = wy1 - posY - GAP;
            }
            if (pb.height() > popH)
                popW += scrollSize.w + 10;
            if (wx1 + popW < winW)
                posX = wx1;
            else if (popW < wx2)
                posX = wx2 - popW;
            (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.setBoundaryPixels)(pb, posX, posY, popW, popH);
            pb.css({ 'visibility': 'visible' });
        };
        setTimeout(() => setPosition());
    }
}


/***/ }),

/***/ "./src/ui/TabBar.ts":
/*!**************************!*\
  !*** ./src/ui/TabBar.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabBar: () => (/* binding */ TabBar)
/* harmony export */ });
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _util_Theme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Theme */ "./src/util/Theme.ts");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/util */ "./src/util/util.ts");
/* harmony import */ var _Widget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Widget */ "./src/ui/Widget.ts");




class TabBar extends _Widget__WEBPACK_IMPORTED_MODULE_3__.Widget {
    constructor(options) {
        super();
        this.options = options;
        this.unionHeight = false;
        this.selidx = 0;
        this.buttonDiv = [];
        this.panelDiv = [];
        this.padding = 6;
        this.callbackSelect = null;
        if (!(0,_util_Theme__WEBPACK_IMPORTED_MODULE_1__.hasInlineCSS)('tabbar'))
            (0,_util_Theme__WEBPACK_IMPORTED_MODULE_1__.installInlineCSS)('tabbar', this.composeCSS());
    }
    onSelect(callback) {
        this.callbackSelect = callback;
    }
    getSelectedIndex() {
        return this.selidx;
    }
    getSelectedValue() {
        return this.options[this.selidx];
    }
    getPanelDOM(idxOrName) {
        let idx = typeof idxOrName == 'number' ? idxOrName : this.options.indexOf(idxOrName);
        if (idx < 0)
            return null;
        return this.panelDiv[idx];
    }
    render(parent) {
        super.render(parent);
        let grid = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').appendTo(this.contentDOM).css({ 'display': 'grid' });
        grid.css({ 'align-items': 'center', 'justify-content': 'start', 'grid-row-gap': '0.5em' });
        let columns = '[start] 1fr ';
        for (let n = 0; n < this.options.length; n++)
            columns += '[btn' + n + '] auto ';
        columns += '[btnX] 1fr [end]';
        grid.css({ 'grid-template-columns': columns });
        let underline = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').appendTo(grid);
        underline.css({ 'grid-column': 'start / end', 'grid-row': '1', 'height': '100%' });
        underline.css({ 'border-bottom': '1px solid #C0C0C0' });
        for (let n = 0; n < this.options.length; n++) {
            let outline = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div class="wmk-tabbar-cell"/>').appendTo(grid);
            outline.css({ 'grid-column': 'btn' + n, 'grid-row': '1' });
            let btn = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div class="wmk-tabbar"/>').appendTo(outline);
            btn.css({ 'padding': `${this.padding}px` });
            btn.onClick(() => this.clickButton(n));
            this.buttonDiv.push(btn);
            let panel = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').appendTo(grid);
            panel.css({ 'grid-column': 'start / end', 'grid-row': '2' });
            panel.css({ 'align-self': 'start', 'justify-self': 'center', 'width': '100%' });
            this.panelDiv.push(panel);
        }
        this.updateButtons();
    }
    clickButton(idx) {
        if (idx == this.selidx)
            return;
        this.setSelectedIndex(idx);
        if (this.callbackSelect)
            this.callbackSelect(idx, this);
    }
    setSelectedIndex(idx) {
        if (this.selidx == idx)
            return;
        this.selidx = idx;
        let dom = this.contentDOM;
        dom.setCSS('min-width', `${dom.width()}px`);
        this.updateButtons();
    }
    setSelectedValue(val) {
        let idx = this.options.indexOf(val);
        if (idx >= 0)
            this.setSelectedIndex(idx);
    }
    rotateSelected(dir) {
        this.setSelectedIndex((this.selidx + dir + this.options.length) % this.options.length);
    }
    updateButtons() {
        for (let n = 0; n < this.options.length && n < this.buttonDiv.length; n++) {
            let div = this.buttonDiv[n];
            let txt = this.options[n];
            if (txt.length == 0 && n == this.selidx)
                div.setText('\u00A0\u2716\u00A0');
            else if (txt.length == 0)
                div.setText('\u00A0\u00A0\u00A0');
            else
                div.setText(txt);
            div.removeClass('wmk-tabbar-unselected wmk-tabbar-selected');
            if (n != this.selidx)
                div.addClass('wmk-tabbar-unselected');
            else
                div.addClass('wmk-tabbar-selected');
            if (this.unionHeight)
                this.panelDiv[n].setCSS('visibility', n == this.selidx ? 'visible' : 'hidden');
            else
                this.panelDiv[n].setCSS('display', n == this.selidx ? 'block' : 'none');
        }
    }
    composeCSS() {
        let lowlight = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.colourCode)(_util_Theme__WEBPACK_IMPORTED_MODULE_1__.Theme.lowlight), lowlightEdge1 = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.colourCode)(_util_Theme__WEBPACK_IMPORTED_MODULE_1__.Theme.lowlightEdge1), lowlightEdge2 = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.colourCode)(_util_Theme__WEBPACK_IMPORTED_MODULE_1__.Theme.lowlightEdge2);
        let highlight = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.colourCode)(_util_Theme__WEBPACK_IMPORTED_MODULE_1__.Theme.highlight), highlightEdge1 = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.colourCode)(_util_Theme__WEBPACK_IMPORTED_MODULE_1__.Theme.highlightEdge1), highlightEdge2 = (0,_util_util__WEBPACK_IMPORTED_MODULE_2__.colourCode)(_util_Theme__WEBPACK_IMPORTED_MODULE_1__.Theme.highlightEdge2);
        return `
			.wmk-tabbar
			{
				margin-bottom: 0;
				font-family: 'Open Sans', sans-serif;
				font-size: 14px;
				font-weight: normal;
				text-align: center;
				white-space: nowrap;
				vertical-align: middle;
				cursor: pointer;
			}
			.wmk-tabbar-selected
			{
				color: white;
				background-color: #008FD2;
				background-image: linear-gradient(to right bottom, ${lowlightEdge1}, ${lowlightEdge2});
			}
			.wmk-tabbar-unselected
			{
				color: #333;
				background-color: white;
				background-image: linear-gradient(to right bottom, #FFFFFF, #E0E0E0);
			}
			.wmk-tabbar-unselected:hover
			{
				background-color: #808080;
				background-image: linear-gradient(to right bottom, #F0F0F0, #D0D0D0);
			}
			.wmk-tabbar-unselected:active
			{
				color: white;
				background-color: #00C000;
				background-image: linear-gradient(to right bottom, ${highlightEdge1}, ${highlightEdge2});
			}
			.wmk-tabbar-table
			{
				margin: 1px;
				padding: 0;
				border-width: 0;
				border-collapse: collapse;
			}
			.wmk-tabbar-cell
			{
				margin: 0 -1px -1px 0;
				padding: 0;
				border-width: 0;
				border-width: 1px;
				border-style: solid;
				border-color: #808080;
			}
		`;
    }
}


/***/ }),

/***/ "./src/ui/Tooltip.ts":
/*!***************************!*\
  !*** ./src/ui/Tooltip.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tooltip: () => (/* binding */ Tooltip),
/* harmony export */   addTooltip: () => (/* binding */ addTooltip),
/* harmony export */   addTooltipPromise: () => (/* binding */ addTooltipPromise),
/* harmony export */   clearTooltip: () => (/* binding */ clearTooltip),
/* harmony export */   raiseToolTip: () => (/* binding */ raiseToolTip)
/* harmony export */ });
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _util_Theme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Theme */ "./src/util/Theme.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const CSS_TOOLTIP = `
    *.wmk-tooltip-outer
    {
		position: absolute;
		border-radius: 4px;
		border: 1px solid black;
		background-color: white;
		padding: 1px;
		pointer-events: none;
        font-family: 'Open Sans', sans-serif;
		font-size: 14px;
    }
	*.wmk-tooltip-inner
	{
		color: white;
		border-radius: 4px;
		background-color: black;
		padding: 0.3em;
		max-width: calc(min(40em, 50vw));
	}
`;
let globalTooltip = null;
let globalPopWatermark = 0;
function addTooltip(parent, bodyHTML, titleHTML, delay) {
    (0,_util_Theme__WEBPACK_IMPORTED_MODULE_1__.installInlineCSS)('tooltip', CSS_TOOLTIP);
    let widget = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)(parent);
    let tooltip = new Tooltip(widget, bodyHTML, titleHTML, delay == null ? 1000 : delay);
    widget.onMouseEnter(() => tooltip.start());
    widget.onMouseLeave(() => tooltip.stop());
}
function addTooltipPromise(parent, bodyCallback, titleHTML, delay) {
    (0,_util_Theme__WEBPACK_IMPORTED_MODULE_1__.installInlineCSS)('tooltip', CSS_TOOLTIP);
    let widget = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)(parent);
    let tooltip = new Tooltip(widget, null, titleHTML, delay == null ? 1000 : delay);
    tooltip.bodyCallback = bodyCallback;
    widget.onMouseEnter(() => tooltip.start());
    widget.onMouseLeave(() => tooltip.stop());
}
function raiseToolTip(parent, avoid, bodyHTML, titleHTML) {
    (0,_util_Theme__WEBPACK_IMPORTED_MODULE_1__.installInlineCSS)('tooltip', CSS_TOOLTIP);
    clearTooltip();
    globalPopWatermark++;
    new Tooltip((0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)(parent), bodyHTML, titleHTML, 0).start(avoid);
}
function clearTooltip() {
    if (globalTooltip == null)
        return;
    globalPopWatermark++;
    globalTooltip.stop();
}
class Tooltip {
    constructor(widget, bodyHTML, titleHTML, delay) {
        this.widget = widget;
        this.bodyHTML = bodyHTML;
        this.titleHTML = titleHTML;
        this.delay = delay;
        this.domTooltip = null;
    }
    start(avoid) {
        this.watermark = ++globalPopWatermark;
        (() => __awaiter(this, void 0, void 0, function* () {
            if (this.bodyHTML == null && this.bodyCallback)
                this.bodyHTML = yield this.bodyCallback();
            window.setTimeout(() => {
                if (this.watermark == globalPopWatermark)
                    this.raise(avoid);
            }, this.delay);
        }))();
    }
    stop() {
        if (this.domTooltip) {
            this.domTooltip.remove();
            this.domTooltip = null;
        }
        this.watermark = -1;
    }
    raise(avoid) {
        if (!this.widget.exists())
            return;
        globalTooltip = this;
        if (this.domTooltip)
            return;
        let pop = this.domTooltip = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').class('wmk-tooltip-outer').css({ 'visibility': 'hidden' }).appendTo(document.body);
        let sanity = 50;
        for (let ancestor = this.widget; ancestor; ancestor = ancestor.parent()) {
            if (--sanity == 0)
                break;
            let zindex = parseInt(ancestor.elHTML.style.zIndex);
            if (zindex > 0) {
                pop.setCSS('z-index', (zindex + 1000).toString());
                break;
            }
        }
        let div = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').appendTo(pop).class('wmk-tooltip-inner');
        let hasTitle = this.titleHTML != null && this.titleHTML.length > 0, hasBody = this.bodyHTML != null && this.bodyHTML.length > 0;
        if (hasTitle)
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').appendTo(div).setHTML('<b>' + this.titleHTML + '</b>');
        if (hasTitle && hasBody)
            div.appendHTML('<hr/>');
        if (hasBody)
            (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').appendTo(div).setHTML(this.bodyHTML);
        let winW = window.innerWidth, winH = window.innerHeight;
        const GAP = 2;
        let boundDiv = this.widget.el.getBoundingClientRect();
        let wx1 = boundDiv.left, wy1 = boundDiv.top;
        let wx2 = wx1 + boundDiv.width, wy2 = wy1 + boundDiv.height;
        if (avoid) {
            wx1 += avoid.x;
            wy1 += avoid.y;
            wx2 = wx1 + avoid.w;
            wy2 = wy1 + avoid.h;
        }
        let setPosition = () => {
            let popW = pop.width(), popH = pop.height();
            let posX = 0, posY = 0;
            if (wx1 + popW < winW)
                posX = wx1;
            else if (popW < wx2)
                posX = wx2 - popW;
            if (wy2 + GAP + popH < winH)
                posY = wy2 + GAP;
            else if (wy1 - GAP - popH > 0)
                posY = wy1 - GAP - popH;
            else
                posY = wy2 + GAP;
            posX += window.pageXOffset;
            posY += window.pageYOffset;
            pop.css({ 'left': `${posX}px`, 'top': `${posY}px`, 'visibility': 'visible' });
        };
        pop.css({ 'left': '0px', 'top': '0px' });
        setTimeout(() => setPosition(), 1);
        let checkParent = () => {
            if (this.watermark != globalPopWatermark || !this.widget.isVisible() || !this.widget.exists())
                this.stop();
            else
                setTimeout(checkParent, 100);
        };
        setTimeout(checkParent, 100);
    }
}


/***/ }),

/***/ "./src/ui/Widget.ts":
/*!**************************!*\
  !*** ./src/ui/Widget.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Widget: () => (/* binding */ Widget)
/* harmony export */ });
/* harmony import */ var _util_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/dom */ "./src/util/dom.ts");
/* harmony import */ var _Tooltip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Tooltip */ "./src/ui/Tooltip.ts");


class Widget {
    get contentDOM() { return this.domContent; }
    constructor() {
        this.tagType = 'div';
        this.domContent = null;
    }
    render(parent) {
        let tag = this.tagType;
        this.domContent = (0,_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)(`<${tag}/>`).appendTo(parent);
    }
    remove() {
        if (this.domContent)
            this.domContent.remove();
        this.domContent = null;
    }
    addTooltip(bodyHTML, titleHTML) {
        (0,_Tooltip__WEBPACK_IMPORTED_MODULE_1__.addTooltip)(this.contentDOM, bodyHTML, titleHTML);
    }
    grabFocus() {
        this.domContent.grabFocus();
    }
}


/***/ }),

/***/ "./src/util/FitRotatedEllipse.ts":
/*!***************************************!*\
  !*** ./src/util/FitRotatedEllipse.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FitRotatedEllipse: () => (/* binding */ FitRotatedEllipse)
/* harmony export */ });
/* harmony import */ var _Geom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Geom */ "./src/util/Geom.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "./src/util/util.ts");
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Vec */ "./src/util/Vec.ts");



const CACHE_SIZE = 1000;
class FitRotatedEllipse {
    constructor(px, py, margin) {
        this.px = px;
        this.py = py;
        this.margin = margin;
        this.theta = 0;
        this.stop = false;
        this.hashKey = JSON.stringify([this.px, this.py]);
    }
    calculate() {
        if (this.lookupCache())
            return;
        this.setupParameters();
        if (this.stop)
            return;
        this.currentScore = this.calculateScore(this.cx, this.cy, this.rw, this.rh);
        this.coarseDiscovery();
        this.fineImprovement();
        this.theta = -this.theta;
        this.saveCache();
    }
    getSpline() {
        return _Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.createBezierEllipse(this.cx, this.cy, this.rw, this.rh, this.theta);
    }
    lookupCache() {
        let hashKey = this.hashKey;
        let look = FitRotatedEllipse.cacheMap.get(hashKey);
        if (look) {
            this.cx = look.cx;
            this.cy = look.cy;
            this.rw = look.rw;
            this.rh = look.rh;
            this.theta = look.theta;
            const { cacheVal } = FitRotatedEllipse;
            for (let n = cacheVal.length - 1; n >= 0; n--)
                if (cacheVal[n].hashKey == hashKey) {
                    if (n < cacheVal.length - 1) {
                        cacheVal.push(cacheVal[n]);
                        cacheVal.splice(n, 1);
                    }
                    break;
                }
            return true;
        }
        return false;
    }
    saveCache() {
        let hashKey = this.hashKey;
        const { cacheVal, cacheMap } = FitRotatedEllipse;
        cacheVal.push(this);
        cacheMap.set(hashKey, this);
        while (cacheVal.length > CACHE_SIZE) {
            cacheMap.delete(cacheVal[0].hashKey);
            cacheVal.splice(0);
        }
    }
    setupParameters() {
        const psz = this.psz = this.px.length;
        const invpsz = this.invpsz = 1.0 / psz;
        this.cx = _Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sum(this.px) * invpsz;
        this.cy = _Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sum(this.py) * invpsz;
        let ptheta = new Array(psz), pdist = new Array(psz);
        for (let n = 0; n < psz; n++) {
            ptheta[n] = Math.atan2(this.py[n] - this.cy, this.px[n] - this.cx);
            pdist[n] = (0,_util__WEBPACK_IMPORTED_MODULE_1__.norm_xy)(this.px[n] - this.cx, this.py[n] - this.cy);
        }
        let order = _Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.idxSort(ptheta);
        this.px = _Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.idxGet(this.px, order);
        this.py = _Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.idxGet(this.py, order);
        ptheta = _Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.idxGet(ptheta, order);
        pdist = _Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.idxGet(pdist, order);
        let buffX = new Array(psz), buffY = new Array(psz);
        const rotatedScore = (ptheta, pdist, rtheta) => {
            for (let n = 0; n < psz; n++) {
                buffX[n] = pdist[n] * Math.cos(ptheta[n] + rtheta);
                buffY[n] = pdist[n] * Math.sin(ptheta[n] + rtheta);
            }
            let scx = _Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sum(buffX) * invpsz, scy = _Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sum(buffY) * invpsz;
            let devx = 0, devy = 0;
            for (let n = 0; n < psz; n++) {
                devx += (0,_util__WEBPACK_IMPORTED_MODULE_1__.sqr)(buffX[n] - scx);
                devy += Math.abs(buffY[n] - scy);
            }
            return devy / (1 + devx);
        };
        let bestScore = Number.POSITIVE_INFINITY;
        for (let n = 0; n < 360; n++) {
            let th = n * _util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD;
            let score = rotatedScore(ptheta, pdist, th);
            if (score < bestScore) {
                this.theta = th;
                bestScore = score;
            }
        }
        for (let dth = -1; dth <= 1; dth += 0.05) {
            let th = this.theta + dth * _util__WEBPACK_IMPORTED_MODULE_1__.DEGRAD;
            let score = rotatedScore(ptheta, pdist, th);
            if (score < bestScore) {
                this.theta = th;
                bestScore = score;
            }
        }
        for (let n = 0; n < psz; n++) {
            this.px[n] = this.cx + pdist[n] * Math.cos(ptheta[n] + this.theta);
            this.py[n] = this.cy + pdist[n] * Math.sin(ptheta[n] + this.theta);
        }
        this.cx = _Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sum(this.px) * invpsz;
        this.cy = _Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sum(this.py) * invpsz;
        this.rw = this.rh = 1;
    }
    coarseDiscovery() {
        const { margin } = this;
        let deltaD = 0.1 * margin, deltaR = 0.5 * deltaD;
        const DELTA_OPTIONS = [
            { dx: -1, dy: 0, dw: 0, dh: 0 },
            { dx: 1, dy: 0, dw: 0, dh: 0 },
            { dx: 0, dy: -1, dw: 0, dh: 0 },
            { dx: 0, dy: 1, dw: 0, dh: 0 },
            { dx: 0, dy: 0, dw: -1, dh: 0 },
            { dx: 0, dy: 0, dw: 1, dh: 0 },
            { dx: 0, dy: 0, dw: 0, dh: -1 },
            { dx: 0, dy: 0, dw: 0, dh: 1 },
        ];
        for (let sanity = 0; sanity < 1000; sanity++) {
            let anything = false;
            let bestScore = this.currentScore;
            let bestCX = this.cx, bestCY = this.cy, bestRW = this.rw, bestRH = this.rh;
            for (let delta of DELTA_OPTIONS) {
                let newCX = this.cx + delta.dx * deltaD;
                let newCY = this.cy + delta.dy * deltaD;
                let newRW = this.rw + delta.dw * deltaR;
                let newRH = this.rh + delta.dh * deltaR;
                let newScore = this.calculateScore(newCX, newCY, newRW, newRH);
                if (newScore > bestScore && !(0,_util__WEBPACK_IMPORTED_MODULE_1__.fltEqual)(newScore, bestScore)) {
                    anything = true;
                    bestScore = newScore;
                    bestCX = newCX;
                    bestCY = newCY;
                    bestRW = newRW;
                    bestRH = newRH;
                }
            }
            if (!anything)
                break;
            this.currentScore = bestScore;
            this.cx = bestCX;
            this.cy = bestCY;
            this.rw = bestRW;
            this.rh = bestRH;
        }
    }
    fineImprovement() {
        const { margin } = this;
        let deltaD = 0.1 * margin, deltaR = 0.5 * deltaD;
        const REDUCTION = 2.0 / 3;
        const MAX_REDUCTIONS = 20;
        for (let reduc = 0; reduc < MAX_REDUCTIONS; reduc++) {
            let anything = false;
            let bestScore = this.currentScore;
            let bestCX = this.cx, bestCY = this.cy, bestRW = this.rw, bestRH = this.rh;
            for (let dCX = -1; dCX <= 1; dCX++) {
                let newCX = this.cx + dCX * deltaD;
                for (let dCY = -1; dCY <= 1; dCY++) {
                    let newCY = this.cy + dCY * deltaD;
                    for (let dRW = -1; dRW <= 1; dRW++) {
                        let newRW = this.rw + dRW * deltaR;
                        for (let dRH = -1; dRH <= 1; dRH++) {
                            let newRH = this.rh + dRH * deltaR;
                            if (dCX == 0 && dCY == 0 && dRW == 0 && dRH == 0)
                                continue;
                            let newScore = this.calculateScore(newCX, newCY, newRW, newRH);
                            if (newScore > bestScore && !(0,_util__WEBPACK_IMPORTED_MODULE_1__.fltEqual)(newScore, bestScore)) {
                                anything = true;
                                bestScore = newScore;
                                bestCX = newCX;
                                bestCY = newCY;
                                bestRW = newRW;
                                bestRH = newRH;
                            }
                        }
                    }
                }
            }
            if (anything) {
                this.currentScore = bestScore;
                this.cx = bestCX;
                this.cy = bestCY;
                this.rw = bestRW;
                this.rh = bestRH;
            }
            else {
                reduc++;
                deltaD *= REDUCTION;
                deltaR *= REDUCTION;
            }
        }
    }
    calculateScore(cx, cy, rw, rh) {
        const { px, py, margin } = this, psz = px.length;
        const nseg = 24;
        let cosTheta = 1, sinTheta = 0;
        let incrAlpha = _util__WEBPACK_IMPORTED_MODULE_1__.TWOPI / nseg;
        let closestDSQ = _Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(Number.POSITIVE_INFINITY, psz);
        for (let n = 0; n < nseg; n++) {
            let alpha = n * incrAlpha;
            let cosAlpha = Math.cos(alpha), sinAlpha = Math.sin(alpha);
            let dx = rw * cosAlpha * cosTheta - rh * sinAlpha * sinTheta;
            let dy = rw * cosAlpha * sinTheta + rh * sinAlpha * cosTheta;
            let d = (0,_util__WEBPACK_IMPORTED_MODULE_1__.norm_xy)(dx, dy) + margin, eth = Math.atan2(dy, dx);
            let x = cx + d * Math.cos(eth);
            let y = cy + d * Math.sin(eth);
            for (let i = 0; i < psz; i++) {
                let ii = i == psz - 1 ? 0 : i + 1;
                if (_Geom__WEBPACK_IMPORTED_MODULE_0__.GeomUtil.doLineSegsIntersect(cx, cy, x, y, px[i], py[i], px[ii], py[ii]))
                    return 0;
            }
            for (let i = 0; i < psz; i++)
                closestDSQ[i] = Math.min(closestDSQ[i], (0,_util__WEBPACK_IMPORTED_MODULE_1__.norm2_xy)(x - px[i], y - py[i]));
        }
        let proxSum = 0;
        for (let dsq of closestDSQ)
            proxSum += 1.0 / (1 + Math.sqrt(dsq));
        return rw * rh + proxSum;
    }
}
FitRotatedEllipse.cacheVal = [];
FitRotatedEllipse.cacheMap = new Map();


/***/ }),

/***/ "./src/util/Geom.ts":
/*!**************************!*\
  !*** ./src/util/Geom.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Box: () => (/* binding */ Box),
/* harmony export */   GeomUtil: () => (/* binding */ GeomUtil),
/* harmony export */   Line: () => (/* binding */ Line),
/* harmony export */   Oval: () => (/* binding */ Oval),
/* harmony export */   Pos: () => (/* binding */ Pos),
/* harmony export */   QuickHull: () => (/* binding */ QuickHull),
/* harmony export */   RollingBall: () => (/* binding */ RollingBall),
/* harmony export */   Size: () => (/* binding */ Size)
/* harmony export */ });
/* harmony import */ var _Matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Matrix */ "./src/util/Matrix.ts");
/* harmony import */ var _Triangulation2D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Triangulation2D */ "./src/util/Triangulation2D.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ "./src/util/util.ts");
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Vec */ "./src/util/Vec.ts");




class GeomUtil {
    static pointInPolygon(x, y, px, py) {
        if (x < (0,_util__WEBPACK_IMPORTED_MODULE_2__.minArray)(px) || x > (0,_util__WEBPACK_IMPORTED_MODULE_2__.maxArray)(px) || y < (0,_util__WEBPACK_IMPORTED_MODULE_2__.minArray)(py) || y > (0,_util__WEBPACK_IMPORTED_MODULE_2__.maxArray)(py))
            return false;
        let sz = px.length;
        for (let n = 0; n < sz; n++)
            if (px[n] == x && py[n] == y)
                return true;
        let phase = false;
        for (let n = 0; n < sz; n++) {
            let x1 = px[n], y1 = py[n], x2 = px[n + 1 < sz ? n + 1 : 0], y2 = py[n + 1 < sz ? n + 1 : 0];
            if (y > Math.min(y1, y2) && y <= Math.max(y1, y2) && x <= Math.max(x1, x2) && y1 != y2) {
                let intr = (y - y1) * (x2 - x1) / (y2 - y1) + x1;
                if (x1 == x2 || x <= intr)
                    phase = !phase;
            }
        }
        return phase;
    }
    static areLinesParallel(x1, y1, x2, y2, x3, y3, x4, y4) {
        let dxa = x2 - x1, dya = y2 - y1, dxb = x4 - x3, dyb = y4 - y3;
        let xmajorA = Math.abs(dxa) > Math.abs(dya), xmajorB = Math.abs(dxb) > Math.abs(dyb);
        if (xmajorA != xmajorB)
            return false;
        const EPS = 1E-6;
        if (xmajorA)
            return Math.abs(dya / dxa - dyb / dxb) < EPS;
        else
            return Math.abs(dxa / dya - dxb / dyb) < EPS;
    }
    static lineIntersect(x1, y1, x2, y2, x3, y3, x4, y4) {
        let u = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));
        return [x1 + u * (x2 - x1), y1 + u * (y2 - y1)];
    }
    static isPointOnLineSeg(px, py, x1, y1, x2, y2) {
        if (px < Math.min(x1, x2) || px > Math.max(x1, x2) || py < Math.min(y1, y2) || py > Math.max(y1, y2))
            return false;
        if ((px == x1 && py == y1) || (px == x2 && py == y2))
            return true;
        let dx = x2 - x1, dy = y2 - y1;
        if (Math.abs(dx) > Math.abs(dy))
            return (0,_util__WEBPACK_IMPORTED_MODULE_2__.realEqual)(py, (dy / dx) * (px - x1) + y1);
        else
            return (0,_util__WEBPACK_IMPORTED_MODULE_2__.realEqual)(px, (dx / dy) * (py - y1) + x1);
    }
    static pointLineDistance(px, py, x1, y1, x2, y2) {
        let dx = x2 - x1, dy = y2 - y1;
        return Math.abs(dy * px - dx * py + x2 * y1 - y2 * x1) / (0,_util__WEBPACK_IMPORTED_MODULE_2__.norm_xy)(dx, dy);
    }
    static pointLineSegDistance(px, py, x1, y1, x2, y2) {
        let dx = x2 - x1, dy = y2 - y1;
        let t = ((px - x1) * dx + (py - y1) * dy) / (0,_util__WEBPACK_IMPORTED_MODULE_2__.norm2_xy)(dx, dy);
        t = Math.max(0, Math.min(1, t));
        let tx = x1 + t * dx, ty = y1 + t * dy;
        return (0,_util__WEBPACK_IMPORTED_MODULE_2__.norm_xy)(px - tx, py - ty);
    }
    static doLineSegsIntersect(x1, y1, x2, y2, x3, y3, x4, y4) {
        if (Math.max(x1, x2) < Math.min(x3, x4) || Math.max(y1, y2) < Math.min(y3, y4))
            return false;
        if (Math.min(x1, x2) > Math.max(x3, x4) || Math.min(y1, y2) > Math.max(y3, y4))
            return false;
        let ax = x2 - x1, ay = y2 - y1, bx = x4 - x3, by = y4 - y3;
        if ((0,_util__WEBPACK_IMPORTED_MODULE_2__.fltEqual)((0,_util__WEBPACK_IMPORTED_MODULE_2__.norm2_xy)(ax, ay), 0) || (0,_util__WEBPACK_IMPORTED_MODULE_2__.fltEqual)((0,_util__WEBPACK_IMPORTED_MODULE_2__.norm2_xy)(bx, by), 0))
            return false;
        if (Math.abs(ay) > Math.abs(ax) && Math.abs(by) > Math.abs(bx)) {
            if ((0,_util__WEBPACK_IMPORTED_MODULE_2__.fltEqual)(ax / ay - bx / by, 0))
                return false;
        }
        else if (Math.abs(ax) > Math.abs(ay) && Math.abs(bx) > Math.abs(by)) {
            if ((0,_util__WEBPACK_IMPORTED_MODULE_2__.fltEqual)(ay / ax - by / bx, 0))
                return false;
        }
        if ((x1 == x3 && y1 == y3) || (x1 == x4 && y1 == y4) || (x2 == x3 && y2 == y3) || (x2 == x4 && y2 == y4))
            return true;
        if ((x1 == x2 || x3 == x4) && (x1 == x3 || x1 == x4 || x2 == x3 || x2 == x4))
            return true;
        if ((y1 == y2 || y3 == y4) && (y1 == y3 || y1 == y4 || y2 == y3 || y2 == y4))
            return true;
        let x4_x3 = bx, y4_y3 = by, x2_x1 = ax, y2_y1 = ay, x1_x3 = x1 - x3, y1_y3 = y1 - y3;
        let nx = x4_x3 * y1_y3 - y4_y3 * x1_x3;
        let ny = x2_x1 * y1_y3 - y2_y1 * x1_x3;
        let dn = y4_y3 * x2_x1 - x4_x3 * y2_y1;
        if (dn == 0)
            return false;
        if (dn < 0) {
            dn = -dn;
            nx = -nx;
            ny = -ny;
        }
        return nx >= 0 && nx <= dn && ny >= 0 && ny <= dn;
    }
    static rectsIntersect(x1, y1, w1, h1, x2, y2, w2, h2) {
        if (x1 <= x2 && x1 + w1 >= x2 + w2 && y1 <= y2 && y1 + h1 >= y2 + h2)
            return true;
        if (x2 <= x1 && x2 + w2 >= x1 + w1 && y2 <= y1 && y2 + h2 >= y1 + h1)
            return true;
        if (x1 + w1 < x2 || x2 + w2 < x1 || y1 + h1 < y2 || y2 + h2 < y1)
            return false;
        return true;
    }
    static sortAngles(theta) {
        if (theta == null || theta.length < 2)
            return theta;
        theta = theta.slice(0);
        for (let n = 0; n < theta.length; n++)
            theta[n] = (0,_util__WEBPACK_IMPORTED_MODULE_2__.angleNorm)(theta[n]);
        if (theta.length == 2) {
            if ((0,_util__WEBPACK_IMPORTED_MODULE_2__.angleDiffPos)(theta[1], theta[0]) > Math.PI)
                return [theta[1], theta[0]];
            return theta;
        }
        _Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.sort(theta);
        while (true) {
            let a = theta[theta.length - 1], b = theta[0], c = theta[1];
            if ((0,_util__WEBPACK_IMPORTED_MODULE_2__.angleDiff)(b, a) <= (0,_util__WEBPACK_IMPORTED_MODULE_2__.angleDiff)(c, b))
                break;
            for (let n = theta.length - 1; n > 0; n--)
                theta[n] = theta[n - 1];
            theta[0] = a;
        }
        return theta;
    }
    static idxSortAngles(theta) {
        const sz = _Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.len(theta);
        if (theta == null || sz < 2)
            return _Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.identity0(sz);
        if (sz == 2) {
            if ((0,_util__WEBPACK_IMPORTED_MODULE_2__.angleDiffPos)(theta[1], theta[0]) > Math.PI)
                return [1, 0];
            else
                return [0, 1];
        }
        theta = _Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.duplicate(theta);
        for (let n = 0; n < sz; n++)
            theta[n] = (0,_util__WEBPACK_IMPORTED_MODULE_2__.angleNorm)(theta[n]);
        let idx = _Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.idxSort(theta);
        while (true) {
            let a = theta[idx[sz - 1]], b = theta[idx[0]], c = theta[idx[1]];
            if ((0,_util__WEBPACK_IMPORTED_MODULE_2__.angleDiff)(b, a) <= (0,_util__WEBPACK_IMPORTED_MODULE_2__.angleDiff)(c, b))
                break;
            let last = idx.pop();
            idx.unshift(last);
        }
        return idx;
    }
    static uniqueAngles(theta, threshold) {
        let ang = GeomUtil.sortAngles(theta), ret = [];
        ret.push(ang[0]);
        for (let n = 1; n < ang.length; n++) {
            if (Math.abs((0,_util__WEBPACK_IMPORTED_MODULE_2__.angleDiff)(ang[n], ang[n - 1])) > threshold)
                ret.push(ang[n]);
        }
        return ret;
    }
    static thetaObtuse(th1, th2) {
        let dth = th2 - th1;
        while (dth < -Math.PI)
            dth += 2 * Math.PI;
        while (dth > Math.PI)
            dth -= 2 * Math.PI;
        return dth > 0 ? th1 - 0.5 * (2 * Math.PI - dth) : th1 + 0.5 * (2 * Math.PI + dth);
    }
    static emergentAngle(theta) {
        let len = theta.length;
        if (len == 1)
            return theta[0];
        if (len == 2)
            return 0.5 * (theta[0] + theta[1]);
        _Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.sort(theta);
        let bottom = 0;
        let behind = (0,_util__WEBPACK_IMPORTED_MODULE_2__.angleDiffPos)(theta[0], theta[len - 1]);
        for (let n = 1; n < len; n++) {
            let delta = (0,_util__WEBPACK_IMPORTED_MODULE_2__.angleDiffPos)(theta[n], theta[n - 1]);
            if (delta > behind) {
                bottom = n;
                behind = delta;
            }
        }
        let sum = 0;
        for (let n = 0; n < len; n++) {
            let delta = theta[n] - theta[bottom];
            if (delta < 0)
                delta += _util__WEBPACK_IMPORTED_MODULE_2__.TWOPI;
            sum += delta;
        }
        return sum / len + theta[bottom];
    }
    static dotProduct(v1, v2) {
        return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];
    }
    static crossProduct(v1, v2) {
        const x = v1[1] * v2[2] - v1[2] * v2[1];
        const y = v1[2] * v2[0] - v1[0] * v2[2];
        const z = v1[0] * v2[1] - v1[1] * v2[0];
        return [x, y, z];
    }
    static affineTranslate(dx, dy) {
        return [[1, 0, dx], [0, 1, dy], [0, 0, 1]];
    }
    static affineMirror(xaxis, yaxis) {
        return [[xaxis ? -1 : 1, 0, 0], [0, yaxis ? -1 : 1, 0], [0, 0, 1]];
    }
    static affineScale(sx, sy) {
        return [[sx, 0, 0], [0, sy, 0], [0, 0, 1]];
    }
    static affineRotate(theta) {
        let cos = Math.cos(theta), sin = Math.sin(theta);
        return [[cos, -sin, 0], [sin, cos, 0], [0, 0, 1]];
    }
    static affineCompose(A, B) {
        let tfm = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];
        let Acol = [0, 0, 0];
        for (let j = 0; j < 3; j++) {
            for (let k = 0; k < 3; k++)
                Acol[k] = A[k][j];
            for (let i = 0; i < 3; i++) {
                let Brow = B[i];
                let s = 0;
                for (let k = 0; k < 3; k++)
                    s += Acol[k] * Brow[k];
                tfm[i][j] = s;
            }
        }
        return tfm;
    }
    static applyAffine(x, y, tfm) {
        return [x * tfm[0][0] + y * tfm[0][1] + tfm[0][2], x * tfm[1][0] + y * tfm[1][1] + tfm[1][2]];
    }
    static applyAffineArray(x, y, tfm) {
        for (let n = 0; n < x.length; n++)
            [x[n], y[n]] = this.applyAffine(x[n], y[n], tfm);
    }
    static isAffineMirror(tfm) {
        let a = tfm[0][0], b = tfm[0][1], c = tfm[0][2];
        let d = tfm[1][0], e = tfm[1][1], f = tfm[1][2];
        let g = tfm[2][0], h = tfm[2][1], i = tfm[2][2];
        return a * e * i + b * f * g + c * d * h - c * e * g - b * d * i - a * f * h < 0;
    }
    static magnitude2(v) {
        return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
    }
    static magnitude(v) {
        return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
    }
    static dist2(v1, v2) {
        let dx = v1[0] - v2[0], dy = v1[1] - v2[1], dz = v1[2] - v2[2];
        return dx * dx + dy * dy + dz * dz;
    }
    static dist(v1, v2) {
        let dx = v1[0] - v2[0], dy = v1[1] - v2[1], dz = v1[2] - v2[2];
        return Math.sqrt(dx * dx + dy * dy + dz * dz);
    }
    static normalise(v) {
        const dsq = v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
        if (dsq == 0)
            return;
        const inv = 1.0 / Math.sqrt(dsq);
        v[0] *= inv;
        v[1] *= inv;
        v[2] *= inv;
    }
    static normalised(v) {
        let ret = v.slice(0);
        this.normalise(ret);
        return ret;
    }
    static acuteAngle(v1, v2) {
        let mag1 = this.magnitude(v1), mag2 = this.magnitude(v2);
        if (mag1 == 0 || mag2 == 0)
            return 0;
        let dot = this.dotProduct(v1, v2);
        let cosTheta = dot / (mag1 * mag2);
        cosTheta = Math.max(-1, Math.min(1, cosTheta));
        return Math.acos(cosTheta);
    }
    static arcControlPoints(rad, x1, y1, x2, y2) {
        let t1x = -y1, t1y = x1;
        let t2x = y2, t2y = -x2;
        let dx = 0.5 * (x1 + x2);
        let dy = 0.5 * (y1 + y2);
        let tx = 3 / 8 * (t1x + t2x);
        let ty = 3 / 8 * (t1y + t2y);
        let a = tx * tx + ty * ty;
        let b = dx * tx + dy * ty;
        let c = dx * dx + dy * dy - rad * rad;
        let D = b * b - a * c;
        let k = (Math.sqrt(D) - b) / a;
        return [x1 + k * t1x, y1 + k * t1y, x2 + k * t2x, y2 + k * t2y];
    }
    static createBezierEllipse(cx, cy, rw, rh, theta) {
        let nseg = 24, npt = 2 * nseg + 1;
        let cosTheta = Math.cos(theta), sinTheta = Math.sin(theta);
        let incrAlpha = _util__WEBPACK_IMPORTED_MODULE_2__.TWOPI / nseg;
        let px = new Array(npt), py = new Array(npt);
        for (let n = 0; n < nseg; n++) {
            let alpha = n * incrAlpha;
            let cosAlpha = Math.cos(alpha), sinAlpha = Math.sin(alpha);
            px[n * 2] = rw * cosAlpha * cosTheta - rh * sinAlpha * sinTheta + cx;
            py[n * 2] = rw * cosAlpha * sinTheta + rh * sinAlpha * cosTheta + cy;
        }
        px[npt - 1] = px[0];
        py[npt - 1] = py[0];
        let smooth = 0.3;
        for (let n = 0; n < nseg; n++) {
            let n1 = (n - 1 + nseg) % nseg;
            let n2 = n;
            let n3 = (n + 1) % nseg;
            let n4 = (n + 2) % nseg;
            let x1 = px[n1 * 2], x2 = px[n2 * 2], x3 = px[n3 * 2], x4 = px[n4 * 2];
            let y1 = py[n1 * 2], y2 = py[n2 * 2], y3 = py[n3 * 2], y4 = py[n4 * 2];
            px[n * 2 + 1] = 0.5 * (x2 + x3 + smooth * (x2 - x1 + x3 - x4));
            py[n * 2 + 1] = 0.5 * (y2 + y3 + smooth * (y2 - y1 + y3 - y4));
        }
        let ctrl = new Array(npt);
        for (let n = 0; n < npt; n++)
            ctrl[n] = (n & 1) == 1;
        return { px, py, ctrl };
    }
    static fitCircle(x, y) {
        let dsq = Number.POSITIVE_INFINITY;
        for (let n = 0; n < x.length; n++)
            dsq = Math.min(dsq, (0,_util__WEBPACK_IMPORTED_MODULE_2__.norm2_xy)(x[n], y[n]));
        return Math.sqrt(dsq);
    }
    static fitEllipse(px, py, minX, minY, maxX, maxY) {
        let bestW = 0.5 * this.fitCircle(px, py), bestH = bestW, bestScore = bestW * bestH;
        let x = _Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.concat(px, [minX, maxX, 0, 0]);
        let y = _Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.concat(py, [0, 0, minY, maxY]);
        const sz = x.length;
        let shrinkToFit = (whs) => {
            let dmin = Number.POSITIVE_INFINITY;
            let invW2 = 1.0 / (whs[0] * whs[0]), invH2 = 1.0 / (whs[1] * whs[1]);
            for (let n = 0; n < sz; n++)
                dmin = Math.min(dmin, Math.sqrt(x[n] * x[n] * invW2 + y[n] * y[n] * invH2));
            if (dmin < 1) {
                whs[0] *= dmin;
                whs[1] *= dmin;
            }
            whs[2] = whs[0] * whs[1];
        };
        let mul = 1;
        let whsX = [0, 0, 0], whsY = [0, 0, 0];
        while (mul > 0.001) {
            whsX[0] = bestW * (1 + mul);
            whsX[1] = bestH;
            shrinkToFit(whsX);
            whsY[0] = bestW;
            whsY[1] = bestH * (1 + mul);
            shrinkToFit(whsY);
            let anything = false;
            if (whsX[2] > bestScore) {
                bestW = whsX[0];
                bestH = whsX[1];
                bestScore = whsX[2];
                anything = true;
            }
            if (whsY[2] > bestScore) {
                bestW = whsY[0];
                bestH = whsY[1];
                bestScore = whsY[2];
                anything = true;
            }
            if (!anything)
                mul *= 0.6;
        }
        return [bestW, bestH];
    }
    static superimpose(ax, ay, bx, by) {
        let sz = ax.length;
        if (sz == 1) {
            let dx = bx[0] - ax[0], dy = by[0] - ay[0];
            return [[1, 0, dx], [0, 1, dy], [0, 0, 1]];
        }
        if (sz == 2) {
            let thetaA = Math.atan2(ay[1] - ay[0], ax[1] - ax[0]), thetaB = Math.atan2(by[1] - by[0], bx[1] - bx[0]);
            let delta = (0,_util__WEBPACK_IMPORTED_MODULE_2__.angleDiff)(thetaB, thetaA), cos = Math.cos(delta), sin = Math.sin(delta);
            let rot00 = cos, rot01 = -sin;
            let rot10 = sin, rot11 = cos;
            let acx = 0.5 * (ax[0] + ax[1]), acy = 0.5 * (ay[0] + ay[1]);
            let bcx = 0.5 * (bx[0] + bx[1]), bcy = 0.5 * (by[0] + by[1]);
            let rax = rot00 * acx + rot01 * acy;
            let ray = rot10 * acx + rot11 * acy;
            return [[rot00, rot01, bcx - rax], [rot10, rot11, bcy - ray], [0, 0, 1]];
        }
        let invsz = 1.0 / sz;
        let acx = _Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.sum(ax) * invsz, acy = _Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.sum(ay) * invsz;
        let bcx = _Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.sum(bx) * invsz, bcy = _Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.sum(by) * invsz;
        let mtxA = new _Matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix(3, sz), mtxB = new _Matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix(3, sz);
        for (let n = 0; n < sz; n++) {
            mtxA.set(0, n, ax[n] - acx);
            mtxA.set(1, n, ay[n] - acy);
            mtxA.set(2, n, 0);
            mtxB.set(0, n, bx[n] - bcx);
            mtxB.set(1, n, by[n] - bcy);
            mtxB.set(2, n, 0);
        }
        let cov = mtxA.times(mtxB.transpose());
        let svd = new _Matrix__WEBPACK_IMPORTED_MODULE_0__.SingularValueDecomposition(cov);
        let rotate = svd.getV().times(svd.getU().transpose());
        let rot00 = rotate.get(0, 0), rot01 = rotate.get(0, 1);
        let rot10 = rotate.get(1, 0), rot11 = rotate.get(1, 1);
        let rax = rot00 * acx + rot01 * acy;
        let ray = rot10 * acx + rot11 * acy;
        return [[rot00, rot01, bcx - rax], [rot10, rot11, bcy - ray], [0, 0, 1]];
    }
    static convexHull(x, y, flatness) {
        let algo = new QuickHull(x, y, (0,_util__WEBPACK_IMPORTED_MODULE_2__.sqr)(flatness * 0.1));
        return [algo.hullX, algo.hullY];
    }
    static outlinePolygon(x, y, diameter) {
        let del = new _Triangulation2D__WEBPACK_IMPORTED_MODULE_1__.Triangulation2D(x, y);
        let concave = del.trimConcave(diameter);
        let idx = del.traceOutline(concave);
        return [_Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.idxGet(x, idx), _Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.idxGet(y, idx)];
    }
}
class QuickHull {
    constructor(x, y, threshSq) {
        this.x = x;
        this.y = y;
        this.threshSq = threshSq;
        this.hsz = 0;
        this.hullX = [];
        this.hullY = [];
        const sz = x.length;
        let l = 0, r = 0;
        for (let n = 0; n < sz; n++) {
            if (x[r] > x[n] || (x[r] == x[n] && y[r] > y[n]))
                r = n;
            if (x[l] < x[n] || (x[l] == x[n] && y[l] < y[n]))
                l = n;
        }
        let al1 = [], al2 = [];
        for (let n = 0; n < sz; n++) {
            if (n != l && n != r) {
                if (this.right(r, l, n) > 0)
                    al1.push(n);
                else
                    al2.push(n);
            }
        }
        this.hullX.push(x[r]);
        this.hullY.push(y[r]);
        this.quickHull(r, l, al1);
        this.hullX.push(x[l]);
        this.hullY.push(y[l]);
        this.quickHull(l, r, al2);
        for (let n = 0; n < this.hullX.length - 1;) {
            if ((0,_util__WEBPACK_IMPORTED_MODULE_2__.norm2_xy)(this.hullX[n] - this.hullY[n + 1], this.hullY[n] - this.hullY[n + 1]) < threshSq) {
                this.hullX.splice(n + 1, 1);
                this.hullY.splice(n + 1, 1);
            }
            else
                n++;
        }
    }
    quickHull(a, b, al) {
        if (al.length == 0)
            return;
        let c = this.furthestPoint(a, b, al);
        let al1 = [], al2 = [];
        for (let n = 0; n < al.length; n++) {
            let p = al[n];
            if (p == a || p == b)
                continue;
            if (this.right(a, c, p) > 0)
                al1.push(p);
            else if (this.right(c, b, p) > 0)
                al2.push(p);
        }
        this.quickHull(a, c, al1);
        this.hullX.push(this.x[c]);
        this.hullY.push(this.y[c]);
        this.quickHull(c, b, al2);
    }
    right(a, b, p) {
        const x = this.x, y = this.y;
        return (x[a] - x[b]) * (y[p] - y[b]) - (x[p] - x[b]) * (y[a] - y[b]);
    }
    distance(a, b, p) {
        const x = this.x, y = this.y;
        let u = ((x[p] - x[a]) * (x[b] - x[a]) + (y[p] - y[a]) * (y[b] - y[a])) / ((x[b] - x[a]) * (x[b] - x[a]) + (y[b] - y[a]) * (y[b] - y[a]));
        let ux = x[a] + u * (x[b] - x[a]);
        let uy = y[a] + u * (y[b] - y[a]);
        return ((ux - x[p]) * (ux - x[p]) + (uy - y[p]) * (uy - y[p]));
    }
    furthestPoint(a, b, al) {
        let maxDist = -1;
        let maxPos = -1;
        for (let n = 0; n < al.length; n++) {
            let p = al[n];
            if (p == a || p == b)
                continue;
            let dist = this.distance(a, b, p);
            if (dist > maxDist) {
                maxDist = dist;
                maxPos = p;
            }
        }
        return maxPos;
    }
}
class RollingBall {
    constructor(x, y, diameter) {
        this.x = x;
        this.y = y;
        this.sequence = [];
        const sz = x.length;
        const threshSq = diameter * diameter;
        let first = _Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.idxMax(x), latest = first;
        let direction = 0.0;
        let visited = _Vec__WEBPACK_IMPORTED_MODULE_3__.Vec.booleanArray(false, sz);
        this.sequence.push(first);
        let roll = () => {
            let bestIdx = -1;
            let bestDelta = 0, bestTheta = 0;
            for (let n = 0; n < sz; n++)
                if (n != latest && !visited[n]) {
                    let dx = x[n] - x[latest], dy = y[n] - y[latest];
                    let dsq = (0,_util__WEBPACK_IMPORTED_MODULE_2__.norm2_xy)(dx, dy);
                    if (dsq == 0 || dsq > threshSq)
                        continue;
                    let theta = Math.atan2(dy, dx), delta = (0,_util__WEBPACK_IMPORTED_MODULE_2__.angleDiffPos)(theta, direction);
                    if (bestIdx < 0 || delta < bestDelta) {
                        bestIdx = n;
                        bestDelta = delta;
                        bestTheta = theta;
                    }
                }
            if (bestIdx < 0)
                return -1;
            direction = (0,_util__WEBPACK_IMPORTED_MODULE_2__.angleNorm)(bestTheta - 0.5 * Math.PI);
            visited[bestIdx] = true;
            return bestIdx;
        };
        while (true) {
            let next = roll();
            if (next < 0) {
                this.sequence = null;
                return;
            }
            if (next == first)
                break;
            this.sequence.push(next);
            latest = next;
        }
    }
    sequencePos() {
        if (!this.sequence)
            return null;
        let posList = [];
        for (let n of this.sequence)
            posList.push(new Pos(this.x[n], this.y[n]));
        return posList;
    }
    sequenceXY() {
        if (!this.sequence)
            return [null, null];
        let px = [], py = [];
        for (let n of this.sequence) {
            px.push(this.x[n]);
            py.push(this.y[n]);
        }
        return [px, py];
    }
}
class Pos {
    static zero() { return new Pos(); }
    static fromArray(src) { return new Pos(src[0], src[1]); }
    constructor(x, y) {
        this.x = x == null ? 0 : x;
        this.y = y == null ? 0 : y;
    }
    clone() { return new Pos(this.x, this.y); }
    equals(other) { return this.x == other.x && this.y == other.y; }
    scaleBy(mag) {
        if (mag == 1)
            return;
        this.x *= mag;
        this.y *= mag;
    }
    offsetBy(dx, dy) {
        this.x += dx;
        this.y += dy;
    }
    withScaleBy(mag) {
        return new Pos(this.x * mag, this.y * mag);
    }
    withOffsetBy(dx, dy) {
        return new Pos(this.x + dx, this.y + dy);
    }
    toString() { return '[' + this.x + ',' + this.y + ']'; }
}
class Size {
    static zero() { return new Size(); }
    static fromArray(src) { return new Size(src[0], src[1]); }
    constructor(w, h) {
        this.w = w == null ? 0 : w;
        this.h = h == null ? 0 : h;
    }
    clone() { return new Size(this.w, this.h); }
    equals(other) { return this.w == other.w && this.h == other.h; }
    isZero() { return this.w == 0 && this.h == 0; }
    scaleBy(mag) {
        if (mag == 1)
            return;
        this.w *= mag;
        this.h *= mag;
    }
    fitInto(maxW, maxH) {
        let scale = 1;
        if (this.w > maxW)
            scale = maxW / this.w;
        if (this.h > maxH)
            scale = Math.min(scale, maxH / this.h);
        if (scale < 1)
            this.scaleBy(scale);
    }
    withScaleBy(mag) {
        return new Size(this.w * mag, this.h * mag);
    }
    toString() { return '[' + this.w + ',' + this.h + ']'; }
}
class Box {
    static zero() { return new Box(); }
    static fromBounds(x1, y1, x2, y2) { return new Box(x1, y1, x2 - x1, y2 - y1); }
    static fromSize(sz) { return new Box(0, 0, sz.w, sz.h); }
    static fromOval(oval) { return new Box(oval.cx - oval.rw, oval.cy - oval.rh, 2 * oval.rw, 2 * oval.rh); }
    static fromArray(src) { return new Box(src[0], src[1], src[2], src[3]); }
    constructor(x, y, w, h) {
        this.x = x == null ? 0 : x;
        this.y = y == null ? 0 : y;
        this.w = w == null ? 0 : w;
        this.h = h == null ? 0 : h;
    }
    clone() { return new Box(this.x, this.y, this.w, this.h); }
    equals(other) { return this.x == other.x && this.y == other.y && this.w == other.w && this.h == other.h; }
    getPos() { return new Pos(this.x, this.y); }
    setPos(pos) {
        this.x = pos.x;
        this.y = pos.y;
    }
    getSize() { return new Size(this.w, this.h); }
    setSize(sz) {
        this.w = sz.w;
        this.h = sz.h;
    }
    minX() { return this.x; }
    minY() { return this.y; }
    midX() { return this.x + 0.5 * this.w; }
    midY() { return this.y + 0.5 * this.h; }
    maxX() { return this.x + this.w; }
    maxY() { return this.y + this.h; }
    area() { return this.w * this.h; }
    scaleBy(mag) {
        if (mag == 1)
            return;
        this.x *= mag;
        this.y *= mag;
        this.w *= mag;
        this.h *= mag;
    }
    offsetBy(dx, dy) {
        this.x += dx;
        this.y += dy;
    }
    grow(bx, by) {
        this.x -= bx;
        this.y -= by;
        this.w += 2 * bx;
        this.h += 2 * by;
    }
    withScaleBy(mag) {
        return new Box(this.x * mag, this.y * mag, this.w * mag, this.h * mag);
    }
    withOffsetBy(dx, dy) {
        return new Box(this.x + dx, this.y + dy, this.w, this.h);
    }
    withGrow(bx, by) {
        return new Box(this.x - bx, this.y - by, this.w + 2 * bx, this.h + 2 * by);
    }
    intersects(other) {
        return GeomUtil.rectsIntersect(this.x, this.y, this.w, this.h, other.x, other.y, other.w, other.h);
    }
    intersection(other) {
        let x1 = this.x, x2 = x1 + this.w, y1 = this.y, y2 = y1 + this.h;
        let x3 = other.x, x4 = x3 + other.w, y3 = other.y, y4 = y3 + other.h;
        let x5 = Math.max(x1, x3), y5 = Math.max(y1, y3), x6 = Math.min(x2, x4), y6 = Math.min(y2, y4);
        return new Box(x5, y5, x6 - x5, y6 - y5);
    }
    contains(x, y) {
        return x >= this.x && x < this.x + this.w && y >= this.y && y < this.y + this.h;
    }
    union(other) {
        let x1 = Math.min(this.x, other.x), x2 = Math.max(this.x + this.w, other.x + other.w);
        let y1 = Math.min(this.y, other.y), y2 = Math.max(this.y + this.h, other.y + other.h);
        return new Box(x1, y1, x2 - x1, y2 - y1);
    }
    isZero() { return this.w == 0 && this.h == 0; }
    isEmpty() { return this.w == 0 && this.h == 0; }
    notEmpty() { return this.w > 0 || this.h > 0; }
    toString() { return '[' + this.x + ',' + this.y + ';' + this.w + ',' + this.h + ']'; }
}
class Oval {
    static zero() { return new Oval(); }
    static fromBox(box) { return new Oval(box.x + 0.5 * box.w, box.y + 0.5 * box.h, 0.5 * box.w, 0.5 * box.h); }
    static fromArray(src) { return new Oval(src[0], src[1], src[2], src[3]); }
    constructor(cx, cy, rw, rh) {
        this.cx = cx == null ? 0 : cx;
        this.cy = cy == null ? 0 : cy;
        this.rw = rw == null ? 0 : rw;
        this.rh = rh == null ? 0 : rh;
    }
    clone() { return new Oval(this.cx, this.cy, this.rw, this.rh); }
    setCentre(pos) {
        this.cx = pos.x;
        this.cy = pos.y;
    }
    setRadius(sz) {
        this.rw = sz.w;
        this.rh = sz.h;
    }
    minX() { return this.cx - this.rw; }
    minY() { return this.cy - this.rh; }
    maxX() { return this.cx + this.rw; }
    maxY() { return this.cy + this.rh; }
    scaleBy(mag) {
        if (mag == 1)
            return;
        this.cx *= mag;
        this.cy *= mag;
        this.rw *= mag;
        this.rh *= mag;
    }
    offsetBy(dx, dy) {
        this.cx += dx;
        this.cy += dy;
    }
    withScaleBy(mag) {
        return new Oval(this.cx * mag, this.cy * mag, this.rw * mag, this.rh * mag);
    }
    withOffsetBy(dx, dy) {
        return new Oval(this.cx + dx, this.cy + dy, this.rw, this.rh);
    }
    contains(x, y) {
        let dx = x - this.cx, dy = y - this.cy;
        let a = dx / this.rw, b = dy / this.rh;
        return a * a + b * b <= 1;
    }
    toString() { return '[' + this.cx + ',' + this.cy + ';' + this.rw + ',' + this.rh + ']'; }
}
class Line {
    static zero() { return new Line(); }
    static fromPos(pos1, pos2) { return new Line(pos1.x, pos1.y, pos2.x, pos2.y); }
    constructor(x1, y1, x2, y2) {
        this.x1 = x1 == null ? 0 : x1;
        this.y1 = y1 == null ? 0 : y1;
        this.x2 = x2 == null ? 0 : x2;
        this.y2 = y2 == null ? 0 : y2;
    }
    clone() { return new Line(this.x1, this.y1, this.x2, this.y2); }
    setPos1(pos) {
        this.x1 = pos.x;
        this.y1 = pos.y;
    }
    setPos2(pos) {
        this.x2 = pos.x;
        this.y2 = pos.y;
    }
    minX() { return Math.min(this.x1, this.x2); }
    minY() { return Math.min(this.y1, this.y2); }
    maxX() { return Math.max(this.x1, this.x2); }
    maxY() { return Math.max(this.y1, this.y2); }
    scaleBy(mag) {
        if (mag == 1)
            return;
        this.x1 *= mag;
        this.y1 *= mag;
        this.x2 *= mag;
        this.y2 *= mag;
    }
    offsetBy(dx, dy) {
        this.x1 += dx;
        this.y1 += dy;
        this.x2 += dx;
        this.y2 += dy;
    }
    toString() { return '[' + this.x1 + ',' + this.y1 + ';' + this.x2 + ',' + this.y2 + ']'; }
}


/***/ }),

/***/ "./src/util/Matrix.ts":
/*!****************************!*\
  !*** ./src/util/Matrix.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Matrix: () => (/* binding */ Matrix),
/* harmony export */   SingularValueDecomposition: () => (/* binding */ SingularValueDecomposition)
/* harmony export */ });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/util/Vec.ts");

class Matrix {
    constructor(m, n, s = 0) {
        this.m = m;
        this.n = n;
        if (m == 0)
            return;
        this.A = new Array(m);
        for (let i = 0; i < m; i++)
            this.A[i] = _Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(s, n);
    }
    static fromArray(A) {
        let mtx = new Matrix(0, 0);
        mtx.A = A;
        mtx.m = A.length;
        mtx.n = A[0].length;
        return mtx;
    }
    clone() {
        const { A, m, n } = this;
        let mtx = new Matrix(m, n);
        for (let i = 0; i < m; i++)
            for (let j = 0; j < n; j++)
                mtx.A[i][j] = A[i][j];
        return mtx;
    }
    get numRows() { return this.m; }
    get numCols() { return this.n; }
    get(i, j) { return this.A[i][j]; }
    set(i, j, v) { this.A[i][j] = v; }
    transpose() {
        const { A, m, n } = this;
        let X = new Matrix(n, m);
        const C = X.A;
        for (let i = 0; i < m; i++)
            for (let j = 0; j < n; j++)
                C[j][i] = A[i][j];
        return X;
    }
    norm1() {
        const { A, m, n } = this;
        let f = 0;
        for (let j = 0; j < n; j++) {
            let s = 0;
            for (let i = 0; i < m; i++)
                s += Math.abs(A[i][j]);
            f = Math.max(f, s);
        }
        return f;
    }
    normInf() {
        const { A, m, n } = this;
        let f = 0;
        for (let i = 0; i < m; i++) {
            let s = 0;
            for (let j = 0; j < n; j++)
                s += Math.abs(A[i][j]);
            f = Math.max(f, s);
        }
        return f;
    }
    uminus() {
        const { A, m, n } = this;
        let X = new Matrix(m, n), C = X.A;
        for (let i = 0; i < m; i++)
            for (let j = 0; j < n; j++)
                C[i][j] = -A[i][j];
        return X;
    }
    plus(B) {
        const { A, m, n } = this;
        let X = new Matrix(m, n), C = X.A;
        for (let i = 0; i < m; i++)
            for (let j = 0; j < n; j++)
                C[i][j] = A[i][j] + B.A[i][j];
        return X;
    }
    plusEquals(B) {
        const { A, m, n } = this;
        for (let i = 0; i < m; i++)
            for (let j = 0; j < n; j++)
                A[i][j] = A[i][j] + B.A[i][j];
        return this;
    }
    minus(B) {
        const { A, m, n } = this;
        let X = new Matrix(m, n), C = A;
        for (let i = 0; i < m; i++)
            for (let j = 0; j < n; j++)
                C[i][j] = A[i][j] - B.A[i][j];
        return X;
    }
    minusEquals(B) {
        const { A, m, n } = this;
        for (let i = 0; i < m; i++)
            for (let j = 0; j < n; j++)
                A[i][j] = A[i][j] - B.A[i][j];
        return this;
    }
    arrayTimes(B) {
        const { A, m, n } = this;
        let X = new Matrix(m, n), C = X.A;
        for (let i = 0; i < m; i++)
            for (let j = 0; j < n; j++)
                C[i][j] = A[i][j] * B.A[i][j];
        return X;
    }
    arrayTimesEquals(B) {
        const { A, m, n } = this;
        for (let i = 0; i < m; i++)
            for (let j = 0; j < n; j++)
                A[i][j] = A[i][j] * B.A[i][j];
        return this;
    }
    arrayRightDivide(B) {
        const { A, m, n } = this;
        let X = new Matrix(m, n), C = X.A;
        for (let i = 0; i < m; i++)
            for (let j = 0; j < n; j++)
                C[i][j] = A[i][j] / B.A[i][j];
        return X;
    }
    arrayRightDivideEquals(B) {
        const { A, m, n } = this;
        for (let i = 0; i < m; i++)
            for (let j = 0; j < n; j++)
                A[i][j] = A[i][j] / B.A[i][j];
        return this;
    }
    arrayLeftDivide(B) {
        const { A, m, n } = this;
        let X = new Matrix(m, n), C = X.A;
        for (let i = 0; i < m; i++)
            for (let j = 0; j < n; j++)
                C[i][j] = B.A[i][j] / A[i][j];
        return X;
    }
    arrayLeftDivideEquals(B) {
        const { A, m, n } = this;
        for (let i = 0; i < m; i++)
            for (let j = 0; j < n; j++)
                A[i][j] = B.A[i][j] / A[i][j];
        return this;
    }
    scalarTimes(s) {
        const { A, m, n } = this;
        let X = new Matrix(m, n), C = X.A;
        for (let i = 0; i < m; i++)
            for (let j = 0; j < n; j++)
                C[i][j] = s * A[i][j];
        return X;
    }
    scalarTimesEquals(s) {
        const { A, m, n } = this;
        for (let i = 0; i < m; i++)
            for (let j = 0; j < n; j++)
                A[i][j] = s * A[i][j];
        return this;
    }
    times(B) {
        const { A, m, n } = this;
        let X = new Matrix(m, B.n);
        let C = X.A, Bcolj = new Array(n);
        for (let j = 0; j < B.n; j++) {
            for (let k = 0; k < n; k++)
                Bcolj[k] = B.A[k][j];
            for (let i = 0; i < m; i++) {
                let Arowi = A[i];
                let s = 0;
                for (let k = 0; k < n; k++)
                    s += Arowi[k] * Bcolj[k];
                C[i][j] = s;
            }
        }
        return X;
    }
    rank() {
        return new SingularValueDecomposition(this).rank();
    }
    cond() {
        return new SingularValueDecomposition(this).cond();
    }
    trace() {
        const { A, m, n } = this;
        let t = 0;
        for (let i = 0; i < Math.min(m, n); i++) {
            t += A[i][i];
        }
        return t;
    }
    static identity(m, n) {
        let mtx = new Matrix(m, n);
        let A = mtx.A;
        for (let i = 0; i < m; i++)
            for (let j = 0; j < n; j++)
                A[i][j] = (i == j ? 1.0 : 0.0);
        return mtx;
    }
    toString() {
        let lines = ['['];
        for (let row of this.A)
            lines.push(JSON.stringify(row));
        lines.push(']');
        return lines.join('\n');
    }
}
class SingularValueDecomposition {
    constructor(mtx) {
        let A = mtx.A;
        let m = this.m = mtx.m;
        let n = this.n = mtx.n;
        let nu = Math.min(m, n);
        let s = this.s = new Array(Math.min(m + 1, n));
        let U = this.U = new Array(m);
        let V = this.V = new Array(n);
        for (let i = 0; i < m; i++)
            U[i] = _Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(0, nu);
        for (let j = 0; j < n; j++)
            V[j] = _Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.numberArray(0, n);
        let e = new Array(n);
        let work = new Array(m);
        let wantu = true, wantv = true;
        let nct = Math.min(m - 1, n);
        let nrt = Math.max(0, Math.min(n - 2, m));
        for (let k = 0; k < Math.max(nct, nrt); k++) {
            if (k < nct) {
                s[k] = 0;
                for (let i = k; i < m; i++)
                    s[k] = SingularValueDecomposition.hypot(s[k], A[i][k]);
                if (s[k] != 0.0) {
                    if (A[k][k] < 0.0)
                        s[k] = -s[k];
                    for (let i = k; i < m; i++)
                        A[i][k] /= s[k];
                    A[k][k] += 1.0;
                }
                s[k] = -s[k];
            }
            for (let j = k + 1; j < n; j++) {
                if ((k < nct) && (s[k] != 0.0)) {
                    let t = 0;
                    for (let i = k; i < m; i++)
                        t += A[i][k] * A[i][j];
                    t = -t / A[k][k];
                    for (let i = k; i < m; i++)
                        A[i][j] += t * A[i][k];
                }
                e[j] = A[k][j];
            }
            if (wantu && (k < nct)) {
                for (let i = k; i < m; i++)
                    U[i][k] = A[i][k];
            }
            if (k < nrt) {
                e[k] = 0;
                for (let i = k + 1; i < n; i++)
                    e[k] = SingularValueDecomposition.hypot(e[k], e[i]);
                if (e[k] != 0.0) {
                    if (e[k + 1] < 0.0)
                        e[k] = -e[k];
                    for (let i = k + 1; i < n; i++)
                        e[i] /= e[k];
                    e[k + 1] += 1.0;
                }
                e[k] = -e[k];
                if ((k + 1 < m) && (e[k] != 0.0)) {
                    for (let i = k + 1; i < m; i++)
                        work[i] = 0.0;
                    for (let j = k + 1; j < n; j++)
                        for (let i = k + 1; i < m; i++)
                            work[i] += e[j] * A[i][j];
                    for (let j = k + 1; j < n; j++) {
                        let t = -e[j] / e[k + 1];
                        for (let i = k + 1; i < m; i++)
                            A[i][j] += t * work[i];
                    }
                }
                if (wantv) {
                    for (let i = k + 1; i < n; i++)
                        V[i][k] = e[i];
                }
            }
        }
        let p = Math.min(n, m + 1);
        if (nct < n)
            s[nct] = A[nct][nct];
        if (m < p)
            s[p - 1] = 0.0;
        if (nrt + 1 < p)
            e[nrt] = A[nrt][p - 1];
        e[p - 1] = 0.0;
        if (wantu) {
            for (let j = nct; j < nu; j++) {
                for (let i = 0; i < m; i++)
                    U[i][j] = 0.0;
                U[j][j] = 1.0;
            }
            for (let k = nct - 1; k >= 0; k--) {
                if (s[k] != 0.0) {
                    for (let j = k + 1; j < nu; j++) {
                        let t = 0;
                        for (let i = k; i < m; i++)
                            t += U[i][k] * U[i][j];
                        t = -t / U[k][k];
                        for (let i = k; i < m; i++)
                            U[i][j] += t * U[i][k];
                    }
                    for (let i = k; i < m; i++)
                        U[i][k] = -U[i][k];
                    U[k][k] = 1.0 + U[k][k];
                    for (let i = 0; i < k - 1; i++)
                        U[i][k] = 0.0;
                }
                else {
                    for (let i = 0; i < m; i++)
                        U[i][k] = 0.0;
                    U[k][k] = 1.0;
                }
            }
        }
        if (wantv) {
            for (let k = n - 1; k >= 0; k--) {
                if ((k < nrt) && (e[k] != 0.0)) {
                    for (let j = k + 1; j < nu; j++) {
                        let t = 0;
                        for (let i = k + 1; i < n; i++)
                            t += V[i][k] * V[i][j];
                        t = -t / V[k + 1][k];
                        for (let i = k + 1; i < n; i++)
                            V[i][j] += t * V[i][k];
                    }
                }
                for (let i = 0; i < n; i++)
                    V[i][k] = 0.0;
                V[k][k] = 1.0;
            }
        }
        let pp = p - 1;
        let iter = 0;
        let eps = Math.pow(2.0, -52.0);
        let tiny = Math.pow(2.0, -966.0);
        while (p > 0) {
            let k, kase;
            for (k = p - 2; k >= -1; k--) {
                if (k == -1)
                    break;
                if (Math.abs(e[k]) <= tiny + eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {
                    e[k] = 0.0;
                    break;
                }
            }
            if (k == p - 2) {
                kase = 4;
            }
            else {
                let ks;
                for (ks = p - 1; ks >= k; ks--) {
                    if (ks == k)
                        break;
                    let t = (ks != p ? Math.abs(e[ks]) : 0.) + (ks != k + 1 ? Math.abs(e[ks - 1]) : 0.);
                    if (Math.abs(s[ks]) <= tiny + eps * t) {
                        s[ks] = 0.0;
                        break;
                    }
                }
                if (ks == k)
                    kase = 3;
                else if (ks == p - 1)
                    kase = 1;
                else {
                    kase = 2;
                    k = ks;
                }
            }
            k++;
            if (kase == 1) {
                let f = e[p - 2];
                e[p - 2] = 0.0;
                for (let j = p - 2; j >= k; j--) {
                    let t = SingularValueDecomposition.hypot(s[j], f);
                    let cs = s[j] / t;
                    let sn = f / t;
                    s[j] = t;
                    if (j != k) {
                        f = -sn * e[j - 1];
                        e[j - 1] = cs * e[j - 1];
                    }
                    if (wantv) {
                        for (let i = 0; i < n; i++) {
                            t = cs * V[i][j] + sn * V[i][p - 1];
                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];
                            V[i][j] = t;
                        }
                    }
                }
            }
            else if (kase == 2) {
                let f = e[k - 1];
                e[k - 1] = 0.0;
                for (let j = k; j < p; j++) {
                    let t = SingularValueDecomposition.hypot(s[j], f);
                    let cs = s[j] / t;
                    let sn = f / t;
                    s[j] = t;
                    f = -sn * e[j];
                    e[j] = cs * e[j];
                    if (wantu) {
                        for (let i = 0; i < m; i++) {
                            t = cs * U[i][j] + sn * U[i][k - 1];
                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];
                            U[i][j] = t;
                        }
                    }
                }
            }
            else if (kase == 3) {
                let scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));
                let sp = s[p - 1] / scale;
                let spm1 = s[p - 2] / scale;
                let epm1 = e[p - 2] / scale;
                let sk = s[k] / scale;
                let ek = e[k] / scale;
                let b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2.0;
                let c = (sp * epm1) * (sp * epm1);
                let shift = 0.0;
                if ((b != 0.0) || (c != 0.0)) {
                    shift = Math.sqrt(b * b + c);
                    if (b < 0.0)
                        shift = -shift;
                    shift = c / (b + shift);
                }
                let f = (sk + sp) * (sk - sp) + shift;
                let g = sk * ek;
                for (let j = k; j < p - 1; j++) {
                    let t = SingularValueDecomposition.hypot(f, g);
                    let cs = f / t;
                    let sn = g / t;
                    if (j != k)
                        e[j - 1] = t;
                    f = cs * s[j] + sn * e[j];
                    e[j] = cs * e[j] - sn * s[j];
                    g = sn * s[j + 1];
                    s[j + 1] = cs * s[j + 1];
                    if (wantv) {
                        for (let i = 0; i < n; i++) {
                            t = cs * V[i][j] + sn * V[i][j + 1];
                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];
                            V[i][j] = t;
                        }
                    }
                    t = SingularValueDecomposition.hypot(f, g);
                    cs = f / t;
                    sn = g / t;
                    s[j] = t;
                    f = cs * e[j] + sn * s[j + 1];
                    s[j + 1] = -sn * e[j] + cs * s[j + 1];
                    g = sn * e[j + 1];
                    e[j + 1] = cs * e[j + 1];
                    if (wantu && (j < m - 1)) {
                        for (let i = 0; i < m; i++) {
                            t = cs * U[i][j] + sn * U[i][j + 1];
                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];
                            U[i][j] = t;
                        }
                    }
                }
                e[p - 2] = f;
                iter = iter + 1;
            }
            else if (kase == 4) {
                if (s[k] <= 0.0) {
                    s[k] = (s[k] < 0.0 ? -s[k] : 0.0);
                    if (wantv) {
                        for (let i = 0; i <= pp; i++)
                            V[i][k] = -V[i][k];
                    }
                }
                while (k < pp) {
                    if (s[k] >= s[k + 1])
                        break;
                    let t = s[k];
                    s[k] = s[k + 1];
                    s[k + 1] = t;
                    if (wantv && (k < n - 1)) {
                        for (let i = 0; i < n; i++) {
                            t = V[i][k + 1];
                            V[i][k + 1] = V[i][k];
                            V[i][k] = t;
                        }
                    }
                    if (wantu && (k < m - 1)) {
                        for (let i = 0; i < m; i++) {
                            t = U[i][k + 1];
                            U[i][k + 1] = U[i][k];
                            U[i][k] = t;
                        }
                    }
                    k++;
                }
                iter = 0;
                p--;
            }
        }
    }
    getU() {
        return Matrix.fromArray(this.U);
    }
    getV() {
        return Matrix.fromArray(this.V);
    }
    getSingularValues() {
        return this.s;
    }
    getS() {
        const { n } = this;
        let X = new Matrix(n, n, 0);
        let S = X.A;
        for (let i = 0; i < n; i++)
            S[i][i] = this.s[i];
        return X;
    }
    norm2() {
        return this.s[0];
    }
    cond() {
        const { m, n, s } = this;
        return s[0] / s[Math.min(m, n) - 1];
    }
    rank() {
        const { m, n, s } = this;
        let eps = Math.pow(2.0, -52.0);
        let tol = Math.max(m, n) * s[0] * eps;
        let r = 0;
        for (let i = 0; i < s.length; i++)
            if (s[i] > tol)
                r++;
        return r;
    }
    static hypot(a, b) {
        let r;
        if (Math.abs(a) > Math.abs(b)) {
            r = b / a;
            r = Math.abs(a) * Math.sqrt(1 + r * r);
        }
        else if (b != 0) {
            r = a / b;
            r = Math.abs(b) * Math.sqrt(1 + r * r);
        }
        else {
            r = 0.0;
        }
        return r;
    }
}


/***/ }),

/***/ "./src/util/Random.ts":
/*!****************************!*\
  !*** ./src/util/Random.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Random: () => (/* binding */ Random)
/* harmony export */ });
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec */ "./src/util/Vec.ts");

class Random {
    constructor(seed = null) {
        this.seed = seed;
        this.m = 0x8000000;
        this.invMN = 1.0 / (this.m - 1);
        this.a = 1103515245;
        this.c = 5425153011;
        if (seed == null)
            this.state = Math.floor(Math.random() * (this.m - 1));
        else
            this.state = seed;
    }
    next() {
        this.state = (this.a * this.state + this.c) % this.m;
        return this.state;
    }
    int(max) {
        return max <= 0 ? 0 : this.next() % max;
    }
    float() {
        return this.next() * this.invMN;
    }
    index(arr) {
        if (_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.isBlank(arr))
            return null;
        return this.int(arr.length);
    }
    peek(arr) {
        if (_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.isBlank(arr))
            return null;
        return arr[this.int(arr.length)];
    }
    pull(arr) {
        if (_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.isBlank(arr))
            return null;
        let idx = this.int(arr.length), val = arr[idx];
        arr.splice(idx, 1);
        return val;
    }
}


/***/ }),

/***/ "./src/util/Theme.ts":
/*!***************************!*\
  !*** ./src/util/Theme.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Theme: () => (/* binding */ Theme),
/* harmony export */   hasInlineCSS: () => (/* binding */ hasInlineCSS),
/* harmony export */   initWebMolKit: () => (/* binding */ initWebMolKit),
/* harmony export */   installInlineCSS: () => (/* binding */ installInlineCSS)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./src/util/util.ts");

class Theme {
}
Theme.BASE_URL = null;
Theme.RESOURCE_URL = null;
Theme.foreground = 0x000000;
Theme.background = 0xFFFFFF;
Theme.lowlight = 0x24D0D0;
Theme.lowlightEdge1 = 0x47D5D2;
Theme.lowlightEdge2 = 0x008FD1;
Theme.highlight = 0x00FF00;
Theme.highlightEdge1 = 0x00CA59;
Theme.highlightEdge2 = 0x008650;
Theme.error = 0xFF0000;
function initWebMolKit(resourcePath) {
    Theme.RESOURCE_URL = resourcePath;
    try {
        let _ = document;
    }
    catch (e) {
        return;
    }
    if (document)
        installInlineCSS('main', composeMainCSS());
}
let cssTagsInstalled = new Set();
function hasInlineCSS(tag) { return cssTagsInstalled.has(tag); }
function installInlineCSS(tag, css) {
    if (cssTagsInstalled.has(tag))
        return false;
    let el = document.createElement('style');
    el.innerHTML = css;
    document.head.appendChild(el);
    cssTagsInstalled.add(tag);
    return true;
}
function composeMainCSS() {
    let lowlight = (0,_util__WEBPACK_IMPORTED_MODULE_0__.colourCode)(Theme.lowlight), lowlightEdge1 = (0,_util__WEBPACK_IMPORTED_MODULE_0__.colourCode)(Theme.lowlightEdge1), lowlightEdge2 = (0,_util__WEBPACK_IMPORTED_MODULE_0__.colourCode)(Theme.lowlightEdge2);
    let highlight = (0,_util__WEBPACK_IMPORTED_MODULE_0__.colourCode)(Theme.highlight), highlightEdge1 = (0,_util__WEBPACK_IMPORTED_MODULE_0__.colourCode)(Theme.highlightEdge1), highlightEdge2 = (0,_util__WEBPACK_IMPORTED_MODULE_0__.colourCode)(Theme.highlightEdge2);
    return `
		.wmk-button
		{
			display: inline-block;
			padding: 6px 12px;
			margin-bottom: 0;
			font-family: 'Open Sans', sans-serif;
			font-size: 14px;
			font-weight: normal;
			line-height: 1.42857143;
			text-align: center;
			white-space: nowrap;
			vertical-align: middle;
			cursor: pointer;
			background-image: none;
			border: 1px solid transparent;
			border-radius: 4px;
			-ms-touch-action: manipulation; touch-action: manipulation;
			-webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;
		}
		.wmk-button:focus,
		.wmk-button:active:focus,
		.wmk-button.active:focus,
		.wmk-button.focus,
		.wmk-button:active.focus,
		.wmk-button.active.focus
		{
			outline: thin dotted;
			outline: 5px auto -webkit-focus-ring-color;
			outline-offset: -2px;
		}
		.wmk-button:hover,
		.wmk-button:focus,
		.wmk-button.focus
		{
			color: #333;
			text-decoration: none;
		}
		.wmk-button:active,
		.wmk-button.active
		{
			background-image: none;
			outline: 0;
			-webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);
			box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);
		}
		.wmk-button.disabled,
		.wmk-button[disabled],
		fieldset[disabled] .wmk-button
		{
			cursor: not-allowed;
			filter: alpha(opacity=65);
			-webkit-box-shadow: none;
			box-shadow: none;
			opacity: .65;
		}
		a.wmk-button.disabled,
		fieldset[disabled] a.wmk-button
		{
			pointer-events: none;
		}

		/* shrunken button */

		.wmk-button-small
		{
			padding: 2px 4px;
			line-height: 1;
			font-size: 12px;
		}

		/* default button */

		.wmk-button-default
		{
			color: #333;
			background-color: #fff;
			background-image: linear-gradient(to right bottom, #FFFFFF, #E0E0E0);
			border-color: #ccc;
		}
		.wmk-button-default:focus,
		.wmk-button-default.focus
		{
			color: #333;
			background-color: #e6e6e6;
			border-color: #8c8c8c;
		}
		.wmk-button-default:hover
		{
			color: #333;
			background-color: #e6e6e6;
			border-color: #adadad;
		}
		.wmk-button-default:active,
		.wmk-button-default.active,
		.open > .dropdown-toggle.wmk-button-default
		{
			color: #333;
			background-color: #e6e6e6;
			border-color: #adadad;
		}
		.wmk-button-default:active:hover,
		.wmk-button-default.active:hover,
		.open > .dropdown-toggle.wmk-button-default:hover,
		.wmk-button-default:active:focus,
		.wmk-button-default.active:focus,
		.open > .dropdown-toggle.wmk-button-default:focus,
		.wmk-button-default:active.focus,
		.wmk-button-default.active.focus,
		.open > .dropdown-toggle.wmk-button-default.focus
		{
			color: #333;
			background-color: #d4d4d4;
			border-color: #8c8c8c;
		}
		.wmk-button-default:active,
		.wmk-button-default.active,
		.open > .dropdown-toggle.wmk-button-default
		{
			background-image: none;
		}
		.wmk-button-default.disabled:hover,
		.wmk-button-default[disabled]:hover,
		fieldset[disabled] .wmk-button-default:hover,
		.wmk-button-default.disabled:focus,
		.wmk-button-default[disabled]:focus,
		fieldset[disabled] .wmk-button-default:focus,
		.wmk-button-default.disabled.focus,
		.wmk-button-default[disabled].focus,
		fieldset[disabled] .wmk-button-default.focus
		{
			background-color: #fff;
			border-color: #ccc;
		}
		.wmk-button-default .badge
		{
			color: #fff;
			background-color: #333;
		}

		/* primary button */

		.wmk-button-primary
		{
			color: #fff;
			background-color: #008FD2;
			background-image: linear-gradient(to right bottom, ${lowlightEdge1}, ${lowlightEdge2});
			border-color: #00C0C0;
		}
		.wmk-button-primary:focus,
		.wmk-button-primary.focus
		{
			color: #fff;
			background-color: ${lowlight};
			border-color: #122b40;
		}
		.wmk-button-primary:hover
		{
			color: #fff;
			background-color: #286090;
			border-color: #204d74;
		}
		.wmk-button-primary:active,
		.wmk-button-primary.active,
		.open > .dropdown-toggle.wmk-button-primary
		{
			color: #fff;
			background-color: #286090;
			border-color: #20744d;
		}
		.wmk-button-primary:active:hover,
		.wmk-button-primary.active:hover,
		.open > .dropdown-toggle.wmk-button-primary:hover,
		.wmk-button-primary:active:focus,
		.wmk-button-primary.active:focus,
		.open > .dropdown-toggle.wmk-button-primary:focus,
		.wmk-button-primary:active.focus,
		.wmk-button-primary.active.focus,
		.open > .dropdown-toggle.wmk-button-primary.focus
		{
			color: #fff;
			background-color: ${highlight};
			background-image: linear-gradient(to right bottom, ${highlightEdge1}, ${highlightEdge2});
			border-color: #12802b;
		}
		.wmk-button-primary:active,
		.wmk-button-primary.active,
		.open > .dropdown-toggle.wmk-button-primary
		{
			background-image: none;
		}
		.wmk-button-primary.disabled:hover,
		.wmk-button-primary[disabled]:hover,
		fieldset[disabled] .wmk-button-primary:hover,
		.wmk-button-primary.disabled:focus,
		.wmk-button-primary[disabled]:focus,
		fieldset[disabled] .wmk-button-primary:focus,
		.wmk-button-primary.disabled.focus,
		.wmk-button-primary[disabled].focus,
		fieldset[disabled] .wmk-button-primary.focus
		{
			background-color: #337ab7;
			border-color: #2ea46d;
		}
		.wmk-button-primary .badge
		{
			color: #337ab7;
			background-color: #fff;
		}
	`;
}


/***/ }),

/***/ "./src/util/Triangulation2D.ts":
/*!*************************************!*\
  !*** ./src/util/Triangulation2D.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Triangulation2D: () => (/* binding */ Triangulation2D)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./src/util/util.ts");
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Vec */ "./src/util/Vec.ts");


const EPSILON = Math.pow(2, -52);
class Triangulation2D {
    constructor(px, py) {
        this.px = px;
        this.py = py;
        this.numTriangles = 0;
        this.edgeStack = _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.numberArray(0, 512);
        this.hull = null;
        this.px = px;
        this.py = py;
        this.sz = px.length;
        let maxTriangles = Math.max(2 * this.sz - 5, 0);
        this.triangles = new Array(maxTriangles * 3);
        this.halfedges = new Array(maxTriangles * 3);
        this.hashSize = Math.ceil(Math.sqrt(this.sz));
        this.hullPrev = new Array(this.sz);
        this.hullNext = new Array(this.sz);
        this.hullTri = new Array(this.sz);
        this.hullHash = _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.numberArray(-1, this.hashSize);
        this.ids = new Array(this.sz);
        this.dists = new Array(this.sz);
        this.update();
    }
    trimConcave(threshold) {
        const threshSq = (0,_util__WEBPACK_IMPORTED_MODULE_0__.sqr)(threshold);
        const { sz, px, py } = this;
        let tri = this.triangles.slice(0);
        let edge = [];
        for (let n = 0, i = 0; i < tri.length; n++, i += 3) {
            edge.push(sz * Math.min(tri[i + 0], tri[i + 1]) + Math.max(tri[i + 0], tri[i + 1]));
            edge.push(sz * Math.min(tri[i + 0], tri[i + 2]) + Math.max(tri[i + 0], tri[i + 2]));
            edge.push(sz * Math.min(tri[i + 1], tri[i + 2]) + Math.max(tri[i + 1], tri[i + 2]));
        }
        let uniqueEdges = _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.uniqueUnstable(edge);
        for (let n = 0; n < edge.length; n++)
            edge[n] = uniqueEdges.indexOf(edge[n]);
        let edgeCount = new Array(edge.length);
        while (true) {
            const ntri = tri.length / 3;
            edgeCount.fill(0);
            for (let n = 0, i = 0; n < ntri; n++, i += 3) {
                edgeCount[edge[i + 0]]++;
                edgeCount[edge[i + 1]]++;
                edgeCount[edge[i + 2]]++;
            }
            let mask = _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.booleanArray(true, ntri);
            for (let n = 0, i = 0; n < ntri; n++, i += 3) {
                const c1 = edgeCount[edge[i + 0]];
                const c2 = edgeCount[edge[i + 1]];
                const c3 = edgeCount[edge[i + 2]];
                const i1 = tri[i], i2 = tri[i + 1], i3 = tri[i + 2];
                if (c1 == 1 && c2 != 1 && c3 != 1)
                    mask[n] = (0,_util__WEBPACK_IMPORTED_MODULE_0__.norm2_xy)(px[i1] - px[i2], py[i1] - py[i2]) < threshSq;
                else if (c1 != 1 && c2 == 1 && c3 != 1)
                    mask[n] = (0,_util__WEBPACK_IMPORTED_MODULE_0__.norm2_xy)(px[i1] - px[i3], py[i1] - py[i3]) < threshSq;
                else if (c1 != 1 && c2 != 1 && c3 == 1)
                    mask[n] = (0,_util__WEBPACK_IMPORTED_MODULE_0__.norm2_xy)(px[i2] - px[i3], py[i2] - py[i3]) < threshSq;
            }
            if (_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.allTrue(mask))
                break;
            let repTri = new Array(_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.maskCount(mask) * 3);
            let repEdge = new Array(_Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.maskCount(mask) * 3);
            for (let n = 0, i = 0, j = 0, k = 0; n < ntri; n++, i += 3)
                if (mask[n]) {
                    repTri[j++] = tri[i];
                    repTri[j++] = tri[i + 1];
                    repTri[j++] = tri[i + 2];
                    repEdge[k++] = edge[i];
                    repEdge[k++] = edge[i + 1];
                    repEdge[k++] = edge[i + 2];
                }
            tri = repTri;
            edge = repEdge;
        }
        return tri;
    }
    traceOutline(tri) {
        const npt = tri.length, ntri = npt / 3;
        const { sz } = this;
        let edgeCount = new Map();
        for (let n = 0, i = 0; n < ntri; n++, i += 3) {
            const e1 = sz * Math.min(tri[i + 0], tri[i + 1]) + Math.max(tri[i + 0], tri[i + 1]);
            const e2 = sz * Math.min(tri[i + 0], tri[i + 2]) + Math.max(tri[i + 0], tri[i + 2]);
            const e3 = sz * Math.min(tri[i + 1], tri[i + 2]) + Math.max(tri[i + 1], tri[i + 2]);
            edgeCount.set(e1, (edgeCount.get(e1) || 0) + 1);
            edgeCount.set(e2, (edgeCount.get(e2) || 0) + 1);
            edgeCount.set(e3, (edgeCount.get(e3) || 0) + 1);
        }
        let edgePairs = [];
        for (let entry of edgeCount.entries())
            if (entry[1] == 1) {
                const e = entry[0];
                const i1 = Math.floor(e / sz), i2 = e % sz;
                edgePairs.push(i1);
                edgePairs.push(i2);
            }
        const idx = _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.uniqueUnstable(edgePairs);
        const isz = idx.length;
        const idxMap = new Map();
        for (let n = 0; n < isz; n++)
            idxMap.set(idx[n], n);
        let g1 = _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.numberArray(-1, isz), g2 = _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.numberArray(-1, isz);
        for (let n = 0; n < edgePairs.length; n += 2) {
            const i1 = idxMap.get(edgePairs[n]), i2 = idxMap.get(edgePairs[n + 1]);
            if (g1[i1] < 0)
                g1[i1] = i2;
            else
                g2[i1] = i2;
            if (g1[i2] < 0)
                g1[i2] = i1;
            else
                g2[i2] = i1;
        }
        let mask = _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.booleanArray(false, isz);
        let sequence = new Array(isz);
        sequence[0] = 0;
        mask[0] = true;
        for (let n = 1; n < isz; n++) {
            const i = sequence[n - 1];
            if (!mask[g1[i]])
                sequence[n] = g1[i];
            else
                sequence[n] = g2[i];
            mask[sequence[n]] = true;
        }
        return _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.idxGet(idx, sequence);
    }
    update() {
        const sz = this.sz;
        let { px, py, ids, dists, triangles, halfedges } = this;
        const minX = _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.min(px), minY = _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.min(py);
        const maxX = _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.max(px), maxY = _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.max(py);
        for (let n = 0; n < sz; n++)
            ids[n] = n;
        this.centreX = 0.5 * (minX + maxX);
        this.centreY = 0.5 * (minY + maxY);
        let i0 = 0, i1 = 0, i2 = 0;
        let minDist = Number.POSITIVE_INFINITY;
        for (let n = 0; n < sz; n++) {
            const d = (0,_util__WEBPACK_IMPORTED_MODULE_0__.norm_xy)(this.centreX - px[n], this.centreY - py[n]);
            if (d < minDist) {
                i0 = n;
                minDist = d;
            }
        }
        const i0x = px[i0], i0y = py[i0];
        minDist = Number.POSITIVE_INFINITY;
        for (let n = 0; n < sz; n++) {
            if (n == i0)
                continue;
            const d = (0,_util__WEBPACK_IMPORTED_MODULE_0__.norm_xy)(i0x - px[n], i0y - py[n]);
            if (d < minDist && d > 0) {
                i1 = n;
                minDist = d;
            }
        }
        let i1x = px[i1], i1y = py[i1];
        let minRadius = Number.POSITIVE_INFINITY;
        for (let n = 0; n < sz; n++) {
            if (n == i0 || n == i1)
                continue;
            let r = this.circumRadius(i0x, i0y, i1x, i1y, px[n], py[n]);
            if (r < minRadius) {
                i2 = n;
                minRadius = r;
            }
        }
        let i2x = px[i2], i2y = py[i2];
        if (!Number.isFinite(minRadius)) {
            for (let n = 0; n < sz; n++) {
                dists[n] = px[n] - px[0];
                if (dists[n] == 0)
                    dists[n] = py[n] - py[0];
            }
            this.quicksort(0, sz - 1);
            let hull = new Array(sz);
            let j = 0;
            let d0 = Number.NEGATIVE_INFINITY;
            for (let n = 0; n < sz; n++) {
                let id = ids[n];
                if (dists[id] > d0) {
                    hull[j++] = id;
                    d0 = dists[id];
                }
            }
            this.hull = hull.slice(0, j);
            triangles = [];
            halfedges = [];
            return;
        }
        if (this.orient(i0x, i0y, i1x, i1y, i2x, i2y)) {
            let i = i1;
            let x = i1x, y = i1y;
            i1 = i2;
            i1x = i2x;
            i1y = i2y;
            i2 = i;
            i2x = x;
            i2y = y;
        }
        this.pickCircumCentre(i0x, i0y, i1x, i1y, i2x, i2y);
        for (let n = 0; n < sz; n++)
            dists[n] = (0,_util__WEBPACK_IMPORTED_MODULE_0__.norm_xy)(px[n] - this.centreX, py[n] - this.centreY);
        this.quicksort(0, sz - 1);
        this.hullStart = i0;
        let hullSize = 3;
        const { hullNext, hullPrev, hullTri, hullHash, hashSize } = this;
        hullNext[i0] = hullPrev[i2] = i1;
        hullNext[i1] = hullPrev[i0] = i2;
        hullNext[i2] = hullPrev[i1] = i0;
        hullTri[i0] = 0;
        hullTri[i1] = 1;
        hullTri[i2] = 2;
        hullHash.fill(-1);
        hullHash[this.hashKey(i0x, i0y)] = i0;
        hullHash[this.hashKey(i1x, i1y)] = i1;
        hullHash[this.hashKey(i2x, i2y)] = i2;
        this.numTriangles = 0;
        this.addTriangle(i0, i1, i2, -1, -1, -1);
        let xp = 0, yp = 0;
        for (let k = 0; k < ids.length; k++) {
            let i = ids[k];
            let x = px[i], y = py[i];
            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON)
                continue;
            xp = x;
            yp = y;
            if (i == i0 || i == i1 || i == i2)
                continue;
            let start = 0;
            for (let j = 0, key = this.hashKey(x, y); j < hashSize; j++) {
                start = hullHash[(key + j) % hashSize];
                if (start >= 0 && start != hullNext[start])
                    break;
            }
            start = hullPrev[start];
            let e = start, q = hullNext[e];
            while (!this.orient(x, y, px[e], py[e], px[q], py[q])) {
                e = q;
                if (e == start) {
                    e = -1;
                    break;
                }
                q = hullNext[e];
            }
            if (e < 0)
                continue;
            let t = this.addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);
            hullTri[i] = this.legalise(t + 2);
            hullTri[e] = t;
            hullSize++;
            let n = hullNext[e];
            q = hullNext[n];
            while (this.orient(x, y, px[n], py[n], px[q], py[q])) {
                t = this.addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);
                hullTri[i] = this.legalise(t + 2);
                hullNext[n] = n;
                hullSize--;
                n = q;
                q = hullNext[n];
            }
            if (e == start) {
                q = hullPrev[e];
                while (this.orient(x, y, px[q], py[q], px[e], py[e])) {
                    t = this.addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);
                    this.legalise(t + 2);
                    hullTri[q] = t;
                    hullNext[e] = e;
                    hullSize--;
                    e = q;
                    q = hullPrev[e];
                }
            }
            this.hullStart = hullPrev[i] = e;
            hullNext[e] = hullPrev[n] = i;
            hullNext[i] = n;
            hullHash[this.hashKey(x, y)] = i;
            hullHash[this.hashKey(px[e], py[e])] = e;
        }
        this.hull = new Array(hullSize);
        for (let n = 0, e = this.hullStart; n < hullSize; n++) {
            this.hull[n] = e;
            e = hullNext[e];
        }
        this.triangles = triangles.slice(0, this.numTriangles);
        this.halfedges = halfedges.slice(0, this.numTriangles);
    }
    hashKey(x, y) {
        return Math.floor(this.pseudoAngle(x - this.centreX, y - this.centreY) * this.hashSize) % this.hashSize;
    }
    legalise(a) {
        let i = 0;
        let ar = 0;
        while (true) {
            let b = this.halfedges[a];
            let a0 = a - a % 3;
            ar = a0 + (a + 2) % 3;
            if (b < 0) {
                if (i == 0)
                    break;
                a = this.edgeStack[--i];
                continue;
            }
            const b0 = b - b % 3;
            const al = a0 + (a + 1) % 3;
            const bl = b0 + (b + 2) % 3;
            const { px, py, triangles, halfedges } = this;
            const p0 = triangles[ar];
            const pr = triangles[a];
            const pl = triangles[al];
            const p1 = triangles[bl];
            let illegal = this.inCircle(px[p0], py[p0], px[pr], py[pr], px[pl], py[pl], px[p1], py[p1]);
            if (illegal) {
                this.triangles[a] = p1;
                this.triangles[b] = p0;
                const hbl = halfedges[bl];
                if (hbl < 0) {
                    let e = this.hullStart;
                    do {
                        if (this.hullTri[e] == bl) {
                            this.hullTri[e] = a;
                            break;
                        }
                        e = this.hullPrev[e];
                    } while (e != this.hullStart);
                }
                this.link(a, hbl);
                this.link(b, halfedges[ar]);
                this.link(ar, bl);
                const br = b0 + (b + 1) % 3;
                if (i < this.edgeStack.length)
                    this.edgeStack[i++] = br;
            }
            else {
                if (i == 0)
                    break;
                a = this.edgeStack[--i];
            }
        }
        return ar;
    }
    link(a, b) {
        this.halfedges[a] = b;
        if (b >= 0)
            this.halfedges[b] = a;
    }
    addTriangle(i0, i1, i2, a, b, c) {
        const t = this.numTriangles;
        this.triangles[t] = i0;
        this.triangles[t + 1] = i1;
        this.triangles[t + 2] = i2;
        this.link(t, a);
        this.link(t + 1, b);
        this.link(t + 2, c);
        this.numTriangles += 3;
        return t;
    }
    pseudoAngle(dx, dy) {
        const p = dx / (Math.abs(dx) + Math.abs(dy));
        return (dy > 0 ? 3 - p : 1 + p) / 4;
    }
    orientIfSure(px, py, rx, ry, qx, qy) {
        const l = (ry - py) * (qx - px);
        const r = (rx - px) * (qy - py);
        return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;
    }
    orient(rx, ry, qx, qy, px, py) {
        let o = this.orientIfSure(px, py, rx, ry, qx, qy);
        if (o != 0)
            return o < 0;
        o = this.orientIfSure(rx, ry, qx, qy, px, py);
        if (o != 0)
            return o < 0;
        o = this.orientIfSure(qx, qy, px, py, rx, ry);
        return o < 0;
    }
    inCircle(ax, ay, bx, by, cx, cy, px, py) {
        const dx = ax - px;
        const dy = ay - py;
        const ex = bx - px;
        const ey = by - py;
        const fx = cx - px;
        const fy = cy - py;
        const ap = dx * dx + dy * dy;
        const bp = ex * ex + ey * ey;
        const cp = fx * fx + fy * fy;
        return dx * (ey * cp - bp * fy) -
            dy * (ex * cp - bp * fx) +
            ap * (ex * fy - ey * fx) < 0;
    }
    circumRadius(ax, ay, bx, by, cx, cy) {
        const dx = bx - ax;
        const dy = by - ay;
        const ex = cx - ax;
        const ey = cy - ay;
        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        const d = 0.5 / (dx * ey - dy * ex);
        const x = (ey * bl - dy * cl) * d;
        const y = (dx * cl - ex * bl) * d;
        return x * x + y * y;
    }
    pickCircumCentre(ax, ay, bx, by, cx, cy) {
        const dx = bx - ax;
        const dy = by - ay;
        const ex = cx - ax;
        const ey = cy - ay;
        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        const d = 0.5 / (dx * ey - dy * ex);
        this.centreX = ax + (ey * bl - dy * cl) * d;
        this.centreY = ay + (dx * cl - ex * bl) * d;
    }
    quicksort(left, right) {
        const { ids, dists } = this;
        if (right - left <= 20) {
            for (let i = left + 1; i <= right; i++) {
                const temp = ids[i];
                const tempDist = dists[temp];
                let j = i - 1;
                while (j >= left && dists[ids[j]] > tempDist)
                    ids[j + 1] = ids[j--];
                ids[j + 1] = temp;
            }
        }
        else {
            let median = (left + right) >> 1;
            let i = left + 1;
            let j = right;
            _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.swap(ids, median, i);
            if (dists[ids[left]] > dists[ids[right]])
                _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.swap(ids, left, right);
            if (dists[ids[i]] > dists[ids[right]])
                _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.swap(ids, i, right);
            if (dists[ids[left]] > dists[ids[i]])
                _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.swap(ids, left, i);
            let temp = ids[i];
            const tempDist = dists[temp];
            while (true) {
                do
                    i++;
                while (dists[ids[i]] < tempDist);
                do
                    j--;
                while (dists[ids[j]] > tempDist);
                if (j < i)
                    break;
                _Vec__WEBPACK_IMPORTED_MODULE_1__.Vec.swap(ids, i, j);
            }
            ids[left + 1] = ids[j];
            ids[j] = temp;
            if (right - i + 1 >= j - left) {
                this.quicksort(i, right);
                this.quicksort(left, j - 1);
            }
            else {
                this.quicksort(left, j - 1);
                this.quicksort(i, right);
            }
        }
    }
}


/***/ }),

/***/ "./src/util/Vec.ts":
/*!*************************!*\
  !*** ./src/util/Vec.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Permutation: () => (/* binding */ Permutation),
/* harmony export */   Vec: () => (/* binding */ Vec)
/* harmony export */ });
class Vec {
    static isBlank(arr) { return arr == null || arr.length == 0; }
    static notBlank(arr) { return arr != null && arr.length > 0; }
    static safeArray(arr) { return arr == null ? [] : arr; }
    static len(arr) { return arr == null ? 0 : arr.length; }
    static arrayLength(arr) { return arr == null ? 0 : arr.length; }
    static anyTrue(arr) {
        if (arr == null)
            return false;
        for (let v of arr)
            if (v)
                return true;
        return false;
    }
    static allTrue(arr) {
        if (arr == null)
            return true;
        for (let v of arr)
            if (!v)
                return false;
        return true;
    }
    static anyFalse(arr) {
        if (arr == null)
            return false;
        for (let v of arr)
            if (!v)
                return true;
        return false;
    }
    static allFalse(arr) {
        if (arr == null)
            return true;
        for (let v of arr)
            if (v)
                return false;
        return true;
    }
    static iterAnyTrue(arr, callback) {
        for (let v of arr)
            if (callback(v))
                return true;
        return false;
    }
    static iterAllTrue(arr, callback) {
        for (let v of arr)
            if (!callback(v))
                return false;
        return true;
    }
    static iterAnyFalse(arr, callback) {
        for (let v of arr)
            if (!callback(v))
                return true;
        return false;
    }
    static iterAllFalse(arr, callback) {
        for (let v of arr)
            if (callback(v))
                return false;
        return true;
    }
    static swap(arr, idx1, idx2) {
        let v = arr[idx1];
        arr[idx1] = arr[idx2];
        arr[idx2] = v;
    }
    static duplicate(arr) {
        return arr == null ? [] : arr.slice(0);
    }
    static append(arr, item) {
        if (arr == null || arr.length == 0)
            return [item];
        arr = arr.slice(0);
        arr.push(item);
        return arr;
    }
    static prepend(arr, item) {
        if (arr == null || arr.length == 0)
            return [item];
        arr = arr.slice(0);
        arr.unshift(item);
        return arr;
    }
    static concat(arr1, arr2) {
        if (arr1 == null && arr2 == null)
            return [];
        if (arr1 == null)
            return arr2.slice(0);
        if (arr2 == null)
            return arr1.slice(0);
        return arr1.concat(arr2);
    }
    static remove(arr, idx) {
        arr = arr.slice(0);
        arr.splice(idx, 1);
        return arr;
    }
    static flatten(mtx) {
        let ret = [];
        for (let vec of mtx)
            ret.push(...vec);
        return ret;
    }
    static transpose(mtx) {
        let sz1 = mtx.length, sz2 = mtx[0].length;
        let ret = Vec.anyArray(null, sz2);
        for (let j = 0; j < sz2; j++) {
            ret[j] = Vec.anyArray(null, sz1);
            for (let i = 0; i < sz1; i++)
                ret[j][i] = mtx[i][j];
        }
        return ret;
    }
    static equals(arr1, arr2) {
        if (arr1 == null && arr2 == null)
            return true;
        if (arr1 == null || arr2 == null)
            return false;
        if (arr1.length != arr2.length)
            return false;
        for (let n = 0; n < arr1.length; n++)
            if (arr1[n] != arr2[n])
                return false;
        return true;
    }
    static equivalent(arr1, arr2) {
        const len1 = arr1 == null ? 0 : arr1.length, len2 = arr2 == null ? 0 : arr2.length;
        if (len1 != len2)
            return false;
        for (let n = 0; n < len1; n++)
            if (arr1[n] != arr2[n])
                return false;
        return true;
    }
    static compareTo(arr1, arr2) {
        const sz = Math.max(arr1.length, arr2.length);
        for (let n = 0; n < sz; n++) {
            if (arr1[n] < arr2[n])
                return -1;
            if (arr1[n] > arr2[n])
                return 1;
        }
        return 0;
    }
    static booleanArray(val, sz) {
        let arr = new Array(sz);
        arr.fill(val);
        return arr;
    }
    static numberArray(val, sz) {
        let arr = new Array(sz);
        arr.fill(val);
        return arr;
    }
    static stringArray(val, sz) {
        let arr = new Array(sz);
        arr.fill(val);
        return arr;
    }
    static anyArray(val, sz) {
        let arr = new Array(sz);
        arr.fill(val);
        return arr;
    }
    static genericArray(val, sz) {
        let arr = new Array(sz);
        arr.fill(val);
        return arr;
    }
    static genericBlankArrays(sz) {
        let arr = new Array(sz);
        for (let n = 0; n < sz; n++)
            arr[n] = [];
        return arr;
    }
    static numberMatrix(val, dim1, dim2) {
        let mtx = new Array(dim1);
        for (let n = 0; n < dim1; n++)
            mtx[n] = Vec.numberArray(val, dim2);
        return mtx;
    }
    static funcArray(sz, func) {
        let arr = new Array(sz);
        for (let n = 0; n < sz; n++)
            arr[n] = func(n);
        return arr;
    }
    static first(arr) { return arr == null || arr.length == 0 ? null : arr[0]; }
    static last(arr) { return arr == null || arr.length == 0 ? null : arr[arr.length - 1]; }
    static min(arr) {
        if (arr == null || arr.length == 0)
            return Number.MAX_VALUE;
        let v = arr[0];
        for (let n = 1; n < arr.length; n++)
            v = Math.min(v, arr[n]);
        return v;
    }
    static max(arr) {
        if (arr == null || arr.length == 0)
            return Number.MIN_VALUE;
        let v = arr[0];
        for (let n = 1; n < arr.length; n++)
            v = Math.max(v, arr[n]);
        return v;
    }
    static idxMin(arr) {
        if (arr == null || arr.length == 0)
            return -1;
        let idx = 0;
        for (let n = 1; n < arr.length; n++)
            if (arr[n] < arr[idx])
                idx = n;
        return idx;
    }
    static idxMax(arr) {
        if (arr == null || arr.length == 0)
            return -1;
        let idx = 0;
        for (let n = 1; n < arr.length; n++)
            if (arr[n] > arr[idx])
                idx = n;
        return idx;
    }
    static range(arr) {
        if (arr == null || arr.length == 0)
            return 0;
        let lo = arr[0], hi = arr[0];
        for (let n = 1; n < arr.length; n++) {
            if (arr[n] < lo)
                lo = arr[n];
            if (arr[n] > hi)
                hi = arr[n];
        }
        return hi - lo;
    }
    static reverse(arr) {
        let ret = [];
        for (let n = arr.length - 1; n >= 0; n--)
            ret.push(arr[n]);
        return ret;
    }
    static identity0(sz) {
        let ret = new Array(sz);
        for (let n = 0; n < sz; n++)
            ret[n] = n;
        return ret;
    }
    static identity1(sz) {
        let ret = new Array(sz);
        for (let n = 0; n < sz; n++)
            ret[n] = n + 1;
        return ret;
    }
    static identityN(start, sz) {
        let ret = new Array(sz);
        for (let n = 0; n < sz; n++)
            ret[n] = n + start;
        return ret;
    }
    static notMask(mask) {
        let ret = new Array(mask.length);
        for (let n = mask.length - 1; n >= 0; n--)
            ret[n] = !mask[n];
        return ret;
    }
    static idxGet(arr, idx) {
        let ret = [];
        for (let n = 0; n < idx.length; n++)
            ret.push(arr[idx[n]]);
        return ret;
    }
    static maskCount(mask) {
        if (!mask)
            return 0;
        let c = 0;
        for (let n = mask.length - 1; n >= 0; n--)
            if (mask[n])
                c++;
        return c;
    }
    static maskIdx(mask) {
        let idx = [];
        for (let n = 0; n < mask.length; n++)
            if (mask[n])
                idx.push(n);
        return idx;
    }
    static idxMask(idx, sz) {
        let mask = Vec.booleanArray(false, sz);
        for (let n of idx)
            mask[n] = true;
        return mask;
    }
    static maskMap(mask) {
        let ret = [];
        for (let n = 0, pos = 0; n < mask.length; n++)
            ret.push(mask[n] ? pos++ : -1);
        return ret;
    }
    static maskGet(arr, mask) {
        let ret = [];
        for (let n = 0, p = 0; n < arr.length; n++)
            if (mask[n])
                ret.push(arr[n]);
        return ret;
    }
    static maskEqual(arr1, val) {
        let ret = [];
        if (val.constructor === Array) {
            let arr2 = val;
            for (let n = 0; n < arr1.length; n++)
                ret.push(arr1[n] == arr2[n]);
        }
        else {
            for (let n = 0; n < arr1.length; n++)
                ret.push(arr1[n] == val);
        }
        return ret;
    }
    static sum(arr) {
        if (arr == null || arr.length == 0)
            return 0;
        let t = arr[0];
        for (let n = 1; n < arr.length; n++)
            t += arr[n];
        return t;
    }
    static add(arr1, val) {
        let ret = [];
        if (val.constructor === Array) {
            let arr2 = val;
            for (let n = 0; n < arr1.length; n++)
                ret.push(arr1[n] + arr2[n]);
        }
        else {
            for (let n = 0; n < arr1.length; n++)
                ret.push(arr1[n] + val);
        }
        return ret;
    }
    static sub(arr1, val) {
        let ret = [];
        if (val.constructor === Array) {
            let arr2 = val;
            for (let n = 0; n < arr1.length; n++)
                ret.push(arr1[n] - arr2[n]);
        }
        else {
            for (let n = 0; n < arr1.length; n++)
                ret.push(arr1[n] - val);
        }
        return ret;
    }
    static mul(arr1, val) {
        let ret = [];
        if (val.constructor === Array) {
            let arr2 = val;
            for (let n = 0; n < arr1.length; n++)
                ret.push(arr1[n] * arr2[n]);
        }
        else {
            for (let n = 0; n < arr1.length; n++)
                ret.push(arr1[n] * val);
        }
        return ret;
    }
    static neg(arr) {
        let ret = arr.slice(0);
        for (let n = ret.length - 1; n >= 0; n--)
            ret[n] *= -1;
        return ret;
    }
    static setTo(arr, val) { for (let n = arr == null ? -1 : arr.length - 1; n >= 0; n--)
        arr[n] = val; }
    static addTo(arr, val) { for (let n = arr == null ? -1 : arr.length - 1; n >= 0; n--)
        arr[n] += val; }
    static mulBy(arr, val) { for (let n = arr == null ? -1 : arr.length - 1; n >= 0; n--)
        arr[n] *= val; }
    static setToArray(arr, val) { for (let n = arr == null ? -1 : arr.length - 1; n >= 0; n--)
        arr[n] = val[n]; }
    static addToArray(arr, val) { for (let n = arr == null ? -1 : arr.length - 1; n >= 0; n--)
        arr[n] += val[n]; }
    static subFromArray(arr, val) { for (let n = arr == null ? -1 : arr.length - 1; n >= 0; n--)
        arr[n] -= val[n]; }
    static mulByArray(arr, val) { for (let n = arr == null ? -1 : arr.length - 1; n >= 0; n--)
        arr[n] *= val[n]; }
    static divByArray(arr, val) { for (let n = arr == null ? -1 : arr.length - 1; n >= 0; n--)
        arr[n] /= val[n]; }
    static idxSort(arr) {
        let idx = new Array(arr.length);
        for (let n = 0; n < arr.length; n++)
            idx[n] = n;
        idx.sort((a, b) => arr[a] < arr[b] ? -1 : arr[a] > arr[b] ? 1 : 0);
        return idx;
    }
    static sort(arr) {
        arr.sort((v1, v2) => v1 - v2);
    }
    static sorted(arr) {
        arr = arr.slice(0);
        this.sort(arr);
        return arr;
    }
    static sortedUnique(arr) {
        if (arr == null || arr.length == 0)
            return [];
        let unique = Vec.uniqueUnstable(arr);
        if (typeof arr[0] == 'number')
            this.sort(unique);
        else
            unique.sort();
        return unique;
    }
    static uniqueUnstable(arr) {
        return Array.from(new Set(arr));
    }
    static uniqueStable(arr) {
        let set = new Set(arr), ret = [];
        for (let v of arr)
            if (set.has(v)) {
                ret.push(v);
                set.delete(v);
            }
        return ret;
    }
    static maskUnique(arr) {
        let set = new Set(arr), ret = this.booleanArray(false, arr.length);
        for (let n = 0; n < arr.length; n++)
            if (set.has(arr[n])) {
                ret[n] = true;
                set.delete(arr[n]);
            }
        return ret;
    }
    static idxUnique(arr) {
        let set = new Set(arr), ret = [];
        for (let n = 0; n < arr.length; n++)
            if (set.has(arr[n])) {
                ret.push(n);
                set.delete(arr[n]);
            }
        return ret;
    }
    static exclude(arr, excl) {
        const sz = Vec.len(arr);
        if (sz == 0)
            return [];
        let mask = new Array(sz);
        let count = 0;
        for (let n = 0; n < arr.length; n++) {
            mask[n] = excl.indexOf(arr[n]) < 0;
            if (mask[n])
                count++;
        }
        if (count == sz)
            return arr;
        return Vec.maskGet(arr, mask);
    }
}
class Permutation {
    static parityPerms(idx) {
        let v = Vec.booleanArray(false, idx.length);
        let p = 0;
        for (let i = idx.length - 1; i >= 0; i--) {
            if (v[i])
                p++;
            else {
                let j = i;
                do {
                    j = idx[j];
                    v[j] = true;
                } while (j != i);
            }
        }
        return p;
    }
    static parityIdentity(idx) {
        return this.parityPerms(idx) & 1;
    }
    static parityOrder(src) {
        if (src.length <= 1)
            return 0;
        else if (src.length == 2)
            return src[0] < src[1] ? 0 : 1;
        else if (src.length == 3) {
            let p = 1;
            if (src[0] < src[1])
                p++;
            if (src[0] < src[2])
                p++;
            if (src[1] < src[2])
                p++;
            return p & 1;
        }
        else if (src.length == 4) {
            let p = 0;
            if (src[0] < src[1])
                p++;
            if (src[0] < src[2])
                p++;
            if (src[0] < src[3])
                p++;
            if (src[1] < src[2])
                p++;
            if (src[1] < src[3])
                p++;
            if (src[2] < src[3])
                p++;
            return p & 1;
        }
        let idx = [], sorted = src.slice(0);
        sorted.sort();
        for (let n = 0; n < src.length; n++)
            idx.push(sorted.indexOf(src[n]));
        return this.parityIdentity(idx);
    }
    static smallPermutation(sz) {
        if (sz == 1)
            return this.PERM1;
        else if (sz == 2)
            return this.PERM2;
        else if (sz == 3)
            return this.PERM3;
        else if (sz == 4)
            return this.PERM4;
        else
            return null;
    }
    static allPermutations(sz) {
        if (sz <= this.SMALL_PERMS)
            return this.smallPermutation(sz);
        while (this.PERM_CACHE.length < this.MAX_CACHE - this.SMALL_PERMS)
            this.PERM_CACHE.push(null);
        if (sz < this.MAX_CACHE && this.PERM_CACHE[sz - this.SMALL_PERMS] != null)
            return this.PERM_CACHE[sz - this.SMALL_PERMS];
        let nperms = 1;
        for (let n = 2; n <= sz; n++)
            nperms *= n;
        let perms = [];
        let idx = Vec.identity0(sz);
        perms.push(idx.slice(0));
        let mask = Vec.booleanArray(false, sz);
        for (let n = 1; n < nperms; n++) {
            nonunique: while (idx[0] < sz) {
                idx[sz - 1]++;
                for (let i = sz - 1; i > 0; i--) {
                    if (idx[i] < sz)
                        break;
                    idx[i] = 0;
                    idx[i - 1]++;
                }
                Vec.setTo(mask, false);
                for (let i of idx) {
                    if (mask[i])
                        continue nonunique;
                    mask[i] = true;
                }
                perms[n] = idx.slice(0);
                break;
            }
        }
        if (sz < this.MAX_CACHE)
            this.PERM_CACHE[sz - this.SMALL_PERMS] = perms;
        return perms;
    }
}
Permutation.PERM1 = [[0]];
Permutation.PERM2 = [[0, 1], [1, 0]];
Permutation.PERM3 = [[0, 1, 2], [0, 2, 1], [1, 0, 2], [1, 2, 0], [2, 0, 1], [2, 1, 0]];
Permutation.PERM4 = [
    [0, 1, 2, 3], [0, 1, 3, 2], [0, 2, 1, 3], [0, 2, 3, 1], [0, 3, 1, 2], [0, 3, 2, 1],
    [1, 0, 2, 3], [1, 0, 3, 2], [1, 2, 0, 3], [1, 2, 3, 0], [1, 3, 0, 2], [1, 3, 2, 0],
    [2, 0, 1, 3], [2, 0, 3, 1], [2, 1, 0, 3], [2, 1, 3, 0], [2, 3, 0, 1], [2, 3, 1, 0],
    [3, 0, 1, 2], [3, 0, 2, 1], [3, 1, 0, 2], [3, 1, 2, 0], [3, 2, 0, 1], [3, 2, 1, 0]
];
Permutation.SMALL_PERMS = 4;
Permutation.MAX_CACHE = 8;
Permutation.PERM_CACHE = [];


/***/ }),

/***/ "./src/util/XML.ts":
/*!*************************!*\
  !*** ./src/util/XML.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   XML: () => (/* binding */ XML)
/* harmony export */ });
const ELEMENT_NODE = 1;
const ATTRIBUTE_NODE = 2;
const TEXT_NODE = 3;
const CDATA_SECTION_NODE = 4;
const ENTITY_REFERENCE_NODE = 5;
const ENTITY_NODE = 6;
const PROCESSING_INSTRUCTION_NODE = 7;
const COMMENT_NODE = 8;
const DOCUMENT_NODE = 9;
const DOCUMENT_TYPE_NODE = 10;
const DOCUMENT_FRAGMENT_NODE = 11;
const NOTATION_NODE = 12;
class XML {
    static parseXML(strXML) {
        let xmlDoc;
        if (this.customParser)
            xmlDoc = new this.customParser().parseFromString(strXML, 'application/xml');
        else
            xmlDoc = new DOMParser().parseFromString(strXML, 'application/xml');
        if (xmlDoc == null)
            return null;
        return xmlDoc;
    }
    static toString(doc) {
        if (this.customSerial)
            return new this.customSerial().serializeToString(doc.documentElement);
        else
            return new XMLSerializer().serializeToString(doc.documentElement);
    }
    static toPrettyString(doc) {
        let xslt = [
            '<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform">',
            '  <xsl:strip-space elements="*"/>',
            '  <xsl:template match="para[content-style][not(text())]">',
            '    <xsl:value-of select="normalize-space(.)"/>',
            '  </xsl:template>',
            '  <xsl:template match="node()|@*">',
            '    <xsl:copy><xsl:apply-templates select="node()|@*"/></xsl:copy>',
            '  </xsl:template>',
            '  <xsl:output indent="yes"/>',
            '</xsl:stylesheet>',
        ].join('\n');
        let xsltDoc = this.parseXML(xslt);
        let xsltProc = new XSLTProcessor();
        xsltProc.importStylesheet(xsltDoc);
        let resultDoc = xsltProc.transformToDocument(doc);
        return new XMLSerializer().serializeToString(resultDoc);
    }
    static nodeText(el) {
        let text = '';
        for (let child of Array.from(el.childNodes)) {
            if (child.nodeType == TEXT_NODE || child.nodeType == CDATA_SECTION_NODE)
                text += child.nodeValue;
        }
        return text;
    }
    static childText(parent, tagName) {
        if (parent == null)
            return null;
        let el = this.findElement(parent, tagName);
        if (el == null)
            return null;
        return this.nodeText(el);
    }
    static appendElement(parent, name) {
        let el = parent.ownerDocument.createElement(name);
        parent.appendChild(el);
        return el;
    }
    static appendElementAfter(presib, name) {
        let el = presib.ownerDocument.createElement(name);
        let postsib = presib.nextSibling;
        if (postsib == null)
            presib.parentNode.appendChild(el);
        else
            presib.parentNode.insertBefore(el, postsib);
        return el;
    }
    static appendText(parent, text, isCDATA = false) {
        if (text == null || text.length == 0)
            return;
        if (!isCDATA)
            parent.appendChild(parent.ownerDocument.createTextNode(text));
        else
            parent.appendChild(parent.ownerDocument.createCDATASection(text));
    }
    static createTextChild(parent, name, text, isCDATA = false) {
        let el = parent.ownerDocument.createElement(name);
        parent.appendChild(el);
        if (!isCDATA)
            el.textContent = text;
        else
            el.appendChild(parent.ownerDocument.createCDATASection(text));
    }
    static setText(parent, text, isCDATA = false) {
        while (parent.firstChild != null)
            parent.removeChild(parent.firstChild);
        this.appendText(parent, text, isCDATA);
    }
    static findElement(parent, tagName) {
        if (parent == null)
            return null;
        let node = parent.firstChild;
        while (node != null) {
            if (node.nodeType == ELEMENT_NODE && node.nodeName == tagName)
                return node;
            node = node.nextSibling;
        }
        return null;
    }
    static findChildElements(parent, tagName) {
        if (parent == null)
            return [];
        let list = [];
        let node = parent.firstChild;
        while (node != null) {
            if (node.nodeType == ELEMENT_NODE && node.nodeName === tagName)
                list.push(node);
            node = node.nextSibling;
        }
        return list;
    }
    static childElements(parent) {
        if (parent == null)
            return [];
        let list = [];
        let node = parent.firstChild;
        while (node != null) {
            if (node.nodeType == ELEMENT_NODE)
                list.push(node);
            node = node.nextSibling;
        }
        return list;
    }
}
XML.customParser = null;
XML.customSerial = null;


/***/ }),

/***/ "./src/util/dom.ts":
/*!*************************!*\
  !*** ./src/util/dom.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DOM: () => (/* binding */ DOM),
/* harmony export */   dom: () => (/* binding */ dom),
/* harmony export */   domLegacy: () => (/* binding */ domLegacy)
/* harmony export */ });
/* harmony import */ var _Geom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Geom */ "./src/util/Geom.ts");
/* harmony import */ var _XML__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./XML */ "./src/util/XML.ts");


function dom(obj) {
    if (typeof obj == 'string')
        return DOM.parse(obj);
    if (obj instanceof DOM)
        return obj;
    return new DOM(obj);
}
function domLegacy(obj) {
    if (obj == null)
        return null;
    if (obj.jquery)
        return dom(obj[0]);
    return dom(obj);
}
class DOM {
    constructor(el) {
        this.el = el;
    }
    get elHTML() { return this.el; }
    get elInput() { return this.el; }
    get elCanvas() { return this.el; }
    static parse(xhtml) {
        let xml = _XML__WEBPACK_IMPORTED_MODULE_1__.XML.parseXML(xhtml);
        if (xml == null)
            throw 'Invalid XHTML string: ' + xhtml;
        let html = xml.documentElement.outerHTML;
        let template = document.createElement('template');
        template.innerHTML = html;
        return new DOM(template.content.firstChild);
    }
    static find(selector) {
        let el = document.querySelector(selector);
        return el ? new DOM(el) : null;
    }
    static findAll(selector) {
        let nodeList = document.querySelectorAll(selector);
        let domList = [];
        for (let n = 0; n < nodeList.length; n++)
            domList.push(new DOM(nodeList.item(n)));
        return domList;
    }
    parent() {
        let parent = this.el.parentElement;
        return parent ? new DOM(parent) : null;
    }
    ancestor(selector) {
        let el = this.el.closest(selector);
        return el ? new DOM(el) : null;
    }
    children(tag) {
        let domList = [];
        for (let child = this.el.firstElementChild; child; child = child.nextElementSibling) {
            if (tag && child.tagName.toLocaleLowerCase() != tag.toLocaleLowerCase())
                continue;
            domList.push(new DOM(child));
        }
        return domList;
    }
    find(selector) {
        let el = this.el.querySelector(selector);
        return el ? new DOM(el) : null;
    }
    findAll(selector) {
        let nodeList = this.el.querySelectorAll(selector);
        let domList = [];
        for (let n = 0; n < nodeList.length; n++)
            domList.push(new DOM(nodeList.item(n)));
        return domList;
    }
    exists() {
        return document.documentElement.contains(this.el);
    }
    isVisible() {
        return this.elHTML.offsetWidth > 0 || this.elHTML.offsetHeight > 0 || this.elHTML.getClientRects().length > 0;
    }
    append(child) {
        this.el.append(child.el);
    }
    appendTo(parent) {
        if (parent instanceof DOM)
            parent.el.append(this.el);
        else
            parent.appendChild(this.el);
        return this;
    }
    prepend(child) {
        this.el.prepend(child.el);
    }
    prependTo(parent) {
        if (parent instanceof DOM)
            parent.el.prepend(this.el);
        else
            parent.append(this.el);
        return this;
    }
    insertBefore(ref) {
        ref.el.parentElement.insertBefore(this.el, ref.el);
        return this;
    }
    insertAfter(ref) {
        let before = ref.el.nextElementSibling;
        if (before)
            ref.el.parentElement.insertBefore(this.el, before);
        else
            ref.el.parentElement.append(this.el);
        return this;
    }
    remove() {
        this.el.remove();
    }
    empty() {
        this.el.innerHTML = '';
    }
    getHTML() {
        return this.el.innerHTML;
    }
    setHTML(html) {
        this.el.innerHTML = html;
    }
    appendHTML(xhtml) {
        let xml = _XML__WEBPACK_IMPORTED_MODULE_1__.XML.parseXML('<z>' + xhtml + '</z>');
        if (xml == null)
            throw 'Invalid XHTML string: ' + xhtml;
        let html = xml.documentElement.innerHTML;
        this.el.insertAdjacentHTML('beforeend', html);
    }
    getText() {
        return this.el.textContent;
    }
    setText(text) {
        this.el.textContent = text;
    }
    appendText(text) {
        let content = document.createTextNode(text);
        this.el.appendChild(content);
    }
    getValue() {
        return this.el.value;
    }
    setValue(str) {
        this.el.value = str || '';
    }
    getCSS(key) {
        return this.elHTML.style.getPropertyValue(key);
    }
    setCSS(key, value) {
        this.elHTML.style.setProperty(key, value === null || value === void 0 ? void 0 : value.toString());
    }
    css(dict) {
        for (let key in dict)
            this.setCSS(key, dict[key].toString());
        return this;
    }
    getAttr(key) {
        if (!this.el.hasAttribute(key))
            return null;
        return this.el.getAttribute(key);
    }
    setAttr(key, value) {
        this.el.setAttribute(key, value);
    }
    attr(dict) {
        for (let key in dict)
            this.setAttr(key, dict[key].toString());
        return this;
    }
    addClass(clsnames) {
        for (let cls of clsnames.split(' '))
            if (cls)
                this.elHTML.classList.add(cls);
    }
    removeClass(clsnames) {
        for (let cls of clsnames.split(' '))
            if (cls)
                this.elHTML.classList.remove(cls);
    }
    hasClass(clsname) {
        return this.elHTML.classList.contains(clsname);
    }
    setClass(clsname, flag) {
        if (flag)
            this.addClass(clsname);
        else
            this.removeClass(clsname);
    }
    class(clsnames) {
        if (Array.isArray(clsnames)) {
            for (let cls of clsnames)
                this.addClass(cls);
        }
        else {
            for (let cls of clsnames.split(' '))
                this.addClass(cls);
        }
        return this;
    }
    toggleClass(dict) {
        for (let key in dict) {
            if (dict[key])
                this.elHTML.classList.add(key);
            else
                this.elHTML.classList.remove(key);
        }
    }
    width() {
        return this.elHTML.offsetWidth;
    }
    height() {
        return this.elHTML.offsetHeight;
    }
    offset() {
        let rect = this.el.getBoundingClientRect();
        let win = this.el.ownerDocument.defaultView;
        return new _Geom__WEBPACK_IMPORTED_MODULE_0__.Pos(rect.left + win.pageXOffset, rect.top + win.pageYOffset);
    }
    size() {
        return new _Geom__WEBPACK_IMPORTED_MODULE_0__.Size(this.width(), this.height());
    }
    area() {
        let pos = this.offset();
        return new _Geom__WEBPACK_IMPORTED_MODULE_0__.Box(pos.x, pos.y, this.width(), this.height());
    }
    setBoundaryPixels(x, y, w, h) {
        this.css({ 'left': `${x}px`, 'top': `${y}px`, 'width': `${w}px`, 'height': `${h}px` });
    }
    setSizePixels(w, h) {
        this.css({ 'width': `${w}px`, 'height': `${h}px` });
    }
    hasFocus() {
        return this.el === document.activeElement;
    }
    grabFocus(delay = false) {
        if (delay)
            setTimeout(() => this.grabFocus(), 10);
        else
            this.elHTML.focus();
    }
    removeEvent(id, callback) {
        this.el.removeEventListener(id, callback);
    }
    onKeyDown(callback) {
        this.el.addEventListener('keydown', callback);
    }
    onKeyUp(callback) {
        this.el.addEventListener('keyup', callback);
    }
    onKeyPress(callback) {
        this.el.addEventListener('keypress', callback);
    }
    onScroll(callback) {
        this.el.addEventListener('scroll', callback);
    }
    onWheel(callback) {
        this.el.addEventListener('wheel', callback);
    }
    onClick(callback) {
        this.el.addEventListener('click', callback);
    }
    onContextMenu(callback) {
        this.el.addEventListener('contextmenu', callback);
    }
    onDblClick(callback) {
        this.el.addEventListener('dblclick', callback);
    }
    onMouseDown(callback) {
        this.el.addEventListener('mousedown', callback);
    }
    onMouseUp(callback) {
        this.el.addEventListener('mouseup', callback);
    }
    onMouseEnter(callback) {
        this.el.addEventListener('mouseenter', callback);
    }
    onMouseLeave(callback) {
        this.el.addEventListener('mouseleave', callback);
    }
    onMouseMove(callback) {
        this.el.addEventListener('mousemove', callback);
    }
    onMouseOver(callback) {
        this.el.addEventListener('mouseover', callback);
    }
    onChange(callback) {
        this.el.addEventListener('change', callback);
    }
    onInput(callback) {
        this.el.addEventListener('input', callback);
    }
    onTouchStart(callback) {
        this.el.addEventListener('touchstart', callback);
    }
    onTouchMove(callback) {
        this.el.addEventListener('touchmove', callback);
    }
    onTouchCancel(callback) {
        this.el.addEventListener('touchcancel', callback);
    }
    onTouchEnd(callback) {
        this.el.addEventListener('touchend', callback);
    }
}


/***/ }),

/***/ "./src/util/util.ts":
/*!**************************!*\
  !*** ./src/util/util.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ASCENT_FUDGE: () => (/* binding */ ASCENT_FUDGE),
/* harmony export */   DEGRAD: () => (/* binding */ DEGRAD),
/* harmony export */   INV_TWOPI: () => (/* binding */ INV_TWOPI),
/* harmony export */   KeyCode: () => (/* binding */ KeyCode),
/* harmony export */   RADDEG: () => (/* binding */ RADDEG),
/* harmony export */   TWOPI: () => (/* binding */ TWOPI),
/* harmony export */   addText: () => (/* binding */ addText),
/* harmony export */   angleDiff: () => (/* binding */ angleDiff),
/* harmony export */   angleDiffPos: () => (/* binding */ angleDiffPos),
/* harmony export */   angleNorm: () => (/* binding */ angleNorm),
/* harmony export */   blendRGB: () => (/* binding */ blendRGB),
/* harmony export */   clone: () => (/* binding */ clone),
/* harmony export */   colourAlpha: () => (/* binding */ colourAlpha),
/* harmony export */   colourCanvas: () => (/* binding */ colourCanvas),
/* harmony export */   colourCode: () => (/* binding */ colourCode),
/* harmony export */   coordsRoundedRect: () => (/* binding */ coordsRoundedRect),
/* harmony export */   deepClone: () => (/* binding */ deepClone),
/* harmony export */   dictValues: () => (/* binding */ dictValues),
/* harmony export */   drawLine: () => (/* binding */ drawLine),
/* harmony export */   empiricalScrollerSize: () => (/* binding */ empiricalScrollerSize),
/* harmony export */   escapeHTML: () => (/* binding */ escapeHTML),
/* harmony export */   eventCoords: () => (/* binding */ eventCoords),
/* harmony export */   findNode: () => (/* binding */ findNode),
/* harmony export */   findNodes: () => (/* binding */ findNodes),
/* harmony export */   fltEqual: () => (/* binding */ fltEqual),
/* harmony export */   fontSansSerif: () => (/* binding */ fontSansSerif),
/* harmony export */   formatDate: () => (/* binding */ formatDate),
/* harmony export */   formatDouble: () => (/* binding */ formatDouble),
/* harmony export */   fromUTF8: () => (/* binding */ fromUTF8),
/* harmony export */   getBoundaryPixelsDOM: () => (/* binding */ getBoundaryPixelsDOM),
/* harmony export */   getOffsetPixelsDOM: () => (/* binding */ getOffsetPixelsDOM),
/* harmony export */   getViewportSize: () => (/* binding */ getViewportSize),
/* harmony export */   htmlToRGB: () => (/* binding */ htmlToRGB),
/* harmony export */   invZ: () => (/* binding */ invZ),
/* harmony export */   isDef: () => (/* binding */ isDef),
/* harmony export */   jsonPrettyPrint: () => (/* binding */ jsonPrettyPrint),
/* harmony export */   maxArray: () => (/* binding */ maxArray),
/* harmony export */   minArray: () => (/* binding */ minArray),
/* harmony export */   newElement: () => (/* binding */ newElement),
/* harmony export */   nodeText: () => (/* binding */ nodeText),
/* harmony export */   norm2_xy: () => (/* binding */ norm2_xy),
/* harmony export */   norm2_xyz: () => (/* binding */ norm2_xyz),
/* harmony export */   norm_xy: () => (/* binding */ norm_xy),
/* harmony export */   norm_xyz: () => (/* binding */ norm_xyz),
/* harmony export */   notDef: () => (/* binding */ notDef),
/* harmony export */   orBlank: () => (/* binding */ orBlank),
/* harmony export */   pathRoundedRect: () => (/* binding */ pathRoundedRect),
/* harmony export */   pause: () => (/* binding */ pause),
/* harmony export */   pixelDensity: () => (/* binding */ pixelDensity),
/* harmony export */   plural: () => (/* binding */ plural),
/* harmony export */   postJSONURL: () => (/* binding */ postJSONURL),
/* harmony export */   randomInt: () => (/* binding */ randomInt),
/* harmony export */   readTextURL: () => (/* binding */ readTextURL),
/* harmony export */   realEqual: () => (/* binding */ realEqual),
/* harmony export */   safeFloat: () => (/* binding */ safeFloat),
/* harmony export */   safeInt: () => (/* binding */ safeInt),
/* harmony export */   setBoundaryPixels: () => (/* binding */ setBoundaryPixels),
/* harmony export */   signum: () => (/* binding */ signum),
/* harmony export */   sortAngles: () => (/* binding */ sortAngles),
/* harmony export */   sqr: () => (/* binding */ sqr),
/* harmony export */   stringSimilarityPermutations: () => (/* binding */ stringSimilarityPermutations),
/* harmony export */   toUTF8: () => (/* binding */ toUTF8),
/* harmony export */   uniqueAngles: () => (/* binding */ uniqueAngles),
/* harmony export */   yieldDOM: () => (/* binding */ yieldDOM),
/* harmony export */   zip: () => (/* binding */ zip)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom */ "./src/util/dom.ts");
/* harmony import */ var _Geom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Geom */ "./src/util/Geom.ts");
/* harmony import */ var _Vec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Vec */ "./src/util/Vec.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



function safeInt(str, def = 0) {
    if (str == null || str.length == 0)
        return def;
    let val = str.startsWith('0x') ? parseInt(str.substring(2), 16) :
        str.startsWith('#') ? parseInt(str.substring(1), 16) : parseInt(str);
    return isNaN(val) ? def : val;
}
function safeFloat(str, def = 0) {
    if (str == null || str.length == 0)
        return def;
    let val = parseFloat(str);
    return isNaN(val) ? def : val;
}
function newElement(parent, tag, attr) {
    let domNew = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.dom)(`<${tag}/>`);
    if (attr)
        domNew.attr(attr);
    (0,_dom__WEBPACK_IMPORTED_MODULE_0__.domLegacy)(parent).append(domNew);
    return domNew.el;
}
function addText(parent, text) {
    let el = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.dom)(parent).el;
    el.appendChild(document.createTextNode(text));
}
function plural(count) {
    return count == 1 ? '' : 's';
}
function formatDouble(value, sigfig) {
    if (value == null)
        return '';
    let str = value.toPrecision(sigfig);
    if (str.indexOf('.') > 0) {
        while (str.endsWith('0'))
            str = str.substring(0, str.length - 1);
        if (str.endsWith('.'))
            str = str.substring(0, str.length - 1);
    }
    return str;
}
function htmlToRGB(col) {
    if (col == null || col.charAt(0) != '#' || col.length != 7)
        return null;
    return parseInt(col.substring(1), 16);
}
function colourCode(col) {
    let hex = (col & 0xFFFFFF).toString(16);
    while (hex.length < 6)
        hex = '0' + hex;
    return '#' + hex;
}
function colourAlpha(col) {
    let transp = (col >>> 24) & 0xFF;
    return transp == 0 ? 1 : transp == 0xFF ? 0 : 1 - (transp * (1.0 / 255));
}
const ONE_OVER_255 = 1.0 / 255;
function colourCanvas(col) {
    if (col == 0xFFFFFF)
        return 'white';
    if (col == 0x000000)
        return 'black';
    if (col == -1)
        return null;
    if (col >= 0 && col <= 0xFFFFFF)
        return colourCode(col);
    const t = ((col >> 24) & 0xFF) * ONE_OVER_255;
    const r = ((col >> 16) & 0xFF);
    const g = ((col >> 8) & 0xFF);
    const b = (col & 0xFF);
    return 'rgba(' + r + ',' + g + ',' + b + ',' + (1 - t) + ')';
}
function blendRGB(fract, rgb1, rgb2, rgb3) {
    fract = Math.max(0, Math.min(1, fract));
    let r1 = ((rgb1 >> 16) & 0xFF) * ONE_OVER_255, g1 = ((rgb1 >> 8) & 0xFF) * ONE_OVER_255, b1 = (rgb1 & 0xFF) * ONE_OVER_255;
    let r2 = ((rgb2 >> 16) & 0xFF) * ONE_OVER_255, g2 = ((rgb2 >> 8) & 0xFF) * ONE_OVER_255, b2 = (rgb2 & 0xFF) * ONE_OVER_255;
    let R, G, B;
    if (rgb3 == null) {
        let f1 = 1 - fract, f2 = fract;
        R = Math.round(0xFF * (f1 * r1 + f2 * r2));
        G = Math.round(0xFF * (f1 * g1 + f2 * g2));
        B = Math.round(0xFF * (f1 * b1 + f2 * b2));
    }
    else {
        let r3 = ((rgb3 >> 16) & 0xFF) * ONE_OVER_255, g3 = ((rgb3 >> 8) & 0xFF) * ONE_OVER_255, b3 = (rgb3 & 0xFF) * ONE_OVER_255;
        if (fract < 0.5) {
            let f2 = fract * 2, f1 = 1 - f2;
            R = Math.round(0xFF * (f1 * r1 + f2 * r2));
            G = Math.round(0xFF * (f1 * g1 + f2 * g2));
            B = Math.round(0xFF * (f1 * b1 + f2 * b2));
        }
        else {
            let f2 = (fract - 0.5) * 2, f1 = 1 - f2;
            R = Math.round(0xFF * (f1 * r2 + f2 * r3));
            G = Math.round(0xFF * (f1 * g2 + f2 * g3));
            B = Math.round(0xFF * (f1 * b2 + f2 * b3));
        }
    }
    return (R << 16) | (G << 8) | B;
}
function formatDate(date) {
    const MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    let day = date.getDate(), mon = date.getMonth(), year = date.getFullYear();
    return day + '-' + MONTHS[mon] + '-' + year;
}
function nodeText(node) {
    let ret = '';
    if (!node)
        return '';
    node = node.firstChild;
    while (node) {
        if (node.nodeType == 3 || node.nodeType == 4)
            ret += node.nodeValue;
        node = node.nextSibling;
    }
    return ret;
}
function isDef(v) {
    return !(v === null || typeof v === 'undefined');
}
function notDef(v) {
    return v === null || typeof v === 'undefined';
}
function eventCoords(event, container) {
    let pos = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.domLegacy)(container).offset();
    let relX = event.pageX - pos.x;
    let relY = event.pageY - pos.y;
    return [relX, relY];
}
function setBoundaryPixels(dom, x, y, w, h) {
    dom.css({ 'left': x + 'px', 'top': y + 'px', 'width': w + 'px', 'height': h + 'px' });
}
function getBoundaryPixelsDOM(dom) {
    let offset = dom.offset();
    return [offset.x, offset.y, dom.width(), dom.height()];
}
function getOffsetPixelsDOM(dom) {
    return [dom.elHTML.offsetLeft, dom.elHTML.offsetTop, dom.elHTML.offsetWidth, dom.elHTML.offsetHeight];
}
function getViewportSize() {
    if (window.innerWidth != null)
        return [window.innerWidth, window.innerHeight];
    return [window.document.body.clientWidth, window.document.body.clientHeight];
}
function norm_xy(dx, dy) {
    return Math.hypot(dx, dy);
}
function norm_xyz(dx, dy, dz) {
    return Math.hypot(dx, dy, dz);
}
function norm2_xy(dx, dy) {
    return dx * dx + dy * dy;
}
function norm2_xyz(dx, dy, dz) {
    return dx * dx + dy * dy + dz * dz;
}
function signum(v) {
    return v < 0 ? -1 : v > 0 ? 1 : 0;
}
function sqr(v) {
    return v * v;
}
function invZ(v) { return v == 0 ? 0 : 1.0 / v; }
function fltEqual(v1, v2) { return v1 == v2 || Math.abs(v1 - v2) <= 1E-7 * Math.max(v1, v2); }
function realEqual(v1, v2) { return v1 == v2 || Math.abs(v1 - v2) <= 1E-14 * Math.max(v1, v2); }
function randomInt(size) {
    if (size <= 1)
        return 0;
    return Math.floor(Math.random() * size);
}
const TWOPI = 2 * Math.PI;
const INV_TWOPI = 1.0 / TWOPI;
const DEGRAD = Math.PI / 180;
const RADDEG = 180 / Math.PI;
function angleNorm(th) {
    if (th == -Math.PI)
        return Math.PI;
    if (th < -Math.PI) {
        let mod = Math.ceil((-th - Math.PI) * INV_TWOPI);
        return th + mod * TWOPI;
    }
    if (th > Math.PI) {
        let mod = Math.ceil((th - Math.PI) * INV_TWOPI);
        return th - mod * TWOPI;
    }
    return th;
}
function angleDiff(th1, th2) {
    let theta = angleNorm(th1) - angleNorm(th2);
    return theta - (theta > Math.PI ? TWOPI : 0) + (theta <= -Math.PI ? TWOPI : 0);
}
function angleDiffPos(th1, th2) {
    let theta = angleNorm(th1) - angleNorm(th2);
    return theta + (theta < 0 ? TWOPI : 0);
}
function sortAngles(theta) {
    if (theta == null || theta.length < 2)
        return theta;
    theta = theta.slice(0);
    for (let n = 0; n < theta.length; n++)
        theta[n] = angleNorm(theta[n]);
    _Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.sort(theta);
    while (true) {
        let a = theta[theta.length - 1], b = theta[0], c = theta[1];
        if (angleDiff(b, a) <= angleDiff(c, b))
            break;
        for (let n = theta.length - 1; n > 0; n--)
            theta[n] = theta[n - 1];
        theta[0] = a;
    }
    return theta;
}
function uniqueAngles(theta, threshold) {
    theta = sortAngles(theta);
    for (let n = 1; n < theta.length; n++) {
        if (Math.abs(angleDiff(theta[n], theta[n - 1])) <= threshold) {
            theta.splice(n, 1);
            n--;
        }
    }
    return theta;
}
function minArray(a) {
    if (a == null || a.length == 0)
        return 0;
    let v = a[0];
    for (let n = 1; n < a.length; n++)
        v = Math.min(v, a[n]);
    return v;
}
function maxArray(a) {
    if (a == null || a.length == 0)
        return 0;
    let v = a[0];
    for (let n = 1; n < a.length; n++)
        v = Math.max(v, a[n]);
    return v;
}
function findNode(parent, name) {
    if (parent == null)
        return null;
    let node = parent.firstChild;
    while (node) {
        if (node.nodeName == name)
            return node;
        node = node.nextSibling;
    }
    return null;
}
function findNodes(parent, name) {
    if (parent == null)
        return null;
    let node = parent.firstChild;
    let list = [];
    while (node) {
        if (node.nodeName == name)
            list.push(node);
        node = node.nextSibling;
    }
    return list;
}
function pathRoundedRect(x1, y1, x2, y2, rad) {
    let path = new Path2D();
    path.moveTo(x2 - rad, y1);
    path.quadraticCurveTo(x2, y1, x2, y1 + rad);
    path.lineTo(x2, y2 - rad);
    path.quadraticCurveTo(x2, y2, x2 - rad, y2);
    path.lineTo(x1 + rad, y2);
    path.quadraticCurveTo(x1, y2, x1, y2 - rad);
    path.lineTo(x1, y1 + rad);
    path.quadraticCurveTo(x1, y1, x1 + rad, y1);
    path.closePath();
    return path;
}
function coordsRoundedRect(x1, y1, x2, y2, rad) {
    let px = [x2 - rad, x2, x2, x2, x2, x2 - rad, x1 + rad, x1, x1, x1, x1, x1 + rad];
    let py = [y1, y1, y1 + rad, y2 - rad, y2, y2, y2, y2, y2 - rad, y1 + rad, y1, y1];
    let ctrl = [false, true, false, false, true, false, false, true, false, false, true, false];
    return [px, py, ctrl];
}
function drawLine(ctx, x1, y1, x2, y2) {
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.stroke();
}
const ASCENT_FUDGE = 1.4;
function fontSansSerif(ascent) { return `${ascent * ASCENT_FUDGE}px sans-serif`; }
function pixelDensity() {
    if ('devicePixelRatio' in window && window.devicePixelRatio > 1)
        return window.devicePixelRatio;
    return 1;
}
function clone(data) {
    if (data == null)
        return null;
    if (Array.isArray(data))
        return data.slice(0);
    if (typeof data != 'object')
        return data;
    let result = {};
    for (let key in data)
        result[key] = data[key];
    return result;
}
function deepClone(data) {
    if (data == null)
        return null;
    if (typeof data == 'function')
        return null;
    if (typeof data != 'object')
        return data;
    let result = Array.isArray(data) ? [] : {};
    for (let key in data) {
        let val = data[key];
        result[key] = typeof val === 'object' ? deepClone(val) : val;
    }
    return result;
}
function escapeHTML(text) {
    if (!text)
        return '';
    const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
    return text.replace(/[&<>"']/g, (m) => map[m]);
}
function orBlank(str) { return str == null ? '' : str; }
function dictValues(dict) {
    let list = [];
    for (let key in dict)
        list.push(dict[key]);
    return list;
}
function zip(u, v) {
    return u.map((a, i) => [a, v[i]]);
}
function toUTF8(str) {
    let data = [], stripe = '';
    const sz = str.length;
    for (let n = 0; n < sz; n++) {
        let charcode = str.charCodeAt(n);
        if (charcode < 0x80)
            stripe += str.charAt(n);
        else if (charcode < 0x800) {
            stripe += String.fromCharCode(0xc0 | (charcode >> 6));
            stripe += String.fromCharCode(0x80 | (charcode & 0x3F));
        }
        else if (charcode < 0xd800 || charcode >= 0xe000) {
            stripe += String.fromCharCode(0xe0 | (charcode >> 12));
            stripe += String.fromCharCode(0x80 | ((charcode >> 6) & 0x3F));
            stripe += String.fromCharCode(0x80 | (charcode & 0x3F));
        }
        else {
            n++;
            charcode = 0x10000 + (((charcode & 0x3FF) << 10) | (str.charCodeAt(n) & 0x3FF));
            stripe += String.fromCharCode(0xf0 | (charcode >> 18));
            stripe += String.fromCharCode(0x80 | ((charcode >> 12) & 0x3F));
            stripe += String.fromCharCode(0x80 | ((charcode >> 6) & 0x3F));
            stripe += String.fromCharCode(0x80 | (charcode & 0x3F));
        }
        if (stripe.length > 100) {
            data.push(stripe);
            stripe = '';
        }
    }
    data.push(stripe);
    return data.join('');
}
function fromUTF8(str) {
    let data = [], stripe = '';
    const sz = str.length;
    for (let n = 0; n < sz; n++) {
        let value = str.charCodeAt(n);
        if (value < 0x80)
            stripe += str.charAt(n);
        else if (value > 0xBF && value < 0xE0) {
            stripe += String.fromCharCode((value & 0x1F) << 6 | str.charCodeAt(n + 1) & 0x3F);
            n++;
        }
        else if (value > 0xDF && value < 0xF0) {
            str += String.fromCharCode((value & 0x0F) << 12 | (str.charCodeAt(n + 1) & 0x3F) << 6 | str.charCodeAt(n + 2) & 0x3F);
            n += 2;
        }
        else {
            let charCode = ((value & 0x07) << 18 | (str.charCodeAt(n + 1) & 0x3F) << 12 | (str.charCodeAt(n + 2) & 0x3F) << 6 | str.charCodeAt(n + 3) & 0x3F) - 0x010000;
            stripe += String.fromCharCode(charCode >> 10 | 0xD800, charCode & 0x03FF | 0xDC00);
            n += 3;
        }
        if (stripe.length > 100) {
            data.push(stripe);
            stripe = '';
        }
    }
    data.push(stripe);
    return data.join('');
}
function jsonPrettyPrint(json) {
    let lines = JSON.stringify(json, null, 1).split(/\n/);
    for (let n = 0; n < lines.length; n++) {
        lines[n] = lines[n].trim();
        if (lines[n].length > 1 && (lines[n].endsWith('{') || lines[n].endsWith('['))) {
            let ch = lines[n].charAt(lines[n].length - 1);
            lines[n] = lines[n].substring(0, lines[n].length - 1);
            lines.splice(n + 1, 0, ch);
            n--;
        }
    }
    let indent = 0;
    for (let n = 0; n < lines.length; n++) {
        let orig = lines[n];
        if (orig == ']' || orig == '}' || orig == '],' || orig == '},')
            indent--;
        lines[n] = '\t'.repeat(indent) + orig;
        if (orig == '[' || orig == '{')
            indent++;
    }
    return lines.join('\n');
}
var KeyCode;
(function (KeyCode) {
    KeyCode["Backspace"] = "Backspace";
    KeyCode["Tab"] = "Tab";
    KeyCode["Enter"] = "Enter";
    KeyCode["Escape"] = "Escape";
    KeyCode["Space"] = " ";
    KeyCode["PageUp"] = "PageUp";
    KeyCode["PageDown"] = "PageDown";
    KeyCode["End"] = "End";
    KeyCode["Home"] = "Home";
    KeyCode["Left"] = "ArrowLeft";
    KeyCode["Right"] = "ArrowRight";
    KeyCode["Up"] = "ArrowUp";
    KeyCode["Down"] = "ArrowDown";
    KeyCode["Delete"] = "Delete";
    KeyCode["Insert"] = "Insert";
})(KeyCode || (KeyCode = {}));
function readTextURL(url) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            let request = new XMLHttpRequest();
            request.open('GET', url.toString(), true);
            request.responseType = 'text';
            request.onload = () => resolve(request.response.toString());
            request.onerror = () => resolve(null);
            request.send();
        });
    });
}
function postJSONURL(url, params) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            let request = new XMLHttpRequest();
            request.open('POST', url.toString(), true);
            request.responseType = 'text';
            request.onload = () => {
                let txt = request.response.toString();
                try {
                    resolve(JSON.parse(txt));
                }
                catch (ex) {
                    let snippet = txt.substring(0, Math.min(200, txt.length)) + (txt.length > 200 ? '...etc...' : '');
                    reject('JSON parsing error on result:' + ex + ' for text: ' + snippet);
                }
            };
            request.onerror = () => reject('Failed to request URL: ' + url);
            request.send(JSON.stringify(params));
        });
    });
}
function yieldDOM() {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve) => setTimeout(() => resolve()));
    });
}
function pause(seconds) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve) => setTimeout(() => resolve(), seconds * 1000));
    });
}
let staticScrollerSize = null;
function empiricalScrollerSize() {
    if (staticScrollerSize)
        return staticScrollerSize;
    let outer = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').css({ 'visibility': 'hidden', 'width': '100px', 'height': '100px', 'overflow': 'scroll' }).appendTo((0,_dom__WEBPACK_IMPORTED_MODULE_0__.dom)(document.body));
    let inner = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').css({ 'width': '100%', 'height': '100%' }).appendTo(outer);
    staticScrollerSize = new _Geom__WEBPACK_IMPORTED_MODULE_1__.Size(100 - inner.elHTML.offsetWidth, 100 - inner.elHTML.offsetHeight);
    outer.remove();
    return staticScrollerSize;
}
function stringSimilarityPermutations(str1, str2) {
    if (!str1 || !str2)
        return 0;
    const ch1 = Array.from(str1), len1 = ch1.length;
    const ch2 = Array.from(str2), len2 = ch2.length;
    let levenshteinDistance = (sz1, sz2) => {
        let dist = [];
        for (let i = 0; i <= sz1; i++) {
            dist.push(_Vec__WEBPACK_IMPORTED_MODULE_2__.Vec.numberArray(0, sz2 + 1));
            dist[i][0] = i;
        }
        for (let j = 1; j <= sz2; j++)
            dist[0][j] = j;
        for (let j = 1; j <= sz2; j++)
            for (let i = 1; i <= sz1; i++) {
                let cost = ch1[i - 1] == ch2[j - 1] ? 0 : 1;
                dist[i][j] = Math.min(Math.min(dist[i - 1][j] + 1, dist[i][j - 1] + 1), dist[i - 1][j - 1] + cost);
            }
        return dist[sz1][sz2];
    };
    let cost = ch1[len1 - 1] == ch2[len2 - 1] ? 0 : 1;
    let lev1 = levenshteinDistance(len1 - 1, len2) + 1;
    let lev2 = levenshteinDistance(len1, len2 - 1) + 1;
    let lev3 = levenshteinDistance(len1 - 1, len2 - 1) + cost;
    return Math.min(Math.min(lev1, lev2), lev3);
}


/***/ }),

/***/ "./val/src/Validation.ts":
/*!*******************************!*\
  !*** ./val/src/Validation.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Validation: () => (/* binding */ Validation)
/* harmony export */ });
/* harmony import */ var _wmk_util_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wmk/util/util */ "./src/util/util.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class Validation {
    constructor() {
        this.tests = [];
        this.setupError = null;
        this.rec = {};
        this.context = null;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    deinit() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    add(title, func) {
        this.tests.push({ title, func });
    }
    get count() { return this.tests.length; }
    getTitle(idx) { return this.tests[idx].title; }
    runTest(idx) {
        return __awaiter(this, void 0, void 0, function* () {
            this.recentSuccess = true;
            this.recentError = null;
            let timeStarted = new Date().getTime();
            try {
                this.context = null;
                yield this.tests[idx].func.call(this);
            }
            catch (e) {
                this.recentSuccess = false;
                if (this.recentError == null) {
                    console.log('Context: ' + JSON.stringify(this.context, null, 4));
                    this.recentError = 'Exception: ' + (e.message || e);
                    if (e.fileName)
                        this.recentError += ', file: ' + e.fileName;
                    if (e.lineNumber)
                        this.recentError += ', line: ' + e.lineNumber;
                    console.log('Unhandled exception in validation:');
                    console.log(e);
                }
            }
            let timeFinished = new Date().getTime();
            this.recentTimeTaken = (timeFinished - timeStarted) / 1000;
            yield this.gasp();
            return [this.recentSuccess, this.recentError, this.recentTimeTaken];
        });
    }
    gasp() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0,_wmk_util_util__WEBPACK_IMPORTED_MODULE_0__.yieldDOM)();
        });
    }
    assert(condition, message) {
        if (condition)
            return;
        this.recentError = message;
        throw new Error('assert condition triggered');
    }
    assertEqual(got, want, message) {
        if (got == want)
            return;
        this.recentError = message;
        if (typeof got == 'string' && typeof want == 'string') {
            if (!this.recentError)
                this.recentError = `Compare got [${got}] with want [${want}]`;
            for (let n = 0; n < Math.min(got.length, want.length); n++)
                if (got.charAt(n) != want.charAt(n)) {
                    this.recentError += ` differ at char ${n} (0-based)`;
                    let frag1 = got.substring(Math.max(0, n - 10), Math.min(got.length, n + 10));
                    let frag2 = got.substring(Math.max(0, n - 10), Math.min(got.length, n + 10));
                    this.recentError += ` regions: [${frag1}] vs [${frag2}]`;
                }
        }
        throw new Error('assert equal triggered');
    }
    assertNull(thing, message) {
        if (thing == null)
            return;
        this.recentError = message;
        throw new Error('assert null triggered');
    }
    assertNotNull(thing, message) {
        if (thing != null)
            return;
        this.recentError = message;
        throw new Error('assert not null triggered');
    }
    fail(message) {
        this.recentError = message;
        throw new Error('failure triggered');
    }
}


/***/ }),

/***/ "./val/src/ValidationHeadlessBasic.ts":
/*!********************************************!*\
  !*** ./val/src/ValidationHeadlessBasic.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ValidationHeadlessBasic: () => (/* binding */ ValidationHeadlessBasic)
/* harmony export */ });
/* harmony import */ var _wmk_util_Vec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wmk/util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _Validation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Validation */ "./val/src/Validation.ts");
/* harmony import */ var _wmk_gfx_AxisLabeller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wmk/gfx/AxisLabeller */ "./src/gfx/AxisLabeller.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class ValidationHeadlessBasic extends _Validation__WEBPACK_IMPORTED_MODULE_1__.Validation {
    constructor() {
        super();
        this.add('Vector index sort', this.vectorIndexSort);
        this.add('Axis labeller', this.axisLabeller);
    }
    vectorIndexSort() {
        return __awaiter(this, void 0, void 0, function* () {
            let array = ['b', 'c', 'a'];
            let idx = _wmk_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.idxSort(array);
            this.assert(_wmk_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.equals(idx, [2, 0, 1]));
        });
    }
    axisLabeller() {
        return __awaiter(this, void 0, void 0, function* () {
            let textWidth = (str) => str.length * 4;
            let tfUnity = (val) => val, tfNegLog = (val) => -Math.log10(val), tfBackLog = (val) => Math.pow(10, -val);
            const TESTCASES = [
                [1, 100, false, ['10', '100']],
                [0, 1, false, ['0', '1']],
                [0.01, 0.02, false, ['0.01', '0.02']],
                [0.008, 0.022, false, ['0.008', '0.022']],
                [0.00798, 0.0221, false, ['0.008', '0.022']],
                [1E-5, 1E4, true, ['1e+4', '0.00001']],
                [0.03162277660168379, 100, true, ['100', '0.03162']]
            ];
            for (let test of TESTCASES) {
                let low = test[0], high = test[1];
                let asLog = test[2];
                if (asLog)
                    [low, high] = [tfNegLog(high), tfNegLog(low)];
                let axis = new _wmk_gfx_AxisLabeller__WEBPACK_IMPORTED_MODULE_2__.AxisLabeller(100, low, high, textWidth, asLog ? tfBackLog : tfUnity);
                axis.calculate();
                let wanted = test[3];
                let got = [];
                for (let notch of axis.notches)
                    got.push(notch.label);
                if (wanted.length == 0 || !_wmk_util_Vec__WEBPACK_IMPORTED_MODULE_0__.Vec.equals(wanted, got)) {
                    console.log('Test:' + JSON.stringify(test));
                    console.log('Notches:' + JSON.stringify(axis.notches));
                    console.log('Wanted:' + JSON.stringify(wanted));
                    console.log('Got:' + JSON.stringify(got));
                    this.fail('Did not get the expected axis labels.');
                }
            }
        });
    }
}


/***/ }),

/***/ "./val/src/ValidationHeadlessMolecule.ts":
/*!***********************************************!*\
  !*** ./val/src/ValidationHeadlessMolecule.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ValidationHeadlessMolecule: () => (/* binding */ ValidationHeadlessMolecule)
/* harmony export */ });
/* harmony import */ var _wmk_mol_Molecule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wmk/mol/Molecule */ "./src/mol/Molecule.ts");
/* harmony import */ var _Validation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Validation */ "./val/src/Validation.ts");
/* harmony import */ var _wmk_util_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wmk/util/util */ "./src/util/util.ts");
/* harmony import */ var _wmk_io_DataSheetStream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @wmk/io/DataSheetStream */ "./src/io/DataSheetStream.ts");
/* harmony import */ var _wmk_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @wmk/io/MoleculeStream */ "./src/io/MoleculeStream.ts");
/* harmony import */ var _wmk_io_MDLReader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @wmk/io/MDLReader */ "./src/io/MDLReader.ts");
/* harmony import */ var _wmk_mol_MetaMolecule__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @wmk/mol/MetaMolecule */ "./src/mol/MetaMolecule.ts");
/* harmony import */ var _wmk_mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @wmk/mol/Stereochemistry */ "./src/mol/Stereochemistry.ts");
/* harmony import */ var _wmk_util_Vec__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @wmk/util/Vec */ "./src/util/Vec.ts");
/* harmony import */ var _wmk_calc_CircularFingerprints__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @wmk/calc/CircularFingerprints */ "./src/calc/CircularFingerprints.ts");
/* harmony import */ var _wmk_io_MDLWriter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @wmk/io/MDLWriter */ "./src/io/MDLWriter.ts");
/* harmony import */ var _wmk_gfx_Rendering__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @wmk/gfx/Rendering */ "./src/gfx/Rendering.ts");
/* harmony import */ var _wmk_gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @wmk/gfx/ArrangeMeasurement */ "./src/gfx/ArrangeMeasurement.ts");
/* harmony import */ var _wmk_gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @wmk/gfx/ArrangeMolecule */ "./src/gfx/ArrangeMolecule.ts");
/* harmony import */ var _wmk_gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @wmk/gfx/DrawMolecule */ "./src/gfx/DrawMolecule.ts");
/* harmony import */ var _wmk_gfx_MetaVector__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @wmk/gfx/MetaVector */ "./src/gfx/MetaVector.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
















const BUMP = '?ver=' + new Date().getTime();
class ValidationHeadlessMolecule extends _Validation__WEBPACK_IMPORTED_MODULE_1__.Validation {
    constructor(urlBase) {
        super();
        this.urlBase = urlBase;
        this.add('Parse SketchEl molecule (native format)', this.parseSketchEl);
        this.add('Parse MDL Molfile', this.parseMolfile);
        this.add('Parse DataSheet XML', this.parseDataXML);
        this.add('Parse MDL SDfile', this.parseSDfile);
        this.add('Calculate strict aromaticity', this.calcStrictArom);
        this.add('Calculate stereochemistry', this.calcStereoChem);
        this.add('Circular ECFP6 fingerprints', this.calcFingerprints);
        this.add('Molfile Round-trip', this.molfileRoundTrip);
        this.add('Rendering structures', this.renderingStructures);
        this.add('Molecule Format', this.moleculeFormat);
        this.add('Parse slightly exotic molfiles', this.parseExoticMolfiles);
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.strSketchEl = yield (0,_wmk_util_util__WEBPACK_IMPORTED_MODULE_2__.readTextURL)(this.referenceURL('molecule.el'));
            this.strMolfile = yield (0,_wmk_util_util__WEBPACK_IMPORTED_MODULE_2__.readTextURL)(this.referenceURL('molecule.mol'));
            this.strDataXML = yield (0,_wmk_util_util__WEBPACK_IMPORTED_MODULE_2__.readTextURL)(this.referenceURL('datasheet.ds'));
            this.strSDfile = yield (0,_wmk_util_util__WEBPACK_IMPORTED_MODULE_2__.readTextURL)(this.referenceURL('datasheet.sdf'));
            this.molStereo = _wmk_mol_Molecule__WEBPACK_IMPORTED_MODULE_0__.Molecule.fromString(yield (0,_wmk_util_util__WEBPACK_IMPORTED_MODULE_2__.readTextURL)(this.referenceURL('stereo.el')));
            this.dsCircular = _wmk_io_DataSheetStream__WEBPACK_IMPORTED_MODULE_3__.DataSheetStream.readXML(yield (0,_wmk_util_util__WEBPACK_IMPORTED_MODULE_2__.readTextURL)(this.referenceURL('circular.ds')));
            this.dsRoundtrip = _wmk_io_DataSheetStream__WEBPACK_IMPORTED_MODULE_3__.DataSheetStream.readXML(yield (0,_wmk_util_util__WEBPACK_IMPORTED_MODULE_2__.readTextURL)(this.referenceURL('roundtrip.ds')));
            this.dsRendering = _wmk_io_DataSheetStream__WEBPACK_IMPORTED_MODULE_3__.DataSheetStream.readXML(yield (0,_wmk_util_util__WEBPACK_IMPORTED_MODULE_2__.readTextURL)(this.referenceURL('rendering.ds')));
            this.dsFormat = _wmk_io_DataSheetStream__WEBPACK_IMPORTED_MODULE_3__.DataSheetStream.readXML(yield (0,_wmk_util_util__WEBPACK_IMPORTED_MODULE_2__.readTextURL)(this.referenceURL('formatelements.ds')));
        });
    }
    parseSketchEl() {
        return __awaiter(this, void 0, void 0, function* () {
            this.assert(!!this.strSketchEl, 'molecule not loaded');
            let mol = _wmk_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_4__.MoleculeStream.readNative(this.strSketchEl);
            this.assert(mol != null, 'parsing failed');
            this.assert(mol.numAtoms == 10 && mol.numBonds == 10, 'wrong atom/bond count');
        });
    }
    parseMolfile() {
        return __awaiter(this, void 0, void 0, function* () {
            this.assert(!!this.strMolfile, 'molecule not loaded');
            let mol = _wmk_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_4__.MoleculeStream.readMDLMOL(this.strMolfile);
            this.assert(mol != null, 'parsing failed');
            this.assert(mol.numAtoms == 10 && mol.numBonds == 10, 'wrong atom/bond count');
        });
    }
    parseDataXML() {
        return __awaiter(this, void 0, void 0, function* () {
            this.assert(!!this.strDataXML, 'datasheet not loaded');
            let ds = _wmk_io_DataSheetStream__WEBPACK_IMPORTED_MODULE_3__.DataSheetStream.readXML(this.strDataXML);
            this.assert(ds != null, 'parsing failed');
            this.assert(ds.numRows == 2 && ds.numCols == 5, 'wrong row/column count');
            let colTypes = ["molecule", "string", "integer", "real", "boolean"];
            for (let n = 0; n < colTypes.length; n++)
                this.assert(ds.colType(n) == colTypes[n], 'column#' + (n + 1) + ' wrong type');
            this.assert(ds.getMolecule(0, 0).numAtoms == 1, 'row 1: invalid molecule');
            this.assert(ds.getString(0, 1) == 'string', 'row 1: invalid string');
            this.assert(ds.getInteger(0, 2) == 1, 'row 1: invalid integer');
            this.assert(ds.getReal(0, 3) == 1.5, 'row 1: invalid real');
            this.assert(ds.getBoolean(0, 4) == true, 'row 1: invalid boolean');
            this.assert(ds.getMolecule(1, 0).numAtoms == 1, 'row 2: invalid molecule');
            for (let n = 1; n < ds.numCols; n++)
                this.assert(ds.isNull(1, n), 'row 2, column#' + (n + 1) + ' supposed to be null');
        });
    }
    parseSDfile() {
        return __awaiter(this, void 0, void 0, function* () {
            this.assert(!!this.strSDfile, 'datasheet not loaded');
            let rdr = new _wmk_io_MDLReader__WEBPACK_IMPORTED_MODULE_5__.MDLSDFReader(this.strSDfile);
            rdr.parse();
            let ds = rdr.ds;
            this.assert(ds != null, 'parsing failed');
            this.assert(ds.numRows == 2 && ds.numCols == 5, 'wrong row/column count');
            let colTypes = ["molecule", "string", "integer", "real", "boolean"];
            for (let n = 0; n < colTypes.length; n++)
                this.assert(ds.colType(n) == colTypes[n], 'column#' + (n + 1) + ' wrong type');
            this.assert(ds.getMolecule(0, 0).numAtoms == 1, 'row 1: invalid molecule');
            this.assert(ds.getString(0, 1) == 'string', 'row 1: invalid string');
            this.assert(ds.getInteger(0, 2) == 1, 'row 1: invalid integer');
            this.assert(ds.getReal(0, 3) == 1.5, 'row 1: invalid real');
            this.assert(ds.getBoolean(0, 4) == true, 'row 1: invalid boolean');
            this.assert(ds.getMolecule(1, 0).numAtoms == 1, 'row 2: invalid molecule');
            for (let n = 1; n < ds.numCols; n++)
                this.assert(ds.isNull(1, n), 'row 2, column#' + (n + 1) + ' supposed to be null');
        });
    }
    calcStrictArom() {
        return __awaiter(this, void 0, void 0, function* () {
            this.assert(this.molStereo != null, 'molecule not loaded');
            let meta = _wmk_mol_MetaMolecule__WEBPACK_IMPORTED_MODULE_6__.MetaMolecule.createStrict(this.molStereo);
            this.assert(meta.atomArom != null, 'no aromaticity obtained');
            for (let n = 1; n <= 10; n++)
                this.assert(meta.isAtomAromatic(n), 'atom #' + n + ' supposed to be aromatic');
            for (let n = 1; n <= 10; n++)
                this.assert(meta.isBondAromatic(n), 'bond #' + n + ' supposed to be aromatic');
        });
    }
    calcStereoChem() {
        return __awaiter(this, void 0, void 0, function* () {
            this.assert(this.molStereo != null, 'molecule not loaded');
            let meta = _wmk_mol_MetaMolecule__WEBPACK_IMPORTED_MODULE_6__.MetaMolecule.createStrictRubric(this.molStereo);
            this.assert(meta.rubricTetra != null, 'no tetrahedral rubric obtained');
            this.assert(meta.rubricSides != null, 'no cis/trans rubric obtained');
            let stereo = _wmk_mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_7__.Stereochemistry.create(meta);
            let tet11 = stereo.atomTetraChirality(11);
            this.assert(tet11 == _wmk_mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_7__.Stereochemistry.STEREO_NEG, 'atom 11: incorrect stereochemistry, got ' + tet11);
            let tet19 = stereo.atomTetraChirality(19);
            this.assert(tet19 == _wmk_mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_7__.Stereochemistry.STEREO_POS, 'atom 19: incorrect stereochemistry, got ' + tet19);
            let tet20 = stereo.atomTetraChirality(20);
            this.assert(tet20 == _wmk_mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_7__.Stereochemistry.STEREO_POS, 'atom 20: incorrect stereochemistry, got ' + tet20);
            let side26 = stereo.bondSideStereo(26);
            this.assert(side26 == _wmk_mol_Stereochemistry__WEBPACK_IMPORTED_MODULE_7__.Stereochemistry.STEREO_NEG, 'bond 26: incorrect stereochemistry, got ' + side26);
        });
    }
    calcFingerprints() {
        return __awaiter(this, void 0, void 0, function* () {
            this.assert(this.dsCircular != null, 'datasheet not loaded');
            const ds = this.dsCircular;
            for (let n = 0; n < ds.numRows; n++) {
                this.context = { row: n + 1, count: ds.numRows, notes: [] };
                let mol = ds.getMolecule(n, 'Molecule');
                let ecfp0 = [], ecfp2 = [], ecfp4 = [], ecfp6 = [];
                for (let fp of ds.getString(n, 'ECFP0').split(','))
                    if (fp.length > 0)
                        ecfp0.push(parseInt(fp));
                for (let fp of ds.getString(n, 'ECFP2').split(','))
                    if (fp.length > 0)
                        ecfp2.push(parseInt(fp));
                for (let fp of ds.getString(n, 'ECFP4').split(','))
                    if (fp.length > 0)
                        ecfp4.push(parseInt(fp));
                for (let fp of ds.getString(n, 'ECFP6').split(','))
                    if (fp.length > 0)
                        ecfp6.push(parseInt(fp));
                _wmk_util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.sort(ecfp0);
                _wmk_util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.sort(ecfp2);
                _wmk_util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.sort(ecfp4);
                _wmk_util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.sort(ecfp6);
                let circ = _wmk_calc_CircularFingerprints__WEBPACK_IMPORTED_MODULE_9__.CircularFingerprints.create(mol, _wmk_calc_CircularFingerprints__WEBPACK_IMPORTED_MODULE_9__.CircularFingerprints.CLASS_ECFP6);
                let got = [[], [], [], []];
                for (let fp of circ.getFingerprints())
                    if (got[fp.iteration].indexOf(fp.hashCode) < 0)
                        got[fp.iteration].push(fp.hashCode);
                for (let ecfp of got)
                    _wmk_util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.sort(ecfp);
                this.assert(_wmk_util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.equals(ecfp0, got[0]), 'row#' + (n + 1) + ', iter#0: wanted ' + ecfp0 + ', got ' + got[0]);
                this.assert(_wmk_util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.equals(ecfp2, got[1]), 'row#' + (n + 1) + ', iter#1: wanted ' + ecfp2 + ', got ' + got[1]);
                this.assert(_wmk_util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.equals(ecfp4, got[2]), 'row#' + (n + 1) + ', iter#2: wanted ' + ecfp4 + ', got ' + got[2]);
                this.assert(_wmk_util_Vec__WEBPACK_IMPORTED_MODULE_8__.Vec.equals(ecfp6, got[3]), 'row#' + (n + 1) + ', iter#3: wanted ' + ecfp6 + ', got ' + got[3]);
            }
        });
    }
    molfileRoundTrip() {
        return __awaiter(this, void 0, void 0, function* () {
            const findProblems = (mol, alt) => {
                let problems = [];
                for (let n = 1; n <= mol.numAtoms; n++) {
                    if (mol.atomElement(n) != alt.atomElement(n))
                        problems.push('/atom #' + n + ': elements different');
                    if (mol.atomCharge(n) != alt.atomCharge(n))
                        problems.push('/atom #' + n + ': charges different');
                    if (mol.atomUnpaired(n) != alt.atomUnpaired(n))
                        problems.push('/atom #' + n + ': unpaired different');
                    if (mol.atomIsotope(n) != alt.atomIsotope(n))
                        problems.push('/atom #' + n + ': isotope different');
                    if (mol.atomMapNum(n) != alt.atomMapNum(n))
                        problems.push('/atom #' + n + ': mapnum different');
                    if (mol.atomHydrogens(n) != alt.atomHydrogens(n))
                        problems.push('/atom #' + n + ': hydrogens different');
                    if (mol.atomHExplicit(n) != alt.atomHExplicit(n))
                        problems.push('/atom #' + n + ': explicitH different');
                }
                for (let n = 1; n <= mol.numBonds; n++) {
                    if (mol.bondOrder(n) != alt.bondOrder(n))
                        problems.push('/bond #' + n + ': bond orders different');
                    if (mol.bondType(n) != alt.bondType(n))
                        problems.push('/bond #' + n + ': bond types different');
                }
                return problems;
            };
            const ds = this.dsRoundtrip;
            for (let n = 0; n < ds.numRows; n++) {
                this.context = { row: n + 1, count: ds.numRows, notes: [] };
                let mol = ds.getMolecule(n, 'Molecule');
                let mdl = new _wmk_io_MDLWriter__WEBPACK_IMPORTED_MODULE_10__.MDLMOLWriter(mol).write();
                let alt = new _wmk_io_MDLReader__WEBPACK_IMPORTED_MODULE_5__.MDLMOLReader(mdl).parse();
                this.assert(mol.numAtoms == alt.numAtoms && mol.numBonds == alt.numBonds, 'atom/bond count differs');
                let problems = findProblems(mol, alt);
                if (problems.length > 0) {
                    this.context.notes.push('Round trip problems:');
                    for (let p of problems)
                        this.context.notes.push(p);
                    this.context.notes.push('Original molecule:\n' + mol);
                    this.context.notes.push('MDL Molfile CTAB:\n' + mdl);
                    this.context.notes.push('Parsed back molecule:\n' + alt);
                }
                this.assert(problems.length == 0, problems.join('; '));
                let wantMDL = ds.getString(n, 'Molfile');
                if (mdl.trim() != (0,_wmk_util_util__WEBPACK_IMPORTED_MODULE_2__.orBlank)(wantMDL).trim()) {
                    if (!wantMDL)
                        this.context.notes.push('Molfile missing from validation data.');
                    else
                        this.context.notes.push(...['Desired Molfile:', `<pre>${wantMDL}</pre>`]);
                    this.context.notes.push(...['Got Molfile:', `<pre>${mdl}</pre>`]);
                    let linesWant = wantMDL.split('\n'), linesGot = mdl.split('\n');
                    for (let i = 0; i < Math.max(linesWant.length, linesGot.length); i++)
                        if (linesWant[i] != linesGot[i]) {
                            this.context.notes.push(`Line #${i + 1}: want [${linesWant[i]}], got [${linesGot[i]}]`);
                            break;
                        }
                    this.assert(false, 'initial Molfile invalid');
                }
                let wantV3000 = ds.getString(n, 'V3000');
                if (wantV3000) {
                    let gotV3000 = new _wmk_io_MDLWriter__WEBPACK_IMPORTED_MODULE_10__.MDLMOLWriter(mol).writeV3000();
                    if (wantV3000.trim() != gotV3000.trim()) {
                        this.context.notes.push(...['Desired V3000:', `<pre>${wantV3000}</pre>`]);
                        this.context.notes.push(...['Got V3000:', `<pre>${gotV3000}</pre>`]);
                        this.assert(false, 'initial V3000 invalid');
                    }
                }
            }
        });
    }
    renderingStructures() {
        return __awaiter(this, void 0, void 0, function* () {
            const ds = this.dsRendering;
            let policy = _wmk_gfx_Rendering__WEBPACK_IMPORTED_MODULE_11__.RenderPolicy.defaultColourOnWhite();
            policy.data.pointScale = 15;
            let effects = new _wmk_gfx_Rendering__WEBPACK_IMPORTED_MODULE_11__.RenderEffects();
            let measure = new _wmk_gfx_ArrangeMeasurement__WEBPACK_IMPORTED_MODULE_12__.OutlineMeasurement(0, 0, policy.data.pointScale);
            for (let n = 0; n < ds.numRows; n++) {
                this.context = { row: n + 1, count: ds.numRows, notes: [] };
                let mol = ds.getMolecule(n, 'Molecule');
                let wantMnemonic = ds.getString(n, 'Mnemonic').trim();
                let layout = new _wmk_gfx_ArrangeMolecule__WEBPACK_IMPORTED_MODULE_13__.ArrangeMolecule(mol, measure, policy, effects);
                layout.arrange();
                let metavec = new _wmk_gfx_MetaVector__WEBPACK_IMPORTED_MODULE_15__.MetaVector();
                let draw = new _wmk_gfx_DrawMolecule__WEBPACK_IMPORTED_MODULE_14__.DrawMolecule(layout, metavec);
                draw.mnemonics = new _wmk_gfx_Rendering__WEBPACK_IMPORTED_MODULE_11__.RenderMnemonics();
                draw.draw();
                metavec.normalise();
                let gotMnemonic = draw.mnemonics.packWithCoords();
                this.context.notes.push(metavec.createSVG());
                this.context.notes.push('Got Mnemonic:');
                this.context.notes.push(`<div><tt>${(0,_wmk_util_util__WEBPACK_IMPORTED_MODULE_2__.escapeHTML)(gotMnemonic)}</tt></div>`);
                this.context.notes.push('Want Mnemonic:');
                this.context.notes.push(`<div><tt>${(0,_wmk_util_util__WEBPACK_IMPORTED_MODULE_2__.escapeHTML)(wantMnemonic || 'not provided')}</tt></div>`);
                this.assertEqual(gotMnemonic, wantMnemonic, 'mnemonics did not match');
            }
        });
    }
    moleculeFormat() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const ds = this.dsFormat;
            let colMol = ds.findColByName('Molecule'), colSerial = ds.findColByName('Serial');
            let prevFormat = _wmk_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_4__.MoleculeStream.formatV2Elements;
            _wmk_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_4__.MoleculeStream.formatV2Elements = true;
            for (let n = 0; n < ds.numRows; n++) {
                this.context = { row: n + 1, count: ds.numRows, notes: [] };
                var mol = ds.getMolecule(n, colMol);
                let wantSerial = ((_a = ds.getString(n, colSerial)) !== null && _a !== void 0 ? _a : '').trim();
                let gotSerial = _wmk_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_4__.MoleculeStream.writeNative(mol).trim();
                this.context.notes =
                    [
                        'Got serialised:',
                        `<pre>${gotSerial}</pre>`,
                        'Want serialised:',
                        `<pre>${wantSerial}</pre>`,
                    ];
                this.assertEqual(gotSerial, wantSerial);
                let molBack = _wmk_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_4__.MoleculeStream.readNative(gotSerial);
                this.context.notes =
                    [
                        'Reading serialised molfile. Got:',
                        `<pre>${molBack.toString()}</pre>`,
                        'Want:',
                        `<pre>${mol.toString()}</pre>`,
                    ];
                this.assertEqual(mol.compareTo(molBack), 0, 'molecules are different');
            }
            _wmk_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_4__.MoleculeStream.formatV2Elements = prevFormat;
        });
    }
    parseExoticMolfiles() {
        return __awaiter(this, void 0, void 0, function* () {
            const convertAndCompare = (base) => __awaiter(this, void 0, void 0, function* () {
                this.context = { subcategory: `Base=${base}` };
                let inRaw = yield (0,_wmk_util_util__WEBPACK_IMPORTED_MODULE_2__.readTextURL)(this.referenceURL(`molfile/${base}.mol`));
                let mol = _wmk_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_4__.MoleculeStream.readMDLMOL(inRaw);
                this.assert(mol != null, `${base}: parsing failed`);
                let elstr = mol.toString();
                let outRaw = null;
                try {
                    outRaw = yield (0,_wmk_util_util__WEBPACK_IMPORTED_MODULE_2__.readTextURL)(this.referenceURL(`molfile/${base}.el`));
                }
                catch (ex) { }
                this.context.notes =
                    [
                        'Produced serialised molecule:',
                        `<pre>${elstr}</pre>`,
                        'Want:',
                        `<pre>${outRaw}</pre>`,
                    ];
                this.assertEqual(elstr.trim(), (outRaw !== null && outRaw !== void 0 ? outRaw : '').trim(), 'output mismatch');
            });
            let prevFormat = _wmk_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_4__.MoleculeStream.formatV2Elements;
            _wmk_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_4__.MoleculeStream.formatV2Elements = true;
            const FILE_COMPARISONS = ['nucleotide2000', 'nucleotide3000'];
            for (let base of FILE_COMPARISONS)
                yield convertAndCompare(base);
            _wmk_io_MoleculeStream__WEBPACK_IMPORTED_MODULE_4__.MoleculeStream.formatV2Elements = prevFormat;
        });
    }
    referenceURL(fn) { return this.urlBase + fn + BUMP; }
}


/***/ }),

/***/ "./val/src/ValidationHeadlessReaction.ts":
/*!***********************************************!*\
  !*** ./val/src/ValidationHeadlessReaction.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ValidationHeadlessReaction: () => (/* binding */ ValidationHeadlessReaction)
/* harmony export */ });
/* harmony import */ var _wmk_util_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wmk/util/util */ "./src/util/util.ts");
/* harmony import */ var _Validation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Validation */ "./val/src/Validation.ts");
/* harmony import */ var _wmk_io_DataSheetStream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wmk/io/DataSheetStream */ "./src/io/DataSheetStream.ts");
/* harmony import */ var _wmk_aspect_Experiment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @wmk/aspect/Experiment */ "./src/aspect/Experiment.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class ValidationHeadlessReaction extends _Validation__WEBPACK_IMPORTED_MODULE_1__.Validation {
    constructor(urlBase) {
        super();
        this.urlBase = urlBase;
        this.add('Experiment aspect', this.confirmAspect);
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.strExperiment = yield (0,_wmk_util_util__WEBPACK_IMPORTED_MODULE_0__.readTextURL)(this.urlBase + 'experiment.ds');
        });
    }
    confirmAspect() {
        return __awaiter(this, void 0, void 0, function* () {
            this.assert(!!this.strExperiment, 'datasheet not loaded');
            let ds = _wmk_io_DataSheetStream__WEBPACK_IMPORTED_MODULE_2__.DataSheetStream.readXML(this.strExperiment);
            this.assert(ds != null, 'parsing failed');
            this.assert(_wmk_aspect_Experiment__WEBPACK_IMPORTED_MODULE_3__.Experiment.isExperiment(ds), 'aspect claimed not an Experiment');
            let xs = new _wmk_aspect_Experiment__WEBPACK_IMPORTED_MODULE_3__.Experiment(ds);
            let entry = xs.getEntry(0);
            this.assert(entry != null, 'null entry returned');
            this.assert(entry.steps.length == 2, 'reaction supposed to be 2 steps, got ' + entry.steps.length);
            this.assert(entry.steps[0].reactants.length == 1, 'require step 1: #reactants = 1');
            this.assert(entry.steps[0].reagents.length == 3, 'require step 1: #reagents = 3');
            this.assert(entry.steps[0].products.length == 2, 'require step 1: #products = 2');
            this.assert(entry.steps[1].reactants.length == 0, 'require step 2: #reactants = 0');
            this.assert(entry.steps[1].reagents.length == 1, 'require step 2: #reagents = 1');
            this.assert(entry.steps[1].products.length == 2, 'require step 2: #products = 2');
        });
    }
}


/***/ }),

/***/ "./val/src/WebValExec.ts":
/*!*******************************!*\
  !*** ./val/src/WebValExec.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WebValExec: () => (/* binding */ WebValExec)
/* harmony export */ });
/* harmony import */ var _src_util_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/util/dom */ "./src/util/dom.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class WebValExec {
    constructor(validation) {
        this.validation = validation;
    }
    runTests(domParent) {
        return __awaiter(this, void 0, void 0, function* () {
            const { validation } = this;
            domParent.empty();
            if (validation.setupError) {
                let div = (0,_src_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').appendTo(domParent).css({ 'color': 'red' });
                div.setText('Setup failed: ' + validation.setupError);
                return;
            }
            let table = (0,_src_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<table/>').appendTo(domParent);
            let tdStatus = [], tdInfo = [];
            for (let n = 0; n < validation.count; n++) {
                let tr = (0,_src_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<tr/>').appendTo(table);
                let td = (0,_src_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<td valign="top"/>').appendTo(tr);
                tdStatus.push(td);
                td = (0,_src_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<td valign="top"></td>').appendTo(tr);
                td.setText(validation.getTitle(n));
                tdInfo.push(td);
            }
            for (let n = 0; n < validation.count; n++) {
                tdStatus[n].setHTML('&#9744;');
                let [success, message, time] = yield validation.runTest(n);
                if (success) {
                    tdStatus[n].setHTML('&#9745;');
                    if (time >= 0.001) {
                        let span = (0,_src_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<span style="color: #909090;"/>').appendTo(tdInfo[n]);
                        span.setText(' (' + time.toFixed(3) + ' sec)');
                    }
                }
                else {
                    tdStatus[n].setHTML('<span style="color: red;">&#9746;</span>');
                    let para = (0,_src_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<p style="color: purple; margin-top: 0;"/>').appendTo(tdInfo[n]);
                    para.setText(message ? message : 'failed');
                    tdStatus[n].setCSS('background-color', '#FFF0F0');
                    tdInfo[n].setCSS('background-color', '#FFF0F0');
                    let divOuter = (0,_src_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').appendTo(tdInfo[n]).css({ 'padding-left': '0.5em' });
                    this.makeContextReport(divOuter, validation.context);
                }
            }
        });
    }
    makeContextReport(domNotes, context) {
        const { subcategory, row, count, notes } = context !== null && context !== void 0 ? context : {};
        if (subcategory)
            (0,_src_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').appendTo(domNotes).setText(`Subcategory: ${subcategory}`);
        if (row != null) {
            let str = `Row: ${row}`;
            if (count != null)
                str += ` / Count: ${count}`;
            (0,_src_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').appendTo(domNotes).setText(str);
        }
        for (let note of notes !== null && notes !== void 0 ? notes : []) {
            let divItem = (0,_src_util_dom__WEBPACK_IMPORTED_MODULE_0__.dom)('<div/>').appendTo(domNotes);
            if (note.startsWith('<svg') || note.startsWith('<div') || note.startsWith('<pre'))
                divItem.appendHTML(note);
            else
                divItem.setText(note);
        }
    }
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
(() => {
/*!***************************!*\
  !*** ./dist/index-val.ts ***!
  \***************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ASCENT_FUDGE: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ASCENT_FUDGE),
/* harmony export */   AbbrevContainer: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.AbbrevContainer),
/* harmony export */   ActivityType: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ActivityType),
/* harmony export */   ArrangeComponent: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ArrangeComponent),
/* harmony export */   ArrangeComponentAnnot: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ArrangeComponentAnnot),
/* harmony export */   ArrangeComponentType: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ArrangeComponentType),
/* harmony export */   ArrangeExperiment: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ArrangeExperiment),
/* harmony export */   ArrangeMolecule: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ArrangeMolecule),
/* harmony export */   Aspect: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Aspect),
/* harmony export */   AspectList: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.AspectList),
/* harmony export */   AssayProvenance: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.AssayProvenance),
/* harmony export */   AssayProvenanceHeader: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.AssayProvenanceHeader),
/* harmony export */   Atom: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Atom),
/* harmony export */   AxisLabeller: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.AxisLabeller),
/* harmony export */   BLineType: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.BLineType),
/* harmony export */   BONDARTIFACT_EXTRA_ARENE: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.BONDARTIFACT_EXTRA_ARENE),
/* harmony export */   BONDARTIFACT_EXTRA_RESPATH: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.BONDARTIFACT_EXTRA_RESPATH),
/* harmony export */   BONDARTIFACT_EXTRA_RESRING: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.BONDARTIFACT_EXTRA_RESRING),
/* harmony export */   BayesianModel: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.BayesianModel),
/* harmony export */   BayesianPrediction: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.BayesianPrediction),
/* harmony export */   BayesianPredictionModel: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.BayesianPredictionModel),
/* harmony export */   BayesianPredictionOutcome: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.BayesianPredictionOutcome),
/* harmony export */   BayesianSource: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.BayesianSource),
/* harmony export */   BayesianSourceModel: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.BayesianSourceModel),
/* harmony export */   BinaryData: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.BinaryData),
/* harmony export */   BinaryDataField: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.BinaryDataField),
/* harmony export */   Bond: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Bond),
/* harmony export */   BondArtifact: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.BondArtifact),
/* harmony export */   Box: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Box),
/* harmony export */   BuildSMILES: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.BuildSMILES),
/* harmony export */   ButtonBank: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ButtonBank),
/* harmony export */   ButtonView: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ButtonView),
/* harmony export */   ButtonViewPosition: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ButtonViewPosition),
/* harmony export */   Chemistry: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Chemistry),
/* harmony export */   CircularFingerprints: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.CircularFingerprints),
/* harmony export */   ClipboardProxy: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ClipboardProxy),
/* harmony export */   ClipboardProxyHandler: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ClipboardProxyHandler),
/* harmony export */   ClipboardProxyWeb: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ClipboardProxyWeb),
/* harmony export */   CommandBank: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.CommandBank),
/* harmony export */   ContextSketch: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ContextSketch),
/* harmony export */   CoordUtil: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.CoordUtil),
/* harmony export */   DEGRAD: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.DEGRAD),
/* harmony export */   DOM: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.DOM),
/* harmony export */   DataSheet: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.DataSheet),
/* harmony export */   DataSheetColumn: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.DataSheetColumn),
/* harmony export */   DataSheetStream: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.DataSheetStream),
/* harmony export */   Dialog: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Dialog),
/* harmony export */   DotPath: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.DotPath),
/* harmony export */   DotPathBond: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.DotPathBond),
/* harmony export */   DotPathCharge: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.DotPathCharge),
/* harmony export */   DraggingTool: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.DraggingTool),
/* harmony export */   DrawCanvas: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.DrawCanvas),
/* harmony export */   DrawCanvasDecoration: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.DrawCanvasDecoration),
/* harmony export */   DrawExperiment: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.DrawExperiment),
/* harmony export */   DrawMolecule: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.DrawMolecule),
/* harmony export */   EditAtom: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.EditAtom),
/* harmony export */   EditBond: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.EditBond),
/* harmony export */   EditCompound: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.EditCompound),
/* harmony export */   EditPolymer: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.EditPolymer),
/* harmony export */   EmbedChemistry: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.EmbedChemistry),
/* harmony export */   EmbedCollection: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.EmbedCollection),
/* harmony export */   EmbedMolecule: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.EmbedMolecule),
/* harmony export */   EmbedReaction: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.EmbedReaction),
/* harmony export */   EmbedReactionFacet: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.EmbedReactionFacet),
/* harmony export */   Experiment: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Experiment),
/* harmony export */   ExperimentComponent: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponent),
/* harmony export */   ExperimentComponentType: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ExperimentComponentType),
/* harmony export */   ExperimentEntry: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ExperimentEntry),
/* harmony export */   ExperimentMeta: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ExperimentMeta),
/* harmony export */   ExperimentMetaApplic: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ExperimentMetaApplic),
/* harmony export */   ExperimentMetaRoleType: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ExperimentMetaRoleType),
/* harmony export */   ExperimentMetaType: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ExperimentMetaType),
/* harmony export */   ExperimentMetaValue: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ExperimentMetaValue),
/* harmony export */   ExperimentStep: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ExperimentStep),
/* harmony export */   ExtraFieldsWidget: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ExtraFieldsWidget),
/* harmony export */   FontData: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.FontData),
/* harmony export */   ForeignMolecule: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ForeignMolecule),
/* harmony export */   ForeignMoleculeTransient: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ForeignMoleculeTransient),
/* harmony export */   FormatList: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.FormatList),
/* harmony export */   FusionBank: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.FusionBank),
/* harmony export */   FusionPermutation: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.FusionPermutation),
/* harmony export */   GeomUtil: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.GeomUtil),
/* harmony export */   GeomWidget: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.GeomWidget),
/* harmony export */   GeomWidgetSelType: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.GeomWidgetSelType),
/* harmony export */   GeomWidgetType: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.GeomWidgetType),
/* harmony export */   Geometry: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Geometry),
/* harmony export */   Graph: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Graph),
/* harmony export */   GreenMetrics: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.GreenMetrics),
/* harmony export */   INV_TWOPI: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.INV_TWOPI),
/* harmony export */   KeyCode: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.KeyCode),
/* harmony export */   Line: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Line),
/* harmony export */   MDLMOLReader: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.MDLMOLReader),
/* harmony export */   MDLMOLWriter: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.MDLMOLWriter),
/* harmony export */   MDLMOL_VALENCE: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.MDLMOL_VALENCE),
/* harmony export */   MDLSDFReader: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.MDLSDFReader),
/* harmony export */   MDLSDFWriter: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.MDLSDFWriter),
/* harmony export */   Matrix: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Matrix),
/* harmony export */   MeasurementData: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.MeasurementData),
/* harmony export */   MenuProxy: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.MenuProxy),
/* harmony export */   MenuProxyWeb: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.MenuProxyWeb),
/* harmony export */   MetaMolecule: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.MetaMolecule),
/* harmony export */   MetaVector: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.MetaVector),
/* harmony export */   MetalLigate: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.MetalLigate),
/* harmony export */   Mixture: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Mixture),
/* harmony export */   MixtureAttributeType: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.MixtureAttributeType),
/* harmony export */   MolUtil: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.MolUtil),
/* harmony export */   Molecule: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Molecule),
/* harmony export */   MoleculeActivity: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.MoleculeActivity),
/* harmony export */   MoleculeStream: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.MoleculeStream),
/* harmony export */   OntologyTree: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.OntologyTree),
/* harmony export */   OptionList: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.OptionList),
/* harmony export */   OutlineMeasurement: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.OutlineMeasurement),
/* harmony export */   Oval: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Oval),
/* harmony export */   POLYMERBLOCK_EXTRA_POLYMER: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.POLYMERBLOCK_EXTRA_POLYMER),
/* harmony export */   POLYMERBLOCK_SPECIAL_UNCAPPED: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.POLYMERBLOCK_SPECIAL_UNCAPPED),
/* harmony export */   PeriodicTableWidget: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.PeriodicTableWidget),
/* harmony export */   Permutation: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Permutation),
/* harmony export */   PolymerBlock: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.PolymerBlock),
/* harmony export */   PolymerBlockConnectivity: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.PolymerBlockConnectivity),
/* harmony export */   PolymerBlockUnit: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.PolymerBlockUnit),
/* harmony export */   Popup: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Popup),
/* harmony export */   Pos: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Pos),
/* harmony export */   QuantityCalc: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.QuantityCalc),
/* harmony export */   QuantityCalcComp: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.QuantityCalcComp),
/* harmony export */   QuantityCalcRole: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.QuantityCalcRole),
/* harmony export */   QuantityCalcStat: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.QuantityCalcStat),
/* harmony export */   QueryFieldsWidget: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.QueryFieldsWidget),
/* harmony export */   QueryTypeAtom: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.QueryTypeAtom),
/* harmony export */   QueryTypeBond: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.QueryTypeBond),
/* harmony export */   QueryUtil: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.QueryUtil),
/* harmony export */   QuickHull: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.QuickHull),
/* harmony export */   RADDEG: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.RADDEG),
/* harmony export */   Random: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Random),
/* harmony export */   RenderEffects: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.RenderEffects),
/* harmony export */   RenderMnemonicType: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.RenderMnemonicType),
/* harmony export */   RenderMnemonics: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.RenderMnemonics),
/* harmony export */   RenderPolicy: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.RenderPolicy),
/* harmony export */   ResonanceRemover: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ResonanceRemover),
/* harmony export */   RollingBall: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.RollingBall),
/* harmony export */   SARTable: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.SARTable),
/* harmony export */   SingularValueDecomposition: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.SingularValueDecomposition),
/* harmony export */   Size: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Size),
/* harmony export */   SketchUtil: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.SketchUtil),
/* harmony export */   Sketcher: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Sketcher),
/* harmony export */   Stereochemistry: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Stereochemistry),
/* harmony export */   TWOPI: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.TWOPI),
/* harmony export */   TabBar: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.TabBar),
/* harmony export */   TemplateBank: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.TemplateBank),
/* harmony export */   TemplateFusion: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.TemplateFusion),
/* harmony export */   TextAlign: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.TextAlign),
/* harmony export */   Theme: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Theme),
/* harmony export */   ToolBank: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ToolBank),
/* harmony export */   ToolBankItem: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.ToolBankItem),
/* harmony export */   Tooltip: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Tooltip),
/* harmony export */   Triangulation2D: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Triangulation2D),
/* harmony export */   Validation: () => (/* reexport safe */ _val_src_Validation__WEBPACK_IMPORTED_MODULE_1__.Validation),
/* harmony export */   ValidationHeadlessBasic: () => (/* reexport safe */ _val_src_ValidationHeadlessBasic__WEBPACK_IMPORTED_MODULE_2__.ValidationHeadlessBasic),
/* harmony export */   ValidationHeadlessMolecule: () => (/* reexport safe */ _val_src_ValidationHeadlessMolecule__WEBPACK_IMPORTED_MODULE_3__.ValidationHeadlessMolecule),
/* harmony export */   ValidationHeadlessReaction: () => (/* reexport safe */ _val_src_ValidationHeadlessReaction__WEBPACK_IMPORTED_MODULE_4__.ValidationHeadlessReaction),
/* harmony export */   Vec: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Vec),
/* harmony export */   WebValExec: () => (/* reexport safe */ _val_src_WebValExec__WEBPACK_IMPORTED_MODULE_5__.WebValExec),
/* harmony export */   Widget: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.Widget),
/* harmony export */   XML: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.XML),
/* harmony export */   addText: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.addText),
/* harmony export */   addTooltip: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.addTooltip),
/* harmony export */   addTooltipPromise: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.addTooltipPromise),
/* harmony export */   angleDiff: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.angleDiff),
/* harmony export */   angleDiffPos: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.angleDiffPos),
/* harmony export */   angleNorm: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.angleNorm),
/* harmony export */   blendRGB: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.blendRGB),
/* harmony export */   clearTooltip: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.clearTooltip),
/* harmony export */   clone: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.clone),
/* harmony export */   colourAlpha: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.colourAlpha),
/* harmony export */   colourCanvas: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.colourCanvas),
/* harmony export */   colourCode: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.colourCode),
/* harmony export */   coordsRoundedRect: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.coordsRoundedRect),
/* harmony export */   deepClone: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.deepClone),
/* harmony export */   dictValues: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.dictValues),
/* harmony export */   dom: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.dom),
/* harmony export */   domLegacy: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.domLegacy),
/* harmony export */   drawLine: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.drawLine),
/* harmony export */   empiricalScrollerSize: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.empiricalScrollerSize),
/* harmony export */   escapeHTML: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.escapeHTML),
/* harmony export */   eventCoords: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.eventCoords),
/* harmony export */   findNode: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.findNode),
/* harmony export */   findNodes: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.findNodes),
/* harmony export */   fltEqual: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.fltEqual),
/* harmony export */   fontSansSerif: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.fontSansSerif),
/* harmony export */   formatDate: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.formatDate),
/* harmony export */   formatDouble: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.formatDouble),
/* harmony export */   fromUTF8: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.fromUTF8),
/* harmony export */   getBoundaryPixelsDOM: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.getBoundaryPixelsDOM),
/* harmony export */   getOffsetPixelsDOM: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.getOffsetPixelsDOM),
/* harmony export */   getViewportSize: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.getViewportSize),
/* harmony export */   hasInlineCSS: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.hasInlineCSS),
/* harmony export */   htmlToRGB: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.htmlToRGB),
/* harmony export */   initWebMolKit: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.initWebMolKit),
/* harmony export */   installInlineCSS: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.installInlineCSS),
/* harmony export */   invZ: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.invZ),
/* harmony export */   isDef: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.isDef),
/* harmony export */   jsonPrettyPrint: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.jsonPrettyPrint),
/* harmony export */   maxArray: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.maxArray),
/* harmony export */   minArray: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.minArray),
/* harmony export */   newElement: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.newElement),
/* harmony export */   nodeText: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.nodeText),
/* harmony export */   norm2_xy: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.norm2_xy),
/* harmony export */   norm2_xyz: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.norm2_xyz),
/* harmony export */   norm_xy: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.norm_xy),
/* harmony export */   norm_xyz: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.norm_xyz),
/* harmony export */   notDef: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.notDef),
/* harmony export */   orBlank: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.orBlank),
/* harmony export */   pathRoundedRect: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.pathRoundedRect),
/* harmony export */   pause: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.pause),
/* harmony export */   pixelDensity: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.pixelDensity),
/* harmony export */   plural: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.plural),
/* harmony export */   postJSONURL: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.postJSONURL),
/* harmony export */   raiseToolTip: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.raiseToolTip),
/* harmony export */   randomInt: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.randomInt),
/* harmony export */   readTextURL: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.readTextURL),
/* harmony export */   realEqual: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.realEqual),
/* harmony export */   registerAspect: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.registerAspect),
/* harmony export */   safeFloat: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.safeFloat),
/* harmony export */   safeInt: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.safeInt),
/* harmony export */   setBoundaryPixels: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.setBoundaryPixels),
/* harmony export */   signum: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.signum),
/* harmony export */   sortAngles: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.sortAngles),
/* harmony export */   sqr: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.sqr),
/* harmony export */   stringSimilarityPermutations: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.stringSimilarityPermutations),
/* harmony export */   toUTF8: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.toUTF8),
/* harmony export */   uniqueAngles: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.uniqueAngles),
/* harmony export */   yieldDOM: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.yieldDOM),
/* harmony export */   zip: () => (/* reexport safe */ _index_src__WEBPACK_IMPORTED_MODULE_0__.zip)
/* harmony export */ });
/* harmony import */ var _index_src__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-src */ "./dist/index-src.ts");
/* harmony import */ var _val_src_Validation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../val/src/Validation */ "./val/src/Validation.ts");
/* harmony import */ var _val_src_ValidationHeadlessBasic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../val/src/ValidationHeadlessBasic */ "./val/src/ValidationHeadlessBasic.ts");
/* harmony import */ var _val_src_ValidationHeadlessMolecule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../val/src/ValidationHeadlessMolecule */ "./val/src/ValidationHeadlessMolecule.ts");
/* harmony import */ var _val_src_ValidationHeadlessReaction__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../val/src/ValidationHeadlessReaction */ "./val/src/ValidationHeadlessReaction.ts");
/* harmony import */ var _val_src_WebValExec__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../val/src/WebValExec */ "./val/src/WebValExec.ts");







})();

WebMolKit = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=webmolkit-validate.js.map